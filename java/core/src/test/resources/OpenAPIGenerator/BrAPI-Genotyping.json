{
    "openapi" : "3.0.1",
    "info" : {
        "title" : "BrAPI-Genotyping",
        "version" : "0.0.0"
    },
    "paths" : {
        "/calls" : {
            "get" : {
                "tags" : [
                    "Calls"
                ],
                "summary" : "Get a filtered list of Call",
                "description" : "Get a list of Call",
                "parameters" : [
                    {
                        "name" : "callSetDbId",
                        "in" : "query",
                        "description" : "A list of IDs which uniquely identify `CallSets` within the given database server",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "variantDbId",
                        "in" : "query",
                        "description" : "A list of IDs which uniquely identify `Variant` within the given database server",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "variantSetDbId",
                        "in" : "query",
                        "description" : "A list of IDs which uniquely identify `VariantSets` within the given database server",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "expandHomozygote",
                        "in" : "query",
                        "description" : "Should homozygotes be expanded (true) or collapsed into a single occurrence (false)",
                        "required" : false,
                        "schema" : {
                            "type" : "boolean"
                        }
                    },
                    {
                        "name" : "sepPhased",
                        "in" : "query",
                        "description" : "The string used as a separator for phased allele calls.",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "sepUnphased",
                        "in" : "query",
                        "description" : "The string used as a separator for unphased allele calls.",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "unknownString",
                        "in" : "query",
                        "description" : "The string used as a representation for missing data.",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "$ref" : "#/components/parameters/page"
                    },
                    {
                        "$ref" : "#/components/parameters/pageSize"
                    },
                    {
                        "$ref" : "#/components/parameters/authorizationHeader"
                    }
                ],
                "responses" : {
                    "200" : {
                        "$ref" : "#/components/responses/CallListResponse"
                    },
                    "400" : {
                        "$ref" : "#/components/responses/400BadRequest"
                    },
                    "401" : {
                        "$ref" : "#/components/responses/401Unauthorized"
                    },
                    "403" : {
                        "$ref" : "#/components/responses/403Forbidden"
                    }
                }
            }
        },
        "/callsets" : {
            "get" : {
                "tags" : [
                    "CallSets"
                ],
                "summary" : "Get a filtered list of CallSet",
                "description" : "Get a list of CallSet",
                "parameters" : [
                    {
                        "name" : "commonCropName",
                        "in" : "query",
                        "description" : "The BrAPI Common Crop Name is the simple, generalized, widely accepted name of the organism being researched. It is most often used in multi-crop systems where digital resources need to be divided at a high level. Things like 'Maize', 'Wheat', and 'Rice' are examples of common crop names.\n\nUse this parameter to only return results associated with the given crops. \n\nUse `GET /commoncropnames` to find the list of available crops on a server.",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "germplasmDbId",
                        "in" : "query",
                        "description" : "List of IDs which uniquely identify germplasm to search for",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "germplasmName",
                        "in" : "query",
                        "description" : "List of human readable names to identify germplasm to search for",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "programDbId",
                        "in" : "query",
                        "description" : "A BrAPI Program represents the high level organization or group who is responsible for conducting trials and studies. Things like Breeding Programs and Funded Projects are considered BrAPI Programs. \n\nUse this parameter to only return results associated with the given programs. \n\nUse `GET /programs` to find the list of available programs on a server.",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "programName",
                        "in" : "query",
                        "description" : "Use this parameter to only return results associated with the given program names. Program names are not required to be unique.\n\nUse `GET /programs` to find the list of available programs on a server.",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "studyDbId",
                        "in" : "query",
                        "description" : "List of study identifiers to search for",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "studyName",
                        "in" : "query",
                        "description" : "List of study names to filter search results",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "trialDbId",
                        "in" : "query",
                        "description" : "The ID which uniquely identifies a trial to search for",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "trialName",
                        "in" : "query",
                        "description" : "The human readable name of a trial to search for",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "sampleDbId",
                        "in" : "query",
                        "description" : "A list of IDs which uniquely identify `Samples` within the given database server",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "sampleName",
                        "in" : "query",
                        "description" : "A list of human readable names associated with `Samples`",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "callSetDbId",
                        "in" : "query",
                        "description" : "A list of IDs which uniquely identify `CallSets` within the given database server",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "callSetName",
                        "in" : "query",
                        "description" : "A list of human readable names associated with `CallSets`",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "variantSetDbId",
                        "in" : "query",
                        "description" : "A list of IDs which uniquely identify `VariantSets` within the given database server",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "$ref" : "#/components/parameters/externalReferenceID"
                    },
                    {
                        "$ref" : "#/components/parameters/externalReferenceId"
                    },
                    {
                        "$ref" : "#/components/parameters/externalReferenceSource"
                    },
                    {
                        "$ref" : "#/components/parameters/page"
                    },
                    {
                        "$ref" : "#/components/parameters/pageSize"
                    },
                    {
                        "$ref" : "#/components/parameters/authorizationHeader"
                    }
                ],
                "responses" : {
                    "200" : {
                        "$ref" : "#/components/responses/CallSetListResponse"
                    },
                    "400" : {
                        "$ref" : "#/components/responses/400BadRequest"
                    },
                    "401" : {
                        "$ref" : "#/components/responses/401Unauthorized"
                    },
                    "403" : {
                        "$ref" : "#/components/responses/403Forbidden"
                    }
                }
            }
        },
        "/maps" : {
            "get" : {
                "tags" : [
                    "GenomeMaps"
                ],
                "summary" : "Get a filtered list of GenomeMap",
                "description" : "Get a list of GenomeMap",
                "parameters" : [
                    {
                        "name" : "commonCropName",
                        "in" : "query",
                        "description" : "The BrAPI Common Crop Name is the simple, generalized, widely accepted name of the organism being researched. It is most often used in multi-crop systems where digital resources need to be divided at a high level. Things like 'Maize', 'Wheat', and 'Rice' are examples of common crop names.\n\nUse this parameter to only return results associated with the given crops. \n\nUse `GET /commoncropnames` to find the list of available crops on a server.",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "programDbId",
                        "in" : "query",
                        "description" : "A BrAPI Program represents the high level organization or group who is responsible for conducting trials and studies. Things like Breeding Programs and Funded Projects are considered BrAPI Programs. \n\nUse this parameter to only return results associated with the given programs. \n\nUse `GET /programs` to find the list of available programs on a server.",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "programName",
                        "in" : "query",
                        "description" : "Use this parameter to only return results associated with the given program names. Program names are not required to be unique.\n\nUse `GET /programs` to find the list of available programs on a server.",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "studyDbId",
                        "in" : "query",
                        "description" : "List of study identifiers to search for",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "studyName",
                        "in" : "query",
                        "description" : "List of study names to filter search results",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "trialDbId",
                        "in" : "query",
                        "description" : "The ID which uniquely identifies a trial to search for",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "trialName",
                        "in" : "query",
                        "description" : "The human readable name of a trial to search for",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "mapDbId",
                        "in" : "query",
                        "description" : "The ID which uniquely identifies a `GenomeMap`",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "mapPUI",
                        "in" : "query",
                        "description" : "The DOI or other permanent identifier for a `GenomeMap`",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "scientificName",
                        "in" : "query",
                        "description" : "Full scientific binomial format name. This includes Genus, Species, and Sub-species",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "type",
                        "in" : "query",
                        "description" : "The type of map, usually \"Genetic\" or \"Physical\"",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "$ref" : "#/components/parameters/page"
                    },
                    {
                        "$ref" : "#/components/parameters/pageSize"
                    },
                    {
                        "$ref" : "#/components/parameters/authorizationHeader"
                    }
                ],
                "responses" : {
                    "200" : {
                        "$ref" : "#/components/responses/GenomeMapListResponse"
                    },
                    "400" : {
                        "$ref" : "#/components/responses/400BadRequest"
                    },
                    "401" : {
                        "$ref" : "#/components/responses/401Unauthorized"
                    },
                    "403" : {
                        "$ref" : "#/components/responses/403Forbidden"
                    }
                }
            }
        },
        "/markerpositions" : {
            "get" : {
                "tags" : [
                    "MarkerPositions"
                ],
                "summary" : "Get a filtered list of MarkerPosition",
                "description" : "Get a list of MarkerPosition",
                "parameters" : [
                    {
                        "name" : "mapDbId",
                        "in" : "query",
                        "description" : "A list of IDs which uniquely identify `GenomeMaps` within the given database server",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "linkageGroupName",
                        "in" : "query",
                        "description" : "A list of Uniquely Identifiable linkage group names",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "variantDbId",
                        "in" : "query",
                        "description" : "A list of IDs which uniquely identify `Variants` within the given database server",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "minPosition",
                        "in" : "query",
                        "description" : "The minimum position of markers in a given map",
                        "required" : false,
                        "schema" : {
                            "type" : "integer",
                            "format" : "int32"
                        }
                    },
                    {
                        "name" : "maxPosition",
                        "in" : "query",
                        "description" : "The maximum position of markers in a given map",
                        "required" : false,
                        "schema" : {
                            "type" : "integer",
                            "format" : "int32"
                        }
                    },
                    {
                        "$ref" : "#/components/parameters/page"
                    },
                    {
                        "$ref" : "#/components/parameters/pageSize"
                    },
                    {
                        "$ref" : "#/components/parameters/authorizationHeader"
                    }
                ],
                "responses" : {
                    "200" : {
                        "$ref" : "#/components/responses/MarkerPositionListResponse"
                    },
                    "400" : {
                        "$ref" : "#/components/responses/400BadRequest"
                    },
                    "401" : {
                        "$ref" : "#/components/responses/401Unauthorized"
                    },
                    "403" : {
                        "$ref" : "#/components/responses/403Forbidden"
                    }
                }
            }
        },
        "/plates" : {
            "get" : {
                "tags" : [
                    "Plates"
                ],
                "summary" : "Get a filtered list of Plate",
                "description" : "Get a list of Plate",
                "parameters" : [
                    {
                        "name" : "commonCropName",
                        "in" : "query",
                        "description" : "The BrAPI Common Crop Name is the simple, generalized, widely accepted name of the organism being researched. It is most often used in multi-crop systems where digital resources need to be divided at a high level. Things like 'Maize', 'Wheat', and 'Rice' are examples of common crop names.\n\nUse this parameter to only return results associated with the given crops. \n\nUse `GET /commoncropnames` to find the list of available crops on a server.",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "germplasmDbId",
                        "in" : "query",
                        "description" : "List of IDs which uniquely identify germplasm to search for",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "germplasmName",
                        "in" : "query",
                        "description" : "List of human readable names to identify germplasm to search for",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "programDbId",
                        "in" : "query",
                        "description" : "A BrAPI Program represents the high level organization or group who is responsible for conducting trials and studies. Things like Breeding Programs and Funded Projects are considered BrAPI Programs. \n\nUse this parameter to only return results associated with the given programs. \n\nUse `GET /programs` to find the list of available programs on a server.",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "programName",
                        "in" : "query",
                        "description" : "Use this parameter to only return results associated with the given program names. Program names are not required to be unique.\n\nUse `GET /programs` to find the list of available programs on a server.",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "studyDbId",
                        "in" : "query",
                        "description" : "List of study identifiers to search for",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "studyName",
                        "in" : "query",
                        "description" : "List of study names to filter search results",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "trialDbId",
                        "in" : "query",
                        "description" : "The ID which uniquely identifies a trial to search for",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "trialName",
                        "in" : "query",
                        "description" : "The human readable name of a trial to search for",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "observationUnitDbId",
                        "in" : "query",
                        "description" : "The ID which uniquely identifies an observation unit",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "plateDbId",
                        "in" : "query",
                        "description" : "The ID which uniquely identifies a plate of samples",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "plateName",
                        "in" : "query",
                        "description" : "The human readable name of a plate of samples",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "plateBarcode",
                        "in" : "query",
                        "description" : "A unique identifier physically attached to the plate",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "sampleDbId",
                        "in" : "query",
                        "description" : "The ID which uniquely identifies a sample",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "sampleName",
                        "in" : "query",
                        "description" : "The human readable name of the sample",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "sampleGroupDbId",
                        "in" : "query",
                        "description" : "The unique identifier for a group of related Samples",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "germplasmDbId",
                        "in" : "query",
                        "description" : "The ID which uniquely identifies a germplasm",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "$ref" : "#/components/parameters/externalReferenceID"
                    },
                    {
                        "$ref" : "#/components/parameters/externalReferenceId"
                    },
                    {
                        "$ref" : "#/components/parameters/externalReferenceSource"
                    },
                    {
                        "$ref" : "#/components/parameters/page"
                    },
                    {
                        "$ref" : "#/components/parameters/pageSize"
                    },
                    {
                        "$ref" : "#/components/parameters/authorizationHeader"
                    }
                ],
                "responses" : {
                    "200" : {
                        "$ref" : "#/components/responses/PlateListResponse"
                    },
                    "400" : {
                        "$ref" : "#/components/responses/400BadRequest"
                    },
                    "401" : {
                        "$ref" : "#/components/responses/401Unauthorized"
                    },
                    "403" : {
                        "$ref" : "#/components/responses/403Forbidden"
                    }
                }
            },
            "post" : {
                "tags" : [
                    "Plates"
                ],
                "summary" : "Create new Plate",
                "description" : "Add new Plate to database",
                "parameters" : [
                    {
                        "$ref" : "#/components/parameters/authorizationHeader"
                    }
                ],
                "requestBody" : {
                    "content" : {
                        "application/json" : {
                            "schema" : {
                                "$ref" : "#/components/schemas/PlateNewRequest"
                            }
                        }
                    }
                },
                "responses" : {
                    "200" : {
                        "$ref" : "#/components/responses/PlateListResponse"
                    },
                    "400" : {
                        "$ref" : "#/components/responses/400BadRequest"
                    },
                    "401" : {
                        "$ref" : "#/components/responses/401Unauthorized"
                    },
                    "403" : {
                        "$ref" : "#/components/responses/403Forbidden"
                    }
                }
            }
        },
        "/references" : {
            "get" : {
                "tags" : [
                    "References"
                ],
                "summary" : "Get a filtered list of Reference",
                "description" : "Get a list of Reference",
                "parameters" : [
                    {
                        "name" : "commonCropName",
                        "in" : "query",
                        "description" : "The BrAPI Common Crop Name is the simple, generalized, widely accepted name of the organism being researched. It is most often used in multi-crop systems where digital resources need to be divided at a high level. Things like 'Maize', 'Wheat', and 'Rice' are examples of common crop names.\n\nUse this parameter to only return results associated with the given crops. \n\nUse `GET /commoncropnames` to find the list of available crops on a server.",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "germplasmDbId",
                        "in" : "query",
                        "description" : "List of IDs which uniquely identify germplasm to search for",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "germplasmName",
                        "in" : "query",
                        "description" : "List of human readable names to identify germplasm to search for",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "programDbId",
                        "in" : "query",
                        "description" : "A BrAPI Program represents the high level organization or group who is responsible for conducting trials and studies. Things like Breeding Programs and Funded Projects are considered BrAPI Programs. \n\nUse this parameter to only return results associated with the given programs. \n\nUse `GET /programs` to find the list of available programs on a server.",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "programName",
                        "in" : "query",
                        "description" : "Use this parameter to only return results associated with the given program names. Program names are not required to be unique.\n\nUse `GET /programs` to find the list of available programs on a server.",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "studyDbId",
                        "in" : "query",
                        "description" : "List of study identifiers to search for",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "studyName",
                        "in" : "query",
                        "description" : "List of study names to filter search results",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "trialDbId",
                        "in" : "query",
                        "description" : "The ID which uniquely identifies a trial to search for",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "trialName",
                        "in" : "query",
                        "description" : "The human readable name of a trial to search for",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "accession",
                        "in" : "query",
                        "description" : "If specified, return the references for which the `accession` matches this string (case-sensitive, exact match).",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "md5checksum",
                        "in" : "query",
                        "description" : "If specified, return the references for which the `md5checksum` matches this string (case-sensitive, exact match).",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "referenceDbId",
                        "in" : "query",
                        "description" : "A list of IDs which uniquely identify `References` within the given database server",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "referenceSetDbId",
                        "in" : "query",
                        "description" : "A list of IDs which uniquely identify `ReferenceSets` within the given database server",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "isDerived",
                        "in" : "query",
                        "description" : "A sequence X is said to be derived from source sequence Y, if X and Y are of the same length and the per-base sequence divergence at A/C/G/T bases is sufficiently small. Two sequences derived from the same official sequence share the same coordinates and annotations, and can be replaced with the official sequence for certain use cases.",
                        "required" : false,
                        "schema" : {
                            "type" : "boolean"
                        }
                    },
                    {
                        "name" : "minLength",
                        "in" : "query",
                        "description" : "The minimum length of this `References` sequence.",
                        "required" : false,
                        "schema" : {
                            "type" : "integer",
                            "format" : "int32"
                        }
                    },
                    {
                        "name" : "maxLength",
                        "in" : "query",
                        "description" : "The minimum length of this `References` sequence.",
                        "required" : false,
                        "schema" : {
                            "type" : "integer",
                            "format" : "int32"
                        }
                    },
                    {
                        "$ref" : "#/components/parameters/externalReferenceID"
                    },
                    {
                        "$ref" : "#/components/parameters/externalReferenceId"
                    },
                    {
                        "$ref" : "#/components/parameters/externalReferenceSource"
                    },
                    {
                        "$ref" : "#/components/parameters/page"
                    },
                    {
                        "$ref" : "#/components/parameters/pageSize"
                    },
                    {
                        "$ref" : "#/components/parameters/authorizationHeader"
                    }
                ],
                "responses" : {
                    "200" : {
                        "$ref" : "#/components/responses/ReferenceListResponse"
                    },
                    "400" : {
                        "$ref" : "#/components/responses/400BadRequest"
                    },
                    "401" : {
                        "$ref" : "#/components/responses/401Unauthorized"
                    },
                    "403" : {
                        "$ref" : "#/components/responses/403Forbidden"
                    }
                }
            }
        },
        "/referencesets" : {
            "get" : {
                "tags" : [
                    "ReferenceSets"
                ],
                "summary" : "Get a filtered list of ReferenceSet",
                "description" : "Get a list of ReferenceSet",
                "parameters" : [
                    {
                        "name" : "commonCropName",
                        "in" : "query",
                        "description" : "The BrAPI Common Crop Name is the simple, generalized, widely accepted name of the organism being researched. It is most often used in multi-crop systems where digital resources need to be divided at a high level. Things like 'Maize', 'Wheat', and 'Rice' are examples of common crop names.\n\nUse this parameter to only return results associated with the given crops. \n\nUse `GET /commoncropnames` to find the list of available crops on a server.",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "germplasmDbId",
                        "in" : "query",
                        "description" : "List of IDs which uniquely identify germplasm to search for",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "germplasmName",
                        "in" : "query",
                        "description" : "List of human readable names to identify germplasm to search for",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "programDbId",
                        "in" : "query",
                        "description" : "A BrAPI Program represents the high level organization or group who is responsible for conducting trials and studies. Things like Breeding Programs and Funded Projects are considered BrAPI Programs. \n\nUse this parameter to only return results associated with the given programs. \n\nUse `GET /programs` to find the list of available programs on a server.",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "programName",
                        "in" : "query",
                        "description" : "Use this parameter to only return results associated with the given program names. Program names are not required to be unique.\n\nUse `GET /programs` to find the list of available programs on a server.",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "studyDbId",
                        "in" : "query",
                        "description" : "List of study identifiers to search for",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "studyName",
                        "in" : "query",
                        "description" : "List of study names to filter search results",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "trialDbId",
                        "in" : "query",
                        "description" : "The ID which uniquely identifies a trial to search for",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "trialName",
                        "in" : "query",
                        "description" : "The human readable name of a trial to search for",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "accession",
                        "in" : "query",
                        "description" : "If set, return the reference sets for which the `accession` matches this string (case-sensitive, exact match).",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "assemblyPUI",
                        "in" : "query",
                        "description" : "If set, return the reference sets for which the `assemblyId` matches this string (case-sensitive, exact match).",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "md5checksum",
                        "in" : "query",
                        "description" : "If set, return the reference sets for which the `md5checksum` matches this string (case-sensitive, exact match).",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "referenceSetDbId",
                        "in" : "query",
                        "description" : "The `ReferenceSets` to search.",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "$ref" : "#/components/parameters/externalReferenceID"
                    },
                    {
                        "$ref" : "#/components/parameters/externalReferenceId"
                    },
                    {
                        "$ref" : "#/components/parameters/externalReferenceSource"
                    },
                    {
                        "$ref" : "#/components/parameters/page"
                    },
                    {
                        "$ref" : "#/components/parameters/pageSize"
                    },
                    {
                        "$ref" : "#/components/parameters/authorizationHeader"
                    }
                ],
                "responses" : {
                    "200" : {
                        "$ref" : "#/components/responses/ReferenceSetListResponse"
                    },
                    "400" : {
                        "$ref" : "#/components/responses/400BadRequest"
                    },
                    "401" : {
                        "$ref" : "#/components/responses/401Unauthorized"
                    },
                    "403" : {
                        "$ref" : "#/components/responses/403Forbidden"
                    }
                }
            }
        },
        "/samples" : {
            "get" : {
                "tags" : [
                    "Samples"
                ],
                "summary" : "Get a filtered list of Sample",
                "description" : "Get a list of Sample",
                "parameters" : [
                    {
                        "name" : "commonCropName",
                        "in" : "query",
                        "description" : "The BrAPI Common Crop Name is the simple, generalized, widely accepted name of the organism being researched. It is most often used in multi-crop systems where digital resources need to be divided at a high level. Things like 'Maize', 'Wheat', and 'Rice' are examples of common crop names.\n\nUse this parameter to only return results associated with the given crops. \n\nUse `GET /commoncropnames` to find the list of available crops on a server.",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "germplasmDbId",
                        "in" : "query",
                        "description" : "List of IDs which uniquely identify germplasm to search for",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "germplasmName",
                        "in" : "query",
                        "description" : "List of human readable names to identify germplasm to search for",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "programDbId",
                        "in" : "query",
                        "description" : "A BrAPI Program represents the high level organization or group who is responsible for conducting trials and studies. Things like Breeding Programs and Funded Projects are considered BrAPI Programs. \n\nUse this parameter to only return results associated with the given programs. \n\nUse `GET /programs` to find the list of available programs on a server.",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "programName",
                        "in" : "query",
                        "description" : "Use this parameter to only return results associated with the given program names. Program names are not required to be unique.\n\nUse `GET /programs` to find the list of available programs on a server.",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "studyDbId",
                        "in" : "query",
                        "description" : "List of study identifiers to search for",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "studyName",
                        "in" : "query",
                        "description" : "List of study names to filter search results",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "trialDbId",
                        "in" : "query",
                        "description" : "The ID which uniquely identifies a trial to search for",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "trialName",
                        "in" : "query",
                        "description" : "The human readable name of a trial to search for",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "observationUnitDbId",
                        "in" : "query",
                        "description" : "The ID which uniquely identifies an `ObservationUnit`",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "plateDbId",
                        "in" : "query",
                        "description" : "The ID which uniquely identifies a `Plate` of `Samples`",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "plateName",
                        "in" : "query",
                        "description" : "The human readable name of a `Plate` of `Samples`",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "sampleDbId",
                        "in" : "query",
                        "description" : "The ID which uniquely identifies a `Sample`",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "sampleName",
                        "in" : "query",
                        "description" : "The human readable name of the `Sample`",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "sampleGroupDbId",
                        "in" : "query",
                        "description" : "The unique identifier for a group of related `Samples`",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "germplasmDbId",
                        "in" : "query",
                        "description" : "The ID which uniquely identifies a `Germplasm`",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "$ref" : "#/components/parameters/externalReferenceID"
                    },
                    {
                        "$ref" : "#/components/parameters/externalReferenceId"
                    },
                    {
                        "$ref" : "#/components/parameters/externalReferenceSource"
                    },
                    {
                        "$ref" : "#/components/parameters/page"
                    },
                    {
                        "$ref" : "#/components/parameters/pageSize"
                    },
                    {
                        "$ref" : "#/components/parameters/authorizationHeader"
                    }
                ],
                "responses" : {
                    "200" : {
                        "$ref" : "#/components/responses/SampleListResponse"
                    },
                    "400" : {
                        "$ref" : "#/components/responses/400BadRequest"
                    },
                    "401" : {
                        "$ref" : "#/components/responses/401Unauthorized"
                    },
                    "403" : {
                        "$ref" : "#/components/responses/403Forbidden"
                    }
                }
            },
            "put" : {
                "tags" : [
                    "Samples"
                ],
                "summary" : "Update the details for an existing Sample",
                "description" : "Update the details for an existing Sample",
                "parameters" : [
                    {
                        "$ref" : "#/components/parameters/authorizationHeader"
                    }
                ],
                "requestBody" : {
                    "content" : {
                        "application/json" : {
                            "schema" : {
                                "$ref" : "#/components/schemas/SampleNewRequest"
                            }
                        }
                    }
                },
                "responses" : {
                    "200" : {
                        "$ref" : "#/components/responses/SampleListResponse"
                    },
                    "400" : {
                        "$ref" : "#/components/responses/400BadRequest"
                    },
                    "401" : {
                        "$ref" : "#/components/responses/401Unauthorized"
                    },
                    "403" : {
                        "$ref" : "#/components/responses/403Forbidden"
                    }
                }
            },
            "post" : {
                "tags" : [
                    "Samples"
                ],
                "summary" : "Create new Sample",
                "description" : "Add new Sample to database",
                "parameters" : [
                    {
                        "$ref" : "#/components/parameters/authorizationHeader"
                    }
                ],
                "requestBody" : {
                    "content" : {
                        "application/json" : {
                            "schema" : {
                                "$ref" : "#/components/schemas/SampleNewRequest"
                            }
                        }
                    }
                },
                "responses" : {
                    "200" : {
                        "$ref" : "#/components/responses/SampleListResponse"
                    },
                    "400" : {
                        "$ref" : "#/components/responses/400BadRequest"
                    },
                    "401" : {
                        "$ref" : "#/components/responses/401Unauthorized"
                    },
                    "403" : {
                        "$ref" : "#/components/responses/403Forbidden"
                    }
                }
            }
        },
        "/variants" : {
            "get" : {
                "tags" : [
                    "Variants"
                ],
                "summary" : "Get a filtered list of Variant",
                "description" : "Get a list of Variant",
                "parameters" : [
                    {
                        "name" : "commonCropName",
                        "in" : "query",
                        "description" : "The BrAPI Common Crop Name is the simple, generalized, widely accepted name of the organism being researched. It is most often used in multi-crop systems where digital resources need to be divided at a high level. Things like 'Maize', 'Wheat', and 'Rice' are examples of common crop names.\n\nUse this parameter to only return results associated with the given crops. \n\nUse `GET /commoncropnames` to find the list of available crops on a server.",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "programDbId",
                        "in" : "query",
                        "description" : "A BrAPI Program represents the high level organization or group who is responsible for conducting trials and studies. Things like Breeding Programs and Funded Projects are considered BrAPI Programs. \n\nUse this parameter to only return results associated with the given programs. \n\nUse `GET /programs` to find the list of available programs on a server.",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "programName",
                        "in" : "query",
                        "description" : "Use this parameter to only return results associated with the given program names. Program names are not required to be unique.\n\nUse `GET /programs` to find the list of available programs on a server.",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "studyDbId",
                        "in" : "query",
                        "description" : "List of study identifiers to search for",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "studyName",
                        "in" : "query",
                        "description" : "List of study names to filter search results",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "trialDbId",
                        "in" : "query",
                        "description" : "The ID which uniquely identifies a trial to search for",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "trialName",
                        "in" : "query",
                        "description" : "The human readable name of a trial to search for",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "callSetDbId",
                        "in" : "query",
                        "description" : "**Deprecated in v2.1** Parameter unnecessary. Github issue number #474 \n<br/>Only return variant calls which belong to call sets with these IDs. If unspecified, return all variants and no variant call objects.",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "end",
                        "in" : "query",
                        "description" : "The end of the window (0-based, exclusive) for which overlapping variants should be returned.",
                        "required" : false,
                        "schema" : {
                            "type" : "integer",
                            "format" : "int32"
                        }
                    },
                    {
                        "name" : "referenceDbId",
                        "in" : "query",
                        "description" : "**Deprecated in v2.1** Please use `referenceDbIds`. Github issue number #472\n<br/>Only return variants on this reference.",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "referenceDbId",
                        "in" : "query",
                        "description" : "The unique identifier representing a genotype `Reference`",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "referenceSetDbId",
                        "in" : "query",
                        "description" : "The unique identifier representing a genotype `ReferenceSet`",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "start",
                        "in" : "query",
                        "description" : "The beginning of the window (0-based, inclusive) for which overlapping variants should be returned. Genomic positions are non-negative integers less than reference length. Requests spanning the join of circular genomes are represented as two requests one on each side of the join (position 0).",
                        "required" : false,
                        "schema" : {
                            "type" : "integer",
                            "format" : "int32"
                        }
                    },
                    {
                        "name" : "variantDbId",
                        "in" : "query",
                        "description" : "A list of IDs which uniquely identify `Variants`",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "variantSetDbId",
                        "in" : "query",
                        "description" : "A list of IDs which uniquely identify `VariantSets`",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "$ref" : "#/components/parameters/externalReferenceID"
                    },
                    {
                        "$ref" : "#/components/parameters/externalReferenceId"
                    },
                    {
                        "$ref" : "#/components/parameters/externalReferenceSource"
                    },
                    {
                        "$ref" : "#/components/parameters/page"
                    },
                    {
                        "$ref" : "#/components/parameters/pageSize"
                    },
                    {
                        "$ref" : "#/components/parameters/authorizationHeader"
                    }
                ],
                "responses" : {
                    "200" : {
                        "$ref" : "#/components/responses/VariantListResponse"
                    },
                    "400" : {
                        "$ref" : "#/components/responses/400BadRequest"
                    },
                    "401" : {
                        "$ref" : "#/components/responses/401Unauthorized"
                    },
                    "403" : {
                        "$ref" : "#/components/responses/403Forbidden"
                    }
                }
            }
        },
        "/variantsets" : {
            "get" : {
                "tags" : [
                    "VariantSets"
                ],
                "summary" : "Get a filtered list of VariantSet",
                "description" : "Get a list of VariantSet",
                "parameters" : [
                    {
                        "name" : "commonCropName",
                        "in" : "query",
                        "description" : "The BrAPI Common Crop Name is the simple, generalized, widely accepted name of the organism being researched. It is most often used in multi-crop systems where digital resources need to be divided at a high level. Things like 'Maize', 'Wheat', and 'Rice' are examples of common crop names.\n\nUse this parameter to only return results associated with the given crops. \n\nUse `GET /commoncropnames` to find the list of available crops on a server.",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "programDbId",
                        "in" : "query",
                        "description" : "A BrAPI Program represents the high level organization or group who is responsible for conducting trials and studies. Things like Breeding Programs and Funded Projects are considered BrAPI Programs. \n\nUse this parameter to only return results associated with the given programs. \n\nUse `GET /programs` to find the list of available programs on a server.",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "programName",
                        "in" : "query",
                        "description" : "Use this parameter to only return results associated with the given program names. Program names are not required to be unique.\n\nUse `GET /programs` to find the list of available programs on a server.",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "studyDbId",
                        "in" : "query",
                        "description" : "List of study identifiers to search for",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "studyName",
                        "in" : "query",
                        "description" : "List of study names to filter search results",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "trialDbId",
                        "in" : "query",
                        "description" : "The ID which uniquely identifies a trial to search for",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "trialName",
                        "in" : "query",
                        "description" : "The human readable name of a trial to search for",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "callSetDbId",
                        "in" : "query",
                        "description" : "The unique identifier representing a CallSet",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "variantDbId",
                        "in" : "query",
                        "description" : "The unique identifier representing a Variant",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "variantSetDbId",
                        "in" : "query",
                        "description" : "The unique identifier representing a VariantSet",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "referenceDbId",
                        "in" : "query",
                        "description" : "The unique identifier representing a genotype Reference",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "referenceSetDbId",
                        "in" : "query",
                        "description" : "The unique identifier representing a genotype ReferenceSet",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "$ref" : "#/components/parameters/externalReferenceID"
                    },
                    {
                        "$ref" : "#/components/parameters/externalReferenceId"
                    },
                    {
                        "$ref" : "#/components/parameters/externalReferenceSource"
                    },
                    {
                        "$ref" : "#/components/parameters/page"
                    },
                    {
                        "$ref" : "#/components/parameters/pageSize"
                    },
                    {
                        "$ref" : "#/components/parameters/authorizationHeader"
                    }
                ],
                "responses" : {
                    "200" : {
                        "$ref" : "#/components/responses/VariantSetListResponse"
                    },
                    "400" : {
                        "$ref" : "#/components/responses/400BadRequest"
                    },
                    "401" : {
                        "$ref" : "#/components/responses/401Unauthorized"
                    },
                    "403" : {
                        "$ref" : "#/components/responses/403Forbidden"
                    }
                }
            }
        },
        "/callsets/{callSetDbId}" : {
            "get" : {
                "tags" : [
                    "CallSets"
                ],
                "summary" : "Get the details of a specific CallSet",
                "description" : "Get details for a CallSet",
                "responses" : {
                    "200" : {
                        "$ref" : "#/components/responses/CallSetSingleResponse"
                    },
                    "400" : {
                        "$ref" : "#/components/responses/400BadRequest"
                    },
                    "401" : {
                        "$ref" : "#/components/responses/401Unauthorized"
                    },
                    "403" : {
                        "$ref" : "#/components/responses/403Forbidden"
                    }
                }
            }
        },
        "/callsets/{callSetDbId}/calls" : {
            "get" : {
                "tags" : [
                    "Calls"
                ],
                "summary" : "Get a filtered list of Call",
                "description" : "Get a list of Call",
                "parameters" : [
                    {
                        "name" : "callSetDbId",
                        "in" : "query",
                        "description" : "A list of IDs which uniquely identify `CallSets` within the given database server",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "variantDbId",
                        "in" : "query",
                        "description" : "A list of IDs which uniquely identify `Variant` within the given database server",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "variantSetDbId",
                        "in" : "query",
                        "description" : "A list of IDs which uniquely identify `VariantSets` within the given database server",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "expandHomozygote",
                        "in" : "query",
                        "description" : "Should homozygotes be expanded (true) or collapsed into a single occurrence (false)",
                        "required" : false,
                        "schema" : {
                            "type" : "boolean"
                        }
                    },
                    {
                        "name" : "sepPhased",
                        "in" : "query",
                        "description" : "The string used as a separator for phased allele calls.",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "sepUnphased",
                        "in" : "query",
                        "description" : "The string used as a separator for unphased allele calls.",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "unknownString",
                        "in" : "query",
                        "description" : "The string used as a representation for missing data.",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "$ref" : "#/components/parameters/page"
                    },
                    {
                        "$ref" : "#/components/parameters/pageSize"
                    },
                    {
                        "$ref" : "#/components/parameters/authorizationHeader"
                    }
                ],
                "responses" : {
                    "200" : {
                        "$ref" : "#/components/responses/CallListResponse"
                    },
                    "400" : {
                        "$ref" : "#/components/responses/400BadRequest"
                    },
                    "401" : {
                        "$ref" : "#/components/responses/401Unauthorized"
                    },
                    "403" : {
                        "$ref" : "#/components/responses/403Forbidden"
                    }
                }
            }
        },
        "/maps/{mapDbId}" : {
            "get" : {
                "tags" : [
                    "GenomeMaps"
                ],
                "summary" : "Get the details of a specific GenomeMap",
                "description" : "Get details for a GenomeMap",
                "responses" : {
                    "200" : {
                        "$ref" : "#/components/responses/GenomeMapSingleResponse"
                    },
                    "400" : {
                        "$ref" : "#/components/responses/400BadRequest"
                    },
                    "401" : {
                        "$ref" : "#/components/responses/401Unauthorized"
                    },
                    "403" : {
                        "$ref" : "#/components/responses/403Forbidden"
                    }
                }
            }
        },
        "/plates/{plateDbId}" : {
            "get" : {
                "tags" : [
                    "Plates"
                ],
                "summary" : "Get the details of a specific Plate",
                "description" : "Get details for a Plate",
                "responses" : {
                    "200" : {
                        "$ref" : "#/components/responses/PlateSingleResponse"
                    },
                    "400" : {
                        "$ref" : "#/components/responses/400BadRequest"
                    },
                    "401" : {
                        "$ref" : "#/components/responses/401Unauthorized"
                    },
                    "403" : {
                        "$ref" : "#/components/responses/403Forbidden"
                    }
                }
            }
        },
        "/references/{referenceDbId}" : {
            "get" : {
                "tags" : [
                    "References"
                ],
                "summary" : "Get the details of a specific Reference",
                "description" : "Get details for a Reference",
                "responses" : {
                    "200" : {
                        "$ref" : "#/components/responses/ReferenceSingleResponse"
                    },
                    "400" : {
                        "$ref" : "#/components/responses/400BadRequest"
                    },
                    "401" : {
                        "$ref" : "#/components/responses/401Unauthorized"
                    },
                    "403" : {
                        "$ref" : "#/components/responses/403Forbidden"
                    }
                }
            }
        },
        "/referencesets/{referenceSetDbId}" : {
            "get" : {
                "tags" : [
                    "ReferenceSets"
                ],
                "summary" : "Get the details of a specific ReferenceSet",
                "description" : "Get details for a ReferenceSet",
                "responses" : {
                    "200" : {
                        "$ref" : "#/components/responses/ReferenceSetSingleResponse"
                    },
                    "400" : {
                        "$ref" : "#/components/responses/400BadRequest"
                    },
                    "401" : {
                        "$ref" : "#/components/responses/401Unauthorized"
                    },
                    "403" : {
                        "$ref" : "#/components/responses/403Forbidden"
                    }
                }
            }
        },
        "/samples/{sampleDbId}" : {
            "get" : {
                "tags" : [
                    "Samples"
                ],
                "summary" : "Get the details of a specific Sample",
                "description" : "Get details for a Sample",
                "responses" : {
                    "200" : {
                        "$ref" : "#/components/responses/SampleSingleResponse"
                    },
                    "400" : {
                        "$ref" : "#/components/responses/400BadRequest"
                    },
                    "401" : {
                        "$ref" : "#/components/responses/401Unauthorized"
                    },
                    "403" : {
                        "$ref" : "#/components/responses/403Forbidden"
                    }
                }
            }
        },
        "/variants/{variantDbId}" : {
            "get" : {
                "tags" : [
                    "Variants"
                ],
                "summary" : "Get the details of a specific Variant",
                "description" : "Get details for a Variant",
                "responses" : {
                    "200" : {
                        "$ref" : "#/components/responses/VariantSingleResponse"
                    },
                    "400" : {
                        "$ref" : "#/components/responses/400BadRequest"
                    },
                    "401" : {
                        "$ref" : "#/components/responses/401Unauthorized"
                    },
                    "403" : {
                        "$ref" : "#/components/responses/403Forbidden"
                    }
                }
            }
        },
        "/variants/{variantDbId}/calls" : {
            "get" : {
                "tags" : [
                    "Calls"
                ],
                "summary" : "Get a filtered list of Call",
                "description" : "Get a list of Call",
                "parameters" : [
                    {
                        "name" : "callSetDbId",
                        "in" : "query",
                        "description" : "A list of IDs which uniquely identify `CallSets` within the given database server",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "variantDbId",
                        "in" : "query",
                        "description" : "A list of IDs which uniquely identify `Variant` within the given database server",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "variantSetDbId",
                        "in" : "query",
                        "description" : "A list of IDs which uniquely identify `VariantSets` within the given database server",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "expandHomozygote",
                        "in" : "query",
                        "description" : "Should homozygotes be expanded (true) or collapsed into a single occurrence (false)",
                        "required" : false,
                        "schema" : {
                            "type" : "boolean"
                        }
                    },
                    {
                        "name" : "sepPhased",
                        "in" : "query",
                        "description" : "The string used as a separator for phased allele calls.",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "sepUnphased",
                        "in" : "query",
                        "description" : "The string used as a separator for unphased allele calls.",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "unknownString",
                        "in" : "query",
                        "description" : "The string used as a representation for missing data.",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "$ref" : "#/components/parameters/page"
                    },
                    {
                        "$ref" : "#/components/parameters/pageSize"
                    },
                    {
                        "$ref" : "#/components/parameters/authorizationHeader"
                    }
                ],
                "responses" : {
                    "200" : {
                        "$ref" : "#/components/responses/CallListResponse"
                    },
                    "400" : {
                        "$ref" : "#/components/responses/400BadRequest"
                    },
                    "401" : {
                        "$ref" : "#/components/responses/401Unauthorized"
                    },
                    "403" : {
                        "$ref" : "#/components/responses/403Forbidden"
                    }
                }
            }
        },
        "/variantsets/{variantSetDbId}" : {
            "get" : {
                "tags" : [
                    "VariantSets"
                ],
                "summary" : "Get the details of a specific VariantSet",
                "description" : "Get details for a VariantSet",
                "responses" : {
                    "200" : {
                        "$ref" : "#/components/responses/VariantSetSingleResponse"
                    },
                    "400" : {
                        "$ref" : "#/components/responses/400BadRequest"
                    },
                    "401" : {
                        "$ref" : "#/components/responses/401Unauthorized"
                    },
                    "403" : {
                        "$ref" : "#/components/responses/403Forbidden"
                    }
                }
            }
        },
        "/variantsets/{variantSetDbId}/calls" : {
            "get" : {
                "tags" : [
                    "Calls"
                ],
                "summary" : "Get a filtered list of Call",
                "description" : "Get a list of Call",
                "parameters" : [
                    {
                        "name" : "callSetDbId",
                        "in" : "query",
                        "description" : "A list of IDs which uniquely identify `CallSets` within the given database server",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "variantDbId",
                        "in" : "query",
                        "description" : "A list of IDs which uniquely identify `Variant` within the given database server",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "variantSetDbId",
                        "in" : "query",
                        "description" : "A list of IDs which uniquely identify `VariantSets` within the given database server",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "expandHomozygote",
                        "in" : "query",
                        "description" : "Should homozygotes be expanded (true) or collapsed into a single occurrence (false)",
                        "required" : false,
                        "schema" : {
                            "type" : "boolean"
                        }
                    },
                    {
                        "name" : "sepPhased",
                        "in" : "query",
                        "description" : "The string used as a separator for phased allele calls.",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "sepUnphased",
                        "in" : "query",
                        "description" : "The string used as a separator for unphased allele calls.",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "unknownString",
                        "in" : "query",
                        "description" : "The string used as a representation for missing data.",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "$ref" : "#/components/parameters/page"
                    },
                    {
                        "$ref" : "#/components/parameters/pageSize"
                    },
                    {
                        "$ref" : "#/components/parameters/authorizationHeader"
                    }
                ],
                "responses" : {
                    "200" : {
                        "$ref" : "#/components/responses/CallListResponse"
                    },
                    "400" : {
                        "$ref" : "#/components/responses/400BadRequest"
                    },
                    "401" : {
                        "$ref" : "#/components/responses/401Unauthorized"
                    },
                    "403" : {
                        "$ref" : "#/components/responses/403Forbidden"
                    }
                }
            }
        },
        "/variantsets/{variantSetDbId}/callsets" : {
            "get" : {
                "tags" : [
                    "CallSets"
                ],
                "summary" : "Get a filtered list of CallSet",
                "description" : "Get a list of CallSet",
                "parameters" : [
                    {
                        "name" : "commonCropName",
                        "in" : "query",
                        "description" : "The BrAPI Common Crop Name is the simple, generalized, widely accepted name of the organism being researched. It is most often used in multi-crop systems where digital resources need to be divided at a high level. Things like 'Maize', 'Wheat', and 'Rice' are examples of common crop names.\n\nUse this parameter to only return results associated with the given crops. \n\nUse `GET /commoncropnames` to find the list of available crops on a server.",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "germplasmDbId",
                        "in" : "query",
                        "description" : "List of IDs which uniquely identify germplasm to search for",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "germplasmName",
                        "in" : "query",
                        "description" : "List of human readable names to identify germplasm to search for",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "programDbId",
                        "in" : "query",
                        "description" : "A BrAPI Program represents the high level organization or group who is responsible for conducting trials and studies. Things like Breeding Programs and Funded Projects are considered BrAPI Programs. \n\nUse this parameter to only return results associated with the given programs. \n\nUse `GET /programs` to find the list of available programs on a server.",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "programName",
                        "in" : "query",
                        "description" : "Use this parameter to only return results associated with the given program names. Program names are not required to be unique.\n\nUse `GET /programs` to find the list of available programs on a server.",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "studyDbId",
                        "in" : "query",
                        "description" : "List of study identifiers to search for",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "studyName",
                        "in" : "query",
                        "description" : "List of study names to filter search results",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "trialDbId",
                        "in" : "query",
                        "description" : "The ID which uniquely identifies a trial to search for",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "trialName",
                        "in" : "query",
                        "description" : "The human readable name of a trial to search for",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "sampleDbId",
                        "in" : "query",
                        "description" : "A list of IDs which uniquely identify `Samples` within the given database server",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "sampleName",
                        "in" : "query",
                        "description" : "A list of human readable names associated with `Samples`",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "callSetDbId",
                        "in" : "query",
                        "description" : "A list of IDs which uniquely identify `CallSets` within the given database server",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "callSetName",
                        "in" : "query",
                        "description" : "A list of human readable names associated with `CallSets`",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "variantSetDbId",
                        "in" : "query",
                        "description" : "A list of IDs which uniquely identify `VariantSets` within the given database server",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "$ref" : "#/components/parameters/externalReferenceID"
                    },
                    {
                        "$ref" : "#/components/parameters/externalReferenceId"
                    },
                    {
                        "$ref" : "#/components/parameters/externalReferenceSource"
                    },
                    {
                        "$ref" : "#/components/parameters/page"
                    },
                    {
                        "$ref" : "#/components/parameters/pageSize"
                    },
                    {
                        "$ref" : "#/components/parameters/authorizationHeader"
                    }
                ],
                "responses" : {
                    "200" : {
                        "$ref" : "#/components/responses/CallSetListResponse"
                    },
                    "400" : {
                        "$ref" : "#/components/responses/400BadRequest"
                    },
                    "401" : {
                        "$ref" : "#/components/responses/401Unauthorized"
                    },
                    "403" : {
                        "$ref" : "#/components/responses/403Forbidden"
                    }
                }
            }
        },
        "/variantsets/{variantSetDbId}/variants" : {
            "get" : {
                "tags" : [
                    "Variants"
                ],
                "summary" : "Get a filtered list of Variant",
                "description" : "Get a list of Variant",
                "parameters" : [
                    {
                        "name" : "commonCropName",
                        "in" : "query",
                        "description" : "The BrAPI Common Crop Name is the simple, generalized, widely accepted name of the organism being researched. It is most often used in multi-crop systems where digital resources need to be divided at a high level. Things like 'Maize', 'Wheat', and 'Rice' are examples of common crop names.\n\nUse this parameter to only return results associated with the given crops. \n\nUse `GET /commoncropnames` to find the list of available crops on a server.",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "programDbId",
                        "in" : "query",
                        "description" : "A BrAPI Program represents the high level organization or group who is responsible for conducting trials and studies. Things like Breeding Programs and Funded Projects are considered BrAPI Programs. \n\nUse this parameter to only return results associated with the given programs. \n\nUse `GET /programs` to find the list of available programs on a server.",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "programName",
                        "in" : "query",
                        "description" : "Use this parameter to only return results associated with the given program names. Program names are not required to be unique.\n\nUse `GET /programs` to find the list of available programs on a server.",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "studyDbId",
                        "in" : "query",
                        "description" : "List of study identifiers to search for",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "studyName",
                        "in" : "query",
                        "description" : "List of study names to filter search results",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "trialDbId",
                        "in" : "query",
                        "description" : "The ID which uniquely identifies a trial to search for",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "trialName",
                        "in" : "query",
                        "description" : "The human readable name of a trial to search for",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "callSetDbId",
                        "in" : "query",
                        "description" : "**Deprecated in v2.1** Parameter unnecessary. Github issue number #474 \n<br/>Only return variant calls which belong to call sets with these IDs. If unspecified, return all variants and no variant call objects.",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "end",
                        "in" : "query",
                        "description" : "The end of the window (0-based, exclusive) for which overlapping variants should be returned.",
                        "required" : false,
                        "schema" : {
                            "type" : "integer",
                            "format" : "int32"
                        }
                    },
                    {
                        "name" : "referenceDbId",
                        "in" : "query",
                        "description" : "**Deprecated in v2.1** Please use `referenceDbIds`. Github issue number #472\n<br/>Only return variants on this reference.",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "referenceDbId",
                        "in" : "query",
                        "description" : "The unique identifier representing a genotype `Reference`",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "referenceSetDbId",
                        "in" : "query",
                        "description" : "The unique identifier representing a genotype `ReferenceSet`",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "start",
                        "in" : "query",
                        "description" : "The beginning of the window (0-based, inclusive) for which overlapping variants should be returned. Genomic positions are non-negative integers less than reference length. Requests spanning the join of circular genomes are represented as two requests one on each side of the join (position 0).",
                        "required" : false,
                        "schema" : {
                            "type" : "integer",
                            "format" : "int32"
                        }
                    },
                    {
                        "name" : "variantDbId",
                        "in" : "query",
                        "description" : "A list of IDs which uniquely identify `Variants`",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "variantSetDbId",
                        "in" : "query",
                        "description" : "A list of IDs which uniquely identify `VariantSets`",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "$ref" : "#/components/parameters/externalReferenceID"
                    },
                    {
                        "$ref" : "#/components/parameters/externalReferenceId"
                    },
                    {
                        "$ref" : "#/components/parameters/externalReferenceSource"
                    },
                    {
                        "$ref" : "#/components/parameters/page"
                    },
                    {
                        "$ref" : "#/components/parameters/pageSize"
                    },
                    {
                        "$ref" : "#/components/parameters/authorizationHeader"
                    }
                ],
                "responses" : {
                    "200" : {
                        "$ref" : "#/components/responses/VariantListResponse"
                    },
                    "400" : {
                        "$ref" : "#/components/responses/400BadRequest"
                    },
                    "401" : {
                        "$ref" : "#/components/responses/401Unauthorized"
                    },
                    "403" : {
                        "$ref" : "#/components/responses/403Forbidden"
                    }
                }
            }
        },
        "/search/allelematrix" : {
            "post" : {
                "tags" : [
                    "AlleleMatrix"
                ],
                "summary" : "Submit a search request for `AlleleMatrix`",
                "description" : "Submit a search request for `AlleleMatrix`<br/>\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse the corresponding `GET /search/alleleMatrix/{searchResultsDbId}` to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
                "responses" : {
                    "200" : {
                        "$ref" : "#/components/responses/AlleleMatrixListResponse"
                    },
                    "202" : {
                        "$ref" : "#/components/responses/202AcceptedSearchResponse"
                    },
                    "400" : {
                        "$ref" : "#/components/responses/400BadRequest"
                    },
                    "401" : {
                        "$ref" : "#/components/responses/401Unauthorized"
                    },
                    "403" : {
                        "$ref" : "#/components/responses/403Forbidden"
                    }
                }
            }
        },
        "/search/calls" : {
            "post" : {
                "tags" : [
                    "Calls"
                ],
                "summary" : "Submit a search request for `Call`",
                "description" : "Submit a search request for `Call`<br/>\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse the corresponding `GET /search/call/{searchResultsDbId}` to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
                "responses" : {
                    "200" : {
                        "$ref" : "#/components/responses/CallListResponse"
                    },
                    "202" : {
                        "$ref" : "#/components/responses/202AcceptedSearchResponse"
                    },
                    "400" : {
                        "$ref" : "#/components/responses/400BadRequest"
                    },
                    "401" : {
                        "$ref" : "#/components/responses/401Unauthorized"
                    },
                    "403" : {
                        "$ref" : "#/components/responses/403Forbidden"
                    }
                }
            }
        },
        "/search/callsets" : {
            "post" : {
                "tags" : [
                    "CallSets"
                ],
                "summary" : "Submit a search request for `CallSet`",
                "description" : "Submit a search request for `CallSet`<br/>\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse the corresponding `GET /search/callSet/{searchResultsDbId}` to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
                "responses" : {
                    "200" : {
                        "$ref" : "#/components/responses/CallSetListResponse"
                    },
                    "202" : {
                        "$ref" : "#/components/responses/202AcceptedSearchResponse"
                    },
                    "400" : {
                        "$ref" : "#/components/responses/400BadRequest"
                    },
                    "401" : {
                        "$ref" : "#/components/responses/401Unauthorized"
                    },
                    "403" : {
                        "$ref" : "#/components/responses/403Forbidden"
                    }
                }
            }
        },
        "/search/markerpositions" : {
            "post" : {
                "tags" : [
                    "MarkerPositions"
                ],
                "summary" : "Submit a search request for `MarkerPosition`",
                "description" : "Submit a search request for `MarkerPosition`<br/>\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse the corresponding `GET /search/markerPosition/{searchResultsDbId}` to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
                "responses" : {
                    "200" : {
                        "$ref" : "#/components/responses/MarkerPositionListResponse"
                    },
                    "202" : {
                        "$ref" : "#/components/responses/202AcceptedSearchResponse"
                    },
                    "400" : {
                        "$ref" : "#/components/responses/400BadRequest"
                    },
                    "401" : {
                        "$ref" : "#/components/responses/401Unauthorized"
                    },
                    "403" : {
                        "$ref" : "#/components/responses/403Forbidden"
                    }
                }
            }
        },
        "/search/plates" : {
            "post" : {
                "tags" : [
                    "Plates"
                ],
                "summary" : "Submit a search request for `Plate`",
                "description" : "Submit a search request for `Plate`<br/>\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse the corresponding `GET /search/plate/{searchResultsDbId}` to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
                "responses" : {
                    "200" : {
                        "$ref" : "#/components/responses/PlateListResponse"
                    },
                    "202" : {
                        "$ref" : "#/components/responses/202AcceptedSearchResponse"
                    },
                    "400" : {
                        "$ref" : "#/components/responses/400BadRequest"
                    },
                    "401" : {
                        "$ref" : "#/components/responses/401Unauthorized"
                    },
                    "403" : {
                        "$ref" : "#/components/responses/403Forbidden"
                    }
                }
            }
        },
        "/search/references" : {
            "post" : {
                "tags" : [
                    "References"
                ],
                "summary" : "Submit a search request for `Reference`",
                "description" : "Submit a search request for `Reference`<br/>\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse the corresponding `GET /search/reference/{searchResultsDbId}` to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
                "responses" : {
                    "200" : {
                        "$ref" : "#/components/responses/ReferenceListResponse"
                    },
                    "202" : {
                        "$ref" : "#/components/responses/202AcceptedSearchResponse"
                    },
                    "400" : {
                        "$ref" : "#/components/responses/400BadRequest"
                    },
                    "401" : {
                        "$ref" : "#/components/responses/401Unauthorized"
                    },
                    "403" : {
                        "$ref" : "#/components/responses/403Forbidden"
                    }
                }
            }
        },
        "/search/referencesets" : {
            "post" : {
                "tags" : [
                    "ReferenceSets"
                ],
                "summary" : "Submit a search request for `ReferenceSet`",
                "description" : "Submit a search request for `ReferenceSet`<br/>\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse the corresponding `GET /search/referenceSet/{searchResultsDbId}` to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
                "responses" : {
                    "200" : {
                        "$ref" : "#/components/responses/ReferenceSetListResponse"
                    },
                    "202" : {
                        "$ref" : "#/components/responses/202AcceptedSearchResponse"
                    },
                    "400" : {
                        "$ref" : "#/components/responses/400BadRequest"
                    },
                    "401" : {
                        "$ref" : "#/components/responses/401Unauthorized"
                    },
                    "403" : {
                        "$ref" : "#/components/responses/403Forbidden"
                    }
                }
            }
        },
        "/search/samples" : {
            "post" : {
                "tags" : [
                    "Samples"
                ],
                "summary" : "Submit a search request for `Sample`",
                "description" : "Submit a search request for `Sample`<br/>\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse the corresponding `GET /search/sample/{searchResultsDbId}` to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
                "responses" : {
                    "200" : {
                        "$ref" : "#/components/responses/SampleListResponse"
                    },
                    "202" : {
                        "$ref" : "#/components/responses/202AcceptedSearchResponse"
                    },
                    "400" : {
                        "$ref" : "#/components/responses/400BadRequest"
                    },
                    "401" : {
                        "$ref" : "#/components/responses/401Unauthorized"
                    },
                    "403" : {
                        "$ref" : "#/components/responses/403Forbidden"
                    }
                }
            }
        },
        "/search/variants" : {
            "post" : {
                "tags" : [
                    "Variants"
                ],
                "summary" : "Submit a search request for `Variant`",
                "description" : "Submit a search request for `Variant`<br/>\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse the corresponding `GET /search/variant/{searchResultsDbId}` to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
                "responses" : {
                    "200" : {
                        "$ref" : "#/components/responses/VariantListResponse"
                    },
                    "202" : {
                        "$ref" : "#/components/responses/202AcceptedSearchResponse"
                    },
                    "400" : {
                        "$ref" : "#/components/responses/400BadRequest"
                    },
                    "401" : {
                        "$ref" : "#/components/responses/401Unauthorized"
                    },
                    "403" : {
                        "$ref" : "#/components/responses/403Forbidden"
                    }
                }
            }
        },
        "/search/variantsets" : {
            "post" : {
                "tags" : [
                    "VariantSets"
                ],
                "summary" : "Submit a search request for `VariantSet`",
                "description" : "Submit a search request for `VariantSet`<br/>\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse the corresponding `GET /search/variantSet/{searchResultsDbId}` to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
                "responses" : {
                    "200" : {
                        "$ref" : "#/components/responses/VariantSetListResponse"
                    },
                    "202" : {
                        "$ref" : "#/components/responses/202AcceptedSearchResponse"
                    },
                    "400" : {
                        "$ref" : "#/components/responses/400BadRequest"
                    },
                    "401" : {
                        "$ref" : "#/components/responses/401Unauthorized"
                    },
                    "403" : {
                        "$ref" : "#/components/responses/403Forbidden"
                    }
                }
            }
        },
        "/search/allelematrix/{searchResultsDbId}" : {
            "get" : {
                "tags" : [
                    "AlleleMatrix"
                ],
                "summary" : "Submit a search request for `AlleleMatrix`<br/>\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse the corresponding `GET /search/alleleMatrix/{searchResultsDbId}` to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
                "description" : "Get the results of a `AlleleMatrix` search request <br/>\nClients should submit a search request using the corresponding `POST /search/alleleMatrix` endpoint.\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse this endpoint to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
                "responses" : {
                    "200" : {
                        "$ref" : "#/components/responses/AlleleMatrixListResponse"
                    },
                    "400" : {
                        "$ref" : "#/components/responses/400BadRequest"
                    },
                    "401" : {
                        "$ref" : "#/components/responses/401Unauthorized"
                    },
                    "403" : {
                        "$ref" : "#/components/responses/403Forbidden"
                    }
                }
            }
        },
        "/search/calls/{searchResultsDbId}" : {
            "get" : {
                "tags" : [
                    "Calls"
                ],
                "summary" : "Submit a search request for `Call`<br/>\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse the corresponding `GET /search/call/{searchResultsDbId}` to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
                "description" : "Get the results of a `Call` search request <br/>\nClients should submit a search request using the corresponding `POST /search/call` endpoint.\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse this endpoint to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
                "responses" : {
                    "200" : {
                        "$ref" : "#/components/responses/CallListResponse"
                    },
                    "400" : {
                        "$ref" : "#/components/responses/400BadRequest"
                    },
                    "401" : {
                        "$ref" : "#/components/responses/401Unauthorized"
                    },
                    "403" : {
                        "$ref" : "#/components/responses/403Forbidden"
                    }
                }
            }
        },
        "/search/callsets/{searchResultsDbId}" : {
            "get" : {
                "tags" : [
                    "CallSets"
                ],
                "summary" : "Submit a search request for `CallSet`<br/>\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse the corresponding `GET /search/callSet/{searchResultsDbId}` to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
                "description" : "Get the results of a `CallSet` search request <br/>\nClients should submit a search request using the corresponding `POST /search/callSet` endpoint.\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse this endpoint to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
                "responses" : {
                    "200" : {
                        "$ref" : "#/components/responses/CallSetListResponse"
                    },
                    "400" : {
                        "$ref" : "#/components/responses/400BadRequest"
                    },
                    "401" : {
                        "$ref" : "#/components/responses/401Unauthorized"
                    },
                    "403" : {
                        "$ref" : "#/components/responses/403Forbidden"
                    }
                }
            }
        },
        "/search/markerpositions/{searchResultsDbId}" : {
            "get" : {
                "tags" : [
                    "MarkerPositions"
                ],
                "summary" : "Submit a search request for `MarkerPosition`<br/>\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse the corresponding `GET /search/markerPosition/{searchResultsDbId}` to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
                "description" : "Get the results of a `MarkerPosition` search request <br/>\nClients should submit a search request using the corresponding `POST /search/markerPosition` endpoint.\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse this endpoint to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
                "responses" : {
                    "200" : {
                        "$ref" : "#/components/responses/MarkerPositionListResponse"
                    },
                    "400" : {
                        "$ref" : "#/components/responses/400BadRequest"
                    },
                    "401" : {
                        "$ref" : "#/components/responses/401Unauthorized"
                    },
                    "403" : {
                        "$ref" : "#/components/responses/403Forbidden"
                    }
                }
            }
        },
        "/search/plates/{searchResultsDbId}" : {
            "get" : {
                "tags" : [
                    "Plates"
                ],
                "summary" : "Submit a search request for `Plate`<br/>\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse the corresponding `GET /search/plate/{searchResultsDbId}` to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
                "description" : "Get the results of a `Plate` search request <br/>\nClients should submit a search request using the corresponding `POST /search/plate` endpoint.\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse this endpoint to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
                "responses" : {
                    "200" : {
                        "$ref" : "#/components/responses/PlateListResponse"
                    },
                    "400" : {
                        "$ref" : "#/components/responses/400BadRequest"
                    },
                    "401" : {
                        "$ref" : "#/components/responses/401Unauthorized"
                    },
                    "403" : {
                        "$ref" : "#/components/responses/403Forbidden"
                    }
                }
            }
        },
        "/search/references/{searchResultsDbId}" : {
            "get" : {
                "tags" : [
                    "References"
                ],
                "summary" : "Submit a search request for `Reference`<br/>\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse the corresponding `GET /search/reference/{searchResultsDbId}` to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
                "description" : "Get the results of a `Reference` search request <br/>\nClients should submit a search request using the corresponding `POST /search/reference` endpoint.\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse this endpoint to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
                "responses" : {
                    "200" : {
                        "$ref" : "#/components/responses/ReferenceListResponse"
                    },
                    "400" : {
                        "$ref" : "#/components/responses/400BadRequest"
                    },
                    "401" : {
                        "$ref" : "#/components/responses/401Unauthorized"
                    },
                    "403" : {
                        "$ref" : "#/components/responses/403Forbidden"
                    }
                }
            }
        },
        "/search/referencesets/{searchResultsDbId}" : {
            "get" : {
                "tags" : [
                    "ReferenceSets"
                ],
                "summary" : "Submit a search request for `ReferenceSet`<br/>\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse the corresponding `GET /search/referenceSet/{searchResultsDbId}` to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
                "description" : "Get the results of a `ReferenceSet` search request <br/>\nClients should submit a search request using the corresponding `POST /search/referenceSet` endpoint.\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse this endpoint to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
                "responses" : {
                    "200" : {
                        "$ref" : "#/components/responses/ReferenceSetListResponse"
                    },
                    "400" : {
                        "$ref" : "#/components/responses/400BadRequest"
                    },
                    "401" : {
                        "$ref" : "#/components/responses/401Unauthorized"
                    },
                    "403" : {
                        "$ref" : "#/components/responses/403Forbidden"
                    }
                }
            }
        },
        "/search/samples/{searchResultsDbId}" : {
            "get" : {
                "tags" : [
                    "Samples"
                ],
                "summary" : "Submit a search request for `Sample`<br/>\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse the corresponding `GET /search/sample/{searchResultsDbId}` to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
                "description" : "Get the results of a `Sample` search request <br/>\nClients should submit a search request using the corresponding `POST /search/sample` endpoint.\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse this endpoint to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
                "responses" : {
                    "200" : {
                        "$ref" : "#/components/responses/SampleListResponse"
                    },
                    "400" : {
                        "$ref" : "#/components/responses/400BadRequest"
                    },
                    "401" : {
                        "$ref" : "#/components/responses/401Unauthorized"
                    },
                    "403" : {
                        "$ref" : "#/components/responses/403Forbidden"
                    }
                }
            }
        },
        "/search/variants/{searchResultsDbId}" : {
            "get" : {
                "tags" : [
                    "Variants"
                ],
                "summary" : "Submit a search request for `Variant`<br/>\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse the corresponding `GET /search/variant/{searchResultsDbId}` to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
                "description" : "Get the results of a `Variant` search request <br/>\nClients should submit a search request using the corresponding `POST /search/variant` endpoint.\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse this endpoint to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
                "responses" : {
                    "200" : {
                        "$ref" : "#/components/responses/VariantListResponse"
                    },
                    "400" : {
                        "$ref" : "#/components/responses/400BadRequest"
                    },
                    "401" : {
                        "$ref" : "#/components/responses/401Unauthorized"
                    },
                    "403" : {
                        "$ref" : "#/components/responses/403Forbidden"
                    }
                }
            }
        },
        "/search/variantsets/{searchResultsDbId}" : {
            "get" : {
                "tags" : [
                    "VariantSets"
                ],
                "summary" : "Submit a search request for `VariantSet`<br/>\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse the corresponding `GET /search/variantSet/{searchResultsDbId}` to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
                "description" : "Get the results of a `VariantSet` search request <br/>\nClients should submit a search request using the corresponding `POST /search/variantSet` endpoint.\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse this endpoint to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
                "responses" : {
                    "200" : {
                        "$ref" : "#/components/responses/VariantSetListResponse"
                    },
                    "400" : {
                        "$ref" : "#/components/responses/400BadRequest"
                    },
                    "401" : {
                        "$ref" : "#/components/responses/401Unauthorized"
                    },
                    "403" : {
                        "$ref" : "#/components/responses/403Forbidden"
                    }
                }
            }
        }
    },
    "components" : {
        "schemas" : {
            "AdditionalInfo" : {
                "type" : "object",
                "properties" : {
                    "additionalProperties" : {
                        "type" : "string"
                    }
                },
                "description" : "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification."
            },
            "AlleleMatrix" : {
                "required" : [
                    "callSetDbIds",
                    "variantSetDbIds"
                ],
                "type" : "object",
                "properties" : {
                    "callSetDbIds" : {
                        "type" : "array",
                        "items" : {
                            "type" : "string"
                        }
                    },
                    "expandHomozygotes" : {
                        "type" : "boolean"
                    },
                    "sepPhased" : {
                        "type" : "string"
                    },
                    "sepUnphased" : {
                        "type" : "string"
                    },
                    "unknownString" : {
                        "type" : "string"
                    },
                    "variantDbIds" : {
                        "type" : "array",
                        "items" : {
                            "type" : "string"
                        }
                    },
                    "variantSetDbIds" : {
                        "type" : "array",
                        "items" : {
                            "type" : "string"
                        }
                    }
                }
            },
            "AlleleMatrixSearchRequest" : {
                "type" : "object",
                "properties" : {
                    "expandHomozygotes" : {
                        "type" : "boolean"
                    },
                    "preview" : {
                        "type" : "boolean"
                    },
                    "sepPhased" : {
                        "type" : "string"
                    },
                    "sepUnphased" : {
                        "type" : "string"
                    },
                    "unknownString" : {
                        "type" : "string"
                    }
                }
            },
            "Attribute" : {
                "required" : [
                    "attributeName",
                    "method",
                    "scale",
                    "trait"
                ],
                "type" : "object",
                "properties" : {
                    "additionalInfo" : {
                        "$ref" : "#/components/schemas/AdditionalInfo"
                    },
                    "attributeCategory" : {
                        "type" : "string"
                    },
                    "attributeDbId" : {
                        "type" : "string"
                    },
                    "attributeDescription" : {
                        "type" : "string"
                    },
                    "attributeName" : {
                        "type" : "string"
                    },
                    "attributePUI" : {
                        "type" : "string"
                    },
                    "commonCropName" : {
                        "type" : "string"
                    },
                    "contextOfUse" : {
                        "type" : "array",
                        "items" : {
                            "type" : "string"
                        }
                    },
                    "defaultValue" : {
                        "type" : "string"
                    },
                    "documentationURL" : {
                        "type" : "string"
                    },
                    "externalReferences" : {
                        "type" : "array",
                        "items" : {
                            "$ref" : "#/components/schemas/ExternalReference"
                        }
                    },
                    "growthStage" : {
                        "type" : "string"
                    },
                    "institution" : {
                        "type" : "string"
                    },
                    "language" : {
                        "type" : "string"
                    },
                    "method" : {
                        "$ref" : "#/components/schemas/Method"
                    },
                    "ontologyReference" : {
                        "$ref" : "#/components/schemas/OntologyReference"
                    },
                    "scale" : {
                        "$ref" : "#/components/schemas/Scale"
                    },
                    "scientist" : {
                        "type" : "string"
                    },
                    "status" : {
                        "type" : "string"
                    },
                    "submissionTimestamp" : {
                        "type" : "string"
                    },
                    "synonyms" : {
                        "type" : "array",
                        "items" : {
                            "type" : "string"
                        }
                    },
                    "trait" : {
                        "$ref" : "#/components/schemas/Trait"
                    }
                }
            },
            "Call" : {
                "required" : [
                    "callSetDbId",
                    "variantDbId",
                    "variantSetDbId"
                ],
                "type" : "object",
                "properties" : {
                    "additionalInfo" : {
                        "$ref" : "#/components/schemas/AdditionalInfo"
                    },
                    "callSetDbId" : {
                        "type" : "string"
                    },
                    "callSetName" : {
                        "type" : "string"
                    },
                    "genotypeValue" : {
                        "type" : "string"
                    },
                    "phaseSet" : {
                        "type" : "string"
                    },
                    "variantDbId" : {
                        "type" : "string"
                    },
                    "variantSetDbId" : {
                        "type" : "string"
                    },
                    "variantSetName" : {
                        "type" : "string"
                    }
                }
            },
            "CallSearchRequest" : {
                "type" : "object",
                "properties" : {
                    "expandHomozygotes" : {
                        "type" : "boolean"
                    },
                    "sepPhased" : {
                        "type" : "string"
                    },
                    "sepUnphased" : {
                        "type" : "string"
                    },
                    "unknownString" : {
                        "type" : "string"
                    }
                }
            },
            "CallSet" : {
                "required" : [
                    "callSetDbId"
                ],
                "type" : "object",
                "properties" : {
                    "additionalInfo" : {
                        "$ref" : "#/components/schemas/AdditionalInfo"
                    },
                    "callSetDbId" : {
                        "type" : "string"
                    },
                    "callSetName" : {
                        "type" : "string"
                    },
                    "created" : {
                        "type" : "string"
                    },
                    "sampleDbId" : {
                        "type" : "string"
                    },
                    "sampleName" : {
                        "type" : "string"
                    },
                    "samplePUI" : {
                        "type" : "string"
                    },
                    "studyDbId" : {
                        "type" : "string"
                    },
                    "studyName" : {
                        "type" : "string"
                    },
                    "studyPUI" : {
                        "type" : "string"
                    },
                    "updated" : {
                        "type" : "string"
                    },
                    "variantSetDbIds" : {
                        "type" : "array",
                        "items" : {
                            "type" : "string"
                        }
                    }
                }
            },
            "CallSetSearchRequest" : {
                "type" : "object",
                "properties" : { }
            },
            "Contact" : {
                "required" : [
                    "contactDbId"
                ],
                "type" : "object",
                "properties" : {
                    "contactDbId" : {
                        "type" : "string"
                    },
                    "email" : {
                        "type" : "string"
                    },
                    "instituteName" : {
                        "type" : "string"
                    },
                    "name" : {
                        "type" : "string"
                    },
                    "orcid" : {
                        "type" : "string"
                    },
                    "type" : {
                        "type" : "string"
                    }
                }
            },
            "ContentTypes" : {
                "type" : "string",
                "enum" : [
                    "application/json",
                    "text/csv",
                    "text/tsv",
                    "application/flapjack"
                ]
            },
            "Context" : {
                "title" : "context",
                "type" : "array",
                "description" : "The JSON-LD Context is used to provide JSON-LD definitions to each field in a JSON object. By providing an array of context file urls, a BrAPI response object becomes JSON-LD compatible.  \n\nFor more information, see https://w3c.github.io/json-ld-syntax/#the-context",
                "example" : [
                    "https://brapi.org/jsonld/context/metadata.jsonld"
                ],
                "items" : {
                    "type" : "string",
                    "format" : "uri"
                }
            },
            "CrossParent" : {
                "type" : "object",
                "properties" : {
                    "germplasm" : {
                        "$ref" : "#/components/schemas/Germplasm"
                    },
                    "observationUnit" : {
                        "$ref" : "#/components/schemas/ObservationUnit"
                    },
                    "parentType" : {
                        "type" : "string",
                        "description" : "The type of parent ex. 'MALE', 'FEMALE', 'SELF', 'POPULATION', etc.",
                        "enum" : [
                            "MALE",
                            "FEMALE",
                            "SELF",
                            "POPULATION"
                        ]
                    }
                }
            },
            "ExternalReference" : {
                "type" : "object",
                "properties" : {
                    "referenceId" : {
                        "type" : "string"
                    },
                    "referenceSource" : {
                        "type" : "string"
                    }
                }
            },
            "GenomeMap" : {
                "required" : [
                    "commonCropName",
                    "mapDbId",
                    "type"
                ],
                "type" : "object",
                "properties" : {
                    "additionalInfo" : {
                        "$ref" : "#/components/schemas/AdditionalInfo"
                    },
                    "comments" : {
                        "type" : "string"
                    },
                    "commonCropName" : {
                        "type" : "string"
                    },
                    "documentationURL" : {
                        "type" : "string"
                    },
                    "linkageGroupCount" : {
                        "type" : "integer",
                        "format" : "int32"
                    },
                    "mapDbId" : {
                        "type" : "string"
                    },
                    "mapName" : {
                        "type" : "string"
                    },
                    "mapPUI" : {
                        "type" : "string"
                    },
                    "markerCount" : {
                        "type" : "integer",
                        "format" : "int32"
                    },
                    "publishedDate" : {
                        "type" : "string"
                    },
                    "scientificName" : {
                        "type" : "string"
                    },
                    "type" : {
                        "type" : "string"
                    },
                    "unit" : {
                        "type" : "string"
                    }
                }
            },
            "GeoJSON" : {
                "type" : "object",
                "properties" : {
                    "geometry" : {
                        "$ref" : "#/components/schemas/GeoJSONGeometry"
                    },
                    "type" : {
                        "type" : "string"
                    }
                },
                "description" : "One geometry as defined by GeoJSON (RFC 7946). All coordinates are decimal values on the WGS84 geographic coordinate reference system.\n\nCopied from RFC 7946 Section 3.1.1\n\nA position is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or\neasting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element."
            },
            "GeoJSONGeometry" : {
                "oneOf" : [
                    {
                        "required" : [
                            "coordinateDbIds",
                            "type"
                        ],
                        "type" : "object",
                        "properties" : {
                            "coordinates" : {
                                "type" : "array",
                                "items" : {
                                    "type" : "number"
                                }
                            },
                            "type" : {
                                "type" : "string"
                            }
                        },
                        "description" : "Copied from RFC 7946 Section 3.1.1\n\nA position is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or\neasting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element."
                    },
                    {
                        "required" : [
                            "coordinateDbIds",
                            "type"
                        ],
                        "type" : "object",
                        "properties" : {
                            "coordinates" : {
                                "type" : "array",
                                "items" : {
                                    "type" : "array",
                                    "items" : {
                                        "type" : "array",
                                        "items" : {
                                            "type" : "number"
                                        }
                                    }
                                }
                            },
                            "type" : {
                                "type" : "string"
                            }
                        },
                        "description" : "An array of Linear Rings. Each Linear Ring is an array of Points. \n\nA Point is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or\neasting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element."
                    }
                ]
            },
            "GeoJSONSearchArea" : {
                "type" : "object",
                "properties" : {
                    "geometry" : {
                        "$ref" : "#/components/schemas/GeoJSONGeometry"
                    },
                    "type" : {
                        "type" : "string"
                    }
                }
            },
            "Germplasm" : {
                "required" : [
                    "commonCropName",
                    "germplasmDbId",
                    "germplasmName",
                    "germplasmPUI"
                ],
                "type" : "object",
                "properties" : {
                    "accessionNumber" : {
                        "type" : "string"
                    },
                    "acquisitionDate" : {
                        "type" : "string"
                    },
                    "additionalInfo" : {
                        "$ref" : "#/components/schemas/AdditionalInfo"
                    },
                    "biologicalStatusOfAccessionCode" : {
                        "type" : "string",
                        "description" : "MCPD (v2.1) (SAMPSTAT) 19. The coding scheme proposed can be used at 3 different levels of detail: either by using the general codes such as 100, 200, 300, 400, or by using the more specific codes such as 110, 120, etc. \n\n100) Wild \n110) Natural \n120) Semi-natural/wild \n130) Semi-natural/sown \n200) Weedy \n300) Traditional cultivar/landrace \n400) Breeding/research material \n410) Breeders line \n411) Synthetic population \n412) Hybrid \n413) Founder stock/base population \n414) Inbred line (parent of hybrid cultivar) \n415) Segregating population \n416) Clonal selection \n420) Genetic stock \n421) Mutant (e.g. induced/insertion mutants, tilling populations) \n422) Cytogenetic stocks (e.g. chromosome addition/substitution, aneuploids,  amphiploids) \n423) Other genetic stocks (e.g. mapping populations) \n500) Advanced or improved cultivar (conventional breeding methods) \n600) GMO (by genetic engineering) \n999) Other (Elaborate in REMARKS field)",
                        "enum" : [
                            "100",
                            "110",
                            "120",
                            "130",
                            "200",
                            "300",
                            "400",
                            "410",
                            "411",
                            "412",
                            "413",
                            "414",
                            "415",
                            "416",
                            "420",
                            "421",
                            "422",
                            "423",
                            "500",
                            "600",
                            "999"
                        ]
                    },
                    "biologicalStatusOfAccessionDescription" : {
                        "type" : "string"
                    },
                    "breedingMethodDbId" : {
                        "type" : "string"
                    },
                    "breedingMethodName" : {
                        "type" : "string"
                    },
                    "collection" : {
                        "type" : "string"
                    },
                    "commonCropName" : {
                        "type" : "string"
                    },
                    "countryOfOriginCode" : {
                        "type" : "string"
                    },
                    "defaultDisplayName" : {
                        "type" : "string"
                    },
                    "documentationURL" : {
                        "type" : "string"
                    },
                    "genus" : {
                        "type" : "string"
                    },
                    "germplasmDbId" : {
                        "type" : "string"
                    },
                    "germplasmName" : {
                        "type" : "string"
                    },
                    "germplasmPUI" : {
                        "type" : "string"
                    },
                    "germplasmPreprocessing" : {
                        "type" : "string"
                    },
                    "instituteCode" : {
                        "type" : "string"
                    },
                    "instituteName" : {
                        "type" : "string"
                    },
                    "pedigree" : {
                        "type" : "string"
                    },
                    "pedigreeNode" : {
                        "$ref" : "#/components/schemas/PedigreeNode"
                    },
                    "sampleDbIds" : {
                        "type" : "array",
                        "items" : {
                            "type" : "string"
                        }
                    },
                    "seedSource" : {
                        "type" : "string"
                    },
                    "seedSourceDescription" : {
                        "type" : "string"
                    },
                    "species" : {
                        "type" : "string"
                    },
                    "speciesAuthority" : {
                        "type" : "string"
                    },
                    "subtaxa" : {
                        "type" : "string"
                    },
                    "subtaxaAuthority" : {
                        "type" : "string"
                    }
                }
            },
            "ListType" : {
                "type" : "string",
                "description" : "The type of objects that are referenced in a List",
                "enum" : [
                    "germplasm",
                    "markers",
                    "variants",
                    "programs",
                    "trials",
                    "studies",
                    "observationUnits",
                    "observations",
                    "observationVariables",
                    "samples"
                ]
            },
            "MarkerPosition" : {
                "type" : "object",
                "properties" : {
                    "additionalInfo" : {
                        "$ref" : "#/components/schemas/AdditionalInfo"
                    },
                    "linkageGroupName" : {
                        "type" : "string"
                    },
                    "mapDbId" : {
                        "type" : "string"
                    },
                    "mapName" : {
                        "type" : "string"
                    },
                    "mapPUI" : {
                        "type" : "string"
                    },
                    "position" : {
                        "type" : "integer",
                        "format" : "int32"
                    },
                    "variantDbId" : {
                        "type" : "string"
                    }
                }
            },
            "MarkerPositionSearchRequest" : {
                "type" : "object",
                "properties" : {
                    "maxPosition" : {
                        "type" : "integer",
                        "format" : "int32"
                    },
                    "minPosition" : {
                        "type" : "integer",
                        "format" : "int32"
                    }
                }
            },
            "Method" : {
                "required" : [
                    "methodName"
                ],
                "type" : "object",
                "properties" : {
                    "additionalInfo" : {
                        "$ref" : "#/components/schemas/AdditionalInfo"
                    },
                    "bibliographicalReference" : {
                        "type" : "string"
                    },
                    "description" : {
                        "type" : "string"
                    },
                    "formula" : {
                        "type" : "string"
                    },
                    "methodClass" : {
                        "type" : "string"
                    },
                    "methodDbId" : {
                        "type" : "string"
                    },
                    "methodName" : {
                        "type" : "string"
                    },
                    "methodPUI" : {
                        "type" : "string"
                    },
                    "ontologyReference" : {
                        "$ref" : "#/components/schemas/OntologyReference"
                    }
                }
            },
            "ObservationUnit" : {
                "required" : [
                    "observationUnitDbId"
                ],
                "type" : "object",
                "properties" : {
                    "additionalInfo" : {
                        "$ref" : "#/components/schemas/AdditionalInfo"
                    },
                    "crossDbId" : {
                        "type" : "string"
                    },
                    "crossName" : {
                        "type" : "string"
                    },
                    "germplasmDbId" : {
                        "type" : "string"
                    },
                    "germplasmName" : {
                        "type" : "string"
                    },
                    "germplasmPUI" : {
                        "type" : "string"
                    },
                    "locationDbId" : {
                        "type" : "string"
                    },
                    "locationName" : {
                        "type" : "string"
                    },
                    "observationUnitDbId" : {
                        "type" : "string"
                    },
                    "observationUnitName" : {
                        "type" : "string"
                    },
                    "observationUnitPUI" : {
                        "type" : "string"
                    },
                    "observationUnitPosition" : {
                        "type" : "object",
                        "properties" : {
                            "entryType" : {
                                "type" : "string",
                                "description" : "The type of entry for this observation unit. ex. \"CHECK\", \"TEST\", \"FILLER\"",
                                "enum" : [
                                    "CHECK",
                                    "TEST",
                                    "FILLER"
                                ]
                            },
                            "geoCoordinates" : {
                                "type" : "object",
                                "properties" : {
                                    "geometry" : {
                                        "$ref" : "#/components/schemas/GeoJSONGeometry"
                                    },
                                    "type" : {
                                        "type" : "string"
                                    }
                                },
                                "description" : "One geometry as defined by GeoJSON (RFC 7946). All coordinates are decimal values on the WGS84 geographic coordinate reference system.\n\nCopied from RFC 7946 Section 3.1.1\n\nA position is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or\neasting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element."
                            },
                            "observationLevel" : {
                                "$ref" : "#/components/schemas/ObservationUnitLevel"
                            },
                            "observationLevelRelationships" : {
                                "type" : "array",
                                "items" : {
                                    "$ref" : "#/components/schemas/ObservationUnitLevelRelationship"
                                }
                            },
                            "positionCoordinateX" : {
                                "type" : "string"
                            },
                            "positionCoordinateXType" : {
                                "type" : "string",
                                "description" : "The type of positional coordinate used. Must be one of the following values \n\nLONGITUDE - ISO 6709 standard, WGS84 geodetic datum. See 'Location Coordinate Encoding' for details \n\nLATITUDE - ISO 6709 standard, WGS84 geodetic datum. See 'Location Coordinate Encoding' for details \n\nPLANTED_ROW - The physical planted row number \n\nPLANTED_INDIVIDUAL - The physical counted number, could be independent or within a planted row \n\nGRID_ROW - The row index number of a square grid overlay \n\nGRID_COL - The column index number of a square grid overlay \n\nMEASURED_ROW - The distance in meters from a defined 0-th row \n\nMEASURED_COL - The distance in meters from a defined 0-th column ",
                                "enum" : [
                                    "LONGITUDE",
                                    "LATITUDE",
                                    "PLANTED_ROW",
                                    "PLANTED_INDIVIDUAL",
                                    "GRID_ROW",
                                    "GRID_COL",
                                    "MEASURED_ROW",
                                    "MEASURED_COL"
                                ]
                            },
                            "positionCoordinateY" : {
                                "type" : "string"
                            },
                            "positionCoordinateYType" : {
                                "type" : "string",
                                "description" : "The type of positional coordinate used. Must be one of the following values \n\nLONGITUDE - ISO 6709 standard, WGS84 geodetic datum. See 'Location Coordinate Encoding' for details \n\nLATITUDE - ISO 6709 standard, WGS84 geodetic datum. See 'Location Coordinate Encoding' for details \n\nPLANTED_ROW - The physical planted row number  \n\nPLANTED_INDIVIDUAL - The physical counted number, could be independent or within a planted row \n\nGRID_ROW - The row index number of a square grid overlay \n\nGRID_COL - The column index number of a square grid overlay \n\nMEASURED_ROW - The distance in meters from a defined 0-th row \n\nMEASURED_COL - The distance in meters from a defined 0-th column ",
                                "enum" : [
                                    "LONGITUDE",
                                    "LATITUDE",
                                    "PLANTED_ROW",
                                    "PLANTED_INDIVIDUAL",
                                    "GRID_ROW",
                                    "GRID_COL",
                                    "MEASURED_ROW",
                                    "MEASURED_COL"
                                ]
                            }
                        },
                        "description" : "All positional and layout information related to this Observation Unit \n\nMIAPPE V1.1 (DM-73) Spatial distribution - Type and value of a spatial coordinate (georeference or relative) \nor level of observation (plot 45, subblock 7, block 2) provided as a key-value pair of the form type:value. \nLevels of observation must be consistent with those listed in the Study section."
                    },
                    "programDbId" : {
                        "type" : "string"
                    },
                    "programName" : {
                        "type" : "string"
                    },
                    "seedLotDbId" : {
                        "type" : "string"
                    },
                    "seedLotName" : {
                        "type" : "string"
                    },
                    "studyDbId" : {
                        "type" : "string"
                    },
                    "studyName" : {
                        "type" : "string"
                    },
                    "studyPUI" : {
                        "type" : "string"
                    },
                    "trialDbId" : {
                        "type" : "string"
                    },
                    "trialName" : {
                        "type" : "string"
                    },
                    "trialPUI" : {
                        "type" : "string"
                    }
                }
            },
            "Ontology" : {
                "required" : [
                    "ontologyDbId",
                    "ontologyName"
                ],
                "type" : "object",
                "properties" : {
                    "additionalInfo" : {
                        "$ref" : "#/components/schemas/AdditionalInfo"
                    },
                    "authors" : {
                        "type" : "string"
                    },
                    "copyright" : {
                        "type" : "string"
                    },
                    "description" : {
                        "type" : "string"
                    },
                    "documentationURL" : {
                        "type" : "string"
                    },
                    "licence" : {
                        "type" : "string"
                    },
                    "ontologyDbId" : {
                        "type" : "string"
                    },
                    "ontologyName" : {
                        "type" : "string"
                    },
                    "version" : {
                        "type" : "string"
                    }
                }
            },
            "OntologyReference" : {
                "required" : [
                    "ontology"
                ],
                "type" : "object",
                "properties" : {
                    "documentationLinks" : {
                        "type" : "array",
                        "items" : {
                            "type" : "object",
                            "properties" : {
                                "URL" : {
                                    "type" : "string"
                                },
                                "type" : {
                                    "type" : "string",
                                    "enum" : [
                                        "OBO",
                                        "RDF",
                                        "WEBPAGE"
                                    ]
                                }
                            }
                        }
                    },
                    "ontology" : {
                        "$ref" : "#/components/schemas/Ontology"
                    },
                    "version" : {
                        "type" : "string"
                    }
                }
            },
            "PedigreeNode" : {
                "required" : [
                    "germplasmDbId",
                    "germplasmName",
                    "germplasmPUI"
                ],
                "type" : "object",
                "properties" : {
                    "additionalInfo" : {
                        "$ref" : "#/components/schemas/AdditionalInfo"
                    },
                    "breedingMethodDbId" : {
                        "type" : "string"
                    },
                    "breedingMethodName" : {
                        "type" : "string"
                    },
                    "crossingProjectDbId" : {
                        "type" : "string"
                    },
                    "crossingProjectName" : {
                        "type" : "string"
                    },
                    "crossingYear" : {
                        "type" : "integer",
                        "format" : "int32"
                    },
                    "defaultDisplayName" : {
                        "type" : "string"
                    },
                    "familyCode" : {
                        "type" : "string"
                    },
                    "germplasmDbId" : {
                        "type" : "string"
                    },
                    "germplasmName" : {
                        "type" : "string"
                    },
                    "germplasmPUI" : {
                        "type" : "string"
                    },
                    "pedigreeString" : {
                        "type" : "string"
                    },
                    "siblingDbIds" : {
                        "type" : "array",
                        "items" : {
                            "type" : "string"
                        }
                    }
                }
            },
            "Plate" : {
                "required" : [
                    "plateDbId",
                    "plateName"
                ],
                "type" : "object",
                "properties" : {
                    "additionalInfo" : {
                        "$ref" : "#/components/schemas/AdditionalInfo"
                    },
                    "plateBarcode" : {
                        "type" : "string"
                    },
                    "plateFormat" : {
                        "type" : "string",
                        "description" : "Enum for plate formats, usually \"PLATE_96\" for a 96 well plate or \"TUBES\" for plateless format",
                        "enum" : [
                            "PLATE_96",
                            "TUBES"
                        ]
                    },
                    "plateName" : {
                        "type" : "string"
                    },
                    "programDbId" : {
                        "type" : "string"
                    },
                    "programName" : {
                        "type" : "string"
                    },
                    "sampleType" : {
                        "type" : "string",
                        "description" : "The type of samples taken. ex. 'DNA', 'RNA', 'Tissue', etc",
                        "enum" : [
                            "DNA",
                            "RNA",
                            "TISSUE",
                            "MIXED"
                        ]
                    },
                    "studyDbId" : {
                        "type" : "string"
                    },
                    "studyName" : {
                        "type" : "string"
                    },
                    "studyPUI" : {
                        "type" : "string"
                    },
                    "trialDbId" : {
                        "type" : "string"
                    },
                    "trialName" : {
                        "type" : "string"
                    },
                    "trialPUI" : {
                        "type" : "string"
                    }
                }
            },
            "PlateNewRequest" : {
                "required" : [
                    "plateDbId",
                    "plateName"
                ],
                "type" : "object",
                "properties" : {
                    "additionalInfo" : {
                        "$ref" : "#/components/schemas/AdditionalInfo"
                    },
                    "plateBarcode" : {
                        "type" : "string"
                    },
                    "plateDbId" : {
                        "type" : "string"
                    },
                    "plateFormat" : {
                        "type" : "string",
                        "description" : "Enum for plate formats, usually \"PLATE_96\" for a 96 well plate or \"TUBES\" for plateless format",
                        "enum" : [
                            "PLATE_96",
                            "TUBES"
                        ]
                    },
                    "plateName" : {
                        "type" : "string"
                    },
                    "programDbId" : {
                        "type" : "string"
                    },
                    "programName" : {
                        "type" : "string"
                    },
                    "sampleType" : {
                        "type" : "string",
                        "description" : "The type of samples taken. ex. 'DNA', 'RNA', 'Tissue', etc",
                        "enum" : [
                            "DNA",
                            "RNA",
                            "TISSUE",
                            "MIXED"
                        ]
                    },
                    "studyDbId" : {
                        "type" : "string"
                    },
                    "studyName" : {
                        "type" : "string"
                    },
                    "studyPUI" : {
                        "type" : "string"
                    },
                    "trialDbId" : {
                        "type" : "string"
                    },
                    "trialName" : {
                        "type" : "string"
                    },
                    "trialPUI" : {
                        "type" : "string"
                    }
                }
            },
            "PlateSearchRequest" : {
                "type" : "object",
                "properties" : { }
            },
            "Reference" : {
                "required" : [
                    "referenceDbId",
                    "referenceName"
                ],
                "type" : "object",
                "properties" : {
                    "additionalInfo" : {
                        "$ref" : "#/components/schemas/AdditionalInfo"
                    },
                    "commonCropName" : {
                        "type" : "string"
                    },
                    "isDerived" : {
                        "type" : "boolean"
                    },
                    "length" : {
                        "type" : "integer",
                        "format" : "int32"
                    },
                    "md5checksum" : {
                        "type" : "string"
                    },
                    "referenceDbId" : {
                        "type" : "string"
                    },
                    "referenceName" : {
                        "type" : "string"
                    },
                    "referenceSetDbId" : {
                        "type" : "string"
                    },
                    "referenceSetName" : {
                        "type" : "string"
                    },
                    "sourceDivergence" : {
                        "type" : "number"
                    },
                    "sourceURI" : {
                        "type" : "string"
                    },
                    "species" : {
                        "type" : "object",
                        "properties" : {
                            "term" : {
                                "type" : "string"
                            },
                            "termURI" : {
                                "type" : "string"
                            }
                        },
                        "description" : "An ontology term describing an attribute."
                    },
                    "variantDbIds" : {
                        "type" : "array",
                        "items" : {
                            "type" : "string"
                        }
                    }
                }
            },
            "ReferenceSearchRequest" : {
                "type" : "object",
                "properties" : {
                    "isDerived" : {
                        "type" : "boolean"
                    },
                    "maxLength" : {
                        "type" : "integer",
                        "format" : "int32"
                    },
                    "minLength" : {
                        "type" : "integer",
                        "format" : "int32"
                    }
                }
            },
            "ReferenceSet" : {
                "required" : [
                    "referenceSetDbId",
                    "referenceSetName"
                ],
                "type" : "object",
                "properties" : {
                    "additionalInfo" : {
                        "$ref" : "#/components/schemas/AdditionalInfo"
                    },
                    "assemblyPUI" : {
                        "type" : "string"
                    },
                    "commonCropName" : {
                        "type" : "string"
                    },
                    "description" : {
                        "type" : "string"
                    },
                    "isDerived" : {
                        "type" : "boolean"
                    },
                    "md5checksum" : {
                        "type" : "string"
                    },
                    "referenceDbIds" : {
                        "type" : "array",
                        "items" : {
                            "type" : "string"
                        }
                    },
                    "referenceSetName" : {
                        "type" : "string"
                    },
                    "sourceURI" : {
                        "type" : "string"
                    },
                    "species" : {
                        "type" : "object",
                        "properties" : {
                            "term" : {
                                "type" : "string"
                            },
                            "termURI" : {
                                "type" : "string"
                            }
                        },
                        "description" : "An ontology term describing an attribute."
                    },
                    "variantDbIds" : {
                        "type" : "array",
                        "items" : {
                            "type" : "string"
                        }
                    },
                    "variantSetDbIds" : {
                        "type" : "array",
                        "items" : {
                            "type" : "string"
                        }
                    }
                }
            },
            "ReferenceSetNewRequest" : {
                "required" : [
                    "referenceSetDbId",
                    "referenceSetDbId",
                    "referenceSetName"
                ],
                "type" : "object",
                "properties" : {
                    "additionalInfo" : {
                        "$ref" : "#/components/schemas/AdditionalInfo"
                    },
                    "assemblyPUI" : {
                        "type" : "string"
                    },
                    "commonCropName" : {
                        "type" : "string"
                    },
                    "description" : {
                        "type" : "string"
                    },
                    "isDerived" : {
                        "type" : "boolean"
                    },
                    "md5checksum" : {
                        "type" : "string"
                    },
                    "referenceDbIds" : {
                        "type" : "array",
                        "items" : {
                            "type" : "string"
                        }
                    },
                    "referenceSetDbId" : {
                        "type" : "string"
                    },
                    "referenceSetName" : {
                        "type" : "string"
                    },
                    "sourceURI" : {
                        "type" : "string"
                    },
                    "species" : {
                        "type" : "object",
                        "properties" : {
                            "term" : {
                                "type" : "string"
                            },
                            "termURI" : {
                                "type" : "string"
                            }
                        },
                        "description" : "An ontology term describing an attribute."
                    },
                    "variantDbIds" : {
                        "type" : "array",
                        "items" : {
                            "type" : "string"
                        }
                    },
                    "variantSetDbIds" : {
                        "type" : "array",
                        "items" : {
                            "type" : "string"
                        }
                    }
                }
            },
            "ReferenceSetSearchRequest" : {
                "type" : "object",
                "properties" : { }
            },
            "Sample" : {
                "required" : [
                    "sampleDbId",
                    "sampleName"
                ],
                "type" : "object",
                "properties" : {
                    "additionalInfo" : {
                        "$ref" : "#/components/schemas/AdditionalInfo"
                    },
                    "callSetDbIds" : {
                        "type" : "array",
                        "items" : {
                            "type" : "string"
                        }
                    },
                    "column" : {
                        "type" : "integer",
                        "format" : "int32"
                    },
                    "germplasmDbId" : {
                        "type" : "string"
                    },
                    "germplasmName" : {
                        "type" : "string"
                    },
                    "germplasmPUI" : {
                        "type" : "string"
                    },
                    "observationUnitDbId" : {
                        "type" : "string"
                    },
                    "observationUnitName" : {
                        "type" : "string"
                    },
                    "observationUnitPUI" : {
                        "type" : "string"
                    },
                    "plateDbId" : {
                        "type" : "string"
                    },
                    "plateName" : {
                        "type" : "string"
                    },
                    "programDbId" : {
                        "type" : "string"
                    },
                    "programName" : {
                        "type" : "string"
                    },
                    "row" : {
                        "type" : "string"
                    },
                    "sampleBarcode" : {
                        "type" : "string"
                    },
                    "sampleDescription" : {
                        "type" : "string"
                    },
                    "sampleGroupId" : {
                        "type" : "string"
                    },
                    "sampleName" : {
                        "type" : "string"
                    },
                    "samplePUI" : {
                        "type" : "string"
                    },
                    "sampleTimestamp" : {
                        "type" : "string"
                    },
                    "sampleType" : {
                        "type" : "string"
                    },
                    "studyDbId" : {
                        "type" : "string"
                    },
                    "studyName" : {
                        "type" : "string"
                    },
                    "studyPUI" : {
                        "type" : "string"
                    },
                    "takenBy" : {
                        "type" : "string"
                    },
                    "tissueType" : {
                        "type" : "string"
                    },
                    "trialDbId" : {
                        "type" : "string"
                    },
                    "trialName" : {
                        "type" : "string"
                    },
                    "trialPUI" : {
                        "type" : "string"
                    },
                    "well" : {
                        "type" : "string"
                    }
                }
            },
            "SampleNewRequest" : {
                "required" : [
                    "sampleDbId",
                    "sampleName"
                ],
                "type" : "object",
                "properties" : {
                    "additionalInfo" : {
                        "$ref" : "#/components/schemas/AdditionalInfo"
                    },
                    "callSetDbIds" : {
                        "type" : "array",
                        "items" : {
                            "type" : "string"
                        }
                    },
                    "column" : {
                        "type" : "integer",
                        "format" : "int32"
                    },
                    "germplasmDbId" : {
                        "type" : "string"
                    },
                    "germplasmName" : {
                        "type" : "string"
                    },
                    "germplasmPUI" : {
                        "type" : "string"
                    },
                    "observationUnitDbId" : {
                        "type" : "string"
                    },
                    "observationUnitName" : {
                        "type" : "string"
                    },
                    "observationUnitPUI" : {
                        "type" : "string"
                    },
                    "plateDbId" : {
                        "type" : "string"
                    },
                    "plateName" : {
                        "type" : "string"
                    },
                    "programDbId" : {
                        "type" : "string"
                    },
                    "programName" : {
                        "type" : "string"
                    },
                    "row" : {
                        "type" : "string"
                    },
                    "sampleBarcode" : {
                        "type" : "string"
                    },
                    "sampleDbId" : {
                        "type" : "string"
                    },
                    "sampleDescription" : {
                        "type" : "string"
                    },
                    "sampleGroupId" : {
                        "type" : "string"
                    },
                    "sampleName" : {
                        "type" : "string"
                    },
                    "samplePUI" : {
                        "type" : "string"
                    },
                    "sampleTimestamp" : {
                        "type" : "string"
                    },
                    "sampleType" : {
                        "type" : "string"
                    },
                    "studyDbId" : {
                        "type" : "string"
                    },
                    "studyName" : {
                        "type" : "string"
                    },
                    "studyPUI" : {
                        "type" : "string"
                    },
                    "takenBy" : {
                        "type" : "string"
                    },
                    "tissueType" : {
                        "type" : "string"
                    },
                    "trialDbId" : {
                        "type" : "string"
                    },
                    "trialName" : {
                        "type" : "string"
                    },
                    "trialPUI" : {
                        "type" : "string"
                    },
                    "well" : {
                        "type" : "string"
                    }
                }
            },
            "SampleSearchRequest" : {
                "type" : "object",
                "properties" : { }
            },
            "Scale" : {
                "required" : [
                    "scaleDbId",
                    "scaleName"
                ],
                "type" : "object",
                "properties" : {
                    "additionalInfo" : {
                        "$ref" : "#/components/schemas/AdditionalInfo"
                    },
                    "dataType" : {
                        "type" : "string",
                        "description" : "<p>Class of the scale, entries can be</p>\n<p>\"Code\" -  This scale class is exceptionally used to express complex traits. Code is a nominal scale that combines the expressions of the different traits composing the complex trait. For example a severity trait might be expressed by a 2 digit and 2 character code. The first 2 digits are the percentage of the plant covered by a fungus and the 2 characters refer to the delay in development, e.g. \"75VD\" means \"75 %\" of the plant is infected and the plant is very delayed.</p>\n<p>\"Date\" - The date class is for events expressed in a time format, See ISO 8601</p>\n<p>\"Duration\" - The Duration class is for time elapsed between two events expressed in a time format, e.g. days, hours, months</p>\n<p>\"Nominal\" - Categorical scale that can take one of a limited and fixed number of categories. There is no intrinsic ordering to the categories</p>\n<p>\"Numerical\" - Numerical scales express the trait with real numbers. The numerical scale defines the unit e.g. centimeter, ton per hectare, branches</p>\n<p>\"Ordinal\" - Ordinal scales are scales composed of ordered categories</p>\n<p>\"Text\" - A free text is used to express the trait.</p>",
                        "enum" : [
                            "Code",
                            "Date",
                            "Duration",
                            "Nominal",
                            "Numerical",
                            "Ordinal",
                            "Text"
                        ]
                    },
                    "decimalPlaces" : {
                        "type" : "integer",
                        "format" : "int32"
                    },
                    "ontologyReference" : {
                        "$ref" : "#/components/schemas/OntologyReference"
                    },
                    "scaleDbId" : {
                        "type" : "string"
                    },
                    "scaleName" : {
                        "type" : "string"
                    },
                    "scalePUI" : {
                        "type" : "string"
                    },
                    "units" : {
                        "type" : "string"
                    },
                    "validValues" : {
                        "type" : "object",
                        "properties" : {
                            "categories" : {
                                "type" : "array",
                                "items" : {
                                    "type" : "object",
                                    "properties" : {
                                        "label" : {
                                            "type" : "string"
                                        },
                                        "value" : {
                                            "type" : "string"
                                        }
                                    }
                                }
                            },
                            "maximumValue" : {
                                "type" : "string"
                            },
                            "minimumValue" : {
                                "type" : "string"
                            }
                        }
                    }
                }
            },
            "Trait" : {
                "required" : [
                    "traitName"
                ],
                "type" : "object",
                "properties" : {
                    "additionalInfo" : {
                        "$ref" : "#/components/schemas/AdditionalInfo"
                    },
                    "attribute" : {
                        "type" : "string"
                    },
                    "attributePUI" : {
                        "type" : "string"
                    },
                    "entity" : {
                        "type" : "string"
                    },
                    "entityPUI" : {
                        "type" : "string"
                    },
                    "mainAbbreviation" : {
                        "type" : "string"
                    },
                    "ontologyReference" : {
                        "$ref" : "#/components/schemas/OntologyReference"
                    },
                    "status" : {
                        "type" : "string"
                    },
                    "traitClass" : {
                        "type" : "string"
                    },
                    "traitDbId" : {
                        "type" : "string"
                    },
                    "traitDescription" : {
                        "type" : "string"
                    },
                    "traitName" : {
                        "type" : "string"
                    },
                    "traitPUI" : {
                        "type" : "string"
                    }
                }
            },
            "TraitDataType" : {
                "type" : "string",
                "description" : "<p>Class of the scale, entries can be</p>\n<p>\"Code\" -  This scale class is exceptionally used to express complex traits. Code is a nominal scale that combines the expressions of the different traits composing the complex trait. For example a severity trait might be expressed by a 2 digit and 2 character code. The first 2 digits are the percentage of the plant covered by a fungus and the 2 characters refer to the delay in development, e.g. \"75VD\" means \"75 %\" of the plant is infected and the plant is very delayed.</p>\n<p>\"Date\" - The date class is for events expressed in a time format, See ISO 8601</p>\n<p>\"Duration\" - The Duration class is for time elapsed between two events expressed in a time format, e.g. days, hours, months</p>\n<p>\"Nominal\" - Categorical scale that can take one of a limited and fixed number of categories. There is no intrinsic ordering to the categories</p>\n<p>\"Numerical\" - Numerical scales express the trait with real numbers. The numerical scale defines the unit e.g. centimeter, ton per hectare, branches</p>\n<p>\"Ordinal\" - Ordinal scales are scales composed of ordered categories</p>\n<p>\"Text\" - A free text is used to express the trait.</p>",
                "enum" : [
                    "Code",
                    "Date",
                    "Duration",
                    "Nominal",
                    "Numerical",
                    "Ordinal",
                    "Text"
                ]
            },
            "Variable" : {
                "required" : [
                    "method",
                    "scale",
                    "trait"
                ],
                "type" : "object",
                "properties" : {
                    "additionalInfo" : {
                        "$ref" : "#/components/schemas/AdditionalInfo"
                    },
                    "commonCropName" : {
                        "type" : "string"
                    },
                    "contextOfUse" : {
                        "type" : "array",
                        "items" : {
                            "type" : "string"
                        }
                    },
                    "defaultValue" : {
                        "type" : "string"
                    },
                    "documentationURL" : {
                        "type" : "string"
                    },
                    "externalReferences" : {
                        "type" : "array",
                        "items" : {
                            "$ref" : "#/components/schemas/ExternalReference"
                        }
                    },
                    "growthStage" : {
                        "type" : "string"
                    },
                    "institution" : {
                        "type" : "string"
                    },
                    "language" : {
                        "type" : "string"
                    },
                    "method" : {
                        "$ref" : "#/components/schemas/Method"
                    },
                    "ontologyReference" : {
                        "$ref" : "#/components/schemas/OntologyReference"
                    },
                    "scale" : {
                        "$ref" : "#/components/schemas/Scale"
                    },
                    "scientist" : {
                        "type" : "string"
                    },
                    "status" : {
                        "type" : "string"
                    },
                    "submissionTimestamp" : {
                        "type" : "string"
                    },
                    "synonyms" : {
                        "type" : "array",
                        "items" : {
                            "type" : "string"
                        }
                    },
                    "trait" : {
                        "$ref" : "#/components/schemas/Trait"
                    }
                }
            },
            "Variant" : {
                "required" : [
                    "variantDbId"
                ],
                "type" : "object",
                "properties" : {
                    "additionalInfo" : {
                        "$ref" : "#/components/schemas/AdditionalInfo"
                    },
                    "created" : {
                        "type" : "string"
                    },
                    "end" : {
                        "type" : "integer",
                        "format" : "int32"
                    },
                    "filtersApplied" : {
                        "type" : "boolean"
                    },
                    "filtersPassed" : {
                        "type" : "boolean"
                    },
                    "referenceBases" : {
                        "type" : "string"
                    },
                    "referenceDbId" : {
                        "type" : "string"
                    },
                    "referenceName" : {
                        "type" : "string"
                    },
                    "referenceSetDbId" : {
                        "type" : "string"
                    },
                    "referenceSetName" : {
                        "type" : "string"
                    },
                    "start" : {
                        "type" : "integer",
                        "format" : "int32"
                    },
                    "svlen" : {
                        "type" : "integer",
                        "format" : "int32"
                    },
                    "updated" : {
                        "type" : "string"
                    },
                    "variantDbId" : {
                        "type" : "string"
                    },
                    "variantSetDbId" : {
                        "type" : "string"
                    },
                    "variantSetName" : {
                        "type" : "string"
                    },
                    "variantType" : {
                        "type" : "string"
                    }
                }
            },
            "VariantSearchRequest" : {
                "type" : "object",
                "properties" : {
                    "end" : {
                        "type" : "integer",
                        "format" : "int32"
                    },
                    "referenceDbId" : {
                        "type" : "string"
                    },
                    "start" : {
                        "type" : "integer",
                        "format" : "int32"
                    }
                }
            },
            "VariantSet" : {
                "required" : [
                    "variantSetDbId"
                ],
                "type" : "object",
                "properties" : {
                    "additionalInfo" : {
                        "$ref" : "#/components/schemas/AdditionalInfo"
                    },
                    "analysiDbIds" : {
                        "type" : "array",
                        "items" : {
                            "type" : "string"
                        }
                    },
                    "callSetCount" : {
                        "type" : "integer",
                        "format" : "int32"
                    },
                    "referenceSetDbId" : {
                        "type" : "string"
                    },
                    "referenceSetName" : {
                        "type" : "string"
                    },
                    "studyDbId" : {
                        "type" : "string"
                    },
                    "studyName" : {
                        "type" : "string"
                    },
                    "studyPUI" : {
                        "type" : "string"
                    },
                    "variantCount" : {
                        "type" : "integer",
                        "format" : "int32"
                    },
                    "variantSetDbId" : {
                        "type" : "string"
                    },
                    "variantSetName" : {
                        "type" : "string"
                    }
                }
            },
            "VariantSetSearchRequest" : {
                "type" : "object",
                "properties" : { }
            },
            "basePagination" : {
                "required" : [
                    "currentPage",
                    "pageSize"
                ],
                "type" : "object",
                "properties" : {
                    "currentPage" : {
                        "type" : "integer",
                        "description" : "The index number for the returned page of data. This should always match the requested page number or the default page (0).",
                        "example" : 0,
                        "default" : 0
                    },
                    "pageSize" : {
                        "type" : "integer",
                        "description" : "The number of data elements returned, aka the size of the current page. If the requested page does not have enough elements to fill a page at the requested page size, this field should indicate the actual number of elements returned.",
                        "example" : 1000,
                        "default" : 1000
                    },
                    "totalCount" : {
                        "type" : "integer",
                        "description" : "The total number of elements that are available on the server and match the requested query parameters.",
                        "example" : 10
                    },
                    "totalPages" : {
                        "type" : "integer",
                        "description" : "The total number of pages of elements available on the server. This should be calculated with the following formula. \n<br> totalPages = CEILING( totalCount / requested_page_size)",
                        "example" : 1
                    }
                },
                "description" : "The pagination object is applicable only when the payload contains a \"data\" key. It describes the pagination of the data contained in the \"data\" array, as a way to identify which subset of data is being returned. \n<br> Pages are zero indexed, so the first page will be page 0 (zero)."
            },
            "dataFile" : {
                "required" : [
                    "fileURL"
                ],
                "type" : "object",
                "properties" : {
                    "fileURL" : {
                        "type" : "string",
                        "description" : "The absolute URL where the file is located",
                        "format" : "uri",
                        "example" : "https://wiki.brapi.org/examples/datafile.xlsx"
                    },
                    "fileName" : {
                        "type" : "string",
                        "description" : "The name of the file",
                        "example" : "datafile.xlsx"
                    },
                    "fileSize" : {
                        "type" : "integer",
                        "description" : "The size of the file in bytes",
                        "example" : 4398
                    },
                    "fileDescription" : {
                        "type" : "string",
                        "description" : "A human readable description of the file contents",
                        "example" : "This is an Excel data file"
                    },
                    "fileType" : {
                        "type" : "string",
                        "description" : "The type or format of the file. Preferably MIME Type.",
                        "example" : "application/vnd.ms-excel"
                    },
                    "fileMD5Hash" : {
                        "type" : "string",
                        "description" : "The MD5 Hash of the file contents to be used as a check sum",
                        "example" : "c2365e900c81a89cf74d83dab60df146"
                    }
                },
                "description" : "A dataFile contains a URL and the relevant file metadata to represent a file"
            },
            "metadata" : {
                "allOf" : [
                    {
                        "$ref" : "#/components/schemas/metadataBase"
                    },
                    {
                        "type" : "object",
                        "properties" : {
                            "pagination" : {
                                "$ref" : "#/components/schemas/basePagination"
                            }
                        }
                    }
                ]
            },
            "metadataBase" : {
                "type" : "object",
                "properties" : {
                    "datafiles" : {
                        "type" : "array",
                        "description" : "The datafiles contains a list of file URLs and metadata. \nThese files contain additional information related to the returned object and can be retrieved by a subsequent call. \nThis could be a supplementary data file, an informational file, the uploaded file where the data originated from, a generated file representing the whole dataset in a particular format, or any other related file. ",
                        "example" : [ ],
                        "items" : {
                            "$ref" : "#/components/schemas/dataFile"
                        }
                    },
                    "status" : {
                        "type" : "array",
                        "description" : "The status field contains a list of informational status messages from the server. \nIf no status is reported, an empty list should be returned. See Error Reporting for more information.",
                        "items" : {
                            "$ref" : "#/components/schemas/status"
                        }
                    }
                },
                "description" : "An object in the BrAPI standard response model that describes some information about the service call being performed. This includes supplementary data, status log messages, and pagination information."
            },
            "metadataTokenPagination" : {
                "allOf" : [
                    {
                        "$ref" : "#/components/schemas/metadataBase"
                    },
                    {
                        "type" : "object",
                        "properties" : {
                            "pagination" : {
                                "$ref" : "#/components/schemas/tokenPagination"
                            }
                        }
                    }
                ]
            },
            "status" : {
                "required" : [
                    "message",
                    "messageType"
                ],
                "type" : "object",
                "properties" : {
                    "message" : {
                        "type" : "string",
                        "description" : "A short message concerning the status of this request/response",
                        "example" : "Request accepted, response successful"
                    },
                    "messageType" : {
                        "type" : "string",
                        "description" : "The logging level for the attached message",
                        "example" : "INFO",
                        "enum" : [
                            "DEBUG",
                            "ERROR",
                            "WARNING",
                            "INFO"
                        ]
                    }
                },
                "description" : "An array of status messages to convey technical logging information from the server to the client."
            },
            "tokenPagination" : {
                "allOf" : [
                    {
                        "$ref" : "#/components/schemas/basePagination"
                    },
                    {
                        "required" : [
                            "nextPageToken"
                        ],
                        "type" : "object",
                        "properties" : {
                            "nextPageToken" : {
                                "type" : "string",
                                "description" : "**Deprecated in v2.1** Please use `page`. Github issue number #451 \n<br>The string token used to query the next page of data.",
                                "example" : "cb668f63",
                                "deprecated" : true
                            },
                            "currentPageToken" : {
                                "type" : "string",
                                "description" : "**Deprecated in v2.1** Please use `page`. Github issue number #451 \n<br>The string token used to query the current page of data.",
                                "example" : "48bc6ac1",
                                "deprecated" : true
                            },
                            "prevPageToken" : {
                                "type" : "string",
                                "description" : "**Deprecated in v2.1** Please use `page`. Github issue number #451 \n<br>The string token used to query the previous page of data.",
                                "example" : "9659857e",
                                "deprecated" : true
                            }
                        },
                        "description" : "**Deprecated in v2.1** Please use `page`. Github issue number #451 \n<br>The pagination object is applicable only when the payload contains a \"data\" key. It describes the pagination of the data contained in the \"data\" array, as a way to identify which subset of data is being returned. \n<br>Tokenized pages are for large data sets which can not be efficiently broken into indexed pages. Use the nextPageToken and prevPageToken to construct an additional query and move to the next or previous page respectively.  ",
                        "example" : {
                            "currentPage" : 0,
                            "pageSize" : 1000,
                            "totalCount" : 10,
                            "totalPages" : 1
                        }
                    }
                ]
            }
        },
        "responses" : {
            "ObservationVariableSingleResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "ObservationVariableSingleResponse",
                            "required" : [
                                "metadata",
                                "result"
                            ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "$ref" : "#/components/schemas/ObservationVariable"
                                }
                            }
                        }
                    }
                }
            },
            "SeedLotSingleResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "SeedLotSingleResponse",
                            "required" : [
                                "metadata",
                                "result"
                            ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "$ref" : "#/components/schemas/SeedLot"
                                }
                            }
                        }
                    }
                }
            },
            "VariantSingleResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "VariantSingleResponse",
                            "required" : [
                                "metadata",
                                "result"
                            ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "$ref" : "#/components/schemas/Variant"
                                }
                            }
                        }
                    }
                }
            },
            "202AcceptedSearchResponse" : {
                "description" : "Accepted",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "202AcceptedSearchResponse",
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "type" : "object",
                                    "properties" : {
                                        "searchResultsDbId" : {
                                            "type" : "string",
                                            "example" : "551ae08c"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "StudySingleResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "StudySingleResponse",
                            "required" : [
                                "metadata",
                                "result"
                            ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "$ref" : "#/components/schemas/Study"
                                }
                            }
                        }
                    }
                }
            },
            "MarkerPositionListResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "MarkerPositionListResponse",
                            "required" : [
                                "metadata",
                                "result"
                            ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "required" : [
                                        "data"
                                    ],
                                    "type" : "object",
                                    "properties" : {
                                        "data" : {
                                            "type" : "array",
                                            "items" : {
                                                "$ref" : "#/components/schemas/MarkerPosition"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "TrialListResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "TrialListResponse",
                            "required" : [
                                "metadata",
                                "result"
                            ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "required" : [
                                        "data"
                                    ],
                                    "type" : "object",
                                    "properties" : {
                                        "data" : {
                                            "type" : "array",
                                            "items" : {
                                                "$ref" : "#/components/schemas/Trial"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "MethodSingleResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "MethodSingleResponse",
                            "required" : [
                                "metadata",
                                "result"
                            ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "$ref" : "#/components/schemas/Method"
                                }
                            }
                        }
                    }
                }
            },
            "SeedLotListResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "SeedLotListResponse",
                            "required" : [
                                "metadata",
                                "result"
                            ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "required" : [
                                        "data"
                                    ],
                                    "type" : "object",
                                    "properties" : {
                                        "data" : {
                                            "type" : "array",
                                            "items" : {
                                                "$ref" : "#/components/schemas/SeedLot"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "VariantSetListResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "VariantSetListResponse",
                            "required" : [
                                "metadata",
                                "result"
                            ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "required" : [
                                        "data"
                                    ],
                                    "type" : "object",
                                    "properties" : {
                                        "data" : {
                                            "type" : "array",
                                            "items" : {
                                                "$ref" : "#/components/schemas/VariantSet"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "SampleSingleResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "SampleSingleResponse",
                            "required" : [
                                "metadata",
                                "result"
                            ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "$ref" : "#/components/schemas/Sample"
                                }
                            }
                        }
                    }
                }
            },
            "CallSetListResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "CallSetListResponse",
                            "required" : [
                                "metadata",
                                "result"
                            ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "required" : [
                                        "data"
                                    ],
                                    "type" : "object",
                                    "properties" : {
                                        "data" : {
                                            "type" : "array",
                                            "items" : {
                                                "$ref" : "#/components/schemas/CallSet"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "CallSetSingleResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "CallSetSingleResponse",
                            "required" : [
                                "metadata",
                                "result"
                            ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "$ref" : "#/components/schemas/CallSet"
                                }
                            }
                        }
                    }
                }
            },
            "VariantSetSingleResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "VariantSetSingleResponse",
                            "required" : [
                                "metadata",
                                "result"
                            ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "$ref" : "#/components/schemas/VariantSet"
                                }
                            }
                        }
                    }
                }
            },
            "ReferenceSetSingleResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "ReferenceSetSingleResponse",
                            "required" : [
                                "metadata",
                                "result"
                            ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "$ref" : "#/components/schemas/ReferenceSet"
                                }
                            }
                        }
                    }
                }
            },
            "ObservationVariableListResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "ObservationVariableListResponse",
                            "required" : [
                                "metadata",
                                "result"
                            ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "required" : [
                                        "data"
                                    ],
                                    "type" : "object",
                                    "properties" : {
                                        "data" : {
                                            "type" : "array",
                                            "items" : {
                                                "$ref" : "#/components/schemas/ObservationVariable"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "CrossListResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "CrossListResponse",
                            "required" : [
                                "metadata",
                                "result"
                            ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "required" : [
                                        "data"
                                    ],
                                    "type" : "object",
                                    "properties" : {
                                        "data" : {
                                            "type" : "array",
                                            "items" : {
                                                "$ref" : "#/components/schemas/Cross"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "ImageSingleResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "ImageSingleResponse",
                            "required" : [
                                "metadata",
                                "result"
                            ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "$ref" : "#/components/schemas/Image"
                                }
                            }
                        }
                    }
                }
            },
            "PlateListResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "PlateListResponse",
                            "required" : [
                                "metadata",
                                "result"
                            ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "required" : [
                                        "data"
                                    ],
                                    "type" : "object",
                                    "properties" : {
                                        "data" : {
                                            "type" : "array",
                                            "items" : {
                                                "$ref" : "#/components/schemas/Plate"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "SeasonListResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "SeasonListResponse",
                            "required" : [
                                "metadata",
                                "result"
                            ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "required" : [
                                        "data"
                                    ],
                                    "type" : "object",
                                    "properties" : {
                                        "data" : {
                                            "type" : "array",
                                            "items" : {
                                                "$ref" : "#/components/schemas/Season"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "ObservationUnitListResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "ObservationUnitListResponse",
                            "required" : [
                                "metadata",
                                "result"
                            ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "required" : [
                                        "data"
                                    ],
                                    "type" : "object",
                                    "properties" : {
                                        "data" : {
                                            "type" : "array",
                                            "items" : {
                                                "$ref" : "#/components/schemas/ObservationUnit"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "ReferenceListResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "ReferenceListResponse",
                            "required" : [
                                "metadata",
                                "result"
                            ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "required" : [
                                        "data"
                                    ],
                                    "type" : "object",
                                    "properties" : {
                                        "data" : {
                                            "type" : "array",
                                            "items" : {
                                                "$ref" : "#/components/schemas/Reference"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "ObservationListResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "ObservationListResponse",
                            "required" : [
                                "metadata",
                                "result"
                            ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "required" : [
                                        "data"
                                    ],
                                    "type" : "object",
                                    "properties" : {
                                        "data" : {
                                            "type" : "array",
                                            "items" : {
                                                "$ref" : "#/components/schemas/Observation"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "AlleleMatrixListResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "AlleleMatrixListResponse",
                            "required" : [
                                "metadata",
                                "result"
                            ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "required" : [
                                        "data"
                                    ],
                                    "type" : "object",
                                    "properties" : {
                                        "data" : {
                                            "type" : "array",
                                            "items" : {
                                                "$ref" : "#/components/schemas/AlleleMatrix"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "GenomeMapSingleResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "GenomeMapSingleResponse",
                            "required" : [
                                "metadata",
                                "result"
                            ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "$ref" : "#/components/schemas/GenomeMap"
                                }
                            }
                        }
                    }
                }
            },
            "PersonListResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "PersonListResponse",
                            "required" : [
                                "metadata",
                                "result"
                            ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "required" : [
                                        "data"
                                    ],
                                    "type" : "object",
                                    "properties" : {
                                        "data" : {
                                            "type" : "array",
                                            "items" : {
                                                "$ref" : "#/components/schemas/Person"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "PlannedCrossListResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "PlannedCrossListResponse",
                            "required" : [
                                "metadata",
                                "result"
                            ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "required" : [
                                        "data"
                                    ],
                                    "type" : "object",
                                    "properties" : {
                                        "data" : {
                                            "type" : "array",
                                            "items" : {
                                                "$ref" : "#/components/schemas/PlannedCross"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "LocationListResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "LocationListResponse",
                            "required" : [
                                "metadata",
                                "result"
                            ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "required" : [
                                        "data"
                                    ],
                                    "type" : "object",
                                    "properties" : {
                                        "data" : {
                                            "type" : "array",
                                            "items" : {
                                                "$ref" : "#/components/schemas/Location"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "403Forbidden" : {
                "description" : "Forbidden",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "type" : "string"
                        },
                        "example" : "ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action"
                    }
                }
            },
            "OntologySingleResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "OntologySingleResponse",
                            "required" : [
                                "metadata",
                                "result"
                            ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "$ref" : "#/components/schemas/Ontology"
                                }
                            }
                        }
                    }
                }
            },
            "ProgramListResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "ProgramListResponse",
                            "required" : [
                                "metadata",
                                "result"
                            ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "required" : [
                                        "data"
                                    ],
                                    "type" : "object",
                                    "properties" : {
                                        "data" : {
                                            "type" : "array",
                                            "items" : {
                                                "$ref" : "#/components/schemas/Program"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "ObservationUnitSingleResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "ObservationUnitSingleResponse",
                            "required" : [
                                "metadata",
                                "result"
                            ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "$ref" : "#/components/schemas/ObservationUnit"
                                }
                            }
                        }
                    }
                }
            },
            "ScaleListResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "ScaleListResponse",
                            "required" : [
                                "metadata",
                                "result"
                            ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "required" : [
                                        "data"
                                    ],
                                    "type" : "object",
                                    "properties" : {
                                        "data" : {
                                            "type" : "array",
                                            "items" : {
                                                "$ref" : "#/components/schemas/Scale"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "ListListResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "ListListResponse",
                            "required" : [
                                "metadata",
                                "result"
                            ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "required" : [
                                        "data"
                                    ],
                                    "type" : "object",
                                    "properties" : {
                                        "data" : {
                                            "type" : "array",
                                            "items" : {
                                                "$ref" : "#/components/schemas/List"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "400BadRequest" : {
                "description" : "Bad Request",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "type" : "string"
                        },
                        "example" : "ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object\n\nERROR - 2018-10-08T18:15:11Z - Invalid query parameter\n\nERROR - 2018-10-08T18:15:11Z - Required parameter is missing"
                    }
                }
            },
            "MethodListResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "MethodListResponse",
                            "required" : [
                                "metadata",
                                "result"
                            ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "required" : [
                                        "data"
                                    ],
                                    "type" : "object",
                                    "properties" : {
                                        "data" : {
                                            "type" : "array",
                                            "items" : {
                                                "$ref" : "#/components/schemas/Method"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "CrossingProjectListResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "CrossingProjectListResponse",
                            "required" : [
                                "metadata",
                                "result"
                            ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "required" : [
                                        "data"
                                    ],
                                    "type" : "object",
                                    "properties" : {
                                        "data" : {
                                            "type" : "array",
                                            "items" : {
                                                "$ref" : "#/components/schemas/CrossingProject"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "GermplasmAttributeSingleResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "GermplasmAttributeSingleResponse",
                            "required" : [
                                "metadata",
                                "result"
                            ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "$ref" : "#/components/schemas/GermplasmAttribute"
                                }
                            }
                        }
                    }
                }
            },
            "TraitSingleResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "TraitSingleResponse",
                            "required" : [
                                "metadata",
                                "result"
                            ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "$ref" : "#/components/schemas/Trait"
                                }
                            }
                        }
                    }
                }
            },
            "401Unauthorized" : {
                "description" : "Unauthorized",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "type" : "string"
                        },
                        "example" : "ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token"
                    }
                }
            },
            "GermplasmAttributeListResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "GermplasmAttributeListResponse",
                            "required" : [
                                "metadata",
                                "result"
                            ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "required" : [
                                        "data"
                                    ],
                                    "type" : "object",
                                    "properties" : {
                                        "data" : {
                                            "type" : "array",
                                            "items" : {
                                                "$ref" : "#/components/schemas/GermplasmAttribute"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "GermplasmListResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "GermplasmListResponse",
                            "required" : [
                                "metadata",
                                "result"
                            ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "required" : [
                                        "data"
                                    ],
                                    "type" : "object",
                                    "properties" : {
                                        "data" : {
                                            "type" : "array",
                                            "items" : {
                                                "$ref" : "#/components/schemas/Germplasm"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "CrossingProjectSingleResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "CrossingProjectSingleResponse",
                            "required" : [
                                "metadata",
                                "result"
                            ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "$ref" : "#/components/schemas/CrossingProject"
                                }
                            }
                        }
                    }
                }
            },
            "EventListResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "EventListResponse",
                            "required" : [
                                "metadata",
                                "result"
                            ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "required" : [
                                        "data"
                                    ],
                                    "type" : "object",
                                    "properties" : {
                                        "data" : {
                                            "type" : "array",
                                            "items" : {
                                                "$ref" : "#/components/schemas/Event"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "TraitListResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "TraitListResponse",
                            "required" : [
                                "metadata",
                                "result"
                            ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "required" : [
                                        "data"
                                    ],
                                    "type" : "object",
                                    "properties" : {
                                        "data" : {
                                            "type" : "array",
                                            "items" : {
                                                "$ref" : "#/components/schemas/Trait"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "SampleListResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "SampleListResponse",
                            "required" : [
                                "metadata",
                                "result"
                            ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "required" : [
                                        "data"
                                    ],
                                    "type" : "object",
                                    "properties" : {
                                        "data" : {
                                            "type" : "array",
                                            "items" : {
                                                "$ref" : "#/components/schemas/Sample"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "ReferenceSetListResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "ReferenceSetListResponse",
                            "required" : [
                                "metadata",
                                "result"
                            ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "required" : [
                                        "data"
                                    ],
                                    "type" : "object",
                                    "properties" : {
                                        "data" : {
                                            "type" : "array",
                                            "items" : {
                                                "$ref" : "#/components/schemas/ReferenceSet"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "TrialSingleResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "TrialSingleResponse",
                            "required" : [
                                "metadata",
                                "result"
                            ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "$ref" : "#/components/schemas/Trial"
                                }
                            }
                        }
                    }
                }
            },
            "GermplasmSingleResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "GermplasmSingleResponse",
                            "required" : [
                                "metadata",
                                "result"
                            ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "$ref" : "#/components/schemas/Germplasm"
                                }
                            }
                        }
                    }
                }
            },
            "SeasonSingleResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "SeasonSingleResponse",
                            "required" : [
                                "metadata",
                                "result"
                            ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "$ref" : "#/components/schemas/Season"
                                }
                            }
                        }
                    }
                }
            },
            "ReferenceSingleResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "ReferenceSingleResponse",
                            "required" : [
                                "metadata",
                                "result"
                            ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "$ref" : "#/components/schemas/Reference"
                                }
                            }
                        }
                    }
                }
            },
            "OntologyListResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "OntologyListResponse",
                            "required" : [
                                "metadata",
                                "result"
                            ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "required" : [
                                        "data"
                                    ],
                                    "type" : "object",
                                    "properties" : {
                                        "data" : {
                                            "type" : "array",
                                            "items" : {
                                                "$ref" : "#/components/schemas/Ontology"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "404NotFound" : {
                "description" : "Not Found",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "type" : "string"
                        },
                        "example" : "ERROR - 2018-10-08T18:15:11Z - The requested object DbId is not found"
                    }
                }
            },
            "StudyListResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "StudyListResponse",
                            "required" : [
                                "metadata",
                                "result"
                            ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "required" : [
                                        "data"
                                    ],
                                    "type" : "object",
                                    "properties" : {
                                        "data" : {
                                            "type" : "array",
                                            "items" : {
                                                "$ref" : "#/components/schemas/Study"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "ScaleSingleResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "ScaleSingleResponse",
                            "required" : [
                                "metadata",
                                "result"
                            ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "$ref" : "#/components/schemas/Scale"
                                }
                            }
                        }
                    }
                }
            },
            "BreedingMethodSingleResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "BreedingMethodSingleResponse",
                            "required" : [
                                "metadata",
                                "result"
                            ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "$ref" : "#/components/schemas/BreedingMethod"
                                }
                            }
                        }
                    }
                }
            },
            "CallListResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "CallListResponse",
                            "required" : [
                                "metadata",
                                "result"
                            ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "required" : [
                                        "data"
                                    ],
                                    "type" : "object",
                                    "properties" : {
                                        "data" : {
                                            "type" : "array",
                                            "items" : {
                                                "$ref" : "#/components/schemas/Call"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "LocationSingleResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "LocationSingleResponse",
                            "required" : [
                                "metadata",
                                "result"
                            ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "$ref" : "#/components/schemas/Location"
                                }
                            }
                        }
                    }
                }
            },
            "PersonSingleResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "PersonSingleResponse",
                            "required" : [
                                "metadata",
                                "result"
                            ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "$ref" : "#/components/schemas/Person"
                                }
                            }
                        }
                    }
                }
            },
            "ImageListResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "ImageListResponse",
                            "required" : [
                                "metadata",
                                "result"
                            ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "required" : [
                                        "data"
                                    ],
                                    "type" : "object",
                                    "properties" : {
                                        "data" : {
                                            "type" : "array",
                                            "items" : {
                                                "$ref" : "#/components/schemas/Image"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "VariantListResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "VariantListResponse",
                            "required" : [
                                "metadata",
                                "result"
                            ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "required" : [
                                        "data"
                                    ],
                                    "type" : "object",
                                    "properties" : {
                                        "data" : {
                                            "type" : "array",
                                            "items" : {
                                                "$ref" : "#/components/schemas/Variant"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "PlateSingleResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "PlateSingleResponse",
                            "required" : [
                                "metadata",
                                "result"
                            ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "$ref" : "#/components/schemas/Plate"
                                }
                            }
                        }
                    }
                }
            },
            "GermplasmAttributeValueListResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "GermplasmAttributeValueListResponse",
                            "required" : [
                                "metadata",
                                "result"
                            ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "required" : [
                                        "data"
                                    ],
                                    "type" : "object",
                                    "properties" : {
                                        "data" : {
                                            "type" : "array",
                                            "items" : {
                                                "$ref" : "#/components/schemas/GermplasmAttributeValue"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "BreedingMethodListResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "BreedingMethodListResponse",
                            "required" : [
                                "metadata",
                                "result"
                            ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "required" : [
                                        "data"
                                    ],
                                    "type" : "object",
                                    "properties" : {
                                        "data" : {
                                            "type" : "array",
                                            "items" : {
                                                "$ref" : "#/components/schemas/BreedingMethod"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "GermplasmAttributeValueSingleResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "GermplasmAttributeValueSingleResponse",
                            "required" : [
                                "metadata",
                                "result"
                            ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "$ref" : "#/components/schemas/GermplasmAttributeValue"
                                }
                            }
                        }
                    }
                }
            },
            "GenomeMapListResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "GenomeMapListResponse",
                            "required" : [
                                "metadata",
                                "result"
                            ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "required" : [
                                        "data"
                                    ],
                                    "type" : "object",
                                    "properties" : {
                                        "data" : {
                                            "type" : "array",
                                            "items" : {
                                                "$ref" : "#/components/schemas/GenomeMap"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "PedigreeNodeListResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "PedigreeNodeListResponse",
                            "required" : [
                                "metadata",
                                "result"
                            ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "required" : [
                                        "data"
                                    ],
                                    "type" : "object",
                                    "properties" : {
                                        "data" : {
                                            "type" : "array",
                                            "items" : {
                                                "$ref" : "#/components/schemas/PedigreeNode"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "ObservationSingleResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "ObservationSingleResponse",
                            "required" : [
                                "metadata",
                                "result"
                            ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "$ref" : "#/components/schemas/Observation"
                                }
                            }
                        }
                    }
                }
            },
            "ListSingleResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "ListSingleResponse",
                            "required" : [
                                "metadata",
                                "result"
                            ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "$ref" : "#/components/schemas/List"
                                }
                            }
                        }
                    }
                }
            },
            "ProgramSingleResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "ProgramSingleResponse",
                            "required" : [
                                "metadata",
                                "result"
                            ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "$ref" : "#/components/schemas/Program"
                                }
                            }
                        }
                    }
                }
            }
        },
        "parameters" : {
            "externalReferenceID" : {
                "name" : "externalReferenceID",
                "in" : "query",
                "description" : "**Deprecated in v2.1** Please use `externalReferenceId`. Github issue number #460 \n<br>An external reference ID. Could be a simple string or a URI. (use with `externalReferenceSource` parameter)",
                "required" : false,
                "deprecated" : true,
                "style" : "form",
                "explode" : true,
                "schema" : {
                    "type" : "string"
                }
            },
            "externalReferenceId" : {
                "name" : "externalReferenceId",
                "in" : "query",
                "description" : "An external reference ID. Could be a simple string or a URI. (use with `externalReferenceSource` parameter)",
                "required" : false,
                "style" : "form",
                "explode" : true,
                "schema" : {
                    "type" : "string"
                }
            },
            "externalReferenceSource" : {
                "name" : "externalReferenceSource",
                "in" : "query",
                "description" : "An identifier for the source system or database of an external reference (use with `externalReferenceId` parameter)",
                "required" : false,
                "style" : "form",
                "explode" : true,
                "schema" : {
                    "type" : "string"
                }
            },
            "acceptHeader" : {
                "name" : "Accept",
                "in" : "header",
                "description" : "A standard HTTP request header that is used to request a specific content type (JSON, CSV, etc) which is \"acceptable\" to the client and should be returned by the server",
                "required" : true,
                "style" : "simple",
                "explode" : false,
                "schema" : {
                    "$ref" : "#/components/schemas/ContentTypes"
                },
                "example" : "application/json"
            },
            "searchResultsDbId" : {
                "name" : "searchResultsDbId",
                "in" : "path",
                "description" : "Unique identifier which references the search results",
                "required" : true,
                "style" : "simple",
                "explode" : false,
                "schema" : {
                    "type" : "string"
                }
            },
            "pageSize" : {
                "name" : "pageSize",
                "in" : "query",
                "description" : "The size of the pages to be returned. Default is `1000`.",
                "required" : false,
                "style" : "form",
                "explode" : true,
                "schema" : {
                    "type" : "integer"
                },
                "example" : 1000
            },
            "authorizationHeader" : {
                "name" : "Authorization",
                "in" : "header",
                "description" : "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>",
                "required" : false,
                "style" : "simple",
                "explode" : false,
                "schema" : {
                    "pattern" : "^Bearer .*$",
                    "type" : "string"
                },
                "example" : "Bearer XXXX"
            },
            "page" : {
                "name" : "page",
                "in" : "query",
                "description" : "Used to request a specific page of data to be returned.\n\nThe page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.",
                "required" : false,
                "style" : "form",
                "explode" : true,
                "schema" : {
                    "type" : "integer"
                },
                "example" : "0"
            },
            "pageToken" : {
                "name" : "pageToken",
                "in" : "query",
                "description" : "**Deprecated in v2.1** Please use `page`. Github issue number #451 \n<br> Used to request a specific page of data to be returned.\n<br> Tokenized pages are for large data sets which can not be efficiently broken into indexed pages. Use the nextPageToken and prevPageToken from a prior response to construct a query and move to the next or previous page respectively. ",
                "required" : false,
                "deprecated" : true,
                "style" : "form",
                "explode" : true,
                "schema" : {
                    "type" : "string"
                },
                "example" : "33c27874"
            }
        },
        "securitySchemes" : {
            "AuthorizationToken" : {
                "type" : "http",
                "description" : "OAuth Bearer Token - A valid Bearer token to prove authorization",
                "scheme" : "bearer",
                "bearerFormat" : "nonce token or JWT"
            }
        }
    }
}