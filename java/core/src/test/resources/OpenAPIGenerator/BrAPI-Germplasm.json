{
    "openapi" : "3.0.1",
    "info" : {
        "title" : "BrAPI-Germplasm",
        "version" : "0.0.0"
    },
    "paths" : {
        "/breedingmethods" : {
            "get" : {
                "tags" : [
                    "Germplasm"
                ],
                "summary" : "Get a filtered list of BreedingMethod",
                "description" : "Get a list of BreedingMethod",
                "parameters" : [ ],
                "responses" : {
                    "200" : {
                        "$ref" : "#/components/responses/BreedingMethodListResponse"
                    },
                    "400" : {
                        "$ref" : "#/components/responses/400BadRequest"
                    },
                    "401" : {
                        "$ref" : "#/components/responses/401Unauthorized"
                    },
                    "403" : {
                        "$ref" : "#/components/responses/403Forbidden"
                    }
                }
            }
        },
        "/crosses" : {
            "get" : {
                "tags" : [
                    "Crosses"
                ],
                "summary" : "Get a filtered list of Cross",
                "description" : "Get a list of Cross",
                "parameters" : [
                    {
                        "name" : "commonCropName",
                        "in" : "query",
                        "description" : "The BrAPI Common Crop Name is the simple, generalized, widely accepted name of the organism being researched. It is most often used in multi-crop systems where digital resources need to be divided at a high level. Things like 'Maize', 'Wheat', and 'Rice' are examples of common crop names.\n\nUse this parameter to only return results associated with the given crops. \n\nUse `GET /commoncropnames` to find the list of available crops on a server.",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "programDbId",
                        "in" : "query",
                        "description" : "A BrAPI Program represents the high level organization or group who is responsible for conducting trials and studies. Things like Breeding Programs and Funded Projects are considered BrAPI Programs. \n\nUse this parameter to only return results associated with the given programs. \n\nUse `GET /programs` to find the list of available programs on a server.",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "programName",
                        "in" : "query",
                        "description" : "Use this parameter to only return results associated with the given program names. Program names are not required to be unique.\n\nUse `GET /programs` to find the list of available programs on a server.",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "crossingProjectDbId",
                        "in" : "query",
                        "description" : "Search for Crossing Projects with this unique id",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "crossingProjectName",
                        "in" : "query",
                        "description" : "The human readable name for a crossing project",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "crossDbId",
                        "in" : "query",
                        "description" : "Search for Cross with this unique id",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "crossName",
                        "in" : "query",
                        "description" : "Search for Cross with this human readable name",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "$ref" : "#/components/parameters/externalReferenceID"
                    },
                    {
                        "$ref" : "#/components/parameters/externalReferenceId"
                    },
                    {
                        "$ref" : "#/components/parameters/externalReferenceSource"
                    },
                    {
                        "$ref" : "#/components/parameters/page"
                    },
                    {
                        "$ref" : "#/components/parameters/pageSize"
                    },
                    {
                        "$ref" : "#/components/parameters/authorizationHeader"
                    }
                ],
                "responses" : {
                    "200" : {
                        "$ref" : "#/components/responses/CrossListResponse"
                    },
                    "400" : {
                        "$ref" : "#/components/responses/400BadRequest"
                    },
                    "401" : {
                        "$ref" : "#/components/responses/401Unauthorized"
                    },
                    "403" : {
                        "$ref" : "#/components/responses/403Forbidden"
                    }
                }
            },
            "put" : {
                "tags" : [
                    "Crosses"
                ],
                "summary" : "Update the details for an existing Cross",
                "description" : "Update the details for an existing Cross",
                "parameters" : [
                    {
                        "$ref" : "#/components/parameters/authorizationHeader"
                    }
                ],
                "requestBody" : {
                    "content" : {
                        "application/json" : {
                            "schema" : {
                                "$ref" : "#/components/schemas/CrossNewRequest"
                            }
                        }
                    }
                },
                "responses" : {
                    "200" : {
                        "$ref" : "#/components/responses/CrossListResponse"
                    },
                    "400" : {
                        "$ref" : "#/components/responses/400BadRequest"
                    },
                    "401" : {
                        "$ref" : "#/components/responses/401Unauthorized"
                    },
                    "403" : {
                        "$ref" : "#/components/responses/403Forbidden"
                    }
                }
            },
            "post" : {
                "tags" : [
                    "Crosses"
                ],
                "summary" : "Create new Cross",
                "description" : "Add new Cross to database",
                "parameters" : [
                    {
                        "$ref" : "#/components/parameters/authorizationHeader"
                    }
                ],
                "requestBody" : {
                    "content" : {
                        "application/json" : {
                            "schema" : {
                                "$ref" : "#/components/schemas/CrossNewRequest"
                            }
                        }
                    }
                },
                "responses" : {
                    "200" : {
                        "$ref" : "#/components/responses/CrossListResponse"
                    },
                    "400" : {
                        "$ref" : "#/components/responses/400BadRequest"
                    },
                    "401" : {
                        "$ref" : "#/components/responses/401Unauthorized"
                    },
                    "403" : {
                        "$ref" : "#/components/responses/403Forbidden"
                    }
                }
            }
        },
        "/crossingprojects" : {
            "get" : {
                "tags" : [
                    "CrossingProjects"
                ],
                "summary" : "Get a filtered list of CrossingProject",
                "description" : "Get a list of CrossingProject",
                "parameters" : [
                    {
                        "name" : "commonCropName",
                        "in" : "query",
                        "description" : "The BrAPI Common Crop Name is the simple, generalized, widely accepted name of the organism being researched. It is most often used in multi-crop systems where digital resources need to be divided at a high level. Things like 'Maize', 'Wheat', and 'Rice' are examples of common crop names.\n\nUse this parameter to only return results associated with the given crops. \n\nUse `GET /commoncropnames` to find the list of available crops on a server.",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "programDbId",
                        "in" : "query",
                        "description" : "A BrAPI Program represents the high level organization or group who is responsible for conducting trials and studies. Things like Breeding Programs and Funded Projects are considered BrAPI Programs. \n\nUse this parameter to only return results associated with the given programs. \n\nUse `GET /programs` to find the list of available programs on a server.",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "programName",
                        "in" : "query",
                        "description" : "Use this parameter to only return results associated with the given program names. Program names are not required to be unique.\n\nUse `GET /programs` to find the list of available programs on a server.",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "crossingProjectDbId",
                        "in" : "query",
                        "description" : "Search for Crossing Projects with this unique id",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "crossingProjectName",
                        "in" : "query",
                        "description" : "The human readable name for a crossing project",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "includePotentialParent",
                        "in" : "query",
                        "description" : "If the parameter 'includePotentialParents' is false, the array 'potentialParents' should be empty, null, or excluded from the response object.",
                        "required" : false,
                        "schema" : {
                            "type" : "boolean"
                        }
                    },
                    {
                        "$ref" : "#/components/parameters/externalReferenceID"
                    },
                    {
                        "$ref" : "#/components/parameters/externalReferenceId"
                    },
                    {
                        "$ref" : "#/components/parameters/externalReferenceSource"
                    },
                    {
                        "$ref" : "#/components/parameters/page"
                    },
                    {
                        "$ref" : "#/components/parameters/pageSize"
                    },
                    {
                        "$ref" : "#/components/parameters/authorizationHeader"
                    }
                ],
                "responses" : {
                    "200" : {
                        "$ref" : "#/components/responses/CrossingProjectListResponse"
                    },
                    "400" : {
                        "$ref" : "#/components/responses/400BadRequest"
                    },
                    "401" : {
                        "$ref" : "#/components/responses/401Unauthorized"
                    },
                    "403" : {
                        "$ref" : "#/components/responses/403Forbidden"
                    }
                }
            },
            "post" : {
                "tags" : [
                    "CrossingProjects"
                ],
                "summary" : "Create new CrossingProject",
                "description" : "Add new CrossingProject to database",
                "parameters" : [
                    {
                        "$ref" : "#/components/parameters/authorizationHeader"
                    }
                ],
                "requestBody" : {
                    "content" : {
                        "application/json" : {
                            "schema" : {
                                "$ref" : "#/components/schemas/CrossingProjectNewRequest"
                            }
                        }
                    }
                },
                "responses" : {
                    "200" : {
                        "$ref" : "#/components/responses/CrossingProjectListResponse"
                    },
                    "400" : {
                        "$ref" : "#/components/responses/400BadRequest"
                    },
                    "401" : {
                        "$ref" : "#/components/responses/401Unauthorized"
                    },
                    "403" : {
                        "$ref" : "#/components/responses/403Forbidden"
                    }
                }
            }
        },
        "/germplasm" : {
            "get" : {
                "tags" : [
                    "Germplasm"
                ],
                "summary" : "Get a filtered list of Germplasm",
                "description" : "Get a list of Germplasm",
                "parameters" : [
                    {
                        "name" : "commonCropName",
                        "in" : "query",
                        "description" : "The BrAPI Common Crop Name is the simple, generalized, widely accepted name of the organism being researched. It is most often used in multi-crop systems where digital resources need to be divided at a high level. Things like 'Maize', 'Wheat', and 'Rice' are examples of common crop names.\n\nUse this parameter to only return results associated with the given crops. \n\nUse `GET /commoncropnames` to find the list of available crops on a server.",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "germplasmDbId",
                        "in" : "query",
                        "description" : "List of IDs which uniquely identify germplasm to search for",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "germplasmName",
                        "in" : "query",
                        "description" : "List of human readable names to identify germplasm to search for",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "programDbId",
                        "in" : "query",
                        "description" : "A BrAPI Program represents the high level organization or group who is responsible for conducting trials and studies. Things like Breeding Programs and Funded Projects are considered BrAPI Programs. \n\nUse this parameter to only return results associated with the given programs. \n\nUse `GET /programs` to find the list of available programs on a server.",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "programName",
                        "in" : "query",
                        "description" : "Use this parameter to only return results associated with the given program names. Program names are not required to be unique.\n\nUse `GET /programs` to find the list of available programs on a server.",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "studyDbId",
                        "in" : "query",
                        "description" : "List of study identifiers to search for",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "studyName",
                        "in" : "query",
                        "description" : "List of study names to filter search results",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "trialDbId",
                        "in" : "query",
                        "description" : "The ID which uniquely identifies a trial to search for",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "trialName",
                        "in" : "query",
                        "description" : "The human readable name of a trial to search for",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "germplasmPUI",
                        "in" : "query",
                        "description" : "List of Permanent Unique Identifiers to identify germplasm",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "accessionNumber",
                        "in" : "query",
                        "description" : "A collection of unique identifiers for materials or germplasm within a genebank\n\nMCPD (v2.1) (ACCENUMB) 2. This is the unique identifier for accessions within a genebank, and is assigned when a sample is entered into the genebank collection (e.g. \"PI 113869\").",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "collection",
                        "in" : "query",
                        "description" : "A specific panel/collection/population name this germplasm belongs to.",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "familyCode",
                        "in" : "query",
                        "description" : "A familyCode representing the family this germplasm belongs to.",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "instituteCode",
                        "in" : "query",
                        "description" : "The code for the institute that maintains the material. \n<br/> MCPD (v2.1) (INSTCODE) 1. FAO WIEWS code of the institute where the accession is maintained. The codes consist of the 3-letter ISO 3166 country code of the country where the institute is located plus a number (e.g. PER001). The current set of institute codes is available from http://www.fao.org/wiews. For those institutes not yet having an FAO Code, or for those with \"obsolete\" codes, see \"Common formatting rules (v)\".",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "binomialName",
                        "in" : "query",
                        "description" : "List of the full binomial name (scientific name) to identify a germplasm",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "genu",
                        "in" : "query",
                        "description" : "List of Genus names to identify germplasm",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "specy",
                        "in" : "query",
                        "description" : "List of Species names to identify germplasm",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "synonym",
                        "in" : "query",
                        "description" : "List of alternative names or IDs used to reference this germplasm",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "parentDbId",
                        "in" : "query",
                        "description" : "Search for Germplasm with these parents",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "progenyDbId",
                        "in" : "query",
                        "description" : "Search for Germplasm with these children",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "$ref" : "#/components/parameters/externalReferenceID"
                    },
                    {
                        "$ref" : "#/components/parameters/externalReferenceId"
                    },
                    {
                        "$ref" : "#/components/parameters/externalReferenceSource"
                    },
                    {
                        "$ref" : "#/components/parameters/page"
                    },
                    {
                        "$ref" : "#/components/parameters/pageSize"
                    },
                    {
                        "$ref" : "#/components/parameters/authorizationHeader"
                    }
                ],
                "responses" : {
                    "200" : {
                        "$ref" : "#/components/responses/GermplasmListResponse"
                    },
                    "400" : {
                        "$ref" : "#/components/responses/400BadRequest"
                    },
                    "401" : {
                        "$ref" : "#/components/responses/401Unauthorized"
                    },
                    "403" : {
                        "$ref" : "#/components/responses/403Forbidden"
                    }
                }
            },
            "post" : {
                "tags" : [
                    "Germplasm"
                ],
                "summary" : "Create new Germplasm",
                "description" : "Add new Germplasm to database",
                "parameters" : [
                    {
                        "$ref" : "#/components/parameters/authorizationHeader"
                    }
                ],
                "requestBody" : {
                    "content" : {
                        "application/json" : {
                            "schema" : {
                                "$ref" : "#/components/schemas/GermplasmNewRequest"
                            }
                        }
                    }
                },
                "responses" : {
                    "200" : {
                        "$ref" : "#/components/responses/GermplasmListResponse"
                    },
                    "400" : {
                        "$ref" : "#/components/responses/400BadRequest"
                    },
                    "401" : {
                        "$ref" : "#/components/responses/401Unauthorized"
                    },
                    "403" : {
                        "$ref" : "#/components/responses/403Forbidden"
                    }
                }
            }
        },
        "/attributes" : {
            "get" : {
                "tags" : [
                    "GermplasmAttributes"
                ],
                "summary" : "Get a filtered list of GermplasmAttribute",
                "description" : "Get a list of GermplasmAttribute",
                "parameters" : [
                    {
                        "name" : "germplasmDbId",
                        "in" : "query",
                        "description" : "List of IDs which uniquely identify germplasm to search for",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "commonCropName",
                        "in" : "query",
                        "description" : "The BrAPI Common Crop Name is the simple, generalized, widely accepted name of the organism being researched. It is most often used in multi-crop systems where digital resources need to be divided at a high level. Things like 'Maize', 'Wheat', and 'Rice' are examples of common crop names.\n\nUse this parameter to only return results associated with the given crops. \n\nUse `GET /commoncropnames` to find the list of available crops on a server.",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "programDbId",
                        "in" : "query",
                        "description" : "A BrAPI Program represents the high level organization or group who is responsible for conducting trials and studies. Things like Breeding Programs and Funded Projects are considered BrAPI Programs. \n\nUse this parameter to only return results associated with the given programs. \n\nUse `GET /programs` to find the list of available programs on a server.",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "methodDbId",
                        "in" : "query",
                        "description" : "List of methods to filter search results",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "methodName",
                        "in" : "query",
                        "description" : "Human readable name for the method\n<br/>MIAPPE V1.1 (DM-88) Method  Name of the method of observation",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "methodPUI",
                        "in" : "query",
                        "description" : "The Permanent Unique Identifier of a Method, usually in the form of a URI",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "scaleDbId",
                        "in" : "query",
                        "description" : "The unique identifier for a Scale",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "scaleName",
                        "in" : "query",
                        "description" : "Name of the scale\n<br/>MIAPPE V1.1 (DM-92) Scale Name of the scale associated with the variable",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "scalePUI",
                        "in" : "query",
                        "description" : "The Permanent Unique Identifier of a Scale, usually in the form of a URI",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "traitDbId",
                        "in" : "query",
                        "description" : "The unique identifier for a Trait",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "traitName",
                        "in" : "query",
                        "description" : "The human readable name of a trait\n<br/>MIAPPE V1.1 (DM-86) Trait - Name of the (plant or environmental) trait under observation",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "traitPUI",
                        "in" : "query",
                        "description" : "The Permanent Unique Identifier of a Trait, usually in the form of a URI",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "attributeDbId",
                        "in" : "query",
                        "description" : "List of Germplasm Attribute IDs to search for",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "attributeName",
                        "in" : "query",
                        "description" : "List of human readable Germplasm Attribute names to search for",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "attributePUI",
                        "in" : "query",
                        "description" : "The Permanent Unique Identifier of an Attribute, usually in the form of a URI",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "attributeCategory",
                        "in" : "query",
                        "description" : "General category for the attribute. very similar to Trait class.",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "$ref" : "#/components/parameters/externalReferenceID"
                    },
                    {
                        "$ref" : "#/components/parameters/externalReferenceId"
                    },
                    {
                        "$ref" : "#/components/parameters/externalReferenceSource"
                    },
                    {
                        "$ref" : "#/components/parameters/page"
                    },
                    {
                        "$ref" : "#/components/parameters/pageSize"
                    },
                    {
                        "$ref" : "#/components/parameters/authorizationHeader"
                    }
                ],
                "responses" : {
                    "200" : {
                        "$ref" : "#/components/responses/GermplasmAttributeListResponse"
                    },
                    "400" : {
                        "$ref" : "#/components/responses/400BadRequest"
                    },
                    "401" : {
                        "$ref" : "#/components/responses/401Unauthorized"
                    },
                    "403" : {
                        "$ref" : "#/components/responses/403Forbidden"
                    }
                }
            },
            "post" : {
                "tags" : [
                    "GermplasmAttributes"
                ],
                "summary" : "Create new GermplasmAttribute",
                "description" : "Add new GermplasmAttribute to database",
                "parameters" : [
                    {
                        "$ref" : "#/components/parameters/authorizationHeader"
                    }
                ],
                "requestBody" : {
                    "content" : {
                        "application/json" : {
                            "schema" : {
                                "$ref" : "#/components/schemas/GermplasmAttributeNewRequest"
                            }
                        }
                    }
                },
                "responses" : {
                    "200" : {
                        "$ref" : "#/components/responses/GermplasmAttributeListResponse"
                    },
                    "400" : {
                        "$ref" : "#/components/responses/400BadRequest"
                    },
                    "401" : {
                        "$ref" : "#/components/responses/401Unauthorized"
                    },
                    "403" : {
                        "$ref" : "#/components/responses/403Forbidden"
                    }
                }
            }
        },
        "/attributevalues" : {
            "get" : {
                "tags" : [
                    "GermplasmAttributeValues"
                ],
                "summary" : "Get a filtered list of GermplasmAttributeValue",
                "description" : "Get a list of GermplasmAttributeValue",
                "parameters" : [
                    {
                        "name" : "commonCropName",
                        "in" : "query",
                        "description" : "The BrAPI Common Crop Name is the simple, generalized, widely accepted name of the organism being researched. It is most often used in multi-crop systems where digital resources need to be divided at a high level. Things like 'Maize', 'Wheat', and 'Rice' are examples of common crop names.\n\nUse this parameter to only return results associated with the given crops. \n\nUse `GET /commoncropnames` to find the list of available crops on a server.",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "germplasmDbId",
                        "in" : "query",
                        "description" : "List of IDs which uniquely identify germplasm to search for",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "germplasmName",
                        "in" : "query",
                        "description" : "List of human readable names to identify germplasm to search for",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "programDbId",
                        "in" : "query",
                        "description" : "A BrAPI Program represents the high level organization or group who is responsible for conducting trials and studies. Things like Breeding Programs and Funded Projects are considered BrAPI Programs. \n\nUse this parameter to only return results associated with the given programs. \n\nUse `GET /programs` to find the list of available programs on a server.",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "programName",
                        "in" : "query",
                        "description" : "Use this parameter to only return results associated with the given program names. Program names are not required to be unique.\n\nUse `GET /programs` to find the list of available programs on a server.",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "attributeValueDbId",
                        "in" : "query",
                        "description" : "List of Germplasm Attribute Value IDs to search for",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "attributeDbId",
                        "in" : "query",
                        "description" : "List of Germplasm Attribute IDs to search for",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "attributeName",
                        "in" : "query",
                        "description" : "List of human readable Germplasm Attribute names to search for",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "ontologyDbId",
                        "in" : "query",
                        "description" : "List of ontology IDs to search for",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "methodDbId",
                        "in" : "query",
                        "description" : "List of methods to filter search results",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "scaleDbId",
                        "in" : "query",
                        "description" : "List of scales to filter search results",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "traitDbId",
                        "in" : "query",
                        "description" : "List of trait unique ID to filter search results",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "traitClass",
                        "in" : "query",
                        "description" : "List of trait classes to filter search results",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "dataType",
                        "in" : "query",
                        "description" : "List of scale data types to filter search results",
                        "required" : false,
                        "schema" : {
                            "$ref" : "#/components/schemas/TraitDataType"
                        }
                    },
                    {
                        "$ref" : "#/components/parameters/externalReferenceID"
                    },
                    {
                        "$ref" : "#/components/parameters/externalReferenceId"
                    },
                    {
                        "$ref" : "#/components/parameters/externalReferenceSource"
                    },
                    {
                        "$ref" : "#/components/parameters/page"
                    },
                    {
                        "$ref" : "#/components/parameters/pageSize"
                    },
                    {
                        "$ref" : "#/components/parameters/authorizationHeader"
                    }
                ],
                "responses" : {
                    "200" : {
                        "$ref" : "#/components/responses/GermplasmAttributeValueListResponse"
                    },
                    "400" : {
                        "$ref" : "#/components/responses/400BadRequest"
                    },
                    "401" : {
                        "$ref" : "#/components/responses/401Unauthorized"
                    },
                    "403" : {
                        "$ref" : "#/components/responses/403Forbidden"
                    }
                }
            },
            "post" : {
                "tags" : [
                    "GermplasmAttributeValues"
                ],
                "summary" : "Create new GermplasmAttributeValue",
                "description" : "Add new GermplasmAttributeValue to database",
                "parameters" : [
                    {
                        "$ref" : "#/components/parameters/authorizationHeader"
                    }
                ],
                "requestBody" : {
                    "content" : {
                        "application/json" : {
                            "schema" : {
                                "$ref" : "#/components/schemas/GermplasmAttributeValueNewRequest"
                            }
                        }
                    }
                },
                "responses" : {
                    "200" : {
                        "$ref" : "#/components/responses/GermplasmAttributeValueListResponse"
                    },
                    "400" : {
                        "$ref" : "#/components/responses/400BadRequest"
                    },
                    "401" : {
                        "$ref" : "#/components/responses/401Unauthorized"
                    },
                    "403" : {
                        "$ref" : "#/components/responses/403Forbidden"
                    }
                }
            }
        },
        "/pedigree" : {
            "get" : {
                "tags" : [
                    "PedigreeNodes"
                ],
                "summary" : "Get a filtered list of PedigreeNode",
                "description" : "Get a list of PedigreeNode",
                "parameters" : [
                    {
                        "name" : "commonCropName",
                        "in" : "query",
                        "description" : "The BrAPI Common Crop Name is the simple, generalized, widely accepted name of the organism being researched. It is most often used in multi-crop systems where digital resources need to be divided at a high level. Things like 'Maize', 'Wheat', and 'Rice' are examples of common crop names.\n\nUse this parameter to only return results associated with the given crops. \n\nUse `GET /commoncropnames` to find the list of available crops on a server.",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "germplasmDbId",
                        "in" : "query",
                        "description" : "List of IDs which uniquely identify germplasm to search for",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "germplasmName",
                        "in" : "query",
                        "description" : "List of human readable names to identify germplasm to search for",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "programDbId",
                        "in" : "query",
                        "description" : "A BrAPI Program represents the high level organization or group who is responsible for conducting trials and studies. Things like Breeding Programs and Funded Projects are considered BrAPI Programs. \n\nUse this parameter to only return results associated with the given programs. \n\nUse `GET /programs` to find the list of available programs on a server.",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "programName",
                        "in" : "query",
                        "description" : "Use this parameter to only return results associated with the given program names. Program names are not required to be unique.\n\nUse `GET /programs` to find the list of available programs on a server.",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "studyDbId",
                        "in" : "query",
                        "description" : "List of study identifiers to search for",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "studyName",
                        "in" : "query",
                        "description" : "List of study names to filter search results",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "trialDbId",
                        "in" : "query",
                        "description" : "The ID which uniquely identifies a trial to search for",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "trialName",
                        "in" : "query",
                        "description" : "The human readable name of a trial to search for",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "germplasmPUI",
                        "in" : "query",
                        "description" : "List of Permanent Unique Identifiers to identify germplasm",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "accessionNumber",
                        "in" : "query",
                        "description" : "A collection of unique identifiers for materials or germplasm within a genebank\n\nMCPD (v2.1) (ACCENUMB) 2. This is the unique identifier for accessions within a genebank, and is assigned when a sample is entered into the genebank collection (e.g. \"PI 113869\").",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "collection",
                        "in" : "query",
                        "description" : "A specific panel/collection/population name this germplasm belongs to.",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "familyCode",
                        "in" : "query",
                        "description" : "A familyCode representing the family this germplasm belongs to.",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "instituteCode",
                        "in" : "query",
                        "description" : "The code for the institute that maintains the material. \n<br/> MCPD (v2.1) (INSTCODE) 1. FAO WIEWS code of the institute where the accession is maintained. The codes consist of the 3-letter ISO 3166 country code of the country where the institute is located plus a number (e.g. PER001). The current set of institute codes is available from http://www.fao.org/wiews. For those institutes not yet having an FAO Code, or for those with \"obsolete\" codes, see \"Common formatting rules (v)\".",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "binomialName",
                        "in" : "query",
                        "description" : "List of the full binomial name (scientific name) to identify a germplasm",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "genu",
                        "in" : "query",
                        "description" : "List of Genus names to identify germplasm",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "specy",
                        "in" : "query",
                        "description" : "List of Species names to identify germplasm",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "synonym",
                        "in" : "query",
                        "description" : "List of alternative names or IDs used to reference this germplasm",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "includeParent",
                        "in" : "query",
                        "description" : "If this parameter is true, include the array of parents in the response",
                        "required" : false,
                        "schema" : {
                            "type" : "boolean"
                        }
                    },
                    {
                        "name" : "includeSibling",
                        "in" : "query",
                        "description" : "If this parameter is true, include the array of siblings in the response",
                        "required" : false,
                        "schema" : {
                            "type" : "boolean"
                        }
                    },
                    {
                        "name" : "includeProgeny",
                        "in" : "query",
                        "description" : "If this parameter is true, include the array of progeny in the response",
                        "required" : false,
                        "schema" : {
                            "type" : "boolean"
                        }
                    },
                    {
                        "name" : "includeFullTree",
                        "in" : "query",
                        "description" : "If this parameter is true, recursively include ALL of the nodes available in this pedigree tree",
                        "required" : false,
                        "schema" : {
                            "type" : "boolean"
                        }
                    },
                    {
                        "name" : "pedigreeDepth",
                        "in" : "query",
                        "description" : "Recursively include this number of levels up the tree in the response (parents, grand-parents, great-grand-parents, etc)",
                        "required" : false,
                        "schema" : {
                            "type" : "integer",
                            "format" : "int32"
                        }
                    },
                    {
                        "name" : "progenyDepth",
                        "in" : "query",
                        "description" : "Recursively include this number of levels down the tree in the response (children, grand-children, great-grand-children, etc)",
                        "required" : false,
                        "schema" : {
                            "type" : "integer",
                            "format" : "int32"
                        }
                    },
                    {
                        "$ref" : "#/components/parameters/externalReferenceID"
                    },
                    {
                        "$ref" : "#/components/parameters/externalReferenceId"
                    },
                    {
                        "$ref" : "#/components/parameters/externalReferenceSource"
                    },
                    {
                        "$ref" : "#/components/parameters/page"
                    },
                    {
                        "$ref" : "#/components/parameters/pageSize"
                    },
                    {
                        "$ref" : "#/components/parameters/authorizationHeader"
                    }
                ],
                "responses" : {
                    "200" : {
                        "$ref" : "#/components/responses/PedigreeNodeListResponse"
                    },
                    "400" : {
                        "$ref" : "#/components/responses/400BadRequest"
                    },
                    "401" : {
                        "$ref" : "#/components/responses/401Unauthorized"
                    },
                    "403" : {
                        "$ref" : "#/components/responses/403Forbidden"
                    }
                }
            },
            "post" : {
                "tags" : [
                    "PedigreeNodes"
                ],
                "summary" : "Create new PedigreeNode",
                "description" : "Add new PedigreeNode to database",
                "parameters" : [
                    {
                        "$ref" : "#/components/parameters/authorizationHeader"
                    }
                ],
                "requestBody" : {
                    "content" : {
                        "application/json" : {
                            "schema" : {
                                "$ref" : "#/components/schemas/PedigreeNode"
                            }
                        }
                    }
                },
                "responses" : {
                    "200" : {
                        "$ref" : "#/components/responses/PedigreeNodeListResponse"
                    },
                    "400" : {
                        "$ref" : "#/components/responses/400BadRequest"
                    },
                    "401" : {
                        "$ref" : "#/components/responses/401Unauthorized"
                    },
                    "403" : {
                        "$ref" : "#/components/responses/403Forbidden"
                    }
                }
            }
        },
        "/plannedcrosses" : {
            "get" : {
                "tags" : [
                    "Crosses"
                ],
                "summary" : "Get a filtered list of PlannedCross",
                "description" : "Get a list of PlannedCross",
                "parameters" : [
                    {
                        "name" : "commonCropName",
                        "in" : "query",
                        "description" : "The BrAPI Common Crop Name is the simple, generalized, widely accepted name of the organism being researched. It is most often used in multi-crop systems where digital resources need to be divided at a high level. Things like 'Maize', 'Wheat', and 'Rice' are examples of common crop names.\n\nUse this parameter to only return results associated with the given crops. \n\nUse `GET /commoncropnames` to find the list of available crops on a server.",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "programDbId",
                        "in" : "query",
                        "description" : "A BrAPI Program represents the high level organization or group who is responsible for conducting trials and studies. Things like Breeding Programs and Funded Projects are considered BrAPI Programs. \n\nUse this parameter to only return results associated with the given programs. \n\nUse `GET /programs` to find the list of available programs on a server.",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "programName",
                        "in" : "query",
                        "description" : "Use this parameter to only return results associated with the given program names. Program names are not required to be unique.\n\nUse `GET /programs` to find the list of available programs on a server.",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "crossingProjectDbId",
                        "in" : "query",
                        "description" : "Search for Crossing Projects with this unique id",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "crossingProjectName",
                        "in" : "query",
                        "description" : "The human readable name for a crossing project",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "plannedCrossDbId",
                        "in" : "query",
                        "description" : "Search for Planned Cross with this unique id",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "plannedCrossName",
                        "in" : "query",
                        "description" : "Search for Planned Cross with this human readable name",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "status",
                        "in" : "query",
                        "description" : "The status of this planned cross. Is it waiting to be performed ('TODO'), has it been completed successfully ('DONE'), or has it not been done on purpose ('SKIPPED').",
                        "required" : false,
                        "schema" : {
                            "type" : "string",
                            "enum" : [
                                "TODO",
                                "DONE",
                                "SKIPPED"
                            ]
                        }
                    },
                    {
                        "$ref" : "#/components/parameters/externalReferenceID"
                    },
                    {
                        "$ref" : "#/components/parameters/externalReferenceId"
                    },
                    {
                        "$ref" : "#/components/parameters/externalReferenceSource"
                    },
                    {
                        "$ref" : "#/components/parameters/page"
                    },
                    {
                        "$ref" : "#/components/parameters/pageSize"
                    },
                    {
                        "$ref" : "#/components/parameters/authorizationHeader"
                    }
                ],
                "responses" : {
                    "200" : {
                        "$ref" : "#/components/responses/PlannedCrossListResponse"
                    },
                    "400" : {
                        "$ref" : "#/components/responses/400BadRequest"
                    },
                    "401" : {
                        "$ref" : "#/components/responses/401Unauthorized"
                    },
                    "403" : {
                        "$ref" : "#/components/responses/403Forbidden"
                    }
                }
            },
            "put" : {
                "tags" : [
                    "Crosses"
                ],
                "summary" : "Update the details for an existing PlannedCross",
                "description" : "Update the details for an existing PlannedCross",
                "parameters" : [
                    {
                        "$ref" : "#/components/parameters/authorizationHeader"
                    }
                ],
                "requestBody" : {
                    "content" : {
                        "application/json" : {
                            "schema" : {
                                "$ref" : "#/components/schemas/PlannedCross"
                            }
                        }
                    }
                },
                "responses" : {
                    "200" : {
                        "$ref" : "#/components/responses/PlannedCrossListResponse"
                    },
                    "400" : {
                        "$ref" : "#/components/responses/400BadRequest"
                    },
                    "401" : {
                        "$ref" : "#/components/responses/401Unauthorized"
                    },
                    "403" : {
                        "$ref" : "#/components/responses/403Forbidden"
                    }
                }
            },
            "post" : {
                "tags" : [
                    "Crosses"
                ],
                "summary" : "Create new PlannedCross",
                "description" : "Add new PlannedCross to database",
                "parameters" : [
                    {
                        "$ref" : "#/components/parameters/authorizationHeader"
                    }
                ],
                "requestBody" : {
                    "content" : {
                        "application/json" : {
                            "schema" : {
                                "$ref" : "#/components/schemas/PlannedCross"
                            }
                        }
                    }
                },
                "responses" : {
                    "200" : {
                        "$ref" : "#/components/responses/PlannedCrossListResponse"
                    },
                    "400" : {
                        "$ref" : "#/components/responses/400BadRequest"
                    },
                    "401" : {
                        "$ref" : "#/components/responses/401Unauthorized"
                    },
                    "403" : {
                        "$ref" : "#/components/responses/403Forbidden"
                    }
                }
            }
        },
        "/seedlots" : {
            "get" : {
                "tags" : [
                    "SeedLots"
                ],
                "summary" : "Get a filtered list of SeedLot",
                "description" : "Get a list of SeedLot",
                "parameters" : [
                    {
                        "name" : "commonCropName",
                        "in" : "query",
                        "description" : "The BrAPI Common Crop Name is the simple, generalized, widely accepted name of the organism being researched. It is most often used in multi-crop systems where digital resources need to be divided at a high level. Things like 'Maize', 'Wheat', and 'Rice' are examples of common crop names.\n\nUse this parameter to only return results associated with the given crops. \n\nUse `GET /commoncropnames` to find the list of available crops on a server.",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "germplasmDbId",
                        "in" : "query",
                        "description" : "List of IDs which uniquely identify germplasm to search for",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "germplasmName",
                        "in" : "query",
                        "description" : "List of human readable names to identify germplasm to search for",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "programDbId",
                        "in" : "query",
                        "description" : "A BrAPI Program represents the high level organization or group who is responsible for conducting trials and studies. Things like Breeding Programs and Funded Projects are considered BrAPI Programs. \n\nUse this parameter to only return results associated with the given programs. \n\nUse `GET /programs` to find the list of available programs on a server.",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "programName",
                        "in" : "query",
                        "description" : "Use this parameter to only return results associated with the given program names. Program names are not required to be unique.\n\nUse `GET /programs` to find the list of available programs on a server.",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "seedLotDbId",
                        "in" : "query",
                        "description" : "Unique id for a seed lot on this server",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "crossDbId",
                        "in" : "query",
                        "description" : "Search for Cross with this unique id",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "crossName",
                        "in" : "query",
                        "description" : "Search for Cross with this human readable name",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "$ref" : "#/components/parameters/externalReferenceID"
                    },
                    {
                        "$ref" : "#/components/parameters/externalReferenceId"
                    },
                    {
                        "$ref" : "#/components/parameters/externalReferenceSource"
                    },
                    {
                        "$ref" : "#/components/parameters/page"
                    },
                    {
                        "$ref" : "#/components/parameters/pageSize"
                    },
                    {
                        "$ref" : "#/components/parameters/authorizationHeader"
                    }
                ],
                "responses" : {
                    "200" : {
                        "$ref" : "#/components/responses/SeedLotListResponse"
                    },
                    "400" : {
                        "$ref" : "#/components/responses/400BadRequest"
                    },
                    "401" : {
                        "$ref" : "#/components/responses/401Unauthorized"
                    },
                    "403" : {
                        "$ref" : "#/components/responses/403Forbidden"
                    }
                }
            },
            "post" : {
                "tags" : [
                    "SeedLots"
                ],
                "summary" : "Create new SeedLot",
                "description" : "Add new SeedLot to database",
                "parameters" : [
                    {
                        "$ref" : "#/components/parameters/authorizationHeader"
                    }
                ],
                "requestBody" : {
                    "content" : {
                        "application/json" : {
                            "schema" : {
                                "$ref" : "#/components/schemas/SeedLotNewRequest"
                            }
                        }
                    }
                },
                "responses" : {
                    "200" : {
                        "$ref" : "#/components/responses/SeedLotListResponse"
                    },
                    "400" : {
                        "$ref" : "#/components/responses/400BadRequest"
                    },
                    "401" : {
                        "$ref" : "#/components/responses/401Unauthorized"
                    },
                    "403" : {
                        "$ref" : "#/components/responses/403Forbidden"
                    }
                }
            }
        },
        "/breedingmethods/{breedingMethodDbId}" : {
            "get" : {
                "tags" : [
                    "Germplasm"
                ],
                "summary" : "Get the details of a specific BreedingMethod",
                "description" : "Get details for a BreedingMethod",
                "responses" : {
                    "200" : {
                        "$ref" : "#/components/responses/BreedingMethodSingleResponse"
                    },
                    "400" : {
                        "$ref" : "#/components/responses/400BadRequest"
                    },
                    "401" : {
                        "$ref" : "#/components/responses/401Unauthorized"
                    },
                    "403" : {
                        "$ref" : "#/components/responses/403Forbidden"
                    }
                }
            }
        },
        "/crossingprojects/{crossingProjectDbId}" : {
            "get" : {
                "tags" : [
                    "CrossingProjects"
                ],
                "summary" : "Get the details of a specific CrossingProject",
                "description" : "Get details for a CrossingProject",
                "responses" : {
                    "200" : {
                        "$ref" : "#/components/responses/CrossingProjectSingleResponse"
                    },
                    "400" : {
                        "$ref" : "#/components/responses/400BadRequest"
                    },
                    "401" : {
                        "$ref" : "#/components/responses/401Unauthorized"
                    },
                    "403" : {
                        "$ref" : "#/components/responses/403Forbidden"
                    }
                }
            },
            "put" : {
                "tags" : [
                    "CrossingProjects"
                ],
                "summary" : "Update the details for an existing CrossingProject",
                "description" : "Update the details for an existing CrossingProject",
                "parameters" : [
                    {
                        "$ref" : "#/components/parameters/authorizationHeader"
                    }
                ],
                "requestBody" : {
                    "content" : {
                        "application/json" : {
                            "schema" : {
                                "$ref" : "#/components/schemas/CrossingProjectNewRequest"
                            }
                        }
                    }
                },
                "responses" : {
                    "200" : {
                        "$ref" : "#/components/responses/CrossingProjectSingleResponse"
                    },
                    "400" : {
                        "$ref" : "#/components/responses/400BadRequest"
                    },
                    "401" : {
                        "$ref" : "#/components/responses/401Unauthorized"
                    },
                    "403" : {
                        "$ref" : "#/components/responses/403Forbidden"
                    }
                }
            }
        },
        "/germplasm/{germplasmDbId}" : {
            "get" : {
                "tags" : [
                    "Germplasm"
                ],
                "summary" : "Get the details of a specific Germplasm",
                "description" : "Get details for a Germplasm",
                "responses" : {
                    "200" : {
                        "$ref" : "#/components/responses/GermplasmSingleResponse"
                    },
                    "400" : {
                        "$ref" : "#/components/responses/400BadRequest"
                    },
                    "401" : {
                        "$ref" : "#/components/responses/401Unauthorized"
                    },
                    "403" : {
                        "$ref" : "#/components/responses/403Forbidden"
                    }
                }
            },
            "put" : {
                "tags" : [
                    "Germplasm"
                ],
                "summary" : "Update the details for an existing Germplasm",
                "description" : "Update the details for an existing Germplasm",
                "parameters" : [
                    {
                        "$ref" : "#/components/parameters/authorizationHeader"
                    }
                ],
                "requestBody" : {
                    "content" : {
                        "application/json" : {
                            "schema" : {
                                "$ref" : "#/components/schemas/GermplasmNewRequest"
                            }
                        }
                    }
                },
                "responses" : {
                    "200" : {
                        "$ref" : "#/components/responses/GermplasmSingleResponse"
                    },
                    "400" : {
                        "$ref" : "#/components/responses/400BadRequest"
                    },
                    "401" : {
                        "$ref" : "#/components/responses/401Unauthorized"
                    },
                    "403" : {
                        "$ref" : "#/components/responses/403Forbidden"
                    }
                }
            }
        },
        "/attributes/{attributeDbId}" : {
            "get" : {
                "tags" : [
                    "GermplasmAttributes"
                ],
                "summary" : "Get the details of a specific GermplasmAttribute",
                "description" : "Get details for a GermplasmAttribute",
                "responses" : {
                    "200" : {
                        "$ref" : "#/components/responses/GermplasmAttributeSingleResponse"
                    },
                    "400" : {
                        "$ref" : "#/components/responses/400BadRequest"
                    },
                    "401" : {
                        "$ref" : "#/components/responses/401Unauthorized"
                    },
                    "403" : {
                        "$ref" : "#/components/responses/403Forbidden"
                    }
                }
            },
            "put" : {
                "tags" : [
                    "GermplasmAttributes"
                ],
                "summary" : "Update the details for an existing GermplasmAttribute",
                "description" : "Update the details for an existing GermplasmAttribute",
                "parameters" : [
                    {
                        "$ref" : "#/components/parameters/authorizationHeader"
                    }
                ],
                "requestBody" : {
                    "content" : {
                        "application/json" : {
                            "schema" : {
                                "$ref" : "#/components/schemas/GermplasmAttributeNewRequest"
                            }
                        }
                    }
                },
                "responses" : {
                    "200" : {
                        "$ref" : "#/components/responses/GermplasmAttributeSingleResponse"
                    },
                    "400" : {
                        "$ref" : "#/components/responses/400BadRequest"
                    },
                    "401" : {
                        "$ref" : "#/components/responses/401Unauthorized"
                    },
                    "403" : {
                        "$ref" : "#/components/responses/403Forbidden"
                    }
                }
            }
        },
        "/attributevalues/{attributeValueDbId}" : {
            "get" : {
                "tags" : [
                    "GermplasmAttributeValues"
                ],
                "summary" : "Get the details of a specific GermplasmAttributeValue",
                "description" : "Get details for a GermplasmAttributeValue",
                "responses" : {
                    "200" : {
                        "$ref" : "#/components/responses/GermplasmAttributeValueSingleResponse"
                    },
                    "400" : {
                        "$ref" : "#/components/responses/400BadRequest"
                    },
                    "401" : {
                        "$ref" : "#/components/responses/401Unauthorized"
                    },
                    "403" : {
                        "$ref" : "#/components/responses/403Forbidden"
                    }
                }
            },
            "put" : {
                "tags" : [
                    "GermplasmAttributeValues"
                ],
                "summary" : "Update the details for an existing GermplasmAttributeValue",
                "description" : "Update the details for an existing GermplasmAttributeValue",
                "parameters" : [
                    {
                        "$ref" : "#/components/parameters/authorizationHeader"
                    }
                ],
                "requestBody" : {
                    "content" : {
                        "application/json" : {
                            "schema" : {
                                "$ref" : "#/components/schemas/GermplasmAttributeValueNewRequest"
                            }
                        }
                    }
                },
                "responses" : {
                    "200" : {
                        "$ref" : "#/components/responses/GermplasmAttributeValueSingleResponse"
                    },
                    "400" : {
                        "$ref" : "#/components/responses/400BadRequest"
                    },
                    "401" : {
                        "$ref" : "#/components/responses/401Unauthorized"
                    },
                    "403" : {
                        "$ref" : "#/components/responses/403Forbidden"
                    }
                }
            }
        },
        "/seedlots/{seedLotDbId}" : {
            "get" : {
                "tags" : [
                    "SeedLots"
                ],
                "summary" : "Get the details of a specific SeedLot",
                "description" : "Get details for a SeedLot",
                "responses" : {
                    "200" : {
                        "$ref" : "#/components/responses/SeedLotSingleResponse"
                    },
                    "400" : {
                        "$ref" : "#/components/responses/400BadRequest"
                    },
                    "401" : {
                        "$ref" : "#/components/responses/401Unauthorized"
                    },
                    "403" : {
                        "$ref" : "#/components/responses/403Forbidden"
                    }
                }
            },
            "put" : {
                "tags" : [
                    "SeedLots"
                ],
                "summary" : "Update the details for an existing SeedLot",
                "description" : "Update the details for an existing SeedLot",
                "parameters" : [
                    {
                        "$ref" : "#/components/parameters/authorizationHeader"
                    }
                ],
                "requestBody" : {
                    "content" : {
                        "application/json" : {
                            "schema" : {
                                "$ref" : "#/components/schemas/SeedLotNewRequest"
                            }
                        }
                    }
                },
                "responses" : {
                    "200" : {
                        "$ref" : "#/components/responses/SeedLotSingleResponse"
                    },
                    "400" : {
                        "$ref" : "#/components/responses/400BadRequest"
                    },
                    "401" : {
                        "$ref" : "#/components/responses/401Unauthorized"
                    },
                    "403" : {
                        "$ref" : "#/components/responses/403Forbidden"
                    }
                }
            }
        },
        "/search/germplasm" : {
            "post" : {
                "tags" : [
                    "Germplasm"
                ],
                "summary" : "Submit a search request for `Germplasm`",
                "description" : "Submit a search request for `Germplasm`<br/>\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse the corresponding `GET /search/germplasm/{searchResultsDbId}` to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
                "responses" : {
                    "200" : {
                        "$ref" : "#/components/responses/GermplasmListResponse"
                    },
                    "202" : {
                        "$ref" : "#/components/responses/202AcceptedSearchResponse"
                    },
                    "400" : {
                        "$ref" : "#/components/responses/400BadRequest"
                    },
                    "401" : {
                        "$ref" : "#/components/responses/401Unauthorized"
                    },
                    "403" : {
                        "$ref" : "#/components/responses/403Forbidden"
                    }
                }
            }
        },
        "/search/attributes" : {
            "post" : {
                "tags" : [
                    "GermplasmAttributes"
                ],
                "summary" : "Submit a search request for `GermplasmAttribute`",
                "description" : "Submit a search request for `GermplasmAttribute`<br/>\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse the corresponding `GET /search/germplasmAttribute/{searchResultsDbId}` to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
                "responses" : {
                    "200" : {
                        "$ref" : "#/components/responses/GermplasmAttributeListResponse"
                    },
                    "202" : {
                        "$ref" : "#/components/responses/202AcceptedSearchResponse"
                    },
                    "400" : {
                        "$ref" : "#/components/responses/400BadRequest"
                    },
                    "401" : {
                        "$ref" : "#/components/responses/401Unauthorized"
                    },
                    "403" : {
                        "$ref" : "#/components/responses/403Forbidden"
                    }
                }
            }
        },
        "/search/attributevalues" : {
            "post" : {
                "tags" : [
                    "GermplasmAttributeValues"
                ],
                "summary" : "Submit a search request for `GermplasmAttributeValue`",
                "description" : "Submit a search request for `GermplasmAttributeValue`<br/>\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse the corresponding `GET /search/germplasmAttributeValue/{searchResultsDbId}` to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
                "responses" : {
                    "200" : {
                        "$ref" : "#/components/responses/GermplasmAttributeValueListResponse"
                    },
                    "202" : {
                        "$ref" : "#/components/responses/202AcceptedSearchResponse"
                    },
                    "400" : {
                        "$ref" : "#/components/responses/400BadRequest"
                    },
                    "401" : {
                        "$ref" : "#/components/responses/401Unauthorized"
                    },
                    "403" : {
                        "$ref" : "#/components/responses/403Forbidden"
                    }
                }
            }
        },
        "/search/pedigree" : {
            "post" : {
                "tags" : [
                    "PedigreeNodes"
                ],
                "summary" : "Submit a search request for `PedigreeNode`",
                "description" : "Submit a search request for `PedigreeNode`<br/>\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse the corresponding `GET /search/pedigreeNode/{searchResultsDbId}` to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
                "responses" : {
                    "200" : {
                        "$ref" : "#/components/responses/PedigreeNodeListResponse"
                    },
                    "202" : {
                        "$ref" : "#/components/responses/202AcceptedSearchResponse"
                    },
                    "400" : {
                        "$ref" : "#/components/responses/400BadRequest"
                    },
                    "401" : {
                        "$ref" : "#/components/responses/401Unauthorized"
                    },
                    "403" : {
                        "$ref" : "#/components/responses/403Forbidden"
                    }
                }
            }
        },
        "/search/germplasm/{searchResultsDbId}" : {
            "get" : {
                "tags" : [
                    "Germplasm"
                ],
                "summary" : "Submit a search request for `Germplasm`<br/>\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse the corresponding `GET /search/germplasm/{searchResultsDbId}` to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
                "description" : "Get the results of a `Germplasm` search request <br/>\nClients should submit a search request using the corresponding `POST /search/germplasm` endpoint.\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse this endpoint to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
                "responses" : {
                    "200" : {
                        "$ref" : "#/components/responses/GermplasmListResponse"
                    },
                    "400" : {
                        "$ref" : "#/components/responses/400BadRequest"
                    },
                    "401" : {
                        "$ref" : "#/components/responses/401Unauthorized"
                    },
                    "403" : {
                        "$ref" : "#/components/responses/403Forbidden"
                    }
                }
            }
        },
        "/search/attributes/{searchResultsDbId}" : {
            "get" : {
                "tags" : [
                    "GermplasmAttributes"
                ],
                "summary" : "Submit a search request for `GermplasmAttribute`<br/>\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse the corresponding `GET /search/germplasmAttribute/{searchResultsDbId}` to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
                "description" : "Get the results of a `GermplasmAttribute` search request <br/>\nClients should submit a search request using the corresponding `POST /search/germplasmAttribute` endpoint.\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse this endpoint to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
                "responses" : {
                    "200" : {
                        "$ref" : "#/components/responses/GermplasmAttributeListResponse"
                    },
                    "400" : {
                        "$ref" : "#/components/responses/400BadRequest"
                    },
                    "401" : {
                        "$ref" : "#/components/responses/401Unauthorized"
                    },
                    "403" : {
                        "$ref" : "#/components/responses/403Forbidden"
                    }
                }
            }
        },
        "/search/attributevalues/{searchResultsDbId}" : {
            "get" : {
                "tags" : [
                    "GermplasmAttributeValues"
                ],
                "summary" : "Submit a search request for `GermplasmAttributeValue`<br/>\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse the corresponding `GET /search/germplasmAttributeValue/{searchResultsDbId}` to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
                "description" : "Get the results of a `GermplasmAttributeValue` search request <br/>\nClients should submit a search request using the corresponding `POST /search/germplasmAttributeValue` endpoint.\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse this endpoint to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
                "responses" : {
                    "200" : {
                        "$ref" : "#/components/responses/GermplasmAttributeValueListResponse"
                    },
                    "400" : {
                        "$ref" : "#/components/responses/400BadRequest"
                    },
                    "401" : {
                        "$ref" : "#/components/responses/401Unauthorized"
                    },
                    "403" : {
                        "$ref" : "#/components/responses/403Forbidden"
                    }
                }
            }
        },
        "/search/pedigree/{searchResultsDbId}" : {
            "get" : {
                "tags" : [
                    "PedigreeNodes"
                ],
                "summary" : "Submit a search request for `PedigreeNode`<br/>\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse the corresponding `GET /search/pedigreeNode/{searchResultsDbId}` to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
                "description" : "Get the results of a `PedigreeNode` search request <br/>\nClients should submit a search request using the corresponding `POST /search/pedigreeNode` endpoint.\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse this endpoint to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
                "responses" : {
                    "200" : {
                        "$ref" : "#/components/responses/PedigreeNodeListResponse"
                    },
                    "400" : {
                        "$ref" : "#/components/responses/400BadRequest"
                    },
                    "401" : {
                        "$ref" : "#/components/responses/401Unauthorized"
                    },
                    "403" : {
                        "$ref" : "#/components/responses/403Forbidden"
                    }
                }
            }
        }
    },
    "components" : {
        "schemas" : {
            "AdditionalInfo" : {
                "type" : "object",
                "properties" : {
                    "additionalProperties" : {
                        "type" : "string"
                    }
                },
                "description" : "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification."
            },
            "Attribute" : {
                "required" : [
                    "attributeName",
                    "method",
                    "scale",
                    "trait"
                ],
                "type" : "object",
                "properties" : {
                    "additionalInfo" : {
                        "$ref" : "#/components/schemas/AdditionalInfo"
                    },
                    "attributeCategory" : {
                        "type" : "string"
                    },
                    "attributeDbId" : {
                        "type" : "string"
                    },
                    "attributeDescription" : {
                        "type" : "string"
                    },
                    "attributeName" : {
                        "type" : "string"
                    },
                    "attributePUI" : {
                        "type" : "string"
                    },
                    "commonCropName" : {
                        "type" : "string"
                    },
                    "contextOfUse" : {
                        "type" : "array",
                        "items" : {
                            "type" : "string"
                        }
                    },
                    "defaultValue" : {
                        "type" : "string"
                    },
                    "documentationURL" : {
                        "type" : "string"
                    },
                    "externalReferences" : {
                        "type" : "array",
                        "items" : {
                            "$ref" : "#/components/schemas/ExternalReference"
                        }
                    },
                    "growthStage" : {
                        "type" : "string"
                    },
                    "institution" : {
                        "type" : "string"
                    },
                    "language" : {
                        "type" : "string"
                    },
                    "method" : {
                        "$ref" : "#/components/schemas/Method"
                    },
                    "ontologyReference" : {
                        "$ref" : "#/components/schemas/OntologyReference"
                    },
                    "scale" : {
                        "$ref" : "#/components/schemas/Scale"
                    },
                    "scientist" : {
                        "type" : "string"
                    },
                    "status" : {
                        "type" : "string"
                    },
                    "submissionTimestamp" : {
                        "type" : "string"
                    },
                    "synonyms" : {
                        "type" : "array",
                        "items" : {
                            "type" : "string"
                        }
                    },
                    "trait" : {
                        "$ref" : "#/components/schemas/Trait"
                    }
                }
            },
            "BreedingMethod" : {
                "required" : [
                    "abbreviation",
                    "breedingMethodDbId",
                    "breedingMethodName",
                    "description"
                ],
                "type" : "object",
                "properties" : {
                    "abbreviation" : {
                        "type" : "string"
                    },
                    "breedingMethodDbId" : {
                        "type" : "string"
                    },
                    "breedingMethodName" : {
                        "type" : "string"
                    },
                    "description" : {
                        "type" : "string"
                    }
                }
            },
            "Contact" : {
                "required" : [
                    "contactDbId"
                ],
                "type" : "object",
                "properties" : {
                    "contactDbId" : {
                        "type" : "string"
                    },
                    "email" : {
                        "type" : "string"
                    },
                    "instituteName" : {
                        "type" : "string"
                    },
                    "name" : {
                        "type" : "string"
                    },
                    "orcid" : {
                        "type" : "string"
                    },
                    "type" : {
                        "type" : "string"
                    }
                }
            },
            "ContentTypes" : {
                "type" : "string",
                "enum" : [
                    "application/json",
                    "text/csv",
                    "text/tsv",
                    "application/flapjack"
                ]
            },
            "Context" : {
                "title" : "context",
                "type" : "array",
                "description" : "The JSON-LD Context is used to provide JSON-LD definitions to each field in a JSON object. By providing an array of context file urls, a BrAPI response object becomes JSON-LD compatible.  \n\nFor more information, see https://w3c.github.io/json-ld-syntax/#the-context",
                "example" : [
                    "https://brapi.org/jsonld/context/metadata.jsonld"
                ],
                "items" : {
                    "type" : "string",
                    "format" : "uri"
                }
            },
            "Cross" : {
                "required" : [
                    "crossDbId"
                ],
                "type" : "object",
                "properties" : {
                    "additionalInfo" : {
                        "$ref" : "#/components/schemas/AdditionalInfo"
                    },
                    "crossName" : {
                        "type" : "string"
                    },
                    "crossType" : {
                        "type" : "string",
                        "description" : "the type of cross",
                        "enum" : [
                            "BIPARENTAL",
                            "SELF",
                            "OPEN_POLLINATED",
                            "BULK",
                            "BULK_SELFED",
                            "BULK_OPEN_POLLINATED",
                            "DOUBLE_HAPLOID"
                        ]
                    },
                    "crossingProjectDbId" : {
                        "type" : "string"
                    },
                    "crossingProjectName" : {
                        "type" : "string"
                    },
                    "parent1" : {
                        "$ref" : "#/components/schemas/CrossParent"
                    },
                    "parent2" : {
                        "$ref" : "#/components/schemas/CrossParent"
                    },
                    "plannedCrossDbId" : {
                        "type" : "string"
                    },
                    "plannedCrossName" : {
                        "type" : "string"
                    }
                }
            },
            "CrossNewRequest" : {
                "required" : [
                    "crossDbId",
                    "crossDbId"
                ],
                "type" : "object",
                "properties" : {
                    "additionalInfo" : {
                        "$ref" : "#/components/schemas/AdditionalInfo"
                    },
                    "crossDbId" : {
                        "type" : "string"
                    },
                    "crossName" : {
                        "type" : "string"
                    },
                    "crossType" : {
                        "type" : "string",
                        "description" : "the type of cross",
                        "enum" : [
                            "BIPARENTAL",
                            "SELF",
                            "OPEN_POLLINATED",
                            "BULK",
                            "BULK_SELFED",
                            "BULK_OPEN_POLLINATED",
                            "DOUBLE_HAPLOID"
                        ]
                    },
                    "crossingProjectDbId" : {
                        "type" : "string"
                    },
                    "crossingProjectName" : {
                        "type" : "string"
                    },
                    "parent1" : {
                        "$ref" : "#/components/schemas/CrossParent"
                    },
                    "parent2" : {
                        "$ref" : "#/components/schemas/CrossParent"
                    },
                    "plannedCrossDbId" : {
                        "type" : "string"
                    },
                    "plannedCrossName" : {
                        "type" : "string"
                    }
                }
            },
            "CrossParent" : {
                "type" : "object",
                "properties" : {
                    "germplasm" : {
                        "$ref" : "#/components/schemas/Germplasm"
                    },
                    "observationUnit" : {
                        "$ref" : "#/components/schemas/ObservationUnit"
                    },
                    "parentType" : {
                        "type" : "string",
                        "description" : "The type of parent ex. 'MALE', 'FEMALE', 'SELF', 'POPULATION', etc.",
                        "enum" : [
                            "MALE",
                            "FEMALE",
                            "SELF",
                            "POPULATION"
                        ]
                    }
                }
            },
            "CrossingProject" : {
                "required" : [
                    "crossingProjectDbId",
                    "crossingProjectName"
                ],
                "type" : "object",
                "properties" : {
                    "additionalInfo" : {
                        "$ref" : "#/components/schemas/AdditionalInfo"
                    },
                    "commonCropName" : {
                        "type" : "string"
                    },
                    "crossingProjectDescription" : {
                        "type" : "string"
                    },
                    "crossingProjectName" : {
                        "type" : "string"
                    },
                    "programDbId" : {
                        "type" : "string"
                    },
                    "programName" : {
                        "type" : "string"
                    }
                }
            },
            "CrossingProjectNewRequest" : {
                "required" : [
                    "crossingProjectDbId",
                    "crossingProjectDbId",
                    "crossingProjectName"
                ],
                "type" : "object",
                "properties" : {
                    "additionalInfo" : {
                        "$ref" : "#/components/schemas/AdditionalInfo"
                    },
                    "commonCropName" : {
                        "type" : "string"
                    },
                    "crossingProjectDbId" : {
                        "type" : "string"
                    },
                    "crossingProjectDescription" : {
                        "type" : "string"
                    },
                    "crossingProjectName" : {
                        "type" : "string"
                    },
                    "programDbId" : {
                        "type" : "string"
                    },
                    "programName" : {
                        "type" : "string"
                    }
                }
            },
            "ExternalReference" : {
                "type" : "object",
                "properties" : {
                    "referenceId" : {
                        "type" : "string"
                    },
                    "referenceSource" : {
                        "type" : "string"
                    }
                }
            },
            "GeoJSON" : {
                "type" : "object",
                "properties" : {
                    "geometry" : {
                        "$ref" : "#/components/schemas/GeoJSONGeometry"
                    },
                    "type" : {
                        "type" : "string"
                    }
                },
                "description" : "One geometry as defined by GeoJSON (RFC 7946). All coordinates are decimal values on the WGS84 geographic coordinate reference system.\n\nCopied from RFC 7946 Section 3.1.1\n\nA position is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or\neasting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element."
            },
            "GeoJSONGeometry" : {
                "oneOf" : [
                    {
                        "required" : [
                            "coordinateDbIds",
                            "type"
                        ],
                        "type" : "object",
                        "properties" : {
                            "coordinates" : {
                                "type" : "array",
                                "items" : {
                                    "type" : "number"
                                }
                            },
                            "type" : {
                                "type" : "string"
                            }
                        },
                        "description" : "Copied from RFC 7946 Section 3.1.1\n\nA position is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or\neasting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element."
                    },
                    {
                        "required" : [
                            "coordinateDbIds",
                            "type"
                        ],
                        "type" : "object",
                        "properties" : {
                            "coordinates" : {
                                "type" : "array",
                                "items" : {
                                    "type" : "array",
                                    "items" : {
                                        "type" : "array",
                                        "items" : {
                                            "type" : "number"
                                        }
                                    }
                                }
                            },
                            "type" : {
                                "type" : "string"
                            }
                        },
                        "description" : "An array of Linear Rings. Each Linear Ring is an array of Points. \n\nA Point is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or\neasting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element."
                    }
                ]
            },
            "GeoJSONSearchArea" : {
                "type" : "object",
                "properties" : {
                    "geometry" : {
                        "$ref" : "#/components/schemas/GeoJSONGeometry"
                    },
                    "type" : {
                        "type" : "string"
                    }
                }
            },
            "Germplasm" : {
                "required" : [
                    "commonCropName",
                    "germplasmDbId",
                    "germplasmName",
                    "germplasmPUI"
                ],
                "type" : "object",
                "properties" : {
                    "accessionNumber" : {
                        "type" : "string"
                    },
                    "acquisitionDate" : {
                        "type" : "string"
                    },
                    "additionalInfo" : {
                        "$ref" : "#/components/schemas/AdditionalInfo"
                    },
                    "biologicalStatusOfAccessionCode" : {
                        "type" : "string",
                        "description" : "MCPD (v2.1) (SAMPSTAT) 19. The coding scheme proposed can be used at 3 different levels of detail: either by using the general codes such as 100, 200, 300, 400, or by using the more specific codes such as 110, 120, etc. \n\n100) Wild \n110) Natural \n120) Semi-natural/wild \n130) Semi-natural/sown \n200) Weedy \n300) Traditional cultivar/landrace \n400) Breeding/research material \n410) Breeders line \n411) Synthetic population \n412) Hybrid \n413) Founder stock/base population \n414) Inbred line (parent of hybrid cultivar) \n415) Segregating population \n416) Clonal selection \n420) Genetic stock \n421) Mutant (e.g. induced/insertion mutants, tilling populations) \n422) Cytogenetic stocks (e.g. chromosome addition/substitution, aneuploids,  amphiploids) \n423) Other genetic stocks (e.g. mapping populations) \n500) Advanced or improved cultivar (conventional breeding methods) \n600) GMO (by genetic engineering) \n999) Other (Elaborate in REMARKS field)",
                        "enum" : [
                            "100",
                            "110",
                            "120",
                            "130",
                            "200",
                            "300",
                            "400",
                            "410",
                            "411",
                            "412",
                            "413",
                            "414",
                            "415",
                            "416",
                            "420",
                            "421",
                            "422",
                            "423",
                            "500",
                            "600",
                            "999"
                        ]
                    },
                    "biologicalStatusOfAccessionDescription" : {
                        "type" : "string"
                    },
                    "breedingMethodDbId" : {
                        "type" : "string"
                    },
                    "breedingMethodName" : {
                        "type" : "string"
                    },
                    "collection" : {
                        "type" : "string"
                    },
                    "commonCropName" : {
                        "type" : "string"
                    },
                    "countryOfOriginCode" : {
                        "type" : "string"
                    },
                    "defaultDisplayName" : {
                        "type" : "string"
                    },
                    "documentationURL" : {
                        "type" : "string"
                    },
                    "genus" : {
                        "type" : "string"
                    },
                    "germplasmName" : {
                        "type" : "string"
                    },
                    "germplasmPUI" : {
                        "type" : "string"
                    },
                    "germplasmPreprocessing" : {
                        "type" : "string"
                    },
                    "instituteCode" : {
                        "type" : "string"
                    },
                    "instituteName" : {
                        "type" : "string"
                    },
                    "pedigree" : {
                        "type" : "string"
                    },
                    "pedigreeNode" : {
                        "$ref" : "#/components/schemas/PedigreeNode"
                    },
                    "sampleDbIds" : {
                        "type" : "array",
                        "items" : {
                            "type" : "string"
                        }
                    },
                    "seedSource" : {
                        "type" : "string"
                    },
                    "seedSourceDescription" : {
                        "type" : "string"
                    },
                    "species" : {
                        "type" : "string"
                    },
                    "speciesAuthority" : {
                        "type" : "string"
                    },
                    "subtaxa" : {
                        "type" : "string"
                    },
                    "subtaxaAuthority" : {
                        "type" : "string"
                    }
                }
            },
            "GermplasmAttribute" : {
                "required" : [
                    "attributeDbId",
                    "attributeName",
                    "methodName",
                    "scaleDbId",
                    "scaleName",
                    "traitName"
                ],
                "type" : "object",
                "properties" : {
                    "additionalInfo" : {
                        "$ref" : "#/components/schemas/AdditionalInfo"
                    },
                    "attributeCategory" : {
                        "type" : "string"
                    },
                    "attributeDescription" : {
                        "type" : "string"
                    },
                    "attributeName" : {
                        "type" : "string"
                    },
                    "attributePUI" : {
                        "type" : "string"
                    },
                    "attributeValueDbIds" : {
                        "type" : "array",
                        "items" : {
                            "type" : "string"
                        }
                    },
                    "commonCropName" : {
                        "type" : "string"
                    },
                    "defaultValue" : {
                        "type" : "string"
                    },
                    "documentationURL" : {
                        "type" : "string"
                    },
                    "growthStage" : {
                        "type" : "string"
                    },
                    "institution" : {
                        "type" : "string"
                    },
                    "language" : {
                        "type" : "string"
                    },
                    "methodDbId" : {
                        "type" : "string"
                    },
                    "methodName" : {
                        "type" : "string"
                    },
                    "methodPUI" : {
                        "type" : "string"
                    },
                    "ontologyReference" : {
                        "$ref" : "#/components/schemas/OntologyReference"
                    },
                    "scaleDbId" : {
                        "type" : "string"
                    },
                    "scaleName" : {
                        "type" : "string"
                    },
                    "scalePUI" : {
                        "type" : "string"
                    },
                    "scientist" : {
                        "type" : "string"
                    },
                    "status" : {
                        "type" : "string"
                    },
                    "submissionTimestamp" : {
                        "type" : "string"
                    },
                    "traitDbId" : {
                        "type" : "string"
                    },
                    "traitName" : {
                        "type" : "string"
                    },
                    "traitPUI" : {
                        "type" : "string"
                    }
                }
            },
            "GermplasmAttributeNewRequest" : {
                "required" : [
                    "attributeDbId",
                    "attributeName",
                    "methodName",
                    "scaleDbId",
                    "scaleName",
                    "traitName"
                ],
                "type" : "object",
                "properties" : {
                    "additionalInfo" : {
                        "$ref" : "#/components/schemas/AdditionalInfo"
                    },
                    "attributeCategory" : {
                        "type" : "string"
                    },
                    "attributeDbId" : {
                        "type" : "string"
                    },
                    "attributeDescription" : {
                        "type" : "string"
                    },
                    "attributeName" : {
                        "type" : "string"
                    },
                    "attributePUI" : {
                        "type" : "string"
                    },
                    "attributeValueDbIds" : {
                        "type" : "array",
                        "items" : {
                            "type" : "string"
                        }
                    },
                    "commonCropName" : {
                        "type" : "string"
                    },
                    "defaultValue" : {
                        "type" : "string"
                    },
                    "documentationURL" : {
                        "type" : "string"
                    },
                    "growthStage" : {
                        "type" : "string"
                    },
                    "institution" : {
                        "type" : "string"
                    },
                    "language" : {
                        "type" : "string"
                    },
                    "methodDbId" : {
                        "type" : "string"
                    },
                    "methodName" : {
                        "type" : "string"
                    },
                    "methodPUI" : {
                        "type" : "string"
                    },
                    "ontologyReference" : {
                        "$ref" : "#/components/schemas/OntologyReference"
                    },
                    "scaleDbId" : {
                        "type" : "string"
                    },
                    "scaleName" : {
                        "type" : "string"
                    },
                    "scalePUI" : {
                        "type" : "string"
                    },
                    "scientist" : {
                        "type" : "string"
                    },
                    "status" : {
                        "type" : "string"
                    },
                    "submissionTimestamp" : {
                        "type" : "string"
                    },
                    "traitDbId" : {
                        "type" : "string"
                    },
                    "traitName" : {
                        "type" : "string"
                    },
                    "traitPUI" : {
                        "type" : "string"
                    }
                }
            },
            "GermplasmAttributeSearchRequest" : {
                "type" : "object",
                "properties" : { }
            },
            "GermplasmAttributeValue" : {
                "required" : [
                    "attributeName",
                    "attributeValueDbId"
                ],
                "type" : "object",
                "properties" : {
                    "additionalInfo" : {
                        "$ref" : "#/components/schemas/AdditionalInfo"
                    },
                    "attributeDbId" : {
                        "type" : "string"
                    },
                    "attributeName" : {
                        "type" : "string"
                    },
                    "attributePUI" : {
                        "type" : "string"
                    },
                    "determinedDate" : {
                        "type" : "string"
                    },
                    "germplasmDbId" : {
                        "type" : "string"
                    },
                    "germplasmName" : {
                        "type" : "string"
                    },
                    "germplasmPUI" : {
                        "type" : "string"
                    },
                    "value" : {
                        "type" : "string"
                    }
                }
            },
            "GermplasmAttributeValueNewRequest" : {
                "required" : [
                    "attributeName",
                    "attributeValueDbId"
                ],
                "type" : "object",
                "properties" : {
                    "additionalInfo" : {
                        "$ref" : "#/components/schemas/AdditionalInfo"
                    },
                    "attributeDbId" : {
                        "type" : "string"
                    },
                    "attributeName" : {
                        "type" : "string"
                    },
                    "attributePUI" : {
                        "type" : "string"
                    },
                    "attributeValueDbId" : {
                        "type" : "string"
                    },
                    "determinedDate" : {
                        "type" : "string"
                    },
                    "germplasmDbId" : {
                        "type" : "string"
                    },
                    "germplasmName" : {
                        "type" : "string"
                    },
                    "germplasmPUI" : {
                        "type" : "string"
                    },
                    "value" : {
                        "type" : "string"
                    }
                }
            },
            "GermplasmAttributeValueSearchRequest" : {
                "type" : "object",
                "properties" : { }
            },
            "GermplasmNewRequest" : {
                "required" : [
                    "commonCropName",
                    "germplasmDbId",
                    "germplasmDbId",
                    "germplasmName",
                    "germplasmPUI"
                ],
                "type" : "object",
                "properties" : {
                    "accessionNumber" : {
                        "type" : "string"
                    },
                    "acquisitionDate" : {
                        "type" : "string"
                    },
                    "additionalInfo" : {
                        "$ref" : "#/components/schemas/AdditionalInfo"
                    },
                    "biologicalStatusOfAccessionCode" : {
                        "type" : "string",
                        "description" : "MCPD (v2.1) (SAMPSTAT) 19. The coding scheme proposed can be used at 3 different levels of detail: either by using the general codes such as 100, 200, 300, 400, or by using the more specific codes such as 110, 120, etc. \n\n100) Wild \n110) Natural \n120) Semi-natural/wild \n130) Semi-natural/sown \n200) Weedy \n300) Traditional cultivar/landrace \n400) Breeding/research material \n410) Breeders line \n411) Synthetic population \n412) Hybrid \n413) Founder stock/base population \n414) Inbred line (parent of hybrid cultivar) \n415) Segregating population \n416) Clonal selection \n420) Genetic stock \n421) Mutant (e.g. induced/insertion mutants, tilling populations) \n422) Cytogenetic stocks (e.g. chromosome addition/substitution, aneuploids,  amphiploids) \n423) Other genetic stocks (e.g. mapping populations) \n500) Advanced or improved cultivar (conventional breeding methods) \n600) GMO (by genetic engineering) \n999) Other (Elaborate in REMARKS field)",
                        "enum" : [
                            "100",
                            "110",
                            "120",
                            "130",
                            "200",
                            "300",
                            "400",
                            "410",
                            "411",
                            "412",
                            "413",
                            "414",
                            "415",
                            "416",
                            "420",
                            "421",
                            "422",
                            "423",
                            "500",
                            "600",
                            "999"
                        ]
                    },
                    "biologicalStatusOfAccessionDescription" : {
                        "type" : "string"
                    },
                    "breedingMethodDbId" : {
                        "type" : "string"
                    },
                    "breedingMethodName" : {
                        "type" : "string"
                    },
                    "collection" : {
                        "type" : "string"
                    },
                    "commonCropName" : {
                        "type" : "string"
                    },
                    "countryOfOriginCode" : {
                        "type" : "string"
                    },
                    "defaultDisplayName" : {
                        "type" : "string"
                    },
                    "documentationURL" : {
                        "type" : "string"
                    },
                    "genus" : {
                        "type" : "string"
                    },
                    "germplasmDbId" : {
                        "type" : "string"
                    },
                    "germplasmName" : {
                        "type" : "string"
                    },
                    "germplasmPUI" : {
                        "type" : "string"
                    },
                    "germplasmPreprocessing" : {
                        "type" : "string"
                    },
                    "instituteCode" : {
                        "type" : "string"
                    },
                    "instituteName" : {
                        "type" : "string"
                    },
                    "pedigree" : {
                        "type" : "string"
                    },
                    "pedigreeNode" : {
                        "$ref" : "#/components/schemas/PedigreeNode"
                    },
                    "sampleDbIds" : {
                        "type" : "array",
                        "items" : {
                            "type" : "string"
                        }
                    },
                    "seedSource" : {
                        "type" : "string"
                    },
                    "seedSourceDescription" : {
                        "type" : "string"
                    },
                    "species" : {
                        "type" : "string"
                    },
                    "speciesAuthority" : {
                        "type" : "string"
                    },
                    "subtaxa" : {
                        "type" : "string"
                    },
                    "subtaxaAuthority" : {
                        "type" : "string"
                    }
                }
            },
            "GermplasmSearchRequest" : {
                "type" : "object",
                "properties" : { }
            },
            "ListType" : {
                "type" : "string",
                "description" : "The type of objects that are referenced in a List",
                "enum" : [
                    "germplasm",
                    "markers",
                    "variants",
                    "programs",
                    "trials",
                    "studies",
                    "observationUnits",
                    "observations",
                    "observationVariables",
                    "samples"
                ]
            },
            "Method" : {
                "required" : [
                    "methodName"
                ],
                "type" : "object",
                "properties" : {
                    "additionalInfo" : {
                        "$ref" : "#/components/schemas/AdditionalInfo"
                    },
                    "bibliographicalReference" : {
                        "type" : "string"
                    },
                    "description" : {
                        "type" : "string"
                    },
                    "formula" : {
                        "type" : "string"
                    },
                    "methodClass" : {
                        "type" : "string"
                    },
                    "methodDbId" : {
                        "type" : "string"
                    },
                    "methodName" : {
                        "type" : "string"
                    },
                    "methodPUI" : {
                        "type" : "string"
                    },
                    "ontologyReference" : {
                        "$ref" : "#/components/schemas/OntologyReference"
                    }
                }
            },
            "OntologyReference" : {
                "required" : [
                    "ontology"
                ],
                "type" : "object",
                "properties" : {
                    "documentationLinks" : {
                        "type" : "array",
                        "items" : {
                            "type" : "object",
                            "properties" : {
                                "URL" : {
                                    "type" : "string"
                                },
                                "type" : {
                                    "type" : "string",
                                    "enum" : [
                                        "OBO",
                                        "RDF",
                                        "WEBPAGE"
                                    ]
                                }
                            }
                        }
                    },
                    "ontology" : {
                        "$ref" : "#/components/schemas/Ontology"
                    },
                    "version" : {
                        "type" : "string"
                    }
                }
            },
            "PedigreeNode" : {
                "required" : [
                    "germplasmDbId",
                    "germplasmName",
                    "germplasmPUI"
                ],
                "type" : "object",
                "properties" : {
                    "additionalInfo" : {
                        "$ref" : "#/components/schemas/AdditionalInfo"
                    },
                    "breedingMethodDbId" : {
                        "type" : "string"
                    },
                    "breedingMethodName" : {
                        "type" : "string"
                    },
                    "crossingProjectDbId" : {
                        "type" : "string"
                    },
                    "crossingProjectName" : {
                        "type" : "string"
                    },
                    "crossingYear" : {
                        "type" : "integer",
                        "format" : "int32"
                    },
                    "defaultDisplayName" : {
                        "type" : "string"
                    },
                    "familyCode" : {
                        "type" : "string"
                    },
                    "germplasmDbId" : {
                        "type" : "string"
                    },
                    "germplasmName" : {
                        "type" : "string"
                    },
                    "germplasmPUI" : {
                        "type" : "string"
                    },
                    "pedigreeString" : {
                        "type" : "string"
                    },
                    "siblingDbIds" : {
                        "type" : "array",
                        "items" : {
                            "type" : "string"
                        }
                    }
                }
            },
            "PedigreeNodeSearchRequest" : {
                "type" : "object",
                "properties" : {
                    "includeFullTree" : {
                        "type" : "boolean"
                    },
                    "includeParents" : {
                        "type" : "boolean"
                    },
                    "includeProgeny" : {
                        "type" : "boolean"
                    },
                    "includeSiblings" : {
                        "type" : "boolean"
                    },
                    "pedigreeDepth" : {
                        "type" : "integer",
                        "format" : "int32"
                    },
                    "progenyDepth" : {
                        "type" : "integer",
                        "format" : "int32"
                    }
                }
            },
            "PlannedCross" : {
                "required" : [
                    "plannedCrossDbId"
                ],
                "type" : "object",
                "properties" : {
                    "additionalInfo" : {
                        "$ref" : "#/components/schemas/AdditionalInfo"
                    },
                    "crossType" : {
                        "type" : "string",
                        "description" : "the type of cross",
                        "enum" : [
                            "BIPARENTAL",
                            "SELF",
                            "OPEN_POLLINATED",
                            "BULK",
                            "BULK_SELFED",
                            "BULK_OPEN_POLLINATED",
                            "DOUBLE_HAPLOID"
                        ]
                    },
                    "crossingProjectDbId" : {
                        "type" : "string"
                    },
                    "crossingProjectName" : {
                        "type" : "string"
                    },
                    "parent1" : {
                        "$ref" : "#/components/schemas/CrossParent"
                    },
                    "parent2" : {
                        "$ref" : "#/components/schemas/CrossParent"
                    },
                    "plannedCrossDbId" : {
                        "type" : "string"
                    },
                    "plannedCrossName" : {
                        "type" : "string"
                    },
                    "status" : {
                        "type" : "string",
                        "description" : "The status of this planned cross. Is it waiting to be performed ('TODO'), has it been completed successfully ('DONE'), or has it not been done on purpose ('SKIPPED').",
                        "enum" : [
                            "TODO",
                            "DONE",
                            "SKIPPED"
                        ]
                    }
                }
            },
            "Scale" : {
                "required" : [
                    "scaleDbId",
                    "scaleName"
                ],
                "type" : "object",
                "properties" : {
                    "additionalInfo" : {
                        "$ref" : "#/components/schemas/AdditionalInfo"
                    },
                    "dataType" : {
                        "type" : "string",
                        "description" : "<p>Class of the scale, entries can be</p>\n<p>\"Code\" -  This scale class is exceptionally used to express complex traits. Code is a nominal scale that combines the expressions of the different traits composing the complex trait. For example a severity trait might be expressed by a 2 digit and 2 character code. The first 2 digits are the percentage of the plant covered by a fungus and the 2 characters refer to the delay in development, e.g. \"75VD\" means \"75 %\" of the plant is infected and the plant is very delayed.</p>\n<p>\"Date\" - The date class is for events expressed in a time format, See ISO 8601</p>\n<p>\"Duration\" - The Duration class is for time elapsed between two events expressed in a time format, e.g. days, hours, months</p>\n<p>\"Nominal\" - Categorical scale that can take one of a limited and fixed number of categories. There is no intrinsic ordering to the categories</p>\n<p>\"Numerical\" - Numerical scales express the trait with real numbers. The numerical scale defines the unit e.g. centimeter, ton per hectare, branches</p>\n<p>\"Ordinal\" - Ordinal scales are scales composed of ordered categories</p>\n<p>\"Text\" - A free text is used to express the trait.</p>",
                        "enum" : [
                            "Code",
                            "Date",
                            "Duration",
                            "Nominal",
                            "Numerical",
                            "Ordinal",
                            "Text"
                        ]
                    },
                    "decimalPlaces" : {
                        "type" : "integer",
                        "format" : "int32"
                    },
                    "ontologyReference" : {
                        "$ref" : "#/components/schemas/OntologyReference"
                    },
                    "scaleDbId" : {
                        "type" : "string"
                    },
                    "scaleName" : {
                        "type" : "string"
                    },
                    "scalePUI" : {
                        "type" : "string"
                    },
                    "units" : {
                        "type" : "string"
                    },
                    "validValues" : {
                        "type" : "object",
                        "properties" : {
                            "categories" : {
                                "type" : "array",
                                "items" : {
                                    "type" : "object",
                                    "properties" : {
                                        "label" : {
                                            "type" : "string"
                                        },
                                        "value" : {
                                            "type" : "string"
                                        }
                                    }
                                }
                            },
                            "maximumValue" : {
                                "type" : "string"
                            },
                            "minimumValue" : {
                                "type" : "string"
                            }
                        }
                    }
                }
            },
            "SeedLot" : {
                "required" : [
                    "seedLotDbId",
                    "seedLotName"
                ],
                "type" : "object",
                "properties" : {
                    "additionalInfo" : {
                        "$ref" : "#/components/schemas/AdditionalInfo"
                    },
                    "amount" : {
                        "type" : "number"
                    },
                    "createdDate" : {
                        "type" : "string"
                    },
                    "lastUpdated" : {
                        "type" : "string"
                    },
                    "locationDbId" : {
                        "type" : "string"
                    },
                    "locationName" : {
                        "type" : "string"
                    },
                    "programDbId" : {
                        "type" : "string"
                    },
                    "programName" : {
                        "type" : "string"
                    },
                    "seedLotDescription" : {
                        "type" : "string"
                    },
                    "seedLotName" : {
                        "type" : "string"
                    },
                    "sourceCollection" : {
                        "type" : "string"
                    },
                    "storageLocation" : {
                        "type" : "string"
                    },
                    "units" : {
                        "type" : "string"
                    }
                }
            },
            "SeedLotNewRequest" : {
                "required" : [
                    "seedLotDbId",
                    "seedLotDbId",
                    "seedLotName"
                ],
                "type" : "object",
                "properties" : {
                    "additionalInfo" : {
                        "$ref" : "#/components/schemas/AdditionalInfo"
                    },
                    "amount" : {
                        "type" : "number"
                    },
                    "createdDate" : {
                        "type" : "string"
                    },
                    "lastUpdated" : {
                        "type" : "string"
                    },
                    "locationDbId" : {
                        "type" : "string"
                    },
                    "locationName" : {
                        "type" : "string"
                    },
                    "programDbId" : {
                        "type" : "string"
                    },
                    "programName" : {
                        "type" : "string"
                    },
                    "seedLotDbId" : {
                        "type" : "string"
                    },
                    "seedLotDescription" : {
                        "type" : "string"
                    },
                    "seedLotName" : {
                        "type" : "string"
                    },
                    "sourceCollection" : {
                        "type" : "string"
                    },
                    "storageLocation" : {
                        "type" : "string"
                    },
                    "units" : {
                        "type" : "string"
                    }
                }
            },
            "SeedLotTransaction" : {
                "required" : [
                    "transactionDbId"
                ],
                "type" : "object",
                "properties" : {
                    "additionalInfo" : {
                        "$ref" : "#/components/schemas/AdditionalInfo"
                    },
                    "amount" : {
                        "type" : "number"
                    },
                    "externalReferences" : {
                        "type" : "array",
                        "items" : {
                            "$ref" : "#/components/schemas/ExternalReference"
                        }
                    },
                    "seedLotDbId" : {
                        "type" : "string"
                    },
                    "seedLotName" : {
                        "type" : "string"
                    },
                    "transactionDbId" : {
                        "type" : "string"
                    },
                    "transactionDescription" : {
                        "type" : "string"
                    },
                    "transactionTimestamp" : {
                        "type" : "string"
                    },
                    "units" : {
                        "type" : "string"
                    }
                }
            },
            "Trait" : {
                "required" : [
                    "traitName"
                ],
                "type" : "object",
                "properties" : {
                    "additionalInfo" : {
                        "$ref" : "#/components/schemas/AdditionalInfo"
                    },
                    "attribute" : {
                        "type" : "string"
                    },
                    "attributePUI" : {
                        "type" : "string"
                    },
                    "entity" : {
                        "type" : "string"
                    },
                    "entityPUI" : {
                        "type" : "string"
                    },
                    "mainAbbreviation" : {
                        "type" : "string"
                    },
                    "ontologyReference" : {
                        "$ref" : "#/components/schemas/OntologyReference"
                    },
                    "status" : {
                        "type" : "string"
                    },
                    "traitClass" : {
                        "type" : "string"
                    },
                    "traitDbId" : {
                        "type" : "string"
                    },
                    "traitDescription" : {
                        "type" : "string"
                    },
                    "traitName" : {
                        "type" : "string"
                    },
                    "traitPUI" : {
                        "type" : "string"
                    }
                }
            },
            "TraitDataType" : {
                "type" : "string",
                "description" : "<p>Class of the scale, entries can be</p>\n<p>\"Code\" -  This scale class is exceptionally used to express complex traits. Code is a nominal scale that combines the expressions of the different traits composing the complex trait. For example a severity trait might be expressed by a 2 digit and 2 character code. The first 2 digits are the percentage of the plant covered by a fungus and the 2 characters refer to the delay in development, e.g. \"75VD\" means \"75 %\" of the plant is infected and the plant is very delayed.</p>\n<p>\"Date\" - The date class is for events expressed in a time format, See ISO 8601</p>\n<p>\"Duration\" - The Duration class is for time elapsed between two events expressed in a time format, e.g. days, hours, months</p>\n<p>\"Nominal\" - Categorical scale that can take one of a limited and fixed number of categories. There is no intrinsic ordering to the categories</p>\n<p>\"Numerical\" - Numerical scales express the trait with real numbers. The numerical scale defines the unit e.g. centimeter, ton per hectare, branches</p>\n<p>\"Ordinal\" - Ordinal scales are scales composed of ordered categories</p>\n<p>\"Text\" - A free text is used to express the trait.</p>",
                "enum" : [
                    "Code",
                    "Date",
                    "Duration",
                    "Nominal",
                    "Numerical",
                    "Ordinal",
                    "Text"
                ]
            },
            "Variable" : {
                "required" : [
                    "method",
                    "scale",
                    "trait"
                ],
                "type" : "object",
                "properties" : {
                    "additionalInfo" : {
                        "$ref" : "#/components/schemas/AdditionalInfo"
                    },
                    "commonCropName" : {
                        "type" : "string"
                    },
                    "contextOfUse" : {
                        "type" : "array",
                        "items" : {
                            "type" : "string"
                        }
                    },
                    "defaultValue" : {
                        "type" : "string"
                    },
                    "documentationURL" : {
                        "type" : "string"
                    },
                    "externalReferences" : {
                        "type" : "array",
                        "items" : {
                            "$ref" : "#/components/schemas/ExternalReference"
                        }
                    },
                    "growthStage" : {
                        "type" : "string"
                    },
                    "institution" : {
                        "type" : "string"
                    },
                    "language" : {
                        "type" : "string"
                    },
                    "method" : {
                        "$ref" : "#/components/schemas/Method"
                    },
                    "ontologyReference" : {
                        "$ref" : "#/components/schemas/OntologyReference"
                    },
                    "scale" : {
                        "$ref" : "#/components/schemas/Scale"
                    },
                    "scientist" : {
                        "type" : "string"
                    },
                    "status" : {
                        "type" : "string"
                    },
                    "submissionTimestamp" : {
                        "type" : "string"
                    },
                    "synonyms" : {
                        "type" : "array",
                        "items" : {
                            "type" : "string"
                        }
                    },
                    "trait" : {
                        "$ref" : "#/components/schemas/Trait"
                    }
                }
            },
            "basePagination" : {
                "required" : [
                    "currentPage",
                    "pageSize"
                ],
                "type" : "object",
                "properties" : {
                    "currentPage" : {
                        "type" : "integer",
                        "description" : "The index number for the returned page of data. This should always match the requested page number or the default page (0).",
                        "example" : 0,
                        "default" : 0
                    },
                    "pageSize" : {
                        "type" : "integer",
                        "description" : "The number of data elements returned, aka the size of the current page. If the requested page does not have enough elements to fill a page at the requested page size, this field should indicate the actual number of elements returned.",
                        "example" : 1000,
                        "default" : 1000
                    },
                    "totalCount" : {
                        "type" : "integer",
                        "description" : "The total number of elements that are available on the server and match the requested query parameters.",
                        "example" : 10
                    },
                    "totalPages" : {
                        "type" : "integer",
                        "description" : "The total number of pages of elements available on the server. This should be calculated with the following formula. \n<br> totalPages = CEILING( totalCount / requested_page_size)",
                        "example" : 1
                    }
                },
                "description" : "The pagination object is applicable only when the payload contains a \"data\" key. It describes the pagination of the data contained in the \"data\" array, as a way to identify which subset of data is being returned. \n<br> Pages are zero indexed, so the first page will be page 0 (zero)."
            },
            "dataFile" : {
                "required" : [
                    "fileURL"
                ],
                "type" : "object",
                "properties" : {
                    "fileURL" : {
                        "type" : "string",
                        "description" : "The absolute URL where the file is located",
                        "format" : "uri",
                        "example" : "https://wiki.brapi.org/examples/datafile.xlsx"
                    },
                    "fileName" : {
                        "type" : "string",
                        "description" : "The name of the file",
                        "example" : "datafile.xlsx"
                    },
                    "fileSize" : {
                        "type" : "integer",
                        "description" : "The size of the file in bytes",
                        "example" : 4398
                    },
                    "fileDescription" : {
                        "type" : "string",
                        "description" : "A human readable description of the file contents",
                        "example" : "This is an Excel data file"
                    },
                    "fileType" : {
                        "type" : "string",
                        "description" : "The type or format of the file. Preferably MIME Type.",
                        "example" : "application/vnd.ms-excel"
                    },
                    "fileMD5Hash" : {
                        "type" : "string",
                        "description" : "The MD5 Hash of the file contents to be used as a check sum",
                        "example" : "c2365e900c81a89cf74d83dab60df146"
                    }
                },
                "description" : "A dataFile contains a URL and the relevant file metadata to represent a file"
            },
            "metadata" : {
                "allOf" : [
                    {
                        "$ref" : "#/components/schemas/metadataBase"
                    },
                    {
                        "type" : "object",
                        "properties" : {
                            "pagination" : {
                                "$ref" : "#/components/schemas/basePagination"
                            }
                        }
                    }
                ]
            },
            "metadataBase" : {
                "type" : "object",
                "properties" : {
                    "datafiles" : {
                        "type" : "array",
                        "description" : "The datafiles contains a list of file URLs and metadata. \nThese files contain additional information related to the returned object and can be retrieved by a subsequent call. \nThis could be a supplementary data file, an informational file, the uploaded file where the data originated from, a generated file representing the whole dataset in a particular format, or any other related file. ",
                        "example" : [ ],
                        "items" : {
                            "$ref" : "#/components/schemas/dataFile"
                        }
                    },
                    "status" : {
                        "type" : "array",
                        "description" : "The status field contains a list of informational status messages from the server. \nIf no status is reported, an empty list should be returned. See Error Reporting for more information.",
                        "items" : {
                            "$ref" : "#/components/schemas/status"
                        }
                    }
                },
                "description" : "An object in the BrAPI standard response model that describes some information about the service call being performed. This includes supplementary data, status log messages, and pagination information."
            },
            "metadataTokenPagination" : {
                "allOf" : [
                    {
                        "$ref" : "#/components/schemas/metadataBase"
                    },
                    {
                        "type" : "object",
                        "properties" : {
                            "pagination" : {
                                "$ref" : "#/components/schemas/tokenPagination"
                            }
                        }
                    }
                ]
            },
            "status" : {
                "required" : [
                    "message",
                    "messageType"
                ],
                "type" : "object",
                "properties" : {
                    "message" : {
                        "type" : "string",
                        "description" : "A short message concerning the status of this request/response",
                        "example" : "Request accepted, response successful"
                    },
                    "messageType" : {
                        "type" : "string",
                        "description" : "The logging level for the attached message",
                        "example" : "INFO",
                        "enum" : [
                            "DEBUG",
                            "ERROR",
                            "WARNING",
                            "INFO"
                        ]
                    }
                },
                "description" : "An array of status messages to convey technical logging information from the server to the client."
            },
            "tokenPagination" : {
                "allOf" : [
                    {
                        "$ref" : "#/components/schemas/basePagination"
                    },
                    {
                        "required" : [
                            "nextPageToken"
                        ],
                        "type" : "object",
                        "properties" : {
                            "nextPageToken" : {
                                "type" : "string",
                                "description" : "**Deprecated in v2.1** Please use `page`. Github issue number #451 \n<br>The string token used to query the next page of data.",
                                "example" : "cb668f63",
                                "deprecated" : true
                            },
                            "currentPageToken" : {
                                "type" : "string",
                                "description" : "**Deprecated in v2.1** Please use `page`. Github issue number #451 \n<br>The string token used to query the current page of data.",
                                "example" : "48bc6ac1",
                                "deprecated" : true
                            },
                            "prevPageToken" : {
                                "type" : "string",
                                "description" : "**Deprecated in v2.1** Please use `page`. Github issue number #451 \n<br>The string token used to query the previous page of data.",
                                "example" : "9659857e",
                                "deprecated" : true
                            }
                        },
                        "description" : "**Deprecated in v2.1** Please use `page`. Github issue number #451 \n<br>The pagination object is applicable only when the payload contains a \"data\" key. It describes the pagination of the data contained in the \"data\" array, as a way to identify which subset of data is being returned. \n<br>Tokenized pages are for large data sets which can not be efficiently broken into indexed pages. Use the nextPageToken and prevPageToken to construct an additional query and move to the next or previous page respectively.  ",
                        "example" : {
                            "currentPage" : 0,
                            "pageSize" : 1000,
                            "totalCount" : 10,
                            "totalPages" : 1
                        }
                    }
                ]
            }
        },
        "responses" : {
            "ObservationVariableSingleResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "ObservationVariableSingleResponse",
                            "required" : [
                                "metadata",
                                "result"
                            ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "$ref" : "#/components/schemas/ObservationVariable"
                                }
                            }
                        }
                    }
                }
            },
            "SeedLotSingleResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "SeedLotSingleResponse",
                            "required" : [
                                "metadata",
                                "result"
                            ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "$ref" : "#/components/schemas/SeedLot"
                                }
                            }
                        }
                    }
                }
            },
            "VariantSingleResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "VariantSingleResponse",
                            "required" : [
                                "metadata",
                                "result"
                            ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "$ref" : "#/components/schemas/Variant"
                                }
                            }
                        }
                    }
                }
            },
            "202AcceptedSearchResponse" : {
                "description" : "Accepted",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "202AcceptedSearchResponse",
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "type" : "object",
                                    "properties" : {
                                        "searchResultsDbId" : {
                                            "type" : "string",
                                            "example" : "551ae08c"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "StudySingleResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "StudySingleResponse",
                            "required" : [
                                "metadata",
                                "result"
                            ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "$ref" : "#/components/schemas/Study"
                                }
                            }
                        }
                    }
                }
            },
            "MarkerPositionListResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "MarkerPositionListResponse",
                            "required" : [
                                "metadata",
                                "result"
                            ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "required" : [
                                        "data"
                                    ],
                                    "type" : "object",
                                    "properties" : {
                                        "data" : {
                                            "type" : "array",
                                            "items" : {
                                                "$ref" : "#/components/schemas/MarkerPosition"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "TrialListResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "TrialListResponse",
                            "required" : [
                                "metadata",
                                "result"
                            ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "required" : [
                                        "data"
                                    ],
                                    "type" : "object",
                                    "properties" : {
                                        "data" : {
                                            "type" : "array",
                                            "items" : {
                                                "$ref" : "#/components/schemas/Trial"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "MethodSingleResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "MethodSingleResponse",
                            "required" : [
                                "metadata",
                                "result"
                            ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "$ref" : "#/components/schemas/Method"
                                }
                            }
                        }
                    }
                }
            },
            "SeedLotListResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "SeedLotListResponse",
                            "required" : [
                                "metadata",
                                "result"
                            ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "required" : [
                                        "data"
                                    ],
                                    "type" : "object",
                                    "properties" : {
                                        "data" : {
                                            "type" : "array",
                                            "items" : {
                                                "$ref" : "#/components/schemas/SeedLot"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "VariantSetListResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "VariantSetListResponse",
                            "required" : [
                                "metadata",
                                "result"
                            ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "required" : [
                                        "data"
                                    ],
                                    "type" : "object",
                                    "properties" : {
                                        "data" : {
                                            "type" : "array",
                                            "items" : {
                                                "$ref" : "#/components/schemas/VariantSet"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "SampleSingleResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "SampleSingleResponse",
                            "required" : [
                                "metadata",
                                "result"
                            ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "$ref" : "#/components/schemas/Sample"
                                }
                            }
                        }
                    }
                }
            },
            "CallSetListResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "CallSetListResponse",
                            "required" : [
                                "metadata",
                                "result"
                            ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "required" : [
                                        "data"
                                    ],
                                    "type" : "object",
                                    "properties" : {
                                        "data" : {
                                            "type" : "array",
                                            "items" : {
                                                "$ref" : "#/components/schemas/CallSet"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "CallSetSingleResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "CallSetSingleResponse",
                            "required" : [
                                "metadata",
                                "result"
                            ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "$ref" : "#/components/schemas/CallSet"
                                }
                            }
                        }
                    }
                }
            },
            "VariantSetSingleResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "VariantSetSingleResponse",
                            "required" : [
                                "metadata",
                                "result"
                            ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "$ref" : "#/components/schemas/VariantSet"
                                }
                            }
                        }
                    }
                }
            },
            "ReferenceSetSingleResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "ReferenceSetSingleResponse",
                            "required" : [
                                "metadata",
                                "result"
                            ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "$ref" : "#/components/schemas/ReferenceSet"
                                }
                            }
                        }
                    }
                }
            },
            "ObservationVariableListResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "ObservationVariableListResponse",
                            "required" : [
                                "metadata",
                                "result"
                            ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "required" : [
                                        "data"
                                    ],
                                    "type" : "object",
                                    "properties" : {
                                        "data" : {
                                            "type" : "array",
                                            "items" : {
                                                "$ref" : "#/components/schemas/ObservationVariable"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "CrossListResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "CrossListResponse",
                            "required" : [
                                "metadata",
                                "result"
                            ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "required" : [
                                        "data"
                                    ],
                                    "type" : "object",
                                    "properties" : {
                                        "data" : {
                                            "type" : "array",
                                            "items" : {
                                                "$ref" : "#/components/schemas/Cross"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "ImageSingleResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "ImageSingleResponse",
                            "required" : [
                                "metadata",
                                "result"
                            ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "$ref" : "#/components/schemas/Image"
                                }
                            }
                        }
                    }
                }
            },
            "PlateListResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "PlateListResponse",
                            "required" : [
                                "metadata",
                                "result"
                            ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "required" : [
                                        "data"
                                    ],
                                    "type" : "object",
                                    "properties" : {
                                        "data" : {
                                            "type" : "array",
                                            "items" : {
                                                "$ref" : "#/components/schemas/Plate"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "SeasonListResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "SeasonListResponse",
                            "required" : [
                                "metadata",
                                "result"
                            ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "required" : [
                                        "data"
                                    ],
                                    "type" : "object",
                                    "properties" : {
                                        "data" : {
                                            "type" : "array",
                                            "items" : {
                                                "$ref" : "#/components/schemas/Season"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "ObservationUnitListResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "ObservationUnitListResponse",
                            "required" : [
                                "metadata",
                                "result"
                            ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "required" : [
                                        "data"
                                    ],
                                    "type" : "object",
                                    "properties" : {
                                        "data" : {
                                            "type" : "array",
                                            "items" : {
                                                "$ref" : "#/components/schemas/ObservationUnit"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "ReferenceListResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "ReferenceListResponse",
                            "required" : [
                                "metadata",
                                "result"
                            ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "required" : [
                                        "data"
                                    ],
                                    "type" : "object",
                                    "properties" : {
                                        "data" : {
                                            "type" : "array",
                                            "items" : {
                                                "$ref" : "#/components/schemas/Reference"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "ObservationListResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "ObservationListResponse",
                            "required" : [
                                "metadata",
                                "result"
                            ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "required" : [
                                        "data"
                                    ],
                                    "type" : "object",
                                    "properties" : {
                                        "data" : {
                                            "type" : "array",
                                            "items" : {
                                                "$ref" : "#/components/schemas/Observation"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "AlleleMatrixListResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "AlleleMatrixListResponse",
                            "required" : [
                                "metadata",
                                "result"
                            ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "required" : [
                                        "data"
                                    ],
                                    "type" : "object",
                                    "properties" : {
                                        "data" : {
                                            "type" : "array",
                                            "items" : {
                                                "$ref" : "#/components/schemas/AlleleMatrix"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "GenomeMapSingleResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "GenomeMapSingleResponse",
                            "required" : [
                                "metadata",
                                "result"
                            ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "$ref" : "#/components/schemas/GenomeMap"
                                }
                            }
                        }
                    }
                }
            },
            "PersonListResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "PersonListResponse",
                            "required" : [
                                "metadata",
                                "result"
                            ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "required" : [
                                        "data"
                                    ],
                                    "type" : "object",
                                    "properties" : {
                                        "data" : {
                                            "type" : "array",
                                            "items" : {
                                                "$ref" : "#/components/schemas/Person"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "PlannedCrossListResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "PlannedCrossListResponse",
                            "required" : [
                                "metadata",
                                "result"
                            ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "required" : [
                                        "data"
                                    ],
                                    "type" : "object",
                                    "properties" : {
                                        "data" : {
                                            "type" : "array",
                                            "items" : {
                                                "$ref" : "#/components/schemas/PlannedCross"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "LocationListResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "LocationListResponse",
                            "required" : [
                                "metadata",
                                "result"
                            ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "required" : [
                                        "data"
                                    ],
                                    "type" : "object",
                                    "properties" : {
                                        "data" : {
                                            "type" : "array",
                                            "items" : {
                                                "$ref" : "#/components/schemas/Location"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "403Forbidden" : {
                "description" : "Forbidden",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "type" : "string"
                        },
                        "example" : "ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action"
                    }
                }
            },
            "OntologySingleResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "OntologySingleResponse",
                            "required" : [
                                "metadata",
                                "result"
                            ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "$ref" : "#/components/schemas/Ontology"
                                }
                            }
                        }
                    }
                }
            },
            "ProgramListResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "ProgramListResponse",
                            "required" : [
                                "metadata",
                                "result"
                            ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "required" : [
                                        "data"
                                    ],
                                    "type" : "object",
                                    "properties" : {
                                        "data" : {
                                            "type" : "array",
                                            "items" : {
                                                "$ref" : "#/components/schemas/Program"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "ObservationUnitSingleResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "ObservationUnitSingleResponse",
                            "required" : [
                                "metadata",
                                "result"
                            ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "$ref" : "#/components/schemas/ObservationUnit"
                                }
                            }
                        }
                    }
                }
            },
            "ScaleListResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "ScaleListResponse",
                            "required" : [
                                "metadata",
                                "result"
                            ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "required" : [
                                        "data"
                                    ],
                                    "type" : "object",
                                    "properties" : {
                                        "data" : {
                                            "type" : "array",
                                            "items" : {
                                                "$ref" : "#/components/schemas/Scale"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "ListListResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "ListListResponse",
                            "required" : [
                                "metadata",
                                "result"
                            ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "required" : [
                                        "data"
                                    ],
                                    "type" : "object",
                                    "properties" : {
                                        "data" : {
                                            "type" : "array",
                                            "items" : {
                                                "$ref" : "#/components/schemas/List"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "400BadRequest" : {
                "description" : "Bad Request",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "type" : "string"
                        },
                        "example" : "ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object\n\nERROR - 2018-10-08T18:15:11Z - Invalid query parameter\n\nERROR - 2018-10-08T18:15:11Z - Required parameter is missing"
                    }
                }
            },
            "MethodListResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "MethodListResponse",
                            "required" : [
                                "metadata",
                                "result"
                            ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "required" : [
                                        "data"
                                    ],
                                    "type" : "object",
                                    "properties" : {
                                        "data" : {
                                            "type" : "array",
                                            "items" : {
                                                "$ref" : "#/components/schemas/Method"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "CrossingProjectListResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "CrossingProjectListResponse",
                            "required" : [
                                "metadata",
                                "result"
                            ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "required" : [
                                        "data"
                                    ],
                                    "type" : "object",
                                    "properties" : {
                                        "data" : {
                                            "type" : "array",
                                            "items" : {
                                                "$ref" : "#/components/schemas/CrossingProject"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "GermplasmAttributeSingleResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "GermplasmAttributeSingleResponse",
                            "required" : [
                                "metadata",
                                "result"
                            ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "$ref" : "#/components/schemas/GermplasmAttribute"
                                }
                            }
                        }
                    }
                }
            },
            "TraitSingleResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "TraitSingleResponse",
                            "required" : [
                                "metadata",
                                "result"
                            ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "$ref" : "#/components/schemas/Trait"
                                }
                            }
                        }
                    }
                }
            },
            "401Unauthorized" : {
                "description" : "Unauthorized",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "type" : "string"
                        },
                        "example" : "ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token"
                    }
                }
            },
            "GermplasmAttributeListResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "GermplasmAttributeListResponse",
                            "required" : [
                                "metadata",
                                "result"
                            ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "required" : [
                                        "data"
                                    ],
                                    "type" : "object",
                                    "properties" : {
                                        "data" : {
                                            "type" : "array",
                                            "items" : {
                                                "$ref" : "#/components/schemas/GermplasmAttribute"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "GermplasmListResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "GermplasmListResponse",
                            "required" : [
                                "metadata",
                                "result"
                            ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "required" : [
                                        "data"
                                    ],
                                    "type" : "object",
                                    "properties" : {
                                        "data" : {
                                            "type" : "array",
                                            "items" : {
                                                "$ref" : "#/components/schemas/Germplasm"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "CrossingProjectSingleResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "CrossingProjectSingleResponse",
                            "required" : [
                                "metadata",
                                "result"
                            ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "$ref" : "#/components/schemas/CrossingProject"
                                }
                            }
                        }
                    }
                }
            },
            "EventListResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "EventListResponse",
                            "required" : [
                                "metadata",
                                "result"
                            ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "required" : [
                                        "data"
                                    ],
                                    "type" : "object",
                                    "properties" : {
                                        "data" : {
                                            "type" : "array",
                                            "items" : {
                                                "$ref" : "#/components/schemas/Event"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "TraitListResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "TraitListResponse",
                            "required" : [
                                "metadata",
                                "result"
                            ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "required" : [
                                        "data"
                                    ],
                                    "type" : "object",
                                    "properties" : {
                                        "data" : {
                                            "type" : "array",
                                            "items" : {
                                                "$ref" : "#/components/schemas/Trait"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "SampleListResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "SampleListResponse",
                            "required" : [
                                "metadata",
                                "result"
                            ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "required" : [
                                        "data"
                                    ],
                                    "type" : "object",
                                    "properties" : {
                                        "data" : {
                                            "type" : "array",
                                            "items" : {
                                                "$ref" : "#/components/schemas/Sample"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "ReferenceSetListResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "ReferenceSetListResponse",
                            "required" : [
                                "metadata",
                                "result"
                            ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "required" : [
                                        "data"
                                    ],
                                    "type" : "object",
                                    "properties" : {
                                        "data" : {
                                            "type" : "array",
                                            "items" : {
                                                "$ref" : "#/components/schemas/ReferenceSet"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "TrialSingleResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "TrialSingleResponse",
                            "required" : [
                                "metadata",
                                "result"
                            ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "$ref" : "#/components/schemas/Trial"
                                }
                            }
                        }
                    }
                }
            },
            "GermplasmSingleResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "GermplasmSingleResponse",
                            "required" : [
                                "metadata",
                                "result"
                            ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "$ref" : "#/components/schemas/Germplasm"
                                }
                            }
                        }
                    }
                }
            },
            "SeasonSingleResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "SeasonSingleResponse",
                            "required" : [
                                "metadata",
                                "result"
                            ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "$ref" : "#/components/schemas/Season"
                                }
                            }
                        }
                    }
                }
            },
            "ReferenceSingleResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "ReferenceSingleResponse",
                            "required" : [
                                "metadata",
                                "result"
                            ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "$ref" : "#/components/schemas/Reference"
                                }
                            }
                        }
                    }
                }
            },
            "OntologyListResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "OntologyListResponse",
                            "required" : [
                                "metadata",
                                "result"
                            ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "required" : [
                                        "data"
                                    ],
                                    "type" : "object",
                                    "properties" : {
                                        "data" : {
                                            "type" : "array",
                                            "items" : {
                                                "$ref" : "#/components/schemas/Ontology"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "404NotFound" : {
                "description" : "Not Found",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "type" : "string"
                        },
                        "example" : "ERROR - 2018-10-08T18:15:11Z - The requested object DbId is not found"
                    }
                }
            },
            "StudyListResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "StudyListResponse",
                            "required" : [
                                "metadata",
                                "result"
                            ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "required" : [
                                        "data"
                                    ],
                                    "type" : "object",
                                    "properties" : {
                                        "data" : {
                                            "type" : "array",
                                            "items" : {
                                                "$ref" : "#/components/schemas/Study"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "ScaleSingleResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "ScaleSingleResponse",
                            "required" : [
                                "metadata",
                                "result"
                            ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "$ref" : "#/components/schemas/Scale"
                                }
                            }
                        }
                    }
                }
            },
            "BreedingMethodSingleResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "BreedingMethodSingleResponse",
                            "required" : [
                                "metadata",
                                "result"
                            ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "$ref" : "#/components/schemas/BreedingMethod"
                                }
                            }
                        }
                    }
                }
            },
            "CallListResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "CallListResponse",
                            "required" : [
                                "metadata",
                                "result"
                            ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "required" : [
                                        "data"
                                    ],
                                    "type" : "object",
                                    "properties" : {
                                        "data" : {
                                            "type" : "array",
                                            "items" : {
                                                "$ref" : "#/components/schemas/Call"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "LocationSingleResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "LocationSingleResponse",
                            "required" : [
                                "metadata",
                                "result"
                            ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "$ref" : "#/components/schemas/Location"
                                }
                            }
                        }
                    }
                }
            },
            "PersonSingleResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "PersonSingleResponse",
                            "required" : [
                                "metadata",
                                "result"
                            ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "$ref" : "#/components/schemas/Person"
                                }
                            }
                        }
                    }
                }
            },
            "ImageListResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "ImageListResponse",
                            "required" : [
                                "metadata",
                                "result"
                            ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "required" : [
                                        "data"
                                    ],
                                    "type" : "object",
                                    "properties" : {
                                        "data" : {
                                            "type" : "array",
                                            "items" : {
                                                "$ref" : "#/components/schemas/Image"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "VariantListResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "VariantListResponse",
                            "required" : [
                                "metadata",
                                "result"
                            ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "required" : [
                                        "data"
                                    ],
                                    "type" : "object",
                                    "properties" : {
                                        "data" : {
                                            "type" : "array",
                                            "items" : {
                                                "$ref" : "#/components/schemas/Variant"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "PlateSingleResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "PlateSingleResponse",
                            "required" : [
                                "metadata",
                                "result"
                            ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "$ref" : "#/components/schemas/Plate"
                                }
                            }
                        }
                    }
                }
            },
            "GermplasmAttributeValueListResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "GermplasmAttributeValueListResponse",
                            "required" : [
                                "metadata",
                                "result"
                            ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "required" : [
                                        "data"
                                    ],
                                    "type" : "object",
                                    "properties" : {
                                        "data" : {
                                            "type" : "array",
                                            "items" : {
                                                "$ref" : "#/components/schemas/GermplasmAttributeValue"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "BreedingMethodListResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "BreedingMethodListResponse",
                            "required" : [
                                "metadata",
                                "result"
                            ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "required" : [
                                        "data"
                                    ],
                                    "type" : "object",
                                    "properties" : {
                                        "data" : {
                                            "type" : "array",
                                            "items" : {
                                                "$ref" : "#/components/schemas/BreedingMethod"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "GermplasmAttributeValueSingleResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "GermplasmAttributeValueSingleResponse",
                            "required" : [
                                "metadata",
                                "result"
                            ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "$ref" : "#/components/schemas/GermplasmAttributeValue"
                                }
                            }
                        }
                    }
                }
            },
            "GenomeMapListResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "GenomeMapListResponse",
                            "required" : [
                                "metadata",
                                "result"
                            ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "required" : [
                                        "data"
                                    ],
                                    "type" : "object",
                                    "properties" : {
                                        "data" : {
                                            "type" : "array",
                                            "items" : {
                                                "$ref" : "#/components/schemas/GenomeMap"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "PedigreeNodeListResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "PedigreeNodeListResponse",
                            "required" : [
                                "metadata",
                                "result"
                            ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "required" : [
                                        "data"
                                    ],
                                    "type" : "object",
                                    "properties" : {
                                        "data" : {
                                            "type" : "array",
                                            "items" : {
                                                "$ref" : "#/components/schemas/PedigreeNode"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "ObservationSingleResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "ObservationSingleResponse",
                            "required" : [
                                "metadata",
                                "result"
                            ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "$ref" : "#/components/schemas/Observation"
                                }
                            }
                        }
                    }
                }
            },
            "ListSingleResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "ListSingleResponse",
                            "required" : [
                                "metadata",
                                "result"
                            ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "$ref" : "#/components/schemas/List"
                                }
                            }
                        }
                    }
                }
            },
            "ProgramSingleResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "ProgramSingleResponse",
                            "required" : [
                                "metadata",
                                "result"
                            ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "$ref" : "#/components/schemas/Program"
                                }
                            }
                        }
                    }
                }
            }
        },
        "parameters" : {
            "externalReferenceID" : {
                "name" : "externalReferenceID",
                "in" : "query",
                "description" : "**Deprecated in v2.1** Please use `externalReferenceId`. Github issue number #460 \n<br>An external reference ID. Could be a simple string or a URI. (use with `externalReferenceSource` parameter)",
                "required" : false,
                "deprecated" : true,
                "style" : "form",
                "explode" : true,
                "schema" : {
                    "type" : "string"
                }
            },
            "externalReferenceId" : {
                "name" : "externalReferenceId",
                "in" : "query",
                "description" : "An external reference ID. Could be a simple string or a URI. (use with `externalReferenceSource` parameter)",
                "required" : false,
                "style" : "form",
                "explode" : true,
                "schema" : {
                    "type" : "string"
                }
            },
            "externalReferenceSource" : {
                "name" : "externalReferenceSource",
                "in" : "query",
                "description" : "An identifier for the source system or database of an external reference (use with `externalReferenceId` parameter)",
                "required" : false,
                "style" : "form",
                "explode" : true,
                "schema" : {
                    "type" : "string"
                }
            },
            "acceptHeader" : {
                "name" : "Accept",
                "in" : "header",
                "description" : "A standard HTTP request header that is used to request a specific content type (JSON, CSV, etc) which is \"acceptable\" to the client and should be returned by the server",
                "required" : true,
                "style" : "simple",
                "explode" : false,
                "schema" : {
                    "$ref" : "#/components/schemas/ContentTypes"
                },
                "example" : "application/json"
            },
            "searchResultsDbId" : {
                "name" : "searchResultsDbId",
                "in" : "path",
                "description" : "Unique identifier which references the search results",
                "required" : true,
                "style" : "simple",
                "explode" : false,
                "schema" : {
                    "type" : "string"
                }
            },
            "pageSize" : {
                "name" : "pageSize",
                "in" : "query",
                "description" : "The size of the pages to be returned. Default is `1000`.",
                "required" : false,
                "style" : "form",
                "explode" : true,
                "schema" : {
                    "type" : "integer"
                },
                "example" : 1000
            },
            "authorizationHeader" : {
                "name" : "Authorization",
                "in" : "header",
                "description" : "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>",
                "required" : false,
                "style" : "simple",
                "explode" : false,
                "schema" : {
                    "pattern" : "^Bearer .*$",
                    "type" : "string"
                },
                "example" : "Bearer XXXX"
            },
            "page" : {
                "name" : "page",
                "in" : "query",
                "description" : "Used to request a specific page of data to be returned.\n\nThe page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.",
                "required" : false,
                "style" : "form",
                "explode" : true,
                "schema" : {
                    "type" : "integer"
                },
                "example" : "0"
            },
            "pageToken" : {
                "name" : "pageToken",
                "in" : "query",
                "description" : "**Deprecated in v2.1** Please use `page`. Github issue number #451 \n<br> Used to request a specific page of data to be returned.\n<br> Tokenized pages are for large data sets which can not be efficiently broken into indexed pages. Use the nextPageToken and prevPageToken from a prior response to construct a query and move to the next or previous page respectively. ",
                "required" : false,
                "deprecated" : true,
                "style" : "form",
                "explode" : true,
                "schema" : {
                    "type" : "string"
                },
                "example" : "33c27874"
            }
        },
        "securitySchemes" : {
            "AuthorizationToken" : {
                "type" : "http",
                "description" : "OAuth Bearer Token - A valid Bearer token to prove authorization",
                "scheme" : "bearer",
                "bearerFormat" : "nonce token or JWT"
            }
        }
    }
}