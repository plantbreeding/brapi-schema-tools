{
    "openapi" : "3.0.1",
    "info" : {
        "title" : "BrAPI-Germplasm",
        "version" : "0.0.0"
    },
    "paths" : {
        "/germplasm" : {
            "get" : {
                "tags" : [
                    "Germplasm"
                ],
                "summary" : "Get a filtered list of Germplasm",
                "description" : "Get a list of Germplasm",
                "parameters" : [
                    {
                        "name" : "commonCropName",
                        "in" : "query",
                        "description" : "The BrAPI Common Crop Name is the simple, generalized, widely accepted name of the organism being researched. It is most often used in multi-crop systems where digital resources need to be divided at a high level. Things like 'Maize', 'Wheat', and 'Rice' are examples of common crop names.\n\nUse this parameter to only return results associated with the given crops. \n\nUse `GET /commoncropnames` to find the list of available crops on a server.",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "germplasmDbId",
                        "in" : "query",
                        "description" : "List of IDs which uniquely identify germplasm to search for",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "germplasmName",
                        "in" : "query",
                        "description" : "List of human readable names to identify germplasm to search for",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "programDbId",
                        "in" : "query",
                        "description" : "A BrAPI Program represents the high level organization or group who is responsible for conducting trials and studies. Things like Breeding Programs and Funded Projects are considered BrAPI Programs. \n\nUse this parameter to only return results associated with the given programs. \n\nUse `GET /programs` to find the list of available programs on a server.",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "programName",
                        "in" : "query",
                        "description" : "Use this parameter to only return results associated with the given program names. Program names are not required to be unique.\n\nUse `GET /programs` to find the list of available programs on a server.",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "studyDbId",
                        "in" : "query",
                        "description" : "List of study identifiers to search for",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "studyName",
                        "in" : "query",
                        "description" : "List of study names to filter search results",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "trialDbId",
                        "in" : "query",
                        "description" : "The ID which uniquely identifies a trial to search for",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "trialName",
                        "in" : "query",
                        "description" : "The human readable name of a trial to search for",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "germplasmPUI",
                        "in" : "query",
                        "description" : "List of Permanent Unique Identifiers to identify germplasm",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "accessionNumber",
                        "in" : "query",
                        "description" : "A collection of unique identifiers for materials or germplasm within a genebank\n\nMCPD (v2.1) (ACCENUMB) 2. This is the unique identifier for accessions within a genebank, and is assigned when a sample is entered into the genebank collection (e.g. \"PI 113869\").",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "collection",
                        "in" : "query",
                        "description" : "A specific panel/collection/population name this germplasm belongs to.",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "familyCode",
                        "in" : "query",
                        "description" : "A familyCode representing the family this germplasm belongs to.",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "instituteCode",
                        "in" : "query",
                        "description" : "The code for the institute that maintains the material. \n<br/> MCPD (v2.1) (INSTCODE) 1. FAO WIEWS code of the institute where the accession is maintained. The codes consist of the 3-letter ISO 3166 country code of the country where the institute is located plus a number (e.g. PER001). The current set of institute codes is available from http://www.fao.org/wiews. For those institutes not yet having an FAO Code, or for those with \"obsolete\" codes, see \"Common formatting rules (v)\".",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "binomialName",
                        "in" : "query",
                        "description" : "List of the full binomial name (scientific name) to identify a germplasm",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "genu",
                        "in" : "query",
                        "description" : "List of Genus names to identify germplasm",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "specy",
                        "in" : "query",
                        "description" : "List of Species names to identify germplasm",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "synonym",
                        "in" : "query",
                        "description" : "List of alternative names or IDs used to reference this germplasm",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "parentDbId",
                        "in" : "query",
                        "description" : "Search for Germplasm with these parents",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "name" : "progenyDbId",
                        "in" : "query",
                        "description" : "Search for Germplasm with these children",
                        "required" : false,
                        "schema" : {
                            "type" : "string"
                        }
                    },
                    {
                        "$ref" : "#/components/parameters/externalReferenceID"
                    },
                    {
                        "$ref" : "#/components/parameters/externalReferenceId"
                    },
                    {
                        "$ref" : "#/components/parameters/externalReferenceSource"
                    },
                    {
                        "$ref" : "#/components/parameters/page"
                    },
                    {
                        "$ref" : "#/components/parameters/pageSize"
                    },
                    {
                        "$ref" : "#/components/parameters/authorizationHeader"
                    }
                ],
                "responses" : {
                    "200" : {
                        "$ref" : "#/components/responses/GermplasmListResponse"
                    },
                    "400" : {
                        "$ref" : "#/components/responses/400BadRequest"
                    },
                    "401" : {
                        "$ref" : "#/components/responses/401Unauthorized"
                    },
                    "403" : {
                        "$ref" : "#/components/responses/403Forbidden"
                    }
                }
            },
            "post" : {
                "tags" : [
                    "Germplasm"
                ],
                "summary" : "Create new Germplasm",
                "description" : "Add new Germplasm to database",
                "parameters" : [
                    {
                        "$ref" : "#/components/parameters/authorizationHeader"
                    }
                ],
                "requestBody" : {
                    "content" : {
                        "application/json" : {
                            "schema" : {
                                "$ref" : "#/components/schemas/GermplasmNewRequest"
                            }
                        }
                    }
                },
                "responses" : {
                    "200" : {
                        "$ref" : "#/components/responses/GermplasmListResponse"
                    },
                    "400" : {
                        "$ref" : "#/components/responses/400BadRequest"
                    },
                    "401" : {
                        "$ref" : "#/components/responses/401Unauthorized"
                    },
                    "403" : {
                        "$ref" : "#/components/responses/403Forbidden"
                    }
                }
            }
        },
        "/germplasm/{germplasmDbId}" : {
            "get" : {
                "tags" : [
                    "Germplasm"
                ],
                "summary" : "Get the details of a specific Germplasm",
                "description" : "Get details for a Germplasm",
                "responses" : {
                    "200" : {
                        "$ref" : "#/components/responses/GermplasmSingleResponse"
                    },
                    "400" : {
                        "$ref" : "#/components/responses/400BadRequest"
                    },
                    "401" : {
                        "$ref" : "#/components/responses/401Unauthorized"
                    },
                    "403" : {
                        "$ref" : "#/components/responses/403Forbidden"
                    }
                }
            },
            "put" : {
                "tags" : [
                    "Germplasm"
                ],
                "summary" : "Update the details for an existing Germplasm",
                "description" : "Update the details for an existing Germplasm",
                "parameters" : [
                    {
                        "$ref" : "#/components/parameters/authorizationHeader"
                    }
                ],
                "requestBody" : {
                    "content" : {
                        "application/json" : {
                            "schema" : {
                                "$ref" : "#/components/schemas/GermplasmNewRequest"
                            }
                        }
                    }
                },
                "responses" : {
                    "200" : {
                        "$ref" : "#/components/responses/GermplasmSingleResponse"
                    },
                    "400" : {
                        "$ref" : "#/components/responses/400BadRequest"
                    },
                    "401" : {
                        "$ref" : "#/components/responses/401Unauthorized"
                    },
                    "403" : {
                        "$ref" : "#/components/responses/403Forbidden"
                    }
                }
            }
        },
        "/search/germplasm" : {
            "post" : {
                "tags" : [
                    "Germplasm"
                ],
                "summary" : "Submit a search request for `Germplasm`",
                "description" : "Submit a search request for `Germplasm`<br/>\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse the corresponding `GET /search/germplasm/{searchResultsDbId}` to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
                "responses" : {
                    "200" : {
                        "$ref" : "#/components/responses/GermplasmListResponse"
                    },
                    "202" : {
                        "$ref" : "#/components/responses/202AcceptedSearchResponse"
                    },
                    "400" : {
                        "$ref" : "#/components/responses/400BadRequest"
                    },
                    "401" : {
                        "$ref" : "#/components/responses/401Unauthorized"
                    },
                    "403" : {
                        "$ref" : "#/components/responses/403Forbidden"
                    }
                }
            }
        },
        "/search/germplasm/{searchResultsDbId}" : {
            "get" : {
                "tags" : [
                    "Germplasm"
                ],
                "summary" : "Submit a search request for `Germplasm`<br/>\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse the corresponding `GET /search/germplasm/{searchResultsDbId}` to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
                "description" : "Get the results of a `Germplasm` search request <br/>\nClients should submit a search request using the corresponding `POST /search/germplasm` endpoint.\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse this endpoint to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
                "responses" : {
                    "200" : {
                        "$ref" : "#/components/responses/GermplasmListResponse"
                    },
                    "400" : {
                        "$ref" : "#/components/responses/400BadRequest"
                    },
                    "401" : {
                        "$ref" : "#/components/responses/401Unauthorized"
                    },
                    "403" : {
                        "$ref" : "#/components/responses/403Forbidden"
                    }
                }
            }
        }
    },
    "components" : {
        "schemas" : {
            "ContentTypes" : {
                "type" : "string",
                "enum" : [
                    "application/json",
                    "text/csv",
                    "text/tsv",
                    "application/flapjack"
                ]
            },
            "Context" : {
                "title" : "context",
                "type" : "array",
                "description" : "The JSON-LD Context is used to provide JSON-LD definitions to each field in a JSON object. By providing an array of context file urls, a BrAPI response object becomes JSON-LD compatible.  \n\nFor more information, see https://w3c.github.io/json-ld-syntax/#the-context",
                "example" : [
                    "https://brapi.org/jsonld/context/metadata.jsonld"
                ],
                "items" : {
                    "type" : "string",
                    "format" : "uri"
                }
            },
            "Germplasm" : {
                "required" : [
                    "commonCropName",
                    "germplasmDbId",
                    "germplasmName",
                    "germplasmPUI"
                ],
                "type" : "object",
                "properties" : {
                    "accessionNumber" : {
                        "type" : "string"
                    },
                    "acquisitionDate" : {
                        "type" : "string"
                    },
                    "additionalInfo" : {
                        "$ref" : "#/components/schemas/AdditionalInfo"
                    },
                    "biologicalStatusOfAccessionCode" : {
                        "type" : "string",
                        "description" : "MCPD (v2.1) (SAMPSTAT) 19. The coding scheme proposed can be used at 3 different levels of detail: either by using the general codes such as 100, 200, 300, 400, or by using the more specific codes such as 110, 120, etc. \n\n100) Wild \n110) Natural \n120) Semi-natural/wild \n130) Semi-natural/sown \n200) Weedy \n300) Traditional cultivar/landrace \n400) Breeding/research material \n410) Breeders line \n411) Synthetic population \n412) Hybrid \n413) Founder stock/base population \n414) Inbred line (parent of hybrid cultivar) \n415) Segregating population \n416) Clonal selection \n420) Genetic stock \n421) Mutant (e.g. induced/insertion mutants, tilling populations) \n422) Cytogenetic stocks (e.g. chromosome addition/substitution, aneuploids,  amphiploids) \n423) Other genetic stocks (e.g. mapping populations) \n500) Advanced or improved cultivar (conventional breeding methods) \n600) GMO (by genetic engineering) \n999) Other (Elaborate in REMARKS field)",
                        "enum" : [
                            "100",
                            "110",
                            "120",
                            "130",
                            "200",
                            "300",
                            "400",
                            "410",
                            "411",
                            "412",
                            "413",
                            "414",
                            "415",
                            "416",
                            "420",
                            "421",
                            "422",
                            "423",
                            "500",
                            "600",
                            "999"
                        ]
                    },
                    "biologicalStatusOfAccessionDescription" : {
                        "type" : "string"
                    },
                    "breedingMethodDbId" : {
                        "type" : "string"
                    },
                    "breedingMethodName" : {
                        "type" : "string"
                    },
                    "collection" : {
                        "type" : "string"
                    },
                    "commonCropName" : {
                        "type" : "string"
                    },
                    "countryOfOriginCode" : {
                        "type" : "string"
                    },
                    "defaultDisplayName" : {
                        "type" : "string"
                    },
                    "documentationURL" : {
                        "type" : "string"
                    },
                    "genus" : {
                        "type" : "string"
                    },
                    "germplasmName" : {
                        "type" : "string"
                    },
                    "germplasmPUI" : {
                        "type" : "string"
                    },
                    "germplasmPreprocessing" : {
                        "type" : "string"
                    },
                    "instituteCode" : {
                        "type" : "string"
                    },
                    "instituteName" : {
                        "type" : "string"
                    },
                    "pedigree" : {
                        "type" : "string"
                    },
                    "pedigreeNode" : {
                        "$ref" : "#/components/schemas/PedigreeNode"
                    },
                    "sampleDbIds" : {
                        "type" : "array",
                        "items" : {
                            "type" : "string"
                        }
                    },
                    "seedSource" : {
                        "type" : "string"
                    },
                    "seedSourceDescription" : {
                        "type" : "string"
                    },
                    "species" : {
                        "type" : "string"
                    },
                    "speciesAuthority" : {
                        "type" : "string"
                    },
                    "subtaxa" : {
                        "type" : "string"
                    },
                    "subtaxaAuthority" : {
                        "type" : "string"
                    }
                }
            },
            "GermplasmNewRequest" : {
                "required" : [
                    "commonCropName",
                    "germplasmDbId",
                    "germplasmDbId",
                    "germplasmName",
                    "germplasmPUI"
                ],
                "type" : "object",
                "properties" : {
                    "accessionNumber" : {
                        "type" : "string"
                    },
                    "acquisitionDate" : {
                        "type" : "string"
                    },
                    "additionalInfo" : {
                        "$ref" : "#/components/schemas/AdditionalInfo"
                    },
                    "biologicalStatusOfAccessionCode" : {
                        "type" : "string",
                        "description" : "MCPD (v2.1) (SAMPSTAT) 19. The coding scheme proposed can be used at 3 different levels of detail: either by using the general codes such as 100, 200, 300, 400, or by using the more specific codes such as 110, 120, etc. \n\n100) Wild \n110) Natural \n120) Semi-natural/wild \n130) Semi-natural/sown \n200) Weedy \n300) Traditional cultivar/landrace \n400) Breeding/research material \n410) Breeders line \n411) Synthetic population \n412) Hybrid \n413) Founder stock/base population \n414) Inbred line (parent of hybrid cultivar) \n415) Segregating population \n416) Clonal selection \n420) Genetic stock \n421) Mutant (e.g. induced/insertion mutants, tilling populations) \n422) Cytogenetic stocks (e.g. chromosome addition/substitution, aneuploids,  amphiploids) \n423) Other genetic stocks (e.g. mapping populations) \n500) Advanced or improved cultivar (conventional breeding methods) \n600) GMO (by genetic engineering) \n999) Other (Elaborate in REMARKS field)",
                        "enum" : [
                            "100",
                            "110",
                            "120",
                            "130",
                            "200",
                            "300",
                            "400",
                            "410",
                            "411",
                            "412",
                            "413",
                            "414",
                            "415",
                            "416",
                            "420",
                            "421",
                            "422",
                            "423",
                            "500",
                            "600",
                            "999"
                        ]
                    },
                    "biologicalStatusOfAccessionDescription" : {
                        "type" : "string"
                    },
                    "breedingMethodDbId" : {
                        "type" : "string"
                    },
                    "breedingMethodName" : {
                        "type" : "string"
                    },
                    "collection" : {
                        "type" : "string"
                    },
                    "commonCropName" : {
                        "type" : "string"
                    },
                    "countryOfOriginCode" : {
                        "type" : "string"
                    },
                    "defaultDisplayName" : {
                        "type" : "string"
                    },
                    "documentationURL" : {
                        "type" : "string"
                    },
                    "genus" : {
                        "type" : "string"
                    },
                    "germplasmDbId" : {
                        "type" : "string"
                    },
                    "germplasmName" : {
                        "type" : "string"
                    },
                    "germplasmPUI" : {
                        "type" : "string"
                    },
                    "germplasmPreprocessing" : {
                        "type" : "string"
                    },
                    "instituteCode" : {
                        "type" : "string"
                    },
                    "instituteName" : {
                        "type" : "string"
                    },
                    "pedigree" : {
                        "type" : "string"
                    },
                    "pedigreeNode" : {
                        "$ref" : "#/components/schemas/PedigreeNode"
                    },
                    "sampleDbIds" : {
                        "type" : "array",
                        "items" : {
                            "type" : "string"
                        }
                    },
                    "seedSource" : {
                        "type" : "string"
                    },
                    "seedSourceDescription" : {
                        "type" : "string"
                    },
                    "species" : {
                        "type" : "string"
                    },
                    "speciesAuthority" : {
                        "type" : "string"
                    },
                    "subtaxa" : {
                        "type" : "string"
                    },
                    "subtaxaAuthority" : {
                        "type" : "string"
                    }
                }
            },
            "GermplasmSearchRequest" : {
                "type" : "object",
                "properties" : { }
            },
            "basePagination" : {
                "required" : [
                    "currentPage",
                    "pageSize"
                ],
                "type" : "object",
                "properties" : {
                    "currentPage" : {
                        "type" : "integer",
                        "description" : "The index number for the returned page of data. This should always match the requested page number or the default page (0).",
                        "example" : 0,
                        "default" : 0
                    },
                    "pageSize" : {
                        "type" : "integer",
                        "description" : "The number of data elements returned, aka the size of the current page. If the requested page does not have enough elements to fill a page at the requested page size, this field should indicate the actual number of elements returned.",
                        "example" : 1000,
                        "default" : 1000
                    },
                    "totalCount" : {
                        "type" : "integer",
                        "description" : "The total number of elements that are available on the server and match the requested query parameters.",
                        "example" : 10
                    },
                    "totalPages" : {
                        "type" : "integer",
                        "description" : "The total number of pages of elements available on the server. This should be calculated with the following formula. \n<br> totalPages = CEILING( totalCount / requested_page_size)",
                        "example" : 1
                    }
                },
                "description" : "The pagination object is applicable only when the payload contains a \"data\" key. It describes the pagination of the data contained in the \"data\" array, as a way to identify which subset of data is being returned. \n<br> Pages are zero indexed, so the first page will be page 0 (zero)."
            },
            "dataFile" : {
                "required" : [
                    "fileURL"
                ],
                "type" : "object",
                "properties" : {
                    "fileURL" : {
                        "type" : "string",
                        "description" : "The absolute URL where the file is located",
                        "format" : "uri",
                        "example" : "https://wiki.brapi.org/examples/datafile.xlsx"
                    },
                    "fileName" : {
                        "type" : "string",
                        "description" : "The name of the file",
                        "example" : "datafile.xlsx"
                    },
                    "fileSize" : {
                        "type" : "integer",
                        "description" : "The size of the file in bytes",
                        "example" : 4398
                    },
                    "fileDescription" : {
                        "type" : "string",
                        "description" : "A human readable description of the file contents",
                        "example" : "This is an Excel data file"
                    },
                    "fileType" : {
                        "type" : "string",
                        "description" : "The type or format of the file. Preferably MIME Type.",
                        "example" : "application/vnd.ms-excel"
                    },
                    "fileMD5Hash" : {
                        "type" : "string",
                        "description" : "The MD5 Hash of the file contents to be used as a check sum",
                        "example" : "c2365e900c81a89cf74d83dab60df146"
                    }
                },
                "description" : "A dataFile contains a URL and the relevant file metadata to represent a file"
            },
            "metadata" : {
                "allOf" : [
                    {
                        "$ref" : "#/components/schemas/metadataBase"
                    },
                    {
                        "type" : "object",
                        "properties" : {
                            "pagination" : {
                                "$ref" : "#/components/schemas/basePagination"
                            }
                        }
                    }
                ]
            },
            "metadataBase" : {
                "type" : "object",
                "properties" : {
                    "datafiles" : {
                        "type" : "array",
                        "description" : "The datafiles contains a list of file URLs and metadata. \nThese files contain additional information related to the returned object and can be retrieved by a subsequent call. \nThis could be a supplementary data file, an informational file, the uploaded file where the data originated from, a generated file representing the whole dataset in a particular format, or any other related file. ",
                        "example" : [ ],
                        "items" : {
                            "$ref" : "#/components/schemas/dataFile"
                        }
                    },
                    "status" : {
                        "type" : "array",
                        "description" : "The status field contains a list of informational status messages from the server. \nIf no status is reported, an empty list should be returned. See Error Reporting for more information.",
                        "items" : {
                            "$ref" : "#/components/schemas/status"
                        }
                    }
                },
                "description" : "An object in the BrAPI standard response model that describes some information about the service call being performed. This includes supplementary data, status log messages, and pagination information."
            },
            "metadataTokenPagination" : {
                "allOf" : [
                    {
                        "$ref" : "#/components/schemas/metadataBase"
                    },
                    {
                        "type" : "object",
                        "properties" : {
                            "pagination" : {
                                "$ref" : "#/components/schemas/tokenPagination"
                            }
                        }
                    }
                ]
            },
            "status" : {
                "required" : [
                    "message",
                    "messageType"
                ],
                "type" : "object",
                "properties" : {
                    "message" : {
                        "type" : "string",
                        "description" : "A short message concerning the status of this request/response",
                        "example" : "Request accepted, response successful"
                    },
                    "messageType" : {
                        "type" : "string",
                        "description" : "The logging level for the attached message",
                        "example" : "INFO",
                        "enum" : [
                            "DEBUG",
                            "ERROR",
                            "WARNING",
                            "INFO"
                        ]
                    }
                },
                "description" : "An array of status messages to convey technical logging information from the server to the client."
            },
            "tokenPagination" : {
                "allOf" : [
                    {
                        "$ref" : "#/components/schemas/basePagination"
                    },
                    {
                        "required" : [
                            "nextPageToken"
                        ],
                        "type" : "object",
                        "properties" : {
                            "nextPageToken" : {
                                "type" : "string",
                                "description" : "**Deprecated in v2.1** Please use `page`. Github issue number #451 \n<br>The string token used to query the next page of data.",
                                "example" : "cb668f63",
                                "deprecated" : true
                            },
                            "currentPageToken" : {
                                "type" : "string",
                                "description" : "**Deprecated in v2.1** Please use `page`. Github issue number #451 \n<br>The string token used to query the current page of data.",
                                "example" : "48bc6ac1",
                                "deprecated" : true
                            },
                            "prevPageToken" : {
                                "type" : "string",
                                "description" : "**Deprecated in v2.1** Please use `page`. Github issue number #451 \n<br>The string token used to query the previous page of data.",
                                "example" : "9659857e",
                                "deprecated" : true
                            }
                        },
                        "description" : "**Deprecated in v2.1** Please use `page`. Github issue number #451 \n<br>The pagination object is applicable only when the payload contains a \"data\" key. It describes the pagination of the data contained in the \"data\" array, as a way to identify which subset of data is being returned. \n<br>Tokenized pages are for large data sets which can not be efficiently broken into indexed pages. Use the nextPageToken and prevPageToken to construct an additional query and move to the next or previous page respectively.  ",
                        "example" : {
                            "currentPage" : 0,
                            "pageSize" : 1000,
                            "totalCount" : 10,
                            "totalPages" : 1
                        }
                    }
                ]
            }
        },
        "responses" : {
            "401Unauthorized" : {
                "description" : "Unauthorized",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "type" : "string"
                        },
                        "example" : "ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token"
                    }
                }
            },
            "GermplasmListResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "GermplasmListResponse",
                            "required" : [
                                "metadata",
                                "result"
                            ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "required" : [
                                        "data"
                                    ],
                                    "type" : "object",
                                    "properties" : {
                                        "data" : {
                                            "type" : "array",
                                            "items" : {
                                                "$ref" : "#/components/schemas/Germplasm"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "202AcceptedSearchResponse" : {
                "description" : "Accepted",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "202AcceptedSearchResponse",
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "type" : "object",
                                    "properties" : {
                                        "searchResultsDbId" : {
                                            "type" : "string",
                                            "example" : "551ae08c"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "GermplasmSingleResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "GermplasmSingleResponse",
                            "required" : [
                                "metadata",
                                "result"
                            ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "$ref" : "#/components/schemas/Germplasm"
                                }
                            }
                        }
                    }
                }
            },
            "400BadRequest" : {
                "description" : "Bad Request",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "type" : "string"
                        },
                        "example" : "ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object\n\nERROR - 2018-10-08T18:15:11Z - Invalid query parameter\n\nERROR - 2018-10-08T18:15:11Z - Required parameter is missing"
                    }
                }
            },
            "404NotFound" : {
                "description" : "Not Found",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "type" : "string"
                        },
                        "example" : "ERROR - 2018-10-08T18:15:11Z - The requested object DbId is not found"
                    }
                }
            },
            "403Forbidden" : {
                "description" : "Forbidden",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "type" : "string"
                        },
                        "example" : "ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action"
                    }
                }
            }
        },
        "parameters" : {
            "externalReferenceID" : {
                "name" : "externalReferenceID",
                "in" : "query",
                "description" : "**Deprecated in v2.1** Please use `externalReferenceId`. Github issue number #460 \n<br>An external reference ID. Could be a simple string or a URI. (use with `externalReferenceSource` parameter)",
                "required" : false,
                "deprecated" : true,
                "style" : "form",
                "explode" : true,
                "schema" : {
                    "type" : "string"
                }
            },
            "externalReferenceId" : {
                "name" : "externalReferenceId",
                "in" : "query",
                "description" : "An external reference ID. Could be a simple string or a URI. (use with `externalReferenceSource` parameter)",
                "required" : false,
                "style" : "form",
                "explode" : true,
                "schema" : {
                    "type" : "string"
                }
            },
            "externalReferenceSource" : {
                "name" : "externalReferenceSource",
                "in" : "query",
                "description" : "An identifier for the source system or database of an external reference (use with `externalReferenceId` parameter)",
                "required" : false,
                "style" : "form",
                "explode" : true,
                "schema" : {
                    "type" : "string"
                }
            },
            "acceptHeader" : {
                "name" : "Accept",
                "in" : "header",
                "description" : "A standard HTTP request header that is used to request a specific content type (JSON, CSV, etc) which is \"acceptable\" to the client and should be returned by the server",
                "required" : true,
                "style" : "simple",
                "explode" : false,
                "schema" : {
                    "$ref" : "#/components/schemas/ContentTypes"
                },
                "example" : "application/json"
            },
            "searchResultsDbId" : {
                "name" : "searchResultsDbId",
                "in" : "path",
                "description" : "Unique identifier which references the search results",
                "required" : true,
                "style" : "simple",
                "explode" : false,
                "schema" : {
                    "type" : "string"
                }
            },
            "pageSize" : {
                "name" : "pageSize",
                "in" : "query",
                "description" : "The size of the pages to be returned. Default is `1000`.",
                "required" : false,
                "style" : "form",
                "explode" : true,
                "schema" : {
                    "type" : "integer"
                },
                "example" : 1000
            },
            "authorizationHeader" : {
                "name" : "Authorization",
                "in" : "header",
                "description" : "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>",
                "required" : false,
                "style" : "simple",
                "explode" : false,
                "schema" : {
                    "pattern" : "^Bearer .*$",
                    "type" : "string"
                },
                "example" : "Bearer XXXX"
            },
            "page" : {
                "name" : "page",
                "in" : "query",
                "description" : "Used to request a specific page of data to be returned.\n\nThe page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.",
                "required" : false,
                "style" : "form",
                "explode" : true,
                "schema" : {
                    "type" : "integer"
                },
                "example" : "0"
            },
            "pageToken" : {
                "name" : "pageToken",
                "in" : "query",
                "description" : "**Deprecated in v2.1** Please use `page`. Github issue number #451 \n<br> Used to request a specific page of data to be returned.\n<br> Tokenized pages are for large data sets which can not be efficiently broken into indexed pages. Use the nextPageToken and prevPageToken from a prior response to construct a query and move to the next or previous page respectively. ",
                "required" : false,
                "deprecated" : true,
                "style" : "form",
                "explode" : true,
                "schema" : {
                    "type" : "string"
                },
                "example" : "33c27874"
            }
        },
        "securitySchemes" : {
            "AuthorizationToken" : {
                "type" : "http",
                "description" : "OAuth Bearer Token - A valid Bearer token to prove authorization",
                "scheme" : "bearer",
                "bearerFormat" : "nonce token or JWT"
            }
        }
    }
}