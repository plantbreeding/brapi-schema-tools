{
    "openapi" : "3.0.1",
    "info" : {
        "title" : "BrAPI-Phenotyping",
        "version" : "0.0.0"
    },
    "paths" : {
        "/events" : {
            "get" : {
                "tags" : [ "Events" ],
                "summary" : "Get a filtered list of Event",
                "description" : "Get a list of Event",
                "parameters" : [ {
                    "name" : "studyDbId",
                    "in" : "query",
                    "description" : "List of study identifiers to search for",
                    "required" : false,
                    "schema" : {
                        "type" : "string"
                    }
                }, {
                    "name" : "studyName",
                    "in" : "query",
                    "description" : "List of study names to filter search results",
                    "required" : false,
                    "schema" : {
                        "type" : "string"
                    }
                }, {
                    "name" : "observationUnitDbId",
                    "in" : "query",
                    "description" : "The ID which uniquely identifies an observation unit.",
                    "required" : false,
                    "schema" : {
                        "type" : "string"
                    }
                }, {
                    "name" : "eventDbId",
                    "in" : "query",
                    "description" : "Filter based on an Event DbId.",
                    "required" : false,
                    "schema" : {
                        "type" : "string"
                    }
                }, {
                    "name" : "eventType",
                    "in" : "query",
                    "description" : "Filter based on an Event Type",
                    "required" : false,
                    "schema" : {
                        "type" : "string"
                    }
                }, {
                    "name" : "dateRangeStart",
                    "in" : "query",
                    "description" : "Filter based on an Event start date.",
                    "required" : false,
                    "schema" : {
                        "type" : "string"
                    }
                }, {
                    "name" : "dateRangeEnd",
                    "in" : "query",
                    "description" : "Filter based on an Event start date.",
                    "required" : false,
                    "schema" : {
                        "type" : "string"
                    }
                }, {
                    "$ref" : "#/components/parameters/page"
                }, {
                    "$ref" : "#/components/parameters/pageSize"
                }, {
                    "$ref" : "#/components/parameters/authorizationHeader"
                } ],
                "responses" : {
                    "200" : {
                        "$ref" : "#/components/responses/EventListResponse"
                    },
                    "400" : {
                        "$ref" : "#/components/responses/400BadRequest"
                    },
                    "401" : {
                        "$ref" : "#/components/responses/401Unauthorized"
                    },
                    "403" : {
                        "$ref" : "#/components/responses/403Forbidden"
                    }
                }
            }
        },
        "/images" : {
            "get" : {
                "tags" : [ "Images" ],
                "summary" : "Get a filtered list of Image",
                "description" : "Get a list of Image",
                "parameters" : [ {
                    "name" : "commonCropName",
                    "in" : "query",
                    "description" : "The BrAPI Common Crop Name is the simple, generalized, widely accepted name of the organism being researched. It is most often used in multi-crop systems where digital resources need to be divided at a high level. Things like 'Maize', 'Wheat', and 'Rice' are examples of common crop names.\n\nUse this parameter to only return results associated with the given crops. \n\nUse `GET /commoncropnames` to find the list of available crops on a server.",
                    "required" : false,
                    "schema" : {
                        "type" : "string"
                    }
                }, {
                    "name" : "programDbId",
                    "in" : "query",
                    "description" : "A BrAPI Program represents the high level organization or group who is responsible for conducting trials and studies. Things like Breeding Programs and Funded Projects are considered BrAPI Programs. \n\nUse this parameter to only return results associated with the given programs. \n\nUse `GET /programs` to find the list of available programs on a server.",
                    "required" : false,
                    "schema" : {
                        "type" : "string"
                    }
                }, {
                    "name" : "programName",
                    "in" : "query",
                    "description" : "Use this parameter to only return results associated with the given program names. Program names are not required to be unique.\n\nUse `GET /programs` to find the list of available programs on a server.",
                    "required" : false,
                    "schema" : {
                        "type" : "string"
                    }
                }, {
                    "name" : "descriptiveOntologyTerm",
                    "in" : "query",
                    "description" : "A list of terms to formally describe the image to search for. Each item could be a simple Tag, an Ontology reference Id, or a full ontology URL.",
                    "required" : false,
                    "schema" : {
                        "type" : "string"
                    }
                }, {
                    "name" : "imageFileName",
                    "in" : "query",
                    "description" : "Image file names to search for.",
                    "required" : false,
                    "schema" : {
                        "type" : "string"
                    }
                }, {
                    "name" : "imageFileSizeMax",
                    "in" : "query",
                    "description" : "A maximum image file size to search for.",
                    "required" : false,
                    "schema" : {
                        "type" : "integer",
                        "format" : "int32"
                    }
                }, {
                    "name" : "imageFileSizeMin",
                    "in" : "query",
                    "description" : "A minimum image file size to search for.",
                    "required" : false,
                    "schema" : {
                        "type" : "integer",
                        "format" : "int32"
                    }
                }, {
                    "name" : "imageHeightMax",
                    "in" : "query",
                    "description" : "A maximum image height to search for.",
                    "required" : false,
                    "schema" : {
                        "type" : "integer",
                        "format" : "int32"
                    }
                }, {
                    "name" : "imageHeightMin",
                    "in" : "query",
                    "description" : "A minimum image height to search for.",
                    "required" : false,
                    "schema" : {
                        "type" : "integer",
                        "format" : "int32"
                    }
                }, {
                    "name" : "imageLocation",
                    "in" : "query",
                    "required" : false,
                    "schema" : {
                        "$ref" : "#/components/schemas/GeoJSONSearchArea"
                    }
                }, {
                    "name" : "imageName",
                    "in" : "query",
                    "description" : "Human readable names to search for.",
                    "required" : false,
                    "schema" : {
                        "type" : "string"
                    }
                }, {
                    "name" : "imageTimeStampRangeEnd",
                    "in" : "query",
                    "description" : "The latest timestamp to search for.",
                    "required" : false,
                    "schema" : {
                        "type" : "string"
                    }
                }, {
                    "name" : "imageTimeStampRangeStart",
                    "in" : "query",
                    "description" : "The earliest timestamp to search for.",
                    "required" : false,
                    "schema" : {
                        "type" : "string"
                    }
                }, {
                    "name" : "imageWidthMax",
                    "in" : "query",
                    "description" : "A maximum image width to search for.",
                    "required" : false,
                    "schema" : {
                        "type" : "integer",
                        "format" : "int32"
                    }
                }, {
                    "name" : "imageWidthMin",
                    "in" : "query",
                    "description" : "A minimum image width to search for.",
                    "required" : false,
                    "schema" : {
                        "type" : "integer",
                        "format" : "int32"
                    }
                }, {
                    "name" : "mimeType",
                    "in" : "query",
                    "description" : "A set of image file types to search for.",
                    "required" : false,
                    "schema" : {
                        "type" : "string"
                    }
                }, {
                    "name" : "observationDbId",
                    "in" : "query",
                    "description" : "A list of observation Ids this image is associated with to search for",
                    "required" : false,
                    "schema" : {
                        "type" : "string"
                    }
                }, {
                    "name" : "imageDbId",
                    "in" : "query",
                    "description" : "A list of image Ids to search for",
                    "required" : false,
                    "schema" : {
                        "type" : "string"
                    }
                }, {
                    "name" : "observationUnitDbId",
                    "in" : "query",
                    "description" : "A set of observation unit identifiers to search for.",
                    "required" : false,
                    "schema" : {
                        "type" : "string"
                    }
                }, {
                    "$ref" : "#/components/parameters/externalReferenceID"
                }, {
                    "$ref" : "#/components/parameters/externalReferenceId"
                }, {
                    "$ref" : "#/components/parameters/externalReferenceSource"
                }, {
                    "$ref" : "#/components/parameters/page"
                }, {
                    "$ref" : "#/components/parameters/pageSize"
                }, {
                    "$ref" : "#/components/parameters/authorizationHeader"
                } ],
                "responses" : {
                    "200" : {
                        "$ref" : "#/components/responses/ImageListResponse"
                    },
                    "400" : {
                        "$ref" : "#/components/responses/400BadRequest"
                    },
                    "401" : {
                        "$ref" : "#/components/responses/401Unauthorized"
                    },
                    "403" : {
                        "$ref" : "#/components/responses/403Forbidden"
                    }
                }
            },
            "post" : {
                "tags" : [ "Images" ],
                "summary" : "Create new Image",
                "description" : "Add new Image to database",
                "parameters" : [ {
                    "$ref" : "#/components/parameters/authorizationHeader"
                } ],
                "requestBody" : {
                    "content" : {
                        "application/json" : {
                            "schema" : {
                                "$ref" : "#/components/schemas/ImageNewRequest"
                            }
                        }
                    }
                },
                "responses" : {
                    "200" : {
                        "$ref" : "#/components/responses/ImageListResponse"
                    },
                    "400" : {
                        "$ref" : "#/components/responses/400BadRequest"
                    },
                    "401" : {
                        "$ref" : "#/components/responses/401Unauthorized"
                    },
                    "403" : {
                        "$ref" : "#/components/responses/403Forbidden"
                    }
                }
            }
        },
        "/methods" : {
            "get" : {
                "tags" : [ "Methods" ],
                "summary" : "Get a filtered list of Method",
                "description" : "Get a list of Method",
                "parameters" : [ {
                    "name" : "commonCropName",
                    "in" : "query",
                    "description" : "The BrAPI Common Crop Name is the simple, generalized, widely accepted name of the organism being researched. It is most often used in multi-crop systems where digital resources need to be divided at a high level. Things like 'Maize', 'Wheat', and 'Rice' are examples of common crop names.\n\nUse this parameter to only return results associated with the given crops. \n\nUse `GET /commoncropnames` to find the list of available crops on a server.",
                    "required" : false,
                    "schema" : {
                        "type" : "string"
                    }
                }, {
                    "name" : "ontologyDbId",
                    "in" : "query",
                    "description" : "The unique identifier for an ontology definition. Use this parameter to filter results based on a specific ontology \n\n  Use `GET /ontologies` to find the list of available ontologies on a server.",
                    "required" : false,
                    "schema" : {
                        "type" : "string"
                    }
                }, {
                    "name" : "programDbId",
                    "in" : "query",
                    "description" : "A BrAPI Program represents the high level organization or group who is responsible for conducting trials and studies. Things like Breeding Programs and Funded Projects are considered BrAPI Programs. \n\nUse this parameter to only return results associated with the given programs. \n\nUse `GET /programs` to find the list of available programs on a server.",
                    "required" : false,
                    "schema" : {
                        "type" : "string"
                    }
                }, {
                    "name" : "programName",
                    "in" : "query",
                    "description" : "Use this parameter to only return results associated with the given program names. Program names are not required to be unique.\n\nUse `GET /programs` to find the list of available programs on a server.",
                    "required" : false,
                    "schema" : {
                        "type" : "string"
                    }
                }, {
                    "name" : "scaleDbId",
                    "in" : "query",
                    "description" : "The unique identifier for a method.",
                    "required" : false,
                    "schema" : {
                        "type" : "string"
                    }
                }, {
                    "name" : "observationVariableDbId",
                    "in" : "query",
                    "description" : "The unique identifier for an observation variable.",
                    "required" : false,
                    "schema" : {
                        "type" : "string"
                    }
                }, {
                    "$ref" : "#/components/parameters/externalReferenceID"
                }, {
                    "$ref" : "#/components/parameters/externalReferenceId"
                }, {
                    "$ref" : "#/components/parameters/externalReferenceSource"
                }, {
                    "$ref" : "#/components/parameters/page"
                }, {
                    "$ref" : "#/components/parameters/pageSize"
                }, {
                    "$ref" : "#/components/parameters/authorizationHeader"
                } ],
                "responses" : {
                    "200" : {
                        "$ref" : "#/components/responses/MethodListResponse"
                    },
                    "400" : {
                        "$ref" : "#/components/responses/400BadRequest"
                    },
                    "401" : {
                        "$ref" : "#/components/responses/401Unauthorized"
                    },
                    "403" : {
                        "$ref" : "#/components/responses/403Forbidden"
                    }
                }
            },
            "post" : {
                "tags" : [ "Methods" ],
                "summary" : "Create new Method",
                "description" : "Add new Method to database",
                "parameters" : [ {
                    "$ref" : "#/components/parameters/authorizationHeader"
                } ],
                "requestBody" : {
                    "content" : {
                        "application/json" : {
                            "schema" : {
                                "$ref" : "#/components/schemas/MethodNewRequest"
                            }
                        }
                    }
                },
                "responses" : {
                    "200" : {
                        "$ref" : "#/components/responses/MethodListResponse"
                    },
                    "400" : {
                        "$ref" : "#/components/responses/400BadRequest"
                    },
                    "401" : {
                        "$ref" : "#/components/responses/401Unauthorized"
                    },
                    "403" : {
                        "$ref" : "#/components/responses/403Forbidden"
                    }
                }
            }
        },
        "/observations" : {
            "get" : {
                "tags" : [ "Observations" ],
                "summary" : "Get a filtered list of Observation",
                "description" : "Get a list of Observation",
                "parameters" : [ {
                    "name" : "commonCropName",
                    "in" : "query",
                    "description" : "The BrAPI Common Crop Name is the simple, generalized, widely accepted name of the organism being researched. It is most often used in multi-crop systems where digital resources need to be divided at a high level. Things like 'Maize', 'Wheat', and 'Rice' are examples of common crop names.\n\nUse this parameter to only return results associated with the given crops. \n\nUse `GET /commoncropnames` to find the list of available crops on a server.",
                    "required" : false,
                    "schema" : {
                        "type" : "string"
                    }
                }, {
                    "name" : "germplasmDbId",
                    "in" : "query",
                    "description" : "List of IDs which uniquely identify germplasm to search for",
                    "required" : false,
                    "schema" : {
                        "type" : "string"
                    }
                }, {
                    "name" : "germplasmName",
                    "in" : "query",
                    "description" : "List of human readable names to identify germplasm to search for",
                    "required" : false,
                    "schema" : {
                        "type" : "string"
                    }
                }, {
                    "name" : "locationDbId",
                    "in" : "query",
                    "description" : "The location ids to search for",
                    "required" : false,
                    "schema" : {
                        "type" : "string"
                    }
                }, {
                    "name" : "locationName",
                    "in" : "query",
                    "description" : "A human readable names to search for",
                    "required" : false,
                    "schema" : {
                        "type" : "string"
                    }
                }, {
                    "name" : "observationVariableDbId",
                    "in" : "query",
                    "description" : "The DbIds of Variables to search for",
                    "required" : false,
                    "schema" : {
                        "type" : "string"
                    }
                }, {
                    "name" : "observationVariableName",
                    "in" : "query",
                    "description" : "The names of Variables to search for",
                    "required" : false,
                    "schema" : {
                        "type" : "string"
                    }
                }, {
                    "name" : "observationVariablePUI",
                    "in" : "query",
                    "description" : "The Permanent Unique Identifier of an Observation Variable, usually in the form of a URI",
                    "required" : false,
                    "schema" : {
                        "type" : "string"
                    }
                }, {
                    "name" : "programDbId",
                    "in" : "query",
                    "description" : "A BrAPI Program represents the high level organization or group who is responsible for conducting trials and studies. Things like Breeding Programs and Funded Projects are considered BrAPI Programs. \n\nUse this parameter to only return results associated with the given programs. \n\nUse `GET /programs` to find the list of available programs on a server.",
                    "required" : false,
                    "schema" : {
                        "type" : "string"
                    }
                }, {
                    "name" : "programName",
                    "in" : "query",
                    "description" : "Use this parameter to only return results associated with the given program names. Program names are not required to be unique.\n\nUse `GET /programs` to find the list of available programs on a server.",
                    "required" : false,
                    "schema" : {
                        "type" : "string"
                    }
                }, {
                    "name" : "studyDbId",
                    "in" : "query",
                    "description" : "List of study identifiers to search for",
                    "required" : false,
                    "schema" : {
                        "type" : "string"
                    }
                }, {
                    "name" : "studyName",
                    "in" : "query",
                    "description" : "List of study names to filter search results",
                    "required" : false,
                    "schema" : {
                        "type" : "string"
                    }
                }, {
                    "name" : "trialDbId",
                    "in" : "query",
                    "description" : "The ID which uniquely identifies a trial to search for",
                    "required" : false,
                    "schema" : {
                        "type" : "string"
                    }
                }, {
                    "name" : "trialName",
                    "in" : "query",
                    "description" : "The human readable name of a trial to search for",
                    "required" : false,
                    "schema" : {
                        "type" : "string"
                    }
                }, {
                    "name" : "observationDbId",
                    "in" : "query",
                    "description" : "The unique id of an Observation",
                    "required" : false,
                    "schema" : {
                        "type" : "string"
                    }
                }, {
                    "name" : "observationUnitDbId",
                    "in" : "query",
                    "description" : "The unique id of an Observation Unit",
                    "required" : false,
                    "schema" : {
                        "type" : "string"
                    }
                }, {
                    "name" : "observationLevel",
                    "in" : "query",
                    "description" : "Searches for values in ObservationUnit->observationUnitPosition->observationLevel",
                    "required" : false,
                    "schema" : {
                        "$ref" : "#/components/schemas/ObservationUnitLevel"
                    }
                }, {
                    "name" : "observationLevelRelationship",
                    "in" : "query",
                    "description" : "Searches for values in ObservationUnit->observationUnitPosition->observationLevelRelationships",
                    "required" : false,
                    "schema" : {
                        "$ref" : "#/components/schemas/ObservationUnitLevelRelationship"
                    }
                }, {
                    "name" : "observationTimeStampRangeEnd",
                    "in" : "query",
                    "description" : "Timestamp range end",
                    "required" : false,
                    "schema" : {
                        "type" : "string"
                    }
                }, {
                    "name" : "observationTimeStampRangeStart",
                    "in" : "query",
                    "description" : "Timestamp range start",
                    "required" : false,
                    "schema" : {
                        "type" : "string"
                    }
                }, {
                    "name" : "seasonDbId",
                    "in" : "query",
                    "description" : "The year or Phenotyping campaign of a multi-annual study (trees, grape, ...)",
                    "required" : false,
                    "schema" : {
                        "type" : "string"
                    }
                }, {
                    "$ref" : "#/components/parameters/externalReferenceID"
                }, {
                    "$ref" : "#/components/parameters/externalReferenceId"
                }, {
                    "$ref" : "#/components/parameters/externalReferenceSource"
                }, {
                    "$ref" : "#/components/parameters/page"
                }, {
                    "$ref" : "#/components/parameters/pageSize"
                }, {
                    "$ref" : "#/components/parameters/authorizationHeader"
                } ],
                "responses" : {
                    "200" : {
                        "$ref" : "#/components/responses/ObservationListResponse"
                    },
                    "400" : {
                        "$ref" : "#/components/responses/400BadRequest"
                    },
                    "401" : {
                        "$ref" : "#/components/responses/401Unauthorized"
                    },
                    "403" : {
                        "$ref" : "#/components/responses/403Forbidden"
                    }
                }
            },
            "put" : {
                "tags" : [ "Observations" ],
                "summary" : "Update the details for an existing Observation",
                "description" : "Update the details for an existing Observation",
                "parameters" : [ {
                    "$ref" : "#/components/parameters/authorizationHeader"
                } ],
                "requestBody" : {
                    "content" : {
                        "application/json" : {
                            "schema" : {
                                "$ref" : "#/components/schemas/ObservationNewRequest"
                            }
                        }
                    }
                },
                "responses" : {
                    "200" : {
                        "$ref" : "#/components/responses/ObservationListResponse"
                    },
                    "400" : {
                        "$ref" : "#/components/responses/400BadRequest"
                    },
                    "401" : {
                        "$ref" : "#/components/responses/401Unauthorized"
                    },
                    "403" : {
                        "$ref" : "#/components/responses/403Forbidden"
                    }
                }
            },
            "post" : {
                "tags" : [ "Observations" ],
                "summary" : "Create new Observation",
                "description" : "Add new Observation to database",
                "parameters" : [ {
                    "$ref" : "#/components/parameters/authorizationHeader"
                } ],
                "requestBody" : {
                    "content" : {
                        "application/json" : {
                            "schema" : {
                                "$ref" : "#/components/schemas/ObservationNewRequest"
                            }
                        }
                    }
                },
                "responses" : {
                    "200" : {
                        "$ref" : "#/components/responses/ObservationListResponse"
                    },
                    "400" : {
                        "$ref" : "#/components/responses/400BadRequest"
                    },
                    "401" : {
                        "$ref" : "#/components/responses/401Unauthorized"
                    },
                    "403" : {
                        "$ref" : "#/components/responses/403Forbidden"
                    }
                }
            }
        },
        "/observationunits" : {
            "get" : {
                "tags" : [ "ObservationUnits" ],
                "summary" : "Get a filtered list of ObservationUnit",
                "description" : "Get a list of ObservationUnit",
                "parameters" : [ {
                    "name" : "commonCropName",
                    "in" : "query",
                    "description" : "The BrAPI Common Crop Name is the simple, generalized, widely accepted name of the organism being researched. It is most often used in multi-crop systems where digital resources need to be divided at a high level. Things like 'Maize', 'Wheat', and 'Rice' are examples of common crop names.\n\nUse this parameter to only return results associated with the given crops. \n\nUse `GET /commoncropnames` to find the list of available crops on a server.",
                    "required" : false,
                    "schema" : {
                        "type" : "string"
                    }
                }, {
                    "name" : "germplasmDbId",
                    "in" : "query",
                    "description" : "List of IDs which uniquely identify germplasm to search for",
                    "required" : false,
                    "schema" : {
                        "type" : "string"
                    }
                }, {
                    "name" : "germplasmName",
                    "in" : "query",
                    "description" : "List of human readable names to identify germplasm to search for",
                    "required" : false,
                    "schema" : {
                        "type" : "string"
                    }
                }, {
                    "name" : "locationDbId",
                    "in" : "query",
                    "description" : "The location ids to search for",
                    "required" : false,
                    "schema" : {
                        "type" : "string"
                    }
                }, {
                    "name" : "locationName",
                    "in" : "query",
                    "description" : "A human readable names to search for",
                    "required" : false,
                    "schema" : {
                        "type" : "string"
                    }
                }, {
                    "name" : "studyDbId",
                    "in" : "query",
                    "description" : "List of study identifiers to search for",
                    "required" : false,
                    "schema" : {
                        "type" : "string"
                    }
                }, {
                    "name" : "studyName",
                    "in" : "query",
                    "description" : "List of study names to filter search results",
                    "required" : false,
                    "schema" : {
                        "type" : "string"
                    }
                }, {
                    "name" : "observationVariableDbId",
                    "in" : "query",
                    "description" : "The DbIds of Variables to search for",
                    "required" : false,
                    "schema" : {
                        "type" : "string"
                    }
                }, {
                    "name" : "observationVariableName",
                    "in" : "query",
                    "description" : "The names of Variables to search for",
                    "required" : false,
                    "schema" : {
                        "type" : "string"
                    }
                }, {
                    "name" : "observationVariablePUI",
                    "in" : "query",
                    "description" : "The Permanent Unique Identifier of an Observation Variable, usually in the form of a URI",
                    "required" : false,
                    "schema" : {
                        "type" : "string"
                    }
                }, {
                    "name" : "programDbId",
                    "in" : "query",
                    "description" : "A BrAPI Program represents the high level organization or group who is responsible for conducting trials and studies. Things like Breeding Programs and Funded Projects are considered BrAPI Programs. \n\nUse this parameter to only return results associated with the given programs. \n\nUse `GET /programs` to find the list of available programs on a server.",
                    "required" : false,
                    "schema" : {
                        "type" : "string"
                    }
                }, {
                    "name" : "programName",
                    "in" : "query",
                    "description" : "Use this parameter to only return results associated with the given program names. Program names are not required to be unique.\n\nUse `GET /programs` to find the list of available programs on a server.",
                    "required" : false,
                    "schema" : {
                        "type" : "string"
                    }
                }, {
                    "name" : "trialDbId",
                    "in" : "query",
                    "description" : "The ID which uniquely identifies a trial to search for",
                    "required" : false,
                    "schema" : {
                        "type" : "string"
                    }
                }, {
                    "name" : "trialName",
                    "in" : "query",
                    "description" : "The human readable name of a trial to search for",
                    "required" : false,
                    "schema" : {
                        "type" : "string"
                    }
                }, {
                    "name" : "observationUnitDbId",
                    "in" : "query",
                    "description" : "The unique id of an observation unit",
                    "required" : false,
                    "schema" : {
                        "type" : "string"
                    }
                }, {
                    "name" : "observationUnitName",
                    "in" : "query",
                    "description" : "The human readable identifier for an Observation Unit",
                    "required" : false,
                    "schema" : {
                        "type" : "string"
                    }
                }, {
                    "name" : "observationLevel",
                    "in" : "query",
                    "description" : "Searches for values in ObservationUnit->observationUnitPosition->observationLevel",
                    "required" : false,
                    "schema" : {
                        "$ref" : "#/components/schemas/ObservationUnitLevel"
                    }
                }, {
                    "name" : "observationLevelRelationship",
                    "in" : "query",
                    "description" : "Searches for values in ObservationUnit->observationUnitPosition->observationLevelRelationships",
                    "required" : false,
                    "schema" : {
                        "$ref" : "#/components/schemas/ObservationUnitLevelRelationship"
                    }
                }, {
                    "name" : "includeObservation",
                    "in" : "query",
                    "description" : "Use this parameter to include a list of observations embedded in each ObservationUnit object. \n\nCAUTION - Use this parameter at your own risk. It may return large, unpaginated lists of observation data. Only set this value to True if you are sure you need to.",
                    "required" : false,
                    "schema" : {
                        "type" : "boolean"
                    }
                }, {
                    "name" : "seasonDbId",
                    "in" : "query",
                    "description" : "The year or Phenotyping campaign of a multi-annual study (trees, grape, ...)",
                    "required" : false,
                    "schema" : {
                        "type" : "string"
                    }
                }, {
                    "$ref" : "#/components/parameters/externalReferenceID"
                }, {
                    "$ref" : "#/components/parameters/externalReferenceId"
                }, {
                    "$ref" : "#/components/parameters/externalReferenceSource"
                }, {
                    "$ref" : "#/components/parameters/page"
                }, {
                    "$ref" : "#/components/parameters/pageSize"
                }, {
                    "$ref" : "#/components/parameters/authorizationHeader"
                } ],
                "responses" : {
                    "200" : {
                        "$ref" : "#/components/responses/ObservationUnitListResponse"
                    },
                    "400" : {
                        "$ref" : "#/components/responses/400BadRequest"
                    },
                    "401" : {
                        "$ref" : "#/components/responses/401Unauthorized"
                    },
                    "403" : {
                        "$ref" : "#/components/responses/403Forbidden"
                    }
                }
            },
            "put" : {
                "tags" : [ "ObservationUnits" ],
                "summary" : "Update the details for an existing ObservationUnit",
                "description" : "Update the details for an existing ObservationUnit",
                "parameters" : [ {
                    "$ref" : "#/components/parameters/authorizationHeader"
                } ],
                "requestBody" : {
                    "content" : {
                        "application/json" : {
                            "schema" : {
                                "$ref" : "#/components/schemas/ObservationUnitNewRequest"
                            }
                        }
                    }
                },
                "responses" : {
                    "200" : {
                        "$ref" : "#/components/responses/ObservationUnitListResponse"
                    },
                    "400" : {
                        "$ref" : "#/components/responses/400BadRequest"
                    },
                    "401" : {
                        "$ref" : "#/components/responses/401Unauthorized"
                    },
                    "403" : {
                        "$ref" : "#/components/responses/403Forbidden"
                    }
                }
            },
            "post" : {
                "tags" : [ "ObservationUnits" ],
                "summary" : "Create new ObservationUnit",
                "description" : "Add new ObservationUnit to database",
                "parameters" : [ {
                    "$ref" : "#/components/parameters/authorizationHeader"
                } ],
                "requestBody" : {
                    "content" : {
                        "application/json" : {
                            "schema" : {
                                "$ref" : "#/components/schemas/ObservationUnitNewRequest"
                            }
                        }
                    }
                },
                "responses" : {
                    "200" : {
                        "$ref" : "#/components/responses/ObservationUnitListResponse"
                    },
                    "400" : {
                        "$ref" : "#/components/responses/400BadRequest"
                    },
                    "401" : {
                        "$ref" : "#/components/responses/401Unauthorized"
                    },
                    "403" : {
                        "$ref" : "#/components/responses/403Forbidden"
                    }
                }
            }
        },
        "/variables" : {
            "get" : {
                "tags" : [ "ObservationVariables" ],
                "summary" : "Get a filtered list of ObservationVariable",
                "description" : "Get a list of ObservationVariable",
                "parameters" : [ {
                    "name" : "observationVariableDbId",
                    "in" : "query",
                    "description" : "The DbIds of Variables to search for",
                    "required" : false,
                    "schema" : {
                        "type" : "string"
                    }
                }, {
                    "name" : "observationVariableName",
                    "in" : "query",
                    "description" : "The names of Variables to search for",
                    "required" : false,
                    "schema" : {
                        "type" : "string"
                    }
                }, {
                    "name" : "observationVariablePUI",
                    "in" : "query",
                    "description" : "The Permanent Unique Identifier of an Observation Variable, usually in the form of a URI",
                    "required" : false,
                    "schema" : {
                        "type" : "string"
                    }
                }, {
                    "name" : "commonCropName",
                    "in" : "query",
                    "description" : "The BrAPI Common Crop Name is the simple, generalized, widely accepted name of the organism being researched. It is most often used in multi-crop systems where digital resources need to be divided at a high level. Things like 'Maize', 'Wheat', and 'Rice' are examples of common crop names.\n\nUse this parameter to only return results associated with the given crops. \n\nUse `GET /commoncropnames` to find the list of available crops on a server.",
                    "required" : false,
                    "schema" : {
                        "type" : "string"
                    }
                }, {
                    "name" : "programDbId",
                    "in" : "query",
                    "description" : "A BrAPI Program represents the high level organization or group who is responsible for conducting trials and studies. Things like Breeding Programs and Funded Projects are considered BrAPI Programs. \n\nUse this parameter to only return results associated with the given programs. \n\nUse `GET /programs` to find the list of available programs on a server.",
                    "required" : false,
                    "schema" : {
                        "type" : "string"
                    }
                }, {
                    "name" : "programName",
                    "in" : "query",
                    "description" : "Use this parameter to only return results associated with the given program names. Program names are not required to be unique.\n\nUse `GET /programs` to find the list of available programs on a server.",
                    "required" : false,
                    "schema" : {
                        "type" : "string"
                    }
                }, {
                    "name" : "studyDbId",
                    "in" : "query",
                    "description" : "List of study identifiers to search for",
                    "required" : false,
                    "schema" : {
                        "type" : "string"
                    }
                }, {
                    "name" : "studyName",
                    "in" : "query",
                    "description" : "List of study names to filter search results",
                    "required" : false,
                    "schema" : {
                        "type" : "string"
                    }
                }, {
                    "name" : "trialDbId",
                    "in" : "query",
                    "description" : "The ID which uniquely identifies a trial to search for",
                    "required" : false,
                    "schema" : {
                        "type" : "string"
                    }
                }, {
                    "name" : "trialName",
                    "in" : "query",
                    "description" : "The human readable name of a trial to search for",
                    "required" : false,
                    "schema" : {
                        "type" : "string"
                    }
                }, {
                    "name" : "studyDbId",
                    "in" : "query",
                    "description" : "**Deprecated in v2.1** Please use `studyDbIds`. Github issue number #483 \n<br>The unique ID of a studies to filter on",
                    "required" : false,
                    "schema" : {
                        "type" : "string"
                    }
                }, {
                    "name" : "ontologyDbId",
                    "in" : "query",
                    "description" : "List of ontology IDs to search for",
                    "required" : false,
                    "schema" : {
                        "type" : "string"
                    }
                }, {
                    "name" : "methodDbId",
                    "in" : "query",
                    "description" : "List of methods to filter search results",
                    "required" : false,
                    "schema" : {
                        "type" : "string"
                    }
                }, {
                    "name" : "methodName",
                    "in" : "query",
                    "description" : "Human readable name for the method\n<br/>MIAPPE V1.1 (DM-88) Method  Name of the method of observation",
                    "required" : false,
                    "schema" : {
                        "type" : "string"
                    }
                }, {
                    "name" : "methodPUI",
                    "in" : "query",
                    "description" : "The Permanent Unique Identifier of a Method, usually in the form of a URI",
                    "required" : false,
                    "schema" : {
                        "type" : "string"
                    }
                }, {
                    "name" : "scaleDbId",
                    "in" : "query",
                    "description" : "The unique identifier for a Scale",
                    "required" : false,
                    "schema" : {
                        "type" : "string"
                    }
                }, {
                    "name" : "scaleName",
                    "in" : "query",
                    "description" : "Name of the scale\n<br/>MIAPPE V1.1 (DM-92) Scale Name of the scale associated with the variable",
                    "required" : false,
                    "schema" : {
                        "type" : "string"
                    }
                }, {
                    "name" : "scalePUI",
                    "in" : "query",
                    "description" : "The Permanent Unique Identifier of a Scale, usually in the form of a URI",
                    "required" : false,
                    "schema" : {
                        "type" : "string"
                    }
                }, {
                    "name" : "dataType",
                    "in" : "query",
                    "description" : "List of scale data types to filter search results",
                    "required" : false,
                    "schema" : {
                        "$ref" : "#/components/schemas/TraitDataType"
                    }
                }, {
                    "name" : "traitClass",
                    "in" : "query",
                    "description" : "List of trait classes to filter search results",
                    "required" : false,
                    "schema" : {
                        "type" : "string"
                    }
                }, {
                    "name" : "traitDbId",
                    "in" : "query",
                    "description" : "The unique identifier for a Trait",
                    "required" : false,
                    "schema" : {
                        "type" : "string"
                    }
                }, {
                    "name" : "traitName",
                    "in" : "query",
                    "description" : "The human readable name of a trait\n<br/>MIAPPE V1.1 (DM-86) Trait - Name of the (plant or environmental) trait under observation",
                    "required" : false,
                    "schema" : {
                        "type" : "string"
                    }
                }, {
                    "name" : "traitPUI",
                    "in" : "query",
                    "description" : "The Permanent Unique Identifier of a Trait, usually in the form of a URI",
                    "required" : false,
                    "schema" : {
                        "type" : "string"
                    }
                }, {
                    "name" : "traitAttribute",
                    "in" : "query",
                    "description" : "A trait can be decomposed as \"Trait\" = \"Entity\" + \"Attribute\", the attribute is the observed feature (or characteristic) of the entity e.g., for \"grain colour\", attribute = \"colour\"",
                    "required" : false,
                    "schema" : {
                        "type" : "string"
                    }
                }, {
                    "name" : "traitAttributePUI",
                    "in" : "query",
                    "description" : "The Permanent Unique Identifier of a Trait Attribute, usually in the form of a URI\n<br/>A trait can be decomposed as \"Trait\" = \"Entity\" + \"Attribute\", the attribute is the observed feature (or characteristic) of the entity e.g., for \"grain colour\", attribute = \"colour\"",
                    "required" : false,
                    "schema" : {
                        "type" : "string"
                    }
                }, {
                    "name" : "traitEntity",
                    "in" : "query",
                    "description" : "A trait can be decomposed as \"Trait\" = \"Entity\" + \"Attribute\", the entity is the part of the plant that the trait refers to e.g., for \"grain colour\", entity = \"grain\"",
                    "required" : false,
                    "schema" : {
                        "type" : "string"
                    }
                }, {
                    "name" : "traitEntityPUI",
                    "in" : "query",
                    "description" : "The Permanent Unique Identifier of a Trait Entity, usually in the form of a URI\n<br/>A trait can be decomposed as \"Trait\" = \"Entity\" + \"Attribute\", the entity is the part of the plant that the trait refers to e.g., for \"grain colour\", entity = \"grain\" ",
                    "required" : false,
                    "schema" : {
                        "type" : "string"
                    }
                }, {
                    "$ref" : "#/components/parameters/externalReferenceID"
                }, {
                    "$ref" : "#/components/parameters/externalReferenceId"
                }, {
                    "$ref" : "#/components/parameters/externalReferenceSource"
                }, {
                    "$ref" : "#/components/parameters/page"
                }, {
                    "$ref" : "#/components/parameters/pageSize"
                }, {
                    "$ref" : "#/components/parameters/authorizationHeader"
                } ],
                "responses" : {
                    "200" : {
                        "$ref" : "#/components/responses/ObservationVariableListResponse"
                    },
                    "400" : {
                        "$ref" : "#/components/responses/400BadRequest"
                    },
                    "401" : {
                        "$ref" : "#/components/responses/401Unauthorized"
                    },
                    "403" : {
                        "$ref" : "#/components/responses/403Forbidden"
                    }
                }
            },
            "post" : {
                "tags" : [ "ObservationVariables" ],
                "summary" : "Create new ObservationVariable",
                "description" : "Add new ObservationVariable to database",
                "parameters" : [ {
                    "$ref" : "#/components/parameters/authorizationHeader"
                } ],
                "requestBody" : {
                    "content" : {
                        "application/json" : {
                            "schema" : {
                                "$ref" : "#/components/schemas/ObservationVariableNewRequest"
                            }
                        }
                    }
                },
                "responses" : {
                    "200" : {
                        "$ref" : "#/components/responses/ObservationVariableListResponse"
                    },
                    "400" : {
                        "$ref" : "#/components/responses/400BadRequest"
                    },
                    "401" : {
                        "$ref" : "#/components/responses/401Unauthorized"
                    },
                    "403" : {
                        "$ref" : "#/components/responses/403Forbidden"
                    }
                }
            }
        },
        "/ontologies" : {
            "get" : {
                "tags" : [ "Ontologies" ],
                "summary" : "Get a filtered list of Ontology",
                "description" : "Get a list of Ontology",
                "parameters" : [ {
                    "name" : "ontologyDbId",
                    "in" : "query",
                    "description" : "The unique identifier for an ontology definition. Use this parameter to filter results based on a specific ontology \n\n  Use `GET /ontologies` to find the list of available ontologies on a server.",
                    "required" : false,
                    "schema" : {
                        "type" : "string"
                    }
                }, {
                    "name" : "ontologyName",
                    "in" : "query",
                    "description" : "The human readable identifier for an ontology definition.",
                    "required" : false,
                    "schema" : {
                        "type" : "string"
                    }
                }, {
                    "$ref" : "#/components/parameters/page"
                }, {
                    "$ref" : "#/components/parameters/pageSize"
                }, {
                    "$ref" : "#/components/parameters/authorizationHeader"
                } ],
                "responses" : {
                    "200" : {
                        "$ref" : "#/components/responses/OntologyListResponse"
                    },
                    "400" : {
                        "$ref" : "#/components/responses/400BadRequest"
                    },
                    "401" : {
                        "$ref" : "#/components/responses/401Unauthorized"
                    },
                    "403" : {
                        "$ref" : "#/components/responses/403Forbidden"
                    }
                }
            },
            "post" : {
                "tags" : [ "Ontologies" ],
                "summary" : "Create new Ontology",
                "description" : "Add new Ontology to database",
                "parameters" : [ {
                    "$ref" : "#/components/parameters/authorizationHeader"
                } ],
                "requestBody" : {
                    "content" : {
                        "application/json" : {
                            "schema" : {
                                "$ref" : "#/components/schemas/OntologyNewRequest"
                            }
                        }
                    }
                },
                "responses" : {
                    "200" : {
                        "$ref" : "#/components/responses/OntologyListResponse"
                    },
                    "400" : {
                        "$ref" : "#/components/responses/400BadRequest"
                    },
                    "401" : {
                        "$ref" : "#/components/responses/401Unauthorized"
                    },
                    "403" : {
                        "$ref" : "#/components/responses/403Forbidden"
                    }
                }
            }
        },
        "/scales" : {
            "get" : {
                "tags" : [ "Scales" ],
                "summary" : "Get a filtered list of Scale",
                "description" : "Get a list of Scale",
                "parameters" : [ {
                    "name" : "commonCropName",
                    "in" : "query",
                    "description" : "The BrAPI Common Crop Name is the simple, generalized, widely accepted name of the organism being researched. It is most often used in multi-crop systems where digital resources need to be divided at a high level. Things like 'Maize', 'Wheat', and 'Rice' are examples of common crop names.\n\nUse this parameter to only return results associated with the given crops. \n\nUse `GET /commoncropnames` to find the list of available crops on a server.",
                    "required" : false,
                    "schema" : {
                        "type" : "string"
                    }
                }, {
                    "name" : "ontologyDbId",
                    "in" : "query",
                    "description" : "The unique identifier for an ontology definition. Use this parameter to filter results based on a specific ontology \n\n  Use `GET /ontologies` to find the list of available ontologies on a server.",
                    "required" : false,
                    "schema" : {
                        "type" : "string"
                    }
                }, {
                    "name" : "programDbId",
                    "in" : "query",
                    "description" : "A BrAPI Program represents the high level organization or group who is responsible for conducting trials and studies. Things like Breeding Programs and Funded Projects are considered BrAPI Programs. \n\nUse this parameter to only return results associated with the given programs. \n\nUse `GET /programs` to find the list of available programs on a server.",
                    "required" : false,
                    "schema" : {
                        "type" : "string"
                    }
                }, {
                    "name" : "programName",
                    "in" : "query",
                    "description" : "Use this parameter to only return results associated with the given program names. Program names are not required to be unique.\n\nUse `GET /programs` to find the list of available programs on a server.",
                    "required" : false,
                    "schema" : {
                        "type" : "string"
                    }
                }, {
                    "name" : "scaleDbId",
                    "in" : "query",
                    "description" : "The unique identifier for a scale.",
                    "required" : false,
                    "schema" : {
                        "type" : "string"
                    }
                }, {
                    "name" : "observationVariableDbId",
                    "in" : "query",
                    "description" : "The unique identifier for an observation variable.",
                    "required" : false,
                    "schema" : {
                        "type" : "string"
                    }
                }, {
                    "$ref" : "#/components/parameters/externalReferenceID"
                }, {
                    "$ref" : "#/components/parameters/externalReferenceId"
                }, {
                    "$ref" : "#/components/parameters/externalReferenceSource"
                }, {
                    "$ref" : "#/components/parameters/page"
                }, {
                    "$ref" : "#/components/parameters/pageSize"
                }, {
                    "$ref" : "#/components/parameters/authorizationHeader"
                } ],
                "responses" : {
                    "200" : {
                        "$ref" : "#/components/responses/ScaleListResponse"
                    },
                    "400" : {
                        "$ref" : "#/components/responses/400BadRequest"
                    },
                    "401" : {
                        "$ref" : "#/components/responses/401Unauthorized"
                    },
                    "403" : {
                        "$ref" : "#/components/responses/403Forbidden"
                    }
                }
            },
            "post" : {
                "tags" : [ "Scales" ],
                "summary" : "Create new Scale",
                "description" : "Add new Scale to database",
                "parameters" : [ {
                    "$ref" : "#/components/parameters/authorizationHeader"
                } ],
                "requestBody" : {
                    "content" : {
                        "application/json" : {
                            "schema" : {
                                "$ref" : "#/components/schemas/ScaleNewRequest"
                            }
                        }
                    }
                },
                "responses" : {
                    "200" : {
                        "$ref" : "#/components/responses/ScaleListResponse"
                    },
                    "400" : {
                        "$ref" : "#/components/responses/400BadRequest"
                    },
                    "401" : {
                        "$ref" : "#/components/responses/401Unauthorized"
                    },
                    "403" : {
                        "$ref" : "#/components/responses/403Forbidden"
                    }
                }
            }
        },
        "/traits" : {
            "get" : {
                "tags" : [ "Traits" ],
                "summary" : "Get a filtered list of Trait",
                "description" : "Get a list of Trait",
                "parameters" : [ {
                    "name" : "commonCropName",
                    "in" : "query",
                    "description" : "The BrAPI Common Crop Name is the simple, generalized, widely accepted name of the organism being researched. It is most often used in multi-crop systems where digital resources need to be divided at a high level. Things like 'Maize', 'Wheat', and 'Rice' are examples of common crop names.\n\nUse this parameter to only return results associated with the given crops. \n\nUse `GET /commoncropnames` to find the list of available crops on a server.",
                    "required" : false,
                    "schema" : {
                        "type" : "string"
                    }
                }, {
                    "name" : "ontologyDbId",
                    "in" : "query",
                    "description" : "The unique identifier for an ontology definition. Use this parameter to filter results based on a specific ontology \n\n  Use `GET /ontologies` to find the list of available ontologies on a server.",
                    "required" : false,
                    "schema" : {
                        "type" : "string"
                    }
                }, {
                    "name" : "programDbId",
                    "in" : "query",
                    "description" : "A BrAPI Program represents the high level organization or group who is responsible for conducting trials and studies. Things like Breeding Programs and Funded Projects are considered BrAPI Programs. \n\nUse this parameter to only return results associated with the given programs. \n\nUse `GET /programs` to find the list of available programs on a server.",
                    "required" : false,
                    "schema" : {
                        "type" : "string"
                    }
                }, {
                    "name" : "programName",
                    "in" : "query",
                    "description" : "Use this parameter to only return results associated with the given program names. Program names are not required to be unique.\n\nUse `GET /programs` to find the list of available programs on a server.",
                    "required" : false,
                    "schema" : {
                        "type" : "string"
                    }
                }, {
                    "name" : "traitDbId",
                    "in" : "query",
                    "description" : "The unique identifier for a trait.",
                    "required" : false,
                    "schema" : {
                        "type" : "string"
                    }
                }, {
                    "name" : "observationVariableDbId",
                    "in" : "query",
                    "description" : "The unique identifier for an observation variable.",
                    "required" : false,
                    "schema" : {
                        "type" : "string"
                    }
                }, {
                    "$ref" : "#/components/parameters/externalReferenceID"
                }, {
                    "$ref" : "#/components/parameters/externalReferenceId"
                }, {
                    "$ref" : "#/components/parameters/externalReferenceSource"
                }, {
                    "$ref" : "#/components/parameters/page"
                }, {
                    "$ref" : "#/components/parameters/pageSize"
                }, {
                    "$ref" : "#/components/parameters/authorizationHeader"
                } ],
                "responses" : {
                    "200" : {
                        "$ref" : "#/components/responses/TraitListResponse"
                    },
                    "400" : {
                        "$ref" : "#/components/responses/400BadRequest"
                    },
                    "401" : {
                        "$ref" : "#/components/responses/401Unauthorized"
                    },
                    "403" : {
                        "$ref" : "#/components/responses/403Forbidden"
                    }
                }
            },
            "post" : {
                "tags" : [ "Traits" ],
                "summary" : "Create new Trait",
                "description" : "Add new Trait to database",
                "parameters" : [ {
                    "$ref" : "#/components/parameters/authorizationHeader"
                } ],
                "requestBody" : {
                    "content" : {
                        "application/json" : {
                            "schema" : {
                                "$ref" : "#/components/schemas/TraitNewRequest"
                            }
                        }
                    }
                },
                "responses" : {
                    "200" : {
                        "$ref" : "#/components/responses/TraitListResponse"
                    },
                    "400" : {
                        "$ref" : "#/components/responses/400BadRequest"
                    },
                    "401" : {
                        "$ref" : "#/components/responses/401Unauthorized"
                    },
                    "403" : {
                        "$ref" : "#/components/responses/403Forbidden"
                    }
                }
            }
        },
        "/images/{imageDbId}" : {
            "get" : {
                "tags" : [ "Images" ],
                "summary" : "Get the details of a specific Image",
                "description" : "Get details for a Image",
                "responses" : {
                    "200" : {
                        "$ref" : "#/components/responses/ImageSingleResponse"
                    },
                    "400" : {
                        "$ref" : "#/components/responses/400BadRequest"
                    },
                    "401" : {
                        "$ref" : "#/components/responses/401Unauthorized"
                    },
                    "403" : {
                        "$ref" : "#/components/responses/403Forbidden"
                    }
                }
            },
            "put" : {
                "tags" : [ "Images" ],
                "summary" : "Update the details for an existing Image",
                "description" : "Update the details for an existing Image",
                "parameters" : [ {
                    "$ref" : "#/components/parameters/authorizationHeader"
                } ],
                "requestBody" : {
                    "content" : {
                        "application/json" : {
                            "schema" : {
                                "$ref" : "#/components/schemas/ImageNewRequest"
                            }
                        }
                    }
                },
                "responses" : {
                    "200" : {
                        "$ref" : "#/components/responses/ImageSingleResponse"
                    },
                    "400" : {
                        "$ref" : "#/components/responses/400BadRequest"
                    },
                    "401" : {
                        "$ref" : "#/components/responses/401Unauthorized"
                    },
                    "403" : {
                        "$ref" : "#/components/responses/403Forbidden"
                    }
                }
            }
        },
        "/methods/{methodDbId}" : {
            "get" : {
                "tags" : [ "Methods" ],
                "summary" : "Get the details of a specific Method",
                "description" : "Get details for a Method",
                "responses" : {
                    "200" : {
                        "$ref" : "#/components/responses/MethodSingleResponse"
                    },
                    "400" : {
                        "$ref" : "#/components/responses/400BadRequest"
                    },
                    "401" : {
                        "$ref" : "#/components/responses/401Unauthorized"
                    },
                    "403" : {
                        "$ref" : "#/components/responses/403Forbidden"
                    }
                }
            },
            "put" : {
                "tags" : [ "Methods" ],
                "summary" : "Update the details for an existing Method",
                "description" : "Update the details for an existing Method",
                "parameters" : [ {
                    "$ref" : "#/components/parameters/authorizationHeader"
                } ],
                "requestBody" : {
                    "content" : {
                        "application/json" : {
                            "schema" : {
                                "$ref" : "#/components/schemas/MethodNewRequest"
                            }
                        }
                    }
                },
                "responses" : {
                    "200" : {
                        "$ref" : "#/components/responses/MethodSingleResponse"
                    },
                    "400" : {
                        "$ref" : "#/components/responses/400BadRequest"
                    },
                    "401" : {
                        "$ref" : "#/components/responses/401Unauthorized"
                    },
                    "403" : {
                        "$ref" : "#/components/responses/403Forbidden"
                    }
                }
            }
        },
        "/observations/{observationDbId}" : {
            "get" : {
                "tags" : [ "Observations" ],
                "summary" : "Get the details of a specific Observation",
                "description" : "Get details for a Observation",
                "responses" : {
                    "200" : {
                        "$ref" : "#/components/responses/ObservationSingleResponse"
                    },
                    "400" : {
                        "$ref" : "#/components/responses/400BadRequest"
                    },
                    "401" : {
                        "$ref" : "#/components/responses/401Unauthorized"
                    },
                    "403" : {
                        "$ref" : "#/components/responses/403Forbidden"
                    }
                }
            }
        },
        "/observationunits/{observationUnitDbId}" : {
            "get" : {
                "tags" : [ "ObservationUnits" ],
                "summary" : "Get the details of a specific ObservationUnit",
                "description" : "Get details for a ObservationUnit",
                "responses" : {
                    "200" : {
                        "$ref" : "#/components/responses/ObservationUnitSingleResponse"
                    },
                    "400" : {
                        "$ref" : "#/components/responses/400BadRequest"
                    },
                    "401" : {
                        "$ref" : "#/components/responses/401Unauthorized"
                    },
                    "403" : {
                        "$ref" : "#/components/responses/403Forbidden"
                    }
                }
            }
        },
        "/variables/{observationVariableDbId}" : {
            "get" : {
                "tags" : [ "ObservationVariables" ],
                "summary" : "Get the details of a specific ObservationVariable",
                "description" : "Get details for a ObservationVariable",
                "responses" : {
                    "200" : {
                        "$ref" : "#/components/responses/ObservationVariableSingleResponse"
                    },
                    "400" : {
                        "$ref" : "#/components/responses/400BadRequest"
                    },
                    "401" : {
                        "$ref" : "#/components/responses/401Unauthorized"
                    },
                    "403" : {
                        "$ref" : "#/components/responses/403Forbidden"
                    }
                }
            },
            "put" : {
                "tags" : [ "ObservationVariables" ],
                "summary" : "Update the details for an existing ObservationVariable",
                "description" : "Update the details for an existing ObservationVariable",
                "parameters" : [ {
                    "$ref" : "#/components/parameters/authorizationHeader"
                } ],
                "requestBody" : {
                    "content" : {
                        "application/json" : {
                            "schema" : {
                                "$ref" : "#/components/schemas/ObservationVariableNewRequest"
                            }
                        }
                    }
                },
                "responses" : {
                    "200" : {
                        "$ref" : "#/components/responses/ObservationVariableSingleResponse"
                    },
                    "400" : {
                        "$ref" : "#/components/responses/400BadRequest"
                    },
                    "401" : {
                        "$ref" : "#/components/responses/401Unauthorized"
                    },
                    "403" : {
                        "$ref" : "#/components/responses/403Forbidden"
                    }
                }
            }
        },
        "/ontologies/{ontologyDbId}" : {
            "get" : {
                "tags" : [ "Ontologies" ],
                "summary" : "Get the details of a specific Ontology",
                "description" : "Get details for a Ontology",
                "responses" : {
                    "200" : {
                        "$ref" : "#/components/responses/OntologySingleResponse"
                    },
                    "400" : {
                        "$ref" : "#/components/responses/400BadRequest"
                    },
                    "401" : {
                        "$ref" : "#/components/responses/401Unauthorized"
                    },
                    "403" : {
                        "$ref" : "#/components/responses/403Forbidden"
                    }
                }
            },
            "put" : {
                "tags" : [ "Ontologies" ],
                "summary" : "Update the details for an existing Ontology",
                "description" : "Update the details for an existing Ontology",
                "parameters" : [ {
                    "$ref" : "#/components/parameters/authorizationHeader"
                } ],
                "requestBody" : {
                    "content" : {
                        "application/json" : {
                            "schema" : {
                                "$ref" : "#/components/schemas/OntologyNewRequest"
                            }
                        }
                    }
                },
                "responses" : {
                    "200" : {
                        "$ref" : "#/components/responses/OntologySingleResponse"
                    },
                    "400" : {
                        "$ref" : "#/components/responses/400BadRequest"
                    },
                    "401" : {
                        "$ref" : "#/components/responses/401Unauthorized"
                    },
                    "403" : {
                        "$ref" : "#/components/responses/403Forbidden"
                    }
                }
            }
        },
        "/scales/{scaleDbId}" : {
            "get" : {
                "tags" : [ "Scales" ],
                "summary" : "Get the details of a specific Scale",
                "description" : "Get details for a Scale",
                "responses" : {
                    "200" : {
                        "$ref" : "#/components/responses/ScaleSingleResponse"
                    },
                    "400" : {
                        "$ref" : "#/components/responses/400BadRequest"
                    },
                    "401" : {
                        "$ref" : "#/components/responses/401Unauthorized"
                    },
                    "403" : {
                        "$ref" : "#/components/responses/403Forbidden"
                    }
                }
            },
            "put" : {
                "tags" : [ "Scales" ],
                "summary" : "Update the details for an existing Scale",
                "description" : "Update the details for an existing Scale",
                "parameters" : [ {
                    "$ref" : "#/components/parameters/authorizationHeader"
                } ],
                "requestBody" : {
                    "content" : {
                        "application/json" : {
                            "schema" : {
                                "$ref" : "#/components/schemas/ScaleNewRequest"
                            }
                        }
                    }
                },
                "responses" : {
                    "200" : {
                        "$ref" : "#/components/responses/ScaleSingleResponse"
                    },
                    "400" : {
                        "$ref" : "#/components/responses/400BadRequest"
                    },
                    "401" : {
                        "$ref" : "#/components/responses/401Unauthorized"
                    },
                    "403" : {
                        "$ref" : "#/components/responses/403Forbidden"
                    }
                }
            }
        },
        "/traits/{traitDbId}" : {
            "get" : {
                "tags" : [ "Traits" ],
                "summary" : "Get the details of a specific Trait",
                "description" : "Get details for a Trait",
                "responses" : {
                    "200" : {
                        "$ref" : "#/components/responses/TraitSingleResponse"
                    },
                    "400" : {
                        "$ref" : "#/components/responses/400BadRequest"
                    },
                    "401" : {
                        "$ref" : "#/components/responses/401Unauthorized"
                    },
                    "403" : {
                        "$ref" : "#/components/responses/403Forbidden"
                    }
                }
            },
            "put" : {
                "tags" : [ "Traits" ],
                "summary" : "Update the details for an existing Trait",
                "description" : "Update the details for an existing Trait",
                "parameters" : [ {
                    "$ref" : "#/components/parameters/authorizationHeader"
                } ],
                "requestBody" : {
                    "content" : {
                        "application/json" : {
                            "schema" : {
                                "$ref" : "#/components/schemas/TraitNewRequest"
                            }
                        }
                    }
                },
                "responses" : {
                    "200" : {
                        "$ref" : "#/components/responses/TraitSingleResponse"
                    },
                    "400" : {
                        "$ref" : "#/components/responses/400BadRequest"
                    },
                    "401" : {
                        "$ref" : "#/components/responses/401Unauthorized"
                    },
                    "403" : {
                        "$ref" : "#/components/responses/403Forbidden"
                    }
                }
            }
        },
        "/search/images" : {
            "post" : {
                "tags" : [ "Images" ],
                "summary" : "Submit a search request for `Image`",
                "description" : "Submit a search request for `Image`<br/>\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse the corresponding `GET /search/image/{searchResultsDbId}` to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
                "responses" : {
                    "200" : {
                        "$ref" : "#/components/responses/ImageListResponse"
                    },
                    "202" : {
                        "$ref" : "#/components/responses/202AcceptedSearchResponse"
                    },
                    "400" : {
                        "$ref" : "#/components/responses/400BadRequest"
                    },
                    "401" : {
                        "$ref" : "#/components/responses/401Unauthorized"
                    },
                    "403" : {
                        "$ref" : "#/components/responses/403Forbidden"
                    }
                }
            }
        },
        "/search/observations" : {
            "post" : {
                "tags" : [ "Observations" ],
                "summary" : "Submit a search request for `Observation`",
                "description" : "Submit a search request for `Observation`<br/>\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse the corresponding `GET /search/observation/{searchResultsDbId}` to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
                "responses" : {
                    "200" : {
                        "$ref" : "#/components/responses/ObservationListResponse"
                    },
                    "202" : {
                        "$ref" : "#/components/responses/202AcceptedSearchResponse"
                    },
                    "400" : {
                        "$ref" : "#/components/responses/400BadRequest"
                    },
                    "401" : {
                        "$ref" : "#/components/responses/401Unauthorized"
                    },
                    "403" : {
                        "$ref" : "#/components/responses/403Forbidden"
                    }
                }
            }
        },
        "/search/observationunits" : {
            "post" : {
                "tags" : [ "ObservationUnits" ],
                "summary" : "Submit a search request for `ObservationUnit`",
                "description" : "Submit a search request for `ObservationUnit`<br/>\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse the corresponding `GET /search/observationUnit/{searchResultsDbId}` to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
                "responses" : {
                    "200" : {
                        "$ref" : "#/components/responses/ObservationUnitListResponse"
                    },
                    "202" : {
                        "$ref" : "#/components/responses/202AcceptedSearchResponse"
                    },
                    "400" : {
                        "$ref" : "#/components/responses/400BadRequest"
                    },
                    "401" : {
                        "$ref" : "#/components/responses/401Unauthorized"
                    },
                    "403" : {
                        "$ref" : "#/components/responses/403Forbidden"
                    }
                }
            }
        },
        "/search/variables" : {
            "post" : {
                "tags" : [ "ObservationVariables" ],
                "summary" : "Submit a search request for `ObservationVariable`",
                "description" : "Submit a search request for `ObservationVariable`<br/>\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse the corresponding `GET /search/observationVariable/{searchResultsDbId}` to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
                "responses" : {
                    "200" : {
                        "$ref" : "#/components/responses/ObservationVariableListResponse"
                    },
                    "202" : {
                        "$ref" : "#/components/responses/202AcceptedSearchResponse"
                    },
                    "400" : {
                        "$ref" : "#/components/responses/400BadRequest"
                    },
                    "401" : {
                        "$ref" : "#/components/responses/401Unauthorized"
                    },
                    "403" : {
                        "$ref" : "#/components/responses/403Forbidden"
                    }
                }
            }
        },
        "/search/images/{searchResultsDbId}" : {
            "get" : {
                "tags" : [ "Images" ],
                "summary" : "Submit a search request for `Image`<br/>\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse the corresponding `GET /search/image/{searchResultsDbId}` to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
                "description" : "Get the results of a `Image` search request <br/>\nClients should submit a search request using the corresponding `POST /search/image` endpoint.\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse this endpoint to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
                "responses" : {
                    "200" : {
                        "$ref" : "#/components/responses/ImageListResponse"
                    },
                    "400" : {
                        "$ref" : "#/components/responses/400BadRequest"
                    },
                    "401" : {
                        "$ref" : "#/components/responses/401Unauthorized"
                    },
                    "403" : {
                        "$ref" : "#/components/responses/403Forbidden"
                    }
                }
            }
        },
        "/search/observations/{searchResultsDbId}" : {
            "get" : {
                "tags" : [ "Observations" ],
                "summary" : "Submit a search request for `Observation`<br/>\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse the corresponding `GET /search/observation/{searchResultsDbId}` to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
                "description" : "Get the results of a `Observation` search request <br/>\nClients should submit a search request using the corresponding `POST /search/observation` endpoint.\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse this endpoint to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
                "responses" : {
                    "200" : {
                        "$ref" : "#/components/responses/ObservationListResponse"
                    },
                    "400" : {
                        "$ref" : "#/components/responses/400BadRequest"
                    },
                    "401" : {
                        "$ref" : "#/components/responses/401Unauthorized"
                    },
                    "403" : {
                        "$ref" : "#/components/responses/403Forbidden"
                    }
                }
            }
        },
        "/search/observationunits/{searchResultsDbId}" : {
            "get" : {
                "tags" : [ "ObservationUnits" ],
                "summary" : "Submit a search request for `ObservationUnit`<br/>\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse the corresponding `GET /search/observationUnit/{searchResultsDbId}` to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
                "description" : "Get the results of a `ObservationUnit` search request <br/>\nClients should submit a search request using the corresponding `POST /search/observationUnit` endpoint.\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse this endpoint to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
                "responses" : {
                    "200" : {
                        "$ref" : "#/components/responses/ObservationUnitListResponse"
                    },
                    "400" : {
                        "$ref" : "#/components/responses/400BadRequest"
                    },
                    "401" : {
                        "$ref" : "#/components/responses/401Unauthorized"
                    },
                    "403" : {
                        "$ref" : "#/components/responses/403Forbidden"
                    }
                }
            }
        },
        "/search/variables/{searchResultsDbId}" : {
            "get" : {
                "tags" : [ "ObservationVariables" ],
                "summary" : "Submit a search request for `ObservationVariable`<br/>\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse the corresponding `GET /search/observationVariable/{searchResultsDbId}` to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
                "description" : "Get the results of a `ObservationVariable` search request <br/>\nClients should submit a search request using the corresponding `POST /search/observationVariable` endpoint.\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse this endpoint to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
                "responses" : {
                    "200" : {
                        "$ref" : "#/components/responses/ObservationVariableListResponse"
                    },
                    "400" : {
                        "$ref" : "#/components/responses/400BadRequest"
                    },
                    "401" : {
                        "$ref" : "#/components/responses/401Unauthorized"
                    },
                    "403" : {
                        "$ref" : "#/components/responses/403Forbidden"
                    }
                }
            }
        }
    },
    "components" : {
        "schemas" : {
            "AdditionalInfo" : {
                "type" : "object",
                "properties" : {
                    "additionalProperties" : {
                        "type" : "string"
                    }
                },
                "description" : "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification."
            },
            "Attribute" : {
                "required" : [ "attributeName", "method", "scale", "trait" ],
                "type" : "object",
                "properties" : {
                    "additionalInfo" : {
                        "$ref" : "#/components/schemas/AdditionalInfo"
                    },
                    "attributeCategory" : {
                        "type" : "string"
                    },
                    "attributeDbId" : {
                        "type" : "string"
                    },
                    "attributeDescription" : {
                        "type" : "string"
                    },
                    "attributeName" : {
                        "type" : "string"
                    },
                    "attributePUI" : {
                        "type" : "string"
                    },
                    "commonCropName" : {
                        "type" : "string"
                    },
                    "contextOfUse" : {
                        "type" : "array",
                        "items" : {
                            "type" : "string"
                        }
                    },
                    "defaultValue" : {
                        "type" : "string"
                    },
                    "documentationURL" : {
                        "type" : "string"
                    },
                    "externalReferences" : {
                        "type" : "array",
                        "items" : {
                            "$ref" : "#/components/schemas/ExternalReference"
                        }
                    },
                    "growthStage" : {
                        "type" : "string"
                    },
                    "institution" : {
                        "type" : "string"
                    },
                    "language" : {
                        "type" : "string"
                    },
                    "method" : {
                        "$ref" : "#/components/schemas/Method"
                    },
                    "ontologyReference" : {
                        "$ref" : "#/components/schemas/OntologyReference"
                    },
                    "scale" : {
                        "$ref" : "#/components/schemas/Scale"
                    },
                    "scientist" : {
                        "type" : "string"
                    },
                    "status" : {
                        "type" : "string"
                    },
                    "submissionTimestamp" : {
                        "type" : "string"
                    },
                    "synonyms" : {
                        "type" : "array",
                        "items" : {
                            "type" : "string"
                        }
                    },
                    "trait" : {
                        "$ref" : "#/components/schemas/Trait"
                    }
                }
            },
            "Contact" : {
                "required" : [ "contactDbId" ],
                "type" : "object",
                "properties" : {
                    "contactDbId" : {
                        "type" : "string"
                    },
                    "email" : {
                        "type" : "string"
                    },
                    "instituteName" : {
                        "type" : "string"
                    },
                    "name" : {
                        "type" : "string"
                    },
                    "orcid" : {
                        "type" : "string"
                    },
                    "type" : {
                        "type" : "string"
                    }
                }
            },
            "ContentTypes" : {
                "type" : "string",
                "enum" : [ "application/json", "text/csv", "text/tsv", "application/flapjack" ]
            },
            "Context" : {
                "title" : "context",
                "type" : "array",
                "description" : "The JSON-LD Context is used to provide JSON-LD definitions to each field in a JSON object. By providing an array of context file urls, a BrAPI response object becomes JSON-LD compatible.  \n\nFor more information, see https://w3c.github.io/json-ld-syntax/#the-context",
                "example" : [ "https://brapi.org/jsonld/context/metadata.jsonld" ],
                "items" : {
                    "type" : "string",
                    "format" : "uri"
                }
            },
            "CrossParent" : {
                "type" : "object",
                "properties" : {
                    "germplasm" : {
                        "$ref" : "#/components/schemas/Germplasm"
                    },
                    "observationUnit" : {
                        "$ref" : "#/components/schemas/ObservationUnit"
                    },
                    "parentType" : {
                        "type" : "string",
                        "description" : "The type of parent ex. 'MALE', 'FEMALE', 'SELF', 'POPULATION', etc.",
                        "enum" : [ "MALE", "FEMALE", "SELF", "POPULATION" ]
                    }
                }
            },
            "Event" : {
                "required" : [ "eventDbId", "eventType" ],
                "type" : "object",
                "properties" : {
                    "additionalInfo" : {
                        "$ref" : "#/components/schemas/AdditionalInfo"
                    },
                    "eventDateRange" : {
                        "type" : "object",
                        "properties" : {
                            "discreteDates" : {
                                "type" : "array",
                                "items" : {
                                    "type" : "string"
                                }
                            },
                            "endDate" : {
                                "type" : "string"
                            },
                            "startDate" : {
                                "type" : "string"
                            }
                        },
                        "description" : "An object describing when a particular Event has taken place. An Event can occur at one or more discrete time points (`discreteDates`) or an event can happen continuously over a longer period of time (`startDate`, `endDate`)"
                    },
                    "eventDbId" : {
                        "type" : "string"
                    },
                    "eventDescription" : {
                        "type" : "string"
                    },
                    "eventType" : {
                        "type" : "string"
                    },
                    "eventTypeDbId" : {
                        "type" : "string"
                    },
                    "observationUnitDbIds" : {
                        "type" : "array",
                        "items" : {
                            "type" : "string"
                        }
                    },
                    "studyDbId" : {
                        "type" : "string"
                    },
                    "studyName" : {
                        "type" : "string"
                    },
                    "studyPUI" : {
                        "type" : "string"
                    }
                }
            },
            "ExternalReference" : {
                "type" : "object",
                "properties" : {
                    "referenceId" : {
                        "type" : "string"
                    },
                    "referenceSource" : {
                        "type" : "string"
                    }
                }
            },
            "GeoJSON" : {
                "type" : "object",
                "properties" : {
                    "geometry" : {
                        "$ref" : "#/components/schemas/GeoJSONGeometry"
                    },
                    "type" : {
                        "type" : "string"
                    }
                },
                "description" : "One geometry as defined by GeoJSON (RFC 7946). All coordinates are decimal values on the WGS84 geographic coordinate reference system.\n\nCopied from RFC 7946 Section 3.1.1\n\nA position is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or\neasting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element."
            },
            "GeoJSONGeometry" : {
                "oneOf" : [ {
                    "required" : [ "coordinateDbIds", "type" ],
                    "type" : "object",
                    "properties" : {
                        "coordinates" : {
                            "type" : "array",
                            "items" : {
                                "type" : "number"
                            }
                        },
                        "type" : {
                            "type" : "string"
                        }
                    },
                    "description" : "Copied from RFC 7946 Section 3.1.1\n\nA position is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or\neasting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element."
                }, {
                    "required" : [ "coordinateDbIds", "type" ],
                    "type" : "object",
                    "properties" : {
                        "coordinates" : {
                            "type" : "array",
                            "items" : {
                                "type" : "array",
                                "items" : {
                                    "type" : "array",
                                    "items" : {
                                        "type" : "number"
                                    }
                                }
                            }
                        },
                        "type" : {
                            "type" : "string"
                        }
                    },
                    "description" : "An array of Linear Rings. Each Linear Ring is an array of Points. \n\nA Point is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or\neasting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element."
                } ]
            },
            "GeoJSONSearchArea" : {
                "type" : "object",
                "properties" : {
                    "geometry" : {
                        "$ref" : "#/components/schemas/GeoJSONGeometry"
                    },
                    "type" : {
                        "type" : "string"
                    }
                }
            },
            "Germplasm" : {
                "required" : [ "commonCropName", "germplasmDbId", "germplasmName", "germplasmPUI" ],
                "type" : "object",
                "properties" : {
                    "accessionNumber" : {
                        "type" : "string"
                    },
                    "acquisitionDate" : {
                        "type" : "string"
                    },
                    "additionalInfo" : {
                        "$ref" : "#/components/schemas/AdditionalInfo"
                    },
                    "biologicalStatusOfAccessionCode" : {
                        "type" : "string",
                        "description" : "MCPD (v2.1) (SAMPSTAT) 19. The coding scheme proposed can be used at 3 different levels of detail: either by using the general codes such as 100, 200, 300, 400, or by using the more specific codes such as 110, 120, etc. \n\n100) Wild \n110) Natural \n120) Semi-natural/wild \n130) Semi-natural/sown \n200) Weedy \n300) Traditional cultivar/landrace \n400) Breeding/research material \n410) Breeders line \n411) Synthetic population \n412) Hybrid \n413) Founder stock/base population \n414) Inbred line (parent of hybrid cultivar) \n415) Segregating population \n416) Clonal selection \n420) Genetic stock \n421) Mutant (e.g. induced/insertion mutants, tilling populations) \n422) Cytogenetic stocks (e.g. chromosome addition/substitution, aneuploids,  amphiploids) \n423) Other genetic stocks (e.g. mapping populations) \n500) Advanced or improved cultivar (conventional breeding methods) \n600) GMO (by genetic engineering) \n999) Other (Elaborate in REMARKS field)",
                        "enum" : [ "100", "110", "120", "130", "200", "300", "400", "410", "411", "412", "413", "414", "415", "416", "420", "421", "422", "423", "500", "600", "999" ]
                    },
                    "biologicalStatusOfAccessionDescription" : {
                        "type" : "string"
                    },
                    "breedingMethodDbId" : {
                        "type" : "string"
                    },
                    "breedingMethodName" : {
                        "type" : "string"
                    },
                    "collection" : {
                        "type" : "string"
                    },
                    "commonCropName" : {
                        "type" : "string"
                    },
                    "countryOfOriginCode" : {
                        "type" : "string"
                    },
                    "defaultDisplayName" : {
                        "type" : "string"
                    },
                    "documentationURL" : {
                        "type" : "string"
                    },
                    "genus" : {
                        "type" : "string"
                    },
                    "germplasmDbId" : {
                        "type" : "string"
                    },
                    "germplasmName" : {
                        "type" : "string"
                    },
                    "germplasmPUI" : {
                        "type" : "string"
                    },
                    "germplasmPreprocessing" : {
                        "type" : "string"
                    },
                    "instituteCode" : {
                        "type" : "string"
                    },
                    "instituteName" : {
                        "type" : "string"
                    },
                    "pedigree" : {
                        "type" : "string"
                    },
                    "pedigreeNode" : {
                        "$ref" : "#/components/schemas/PedigreeNode"
                    },
                    "sampleDbIds" : {
                        "type" : "array",
                        "items" : {
                            "type" : "string"
                        }
                    },
                    "seedSource" : {
                        "type" : "string"
                    },
                    "seedSourceDescription" : {
                        "type" : "string"
                    },
                    "species" : {
                        "type" : "string"
                    },
                    "speciesAuthority" : {
                        "type" : "string"
                    },
                    "subtaxa" : {
                        "type" : "string"
                    },
                    "subtaxaAuthority" : {
                        "type" : "string"
                    }
                }
            },
            "Image" : {
                "required" : [ "imageDbId" ],
                "type" : "object",
                "properties" : {
                    "additionalInfo" : {
                        "$ref" : "#/components/schemas/AdditionalInfo"
                    },
                    "copyright" : {
                        "type" : "string"
                    },
                    "description" : {
                        "type" : "string"
                    },
                    "imageFileName" : {
                        "type" : "string"
                    },
                    "imageFileSize" : {
                        "type" : "integer",
                        "format" : "int32"
                    },
                    "imageHeight" : {
                        "type" : "integer",
                        "format" : "int32"
                    },
                    "imageLocation" : {
                        "type" : "object",
                        "properties" : {
                            "geometry" : {
                                "$ref" : "#/components/schemas/GeoJSONGeometry"
                            },
                            "type" : {
                                "type" : "string"
                            }
                        },
                        "description" : "One geometry as defined by GeoJSON (RFC 7946). All coordinates are decimal values on the WGS84 geographic coordinate reference system.\n\nCopied from RFC 7946 Section 3.1.1\n\nA position is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or\neasting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element."
                    },
                    "imageName" : {
                        "type" : "string"
                    },
                    "imageTimeStamp" : {
                        "type" : "string"
                    },
                    "imageURL" : {
                        "type" : "string"
                    },
                    "imageWidth" : {
                        "type" : "integer",
                        "format" : "int32"
                    },
                    "mimeType" : {
                        "type" : "string"
                    },
                    "observationDbIds" : {
                        "type" : "array",
                        "items" : {
                            "type" : "string"
                        }
                    },
                    "observationUnitDbId" : {
                        "type" : "string"
                    },
                    "observationUnitName" : {
                        "type" : "string"
                    },
                    "observationUnitPUI" : {
                        "type" : "string"
                    }
                }
            },
            "ImageNewRequest" : {
                "required" : [ "imageDbId", "imageDbId" ],
                "type" : "object",
                "properties" : {
                    "additionalInfo" : {
                        "$ref" : "#/components/schemas/AdditionalInfo"
                    },
                    "copyright" : {
                        "type" : "string"
                    },
                    "description" : {
                        "type" : "string"
                    },
                    "imageDbId" : {
                        "type" : "string"
                    },
                    "imageFileName" : {
                        "type" : "string"
                    },
                    "imageFileSize" : {
                        "type" : "integer",
                        "format" : "int32"
                    },
                    "imageHeight" : {
                        "type" : "integer",
                        "format" : "int32"
                    },
                    "imageLocation" : {
                        "type" : "object",
                        "properties" : {
                            "geometry" : {
                                "$ref" : "#/components/schemas/GeoJSONGeometry"
                            },
                            "type" : {
                                "type" : "string"
                            }
                        },
                        "description" : "One geometry as defined by GeoJSON (RFC 7946). All coordinates are decimal values on the WGS84 geographic coordinate reference system.\n\nCopied from RFC 7946 Section 3.1.1\n\nA position is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or\neasting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element."
                    },
                    "imageName" : {
                        "type" : "string"
                    },
                    "imageTimeStamp" : {
                        "type" : "string"
                    },
                    "imageURL" : {
                        "type" : "string"
                    },
                    "imageWidth" : {
                        "type" : "integer",
                        "format" : "int32"
                    },
                    "mimeType" : {
                        "type" : "string"
                    },
                    "observationDbIds" : {
                        "type" : "array",
                        "items" : {
                            "type" : "string"
                        }
                    },
                    "observationUnitDbId" : {
                        "type" : "string"
                    },
                    "observationUnitName" : {
                        "type" : "string"
                    },
                    "observationUnitPUI" : {
                        "type" : "string"
                    }
                }
            },
            "ImageSearchRequest" : {
                "type" : "object",
                "properties" : {
                    "imageFileSizeMax" : {
                        "type" : "integer",
                        "format" : "int32"
                    },
                    "imageFileSizeMin" : {
                        "type" : "integer",
                        "format" : "int32"
                    },
                    "imageHeightMax" : {
                        "type" : "integer",
                        "format" : "int32"
                    },
                    "imageHeightMin" : {
                        "type" : "integer",
                        "format" : "int32"
                    },
                    "imageLocation" : {
                        "$ref" : "#/components/schemas/GeoJSONSearchArea"
                    },
                    "imageTimeStampRangeEnd" : {
                        "type" : "string"
                    },
                    "imageTimeStampRangeStart" : {
                        "type" : "string"
                    },
                    "imageWidthMax" : {
                        "type" : "integer",
                        "format" : "int32"
                    },
                    "imageWidthMin" : {
                        "type" : "integer",
                        "format" : "int32"
                    }
                }
            },
            "ListType" : {
                "type" : "string",
                "description" : "The type of objects that are referenced in a List",
                "enum" : [ "germplasm", "markers", "variants", "programs", "trials", "studies", "observationUnits", "observations", "observationVariables", "samples" ]
            },
            "Method" : {
                "required" : [ "methodDbId", "methodName" ],
                "type" : "object",
                "properties" : {
                    "additionalInfo" : {
                        "$ref" : "#/components/schemas/AdditionalInfo"
                    },
                    "bibliographicalReference" : {
                        "type" : "string"
                    },
                    "description" : {
                        "type" : "string"
                    },
                    "formula" : {
                        "type" : "string"
                    },
                    "methodClass" : {
                        "type" : "string"
                    },
                    "methodName" : {
                        "type" : "string"
                    },
                    "methodPUI" : {
                        "type" : "string"
                    },
                    "ontologyReference" : {
                        "$ref" : "#/components/schemas/OntologyReference"
                    }
                }
            },
            "MethodNewRequest" : {
                "required" : [ "methodDbId", "methodName" ],
                "type" : "object",
                "properties" : {
                    "additionalInfo" : {
                        "$ref" : "#/components/schemas/AdditionalInfo"
                    },
                    "bibliographicalReference" : {
                        "type" : "string"
                    },
                    "description" : {
                        "type" : "string"
                    },
                    "formula" : {
                        "type" : "string"
                    },
                    "methodClass" : {
                        "type" : "string"
                    },
                    "methodDbId" : {
                        "type" : "string"
                    },
                    "methodName" : {
                        "type" : "string"
                    },
                    "methodPUI" : {
                        "type" : "string"
                    },
                    "ontologyReference" : {
                        "$ref" : "#/components/schemas/OntologyReference"
                    }
                }
            },
            "Observation" : {
                "required" : [ "observationDbId" ],
                "type" : "object",
                "properties" : {
                    "additionalInfo" : {
                        "$ref" : "#/components/schemas/AdditionalInfo"
                    },
                    "collector" : {
                        "type" : "string"
                    },
                    "geoCoordinates" : {
                        "type" : "object",
                        "properties" : {
                            "geometry" : {
                                "$ref" : "#/components/schemas/GeoJSONGeometry"
                            },
                            "type" : {
                                "type" : "string"
                            }
                        },
                        "description" : "One geometry as defined by GeoJSON (RFC 7946). All coordinates are decimal values on the WGS84 geographic coordinate reference system.\n\nCopied from RFC 7946 Section 3.1.1\n\nA position is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or\neasting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element."
                    },
                    "germplasmDbId" : {
                        "type" : "string"
                    },
                    "germplasmName" : {
                        "type" : "string"
                    },
                    "germplasmPUI" : {
                        "type" : "string"
                    },
                    "observationTimeStamp" : {
                        "type" : "string"
                    },
                    "observationUnitDbId" : {
                        "type" : "string"
                    },
                    "observationUnitName" : {
                        "type" : "string"
                    },
                    "observationUnitPUI" : {
                        "type" : "string"
                    },
                    "observationVariableDbId" : {
                        "type" : "string"
                    },
                    "observationVariableName" : {
                        "type" : "string"
                    },
                    "observationVariablePUI" : {
                        "type" : "string"
                    },
                    "seasonDbId" : {
                        "type" : "string"
                    },
                    "seasonName" : {
                        "type" : "string"
                    },
                    "studyDbId" : {
                        "type" : "string"
                    },
                    "studyName" : {
                        "type" : "string"
                    },
                    "studyPUI" : {
                        "type" : "string"
                    },
                    "uploadedBy" : {
                        "type" : "string"
                    },
                    "value" : {
                        "type" : "string"
                    }
                }
            },
            "ObservationNewRequest" : {
                "required" : [ "observationDbId", "observationDbId" ],
                "type" : "object",
                "properties" : {
                    "additionalInfo" : {
                        "$ref" : "#/components/schemas/AdditionalInfo"
                    },
                    "collector" : {
                        "type" : "string"
                    },
                    "geoCoordinates" : {
                        "type" : "object",
                        "properties" : {
                            "geometry" : {
                                "$ref" : "#/components/schemas/GeoJSONGeometry"
                            },
                            "type" : {
                                "type" : "string"
                            }
                        },
                        "description" : "One geometry as defined by GeoJSON (RFC 7946). All coordinates are decimal values on the WGS84 geographic coordinate reference system.\n\nCopied from RFC 7946 Section 3.1.1\n\nA position is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or\neasting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element."
                    },
                    "germplasmDbId" : {
                        "type" : "string"
                    },
                    "germplasmName" : {
                        "type" : "string"
                    },
                    "germplasmPUI" : {
                        "type" : "string"
                    },
                    "observationDbId" : {
                        "type" : "string"
                    },
                    "observationTimeStamp" : {
                        "type" : "string"
                    },
                    "observationUnitDbId" : {
                        "type" : "string"
                    },
                    "observationUnitName" : {
                        "type" : "string"
                    },
                    "observationUnitPUI" : {
                        "type" : "string"
                    },
                    "observationVariableDbId" : {
                        "type" : "string"
                    },
                    "observationVariableName" : {
                        "type" : "string"
                    },
                    "observationVariablePUI" : {
                        "type" : "string"
                    },
                    "seasonDbId" : {
                        "type" : "string"
                    },
                    "seasonName" : {
                        "type" : "string"
                    },
                    "studyDbId" : {
                        "type" : "string"
                    },
                    "studyName" : {
                        "type" : "string"
                    },
                    "studyPUI" : {
                        "type" : "string"
                    },
                    "uploadedBy" : {
                        "type" : "string"
                    },
                    "value" : {
                        "type" : "string"
                    }
                }
            },
            "ObservationSearchRequest" : {
                "type" : "object",
                "properties" : {
                    "observationTimeStampRangeEnd" : {
                        "type" : "string"
                    },
                    "observationTimeStampRangeStart" : {
                        "type" : "string"
                    }
                }
            },
            "ObservationUnit" : {
                "required" : [ "observationUnitDbId" ],
                "type" : "object",
                "properties" : {
                    "additionalInfo" : {
                        "$ref" : "#/components/schemas/AdditionalInfo"
                    },
                    "crossDbId" : {
                        "type" : "string"
                    },
                    "crossName" : {
                        "type" : "string"
                    },
                    "germplasmDbId" : {
                        "type" : "string"
                    },
                    "germplasmName" : {
                        "type" : "string"
                    },
                    "germplasmPUI" : {
                        "type" : "string"
                    },
                    "locationDbId" : {
                        "type" : "string"
                    },
                    "locationName" : {
                        "type" : "string"
                    },
                    "observationUnitName" : {
                        "type" : "string"
                    },
                    "observationUnitPUI" : {
                        "type" : "string"
                    },
                    "observationUnitPosition" : {
                        "type" : "object",
                        "properties" : {
                            "entryType" : {
                                "type" : "string",
                                "description" : "The type of entry for this observation unit. ex. \"CHECK\", \"TEST\", \"FILLER\"",
                                "enum" : [ "CHECK", "TEST", "FILLER" ]
                            },
                            "geoCoordinates" : {
                                "type" : "object",
                                "properties" : {
                                    "geometry" : {
                                        "$ref" : "#/components/schemas/GeoJSONGeometry"
                                    },
                                    "type" : {
                                        "type" : "string"
                                    }
                                },
                                "description" : "One geometry as defined by GeoJSON (RFC 7946). All coordinates are decimal values on the WGS84 geographic coordinate reference system.\n\nCopied from RFC 7946 Section 3.1.1\n\nA position is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or\neasting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element."
                            },
                            "observationLevel" : {
                                "$ref" : "#/components/schemas/ObservationUnitLevel"
                            },
                            "observationLevelRelationships" : {
                                "type" : "array",
                                "items" : {
                                    "$ref" : "#/components/schemas/ObservationUnitLevelRelationship"
                                }
                            },
                            "positionCoordinateX" : {
                                "type" : "string"
                            },
                            "positionCoordinateXType" : {
                                "type" : "string",
                                "description" : "The type of positional coordinate used. Must be one of the following values \n\nLONGITUDE - ISO 6709 standard, WGS84 geodetic datum. See 'Location Coordinate Encoding' for details \n\nLATITUDE - ISO 6709 standard, WGS84 geodetic datum. See 'Location Coordinate Encoding' for details \n\nPLANTED_ROW - The physical planted row number \n\nPLANTED_INDIVIDUAL - The physical counted number, could be independent or within a planted row \n\nGRID_ROW - The row index number of a square grid overlay \n\nGRID_COL - The column index number of a square grid overlay \n\nMEASURED_ROW - The distance in meters from a defined 0-th row \n\nMEASURED_COL - The distance in meters from a defined 0-th column ",
                                "enum" : [ "LONGITUDE", "LATITUDE", "PLANTED_ROW", "PLANTED_INDIVIDUAL", "GRID_ROW", "GRID_COL", "MEASURED_ROW", "MEASURED_COL" ]
                            },
                            "positionCoordinateY" : {
                                "type" : "string"
                            },
                            "positionCoordinateYType" : {
                                "type" : "string",
                                "description" : "The type of positional coordinate used. Must be one of the following values \n\nLONGITUDE - ISO 6709 standard, WGS84 geodetic datum. See 'Location Coordinate Encoding' for details \n\nLATITUDE - ISO 6709 standard, WGS84 geodetic datum. See 'Location Coordinate Encoding' for details \n\nPLANTED_ROW - The physical planted row number  \n\nPLANTED_INDIVIDUAL - The physical counted number, could be independent or within a planted row \n\nGRID_ROW - The row index number of a square grid overlay \n\nGRID_COL - The column index number of a square grid overlay \n\nMEASURED_ROW - The distance in meters from a defined 0-th row \n\nMEASURED_COL - The distance in meters from a defined 0-th column ",
                                "enum" : [ "LONGITUDE", "LATITUDE", "PLANTED_ROW", "PLANTED_INDIVIDUAL", "GRID_ROW", "GRID_COL", "MEASURED_ROW", "MEASURED_COL" ]
                            }
                        },
                        "description" : "All positional and layout information related to this Observation Unit \n\nMIAPPE V1.1 (DM-73) Spatial distribution - Type and value of a spatial coordinate (georeference or relative) \nor level of observation (plot 45, subblock 7, block 2) provided as a key-value pair of the form type:value. \nLevels of observation must be consistent with those listed in the Study section."
                    },
                    "programDbId" : {
                        "type" : "string"
                    },
                    "programName" : {
                        "type" : "string"
                    },
                    "seedLotDbId" : {
                        "type" : "string"
                    },
                    "seedLotName" : {
                        "type" : "string"
                    },
                    "studyDbId" : {
                        "type" : "string"
                    },
                    "studyName" : {
                        "type" : "string"
                    },
                    "studyPUI" : {
                        "type" : "string"
                    },
                    "trialDbId" : {
                        "type" : "string"
                    },
                    "trialName" : {
                        "type" : "string"
                    },
                    "trialPUI" : {
                        "type" : "string"
                    }
                }
            },
            "ObservationUnitLevel" : {
                "type" : "object",
                "properties" : {
                    "levelCode" : {
                        "type" : "string"
                    },
                    "levelName" : {
                        "type" : "string"
                    },
                    "levelOrder" : {
                        "type" : "integer",
                        "format" : "int32"
                    }
                },
                "description" : "The exact level and level code of an observation unit. \n\nFor more information on Observation Levels, please review the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Observation_Levels\">Observation Levels documentation</a>. \n\nMIAPPE V1.1 DM-71 Observation unit type \"Type of observation unit in textual form, usually one of the following: study, block, sub-block, plot, sub-plot, pot, plant. Use of other observation unit types is possible but not recommended. \nThe observation unit type can not be used to indicate sub-plant levels. However, observations can still be made on the sub-plant level, as long as the details are indicated in the associated observed variable (see observed variables). \nAlternatively, it is possible to use samples for more detailed tracing of sub-plant units, attaching the observations to them instead.\" "
            },
            "ObservationUnitLevelRelationship" : {
                "type" : "object",
                "properties" : {
                    "levelCode" : {
                        "type" : "string"
                    },
                    "levelName" : {
                        "type" : "string"
                    },
                    "levelOrder" : {
                        "type" : "integer",
                        "format" : "int32"
                    },
                    "observationUnitDbId" : {
                        "type" : "string"
                    }
                },
                "description" : "Observation levels indicate the granularity level at which the measurements are taken. `levelName` \ndefines the level, `levelOrder` defines where that level exists in the hierarchy of levels. \n`levelOrder`s lower numbers are at the top of the hierarchy (ie field > 0) and higher numbers are \nat the bottom of the hierarchy (ie plant > 6). `levelCode` is an ID code for this level tag. Identify \nthis observation unit by each level of the hierarchy where it exists. \n\nFor more information on Observation Levels, please review the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Observation_Levels\">Observation Levels documentation</a>. \n\n**Standard Level Names: study, field, entry, rep, block, sub-block, plot, sub-plot, plant, pot, sample** "
            },
            "ObservationUnitNewRequest" : {
                "required" : [ "observationUnitDbId", "observationUnitDbId" ],
                "type" : "object",
                "properties" : {
                    "additionalInfo" : {
                        "$ref" : "#/components/schemas/AdditionalInfo"
                    },
                    "crossDbId" : {
                        "type" : "string"
                    },
                    "crossName" : {
                        "type" : "string"
                    },
                    "germplasmDbId" : {
                        "type" : "string"
                    },
                    "germplasmName" : {
                        "type" : "string"
                    },
                    "germplasmPUI" : {
                        "type" : "string"
                    },
                    "locationDbId" : {
                        "type" : "string"
                    },
                    "locationName" : {
                        "type" : "string"
                    },
                    "observationUnitDbId" : {
                        "type" : "string"
                    },
                    "observationUnitName" : {
                        "type" : "string"
                    },
                    "observationUnitPUI" : {
                        "type" : "string"
                    },
                    "observationUnitPosition" : {
                        "type" : "object",
                        "properties" : {
                            "entryType" : {
                                "type" : "string",
                                "description" : "The type of entry for this observation unit. ex. \"CHECK\", \"TEST\", \"FILLER\"",
                                "enum" : [ "CHECK", "TEST", "FILLER" ]
                            },
                            "geoCoordinates" : {
                                "type" : "object",
                                "properties" : {
                                    "geometry" : {
                                        "$ref" : "#/components/schemas/GeoJSONGeometry"
                                    },
                                    "type" : {
                                        "type" : "string"
                                    }
                                },
                                "description" : "One geometry as defined by GeoJSON (RFC 7946). All coordinates are decimal values on the WGS84 geographic coordinate reference system.\n\nCopied from RFC 7946 Section 3.1.1\n\nA position is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or\neasting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element."
                            },
                            "observationLevel" : {
                                "$ref" : "#/components/schemas/ObservationUnitLevel"
                            },
                            "observationLevelRelationships" : {
                                "type" : "array",
                                "items" : {
                                    "$ref" : "#/components/schemas/ObservationUnitLevelRelationship"
                                }
                            },
                            "positionCoordinateX" : {
                                "type" : "string"
                            },
                            "positionCoordinateXType" : {
                                "type" : "string",
                                "description" : "The type of positional coordinate used. Must be one of the following values \n\nLONGITUDE - ISO 6709 standard, WGS84 geodetic datum. See 'Location Coordinate Encoding' for details \n\nLATITUDE - ISO 6709 standard, WGS84 geodetic datum. See 'Location Coordinate Encoding' for details \n\nPLANTED_ROW - The physical planted row number \n\nPLANTED_INDIVIDUAL - The physical counted number, could be independent or within a planted row \n\nGRID_ROW - The row index number of a square grid overlay \n\nGRID_COL - The column index number of a square grid overlay \n\nMEASURED_ROW - The distance in meters from a defined 0-th row \n\nMEASURED_COL - The distance in meters from a defined 0-th column ",
                                "enum" : [ "LONGITUDE", "LATITUDE", "PLANTED_ROW", "PLANTED_INDIVIDUAL", "GRID_ROW", "GRID_COL", "MEASURED_ROW", "MEASURED_COL" ]
                            },
                            "positionCoordinateY" : {
                                "type" : "string"
                            },
                            "positionCoordinateYType" : {
                                "type" : "string",
                                "description" : "The type of positional coordinate used. Must be one of the following values \n\nLONGITUDE - ISO 6709 standard, WGS84 geodetic datum. See 'Location Coordinate Encoding' for details \n\nLATITUDE - ISO 6709 standard, WGS84 geodetic datum. See 'Location Coordinate Encoding' for details \n\nPLANTED_ROW - The physical planted row number  \n\nPLANTED_INDIVIDUAL - The physical counted number, could be independent or within a planted row \n\nGRID_ROW - The row index number of a square grid overlay \n\nGRID_COL - The column index number of a square grid overlay \n\nMEASURED_ROW - The distance in meters from a defined 0-th row \n\nMEASURED_COL - The distance in meters from a defined 0-th column ",
                                "enum" : [ "LONGITUDE", "LATITUDE", "PLANTED_ROW", "PLANTED_INDIVIDUAL", "GRID_ROW", "GRID_COL", "MEASURED_ROW", "MEASURED_COL" ]
                            }
                        },
                        "description" : "All positional and layout information related to this Observation Unit \n\nMIAPPE V1.1 (DM-73) Spatial distribution - Type and value of a spatial coordinate (georeference or relative) \nor level of observation (plot 45, subblock 7, block 2) provided as a key-value pair of the form type:value. \nLevels of observation must be consistent with those listed in the Study section."
                    },
                    "programDbId" : {
                        "type" : "string"
                    },
                    "programName" : {
                        "type" : "string"
                    },
                    "seedLotDbId" : {
                        "type" : "string"
                    },
                    "seedLotName" : {
                        "type" : "string"
                    },
                    "studyDbId" : {
                        "type" : "string"
                    },
                    "studyName" : {
                        "type" : "string"
                    },
                    "studyPUI" : {
                        "type" : "string"
                    },
                    "trialDbId" : {
                        "type" : "string"
                    },
                    "trialName" : {
                        "type" : "string"
                    },
                    "trialPUI" : {
                        "type" : "string"
                    }
                }
            },
            "ObservationUnitSearchRequest" : {
                "type" : "object",
                "properties" : {
                    "includeObservations" : {
                        "type" : "boolean"
                    }
                }
            },
            "ObservationVariable" : {
                "required" : [ "methodName", "observationVariableDbId", "observationVariableName", "scaleDbId", "scaleName", "traitName" ],
                "type" : "object",
                "properties" : {
                    "additionalInfo" : {
                        "$ref" : "#/components/schemas/AdditionalInfo"
                    },
                    "commonCropName" : {
                        "type" : "string"
                    },
                    "defaultValue" : {
                        "type" : "string"
                    },
                    "documentationURL" : {
                        "type" : "string"
                    },
                    "growthStage" : {
                        "type" : "string"
                    },
                    "institution" : {
                        "type" : "string"
                    },
                    "language" : {
                        "type" : "string"
                    },
                    "methodDbId" : {
                        "type" : "string"
                    },
                    "methodName" : {
                        "type" : "string"
                    },
                    "methodPUI" : {
                        "type" : "string"
                    },
                    "observationVariableName" : {
                        "type" : "string"
                    },
                    "observationVariablePUI" : {
                        "type" : "string"
                    },
                    "ontologyReference" : {
                        "$ref" : "#/components/schemas/OntologyReference"
                    },
                    "scaleDbId" : {
                        "type" : "string"
                    },
                    "scaleName" : {
                        "type" : "string"
                    },
                    "scalePUI" : {
                        "type" : "string"
                    },
                    "scientist" : {
                        "type" : "string"
                    },
                    "status" : {
                        "type" : "string"
                    },
                    "submissionTimestamp" : {
                        "type" : "string"
                    },
                    "traitDbId" : {
                        "type" : "string"
                    },
                    "traitName" : {
                        "type" : "string"
                    },
                    "traitPUI" : {
                        "type" : "string"
                    }
                }
            },
            "ObservationVariableNewRequest" : {
                "required" : [ "methodName", "observationVariableDbId", "observationVariableDbId", "observationVariableName", "scaleDbId", "scaleName", "traitName" ],
                "type" : "object",
                "properties" : {
                    "additionalInfo" : {
                        "$ref" : "#/components/schemas/AdditionalInfo"
                    },
                    "commonCropName" : {
                        "type" : "string"
                    },
                    "defaultValue" : {
                        "type" : "string"
                    },
                    "documentationURL" : {
                        "type" : "string"
                    },
                    "growthStage" : {
                        "type" : "string"
                    },
                    "institution" : {
                        "type" : "string"
                    },
                    "language" : {
                        "type" : "string"
                    },
                    "methodDbId" : {
                        "type" : "string"
                    },
                    "methodName" : {
                        "type" : "string"
                    },
                    "methodPUI" : {
                        "type" : "string"
                    },
                    "observationVariableDbId" : {
                        "type" : "string"
                    },
                    "observationVariableName" : {
                        "type" : "string"
                    },
                    "observationVariablePUI" : {
                        "type" : "string"
                    },
                    "ontologyReference" : {
                        "$ref" : "#/components/schemas/OntologyReference"
                    },
                    "scaleDbId" : {
                        "type" : "string"
                    },
                    "scaleName" : {
                        "type" : "string"
                    },
                    "scalePUI" : {
                        "type" : "string"
                    },
                    "scientist" : {
                        "type" : "string"
                    },
                    "status" : {
                        "type" : "string"
                    },
                    "submissionTimestamp" : {
                        "type" : "string"
                    },
                    "traitDbId" : {
                        "type" : "string"
                    },
                    "traitName" : {
                        "type" : "string"
                    },
                    "traitPUI" : {
                        "type" : "string"
                    }
                }
            },
            "ObservationVariableSearchRequest" : {
                "type" : "object",
                "properties" : { }
            },
            "Ontology" : {
                "required" : [ "ontologyDbId", "ontologyName" ],
                "type" : "object",
                "properties" : {
                    "additionalInfo" : {
                        "$ref" : "#/components/schemas/AdditionalInfo"
                    },
                    "authors" : {
                        "type" : "string"
                    },
                    "copyright" : {
                        "type" : "string"
                    },
                    "description" : {
                        "type" : "string"
                    },
                    "documentationURL" : {
                        "type" : "string"
                    },
                    "licence" : {
                        "type" : "string"
                    },
                    "ontologyName" : {
                        "type" : "string"
                    },
                    "version" : {
                        "type" : "string"
                    }
                }
            },
            "OntologyNewRequest" : {
                "required" : [ "ontologyDbId", "ontologyDbId", "ontologyName" ],
                "type" : "object",
                "properties" : {
                    "additionalInfo" : {
                        "$ref" : "#/components/schemas/AdditionalInfo"
                    },
                    "authors" : {
                        "type" : "string"
                    },
                    "copyright" : {
                        "type" : "string"
                    },
                    "description" : {
                        "type" : "string"
                    },
                    "documentationURL" : {
                        "type" : "string"
                    },
                    "licence" : {
                        "type" : "string"
                    },
                    "ontologyDbId" : {
                        "type" : "string"
                    },
                    "ontologyName" : {
                        "type" : "string"
                    },
                    "version" : {
                        "type" : "string"
                    }
                }
            },
            "OntologyReference" : {
                "required" : [ "ontology" ],
                "type" : "object",
                "properties" : {
                    "documentationLinks" : {
                        "type" : "array",
                        "items" : {
                            "type" : "object",
                            "properties" : {
                                "URL" : {
                                    "type" : "string"
                                },
                                "type" : {
                                    "type" : "string",
                                    "enum" : [ "OBO", "RDF", "WEBPAGE" ]
                                }
                            }
                        }
                    },
                    "ontology" : {
                        "$ref" : "#/components/schemas/Ontology"
                    },
                    "version" : {
                        "type" : "string"
                    }
                }
            },
            "PedigreeNode" : {
                "required" : [ "germplasmDbId", "germplasmName", "germplasmPUI" ],
                "type" : "object",
                "properties" : {
                    "additionalInfo" : {
                        "$ref" : "#/components/schemas/AdditionalInfo"
                    },
                    "breedingMethodDbId" : {
                        "type" : "string"
                    },
                    "breedingMethodName" : {
                        "type" : "string"
                    },
                    "crossingProjectDbId" : {
                        "type" : "string"
                    },
                    "crossingProjectName" : {
                        "type" : "string"
                    },
                    "crossingYear" : {
                        "type" : "integer",
                        "format" : "int32"
                    },
                    "defaultDisplayName" : {
                        "type" : "string"
                    },
                    "familyCode" : {
                        "type" : "string"
                    },
                    "germplasmDbId" : {
                        "type" : "string"
                    },
                    "germplasmName" : {
                        "type" : "string"
                    },
                    "germplasmPUI" : {
                        "type" : "string"
                    },
                    "pedigreeString" : {
                        "type" : "string"
                    },
                    "siblingDbIds" : {
                        "type" : "array",
                        "items" : {
                            "type" : "string"
                        }
                    }
                }
            },
            "Scale" : {
                "required" : [ "scaleDbId", "scaleName" ],
                "type" : "object",
                "properties" : {
                    "additionalInfo" : {
                        "$ref" : "#/components/schemas/AdditionalInfo"
                    },
                    "dataType" : {
                        "type" : "string",
                        "description" : "<p>Class of the scale, entries can be</p>\n<p>\"Code\" -  This scale class is exceptionally used to express complex traits. Code is a nominal scale that combines the expressions of the different traits composing the complex trait. For example a severity trait might be expressed by a 2 digit and 2 character code. The first 2 digits are the percentage of the plant covered by a fungus and the 2 characters refer to the delay in development, e.g. \"75VD\" means \"75 %\" of the plant is infected and the plant is very delayed.</p>\n<p>\"Date\" - The date class is for events expressed in a time format, See ISO 8601</p>\n<p>\"Duration\" - The Duration class is for time elapsed between two events expressed in a time format, e.g. days, hours, months</p>\n<p>\"Nominal\" - Categorical scale that can take one of a limited and fixed number of categories. There is no intrinsic ordering to the categories</p>\n<p>\"Numerical\" - Numerical scales express the trait with real numbers. The numerical scale defines the unit e.g. centimeter, ton per hectare, branches</p>\n<p>\"Ordinal\" - Ordinal scales are scales composed of ordered categories</p>\n<p>\"Text\" - A free text is used to express the trait.</p>",
                        "enum" : [ "Code", "Date", "Duration", "Nominal", "Numerical", "Ordinal", "Text" ]
                    },
                    "decimalPlaces" : {
                        "type" : "integer",
                        "format" : "int32"
                    },
                    "ontologyReference" : {
                        "$ref" : "#/components/schemas/OntologyReference"
                    },
                    "scaleName" : {
                        "type" : "string"
                    },
                    "scalePUI" : {
                        "type" : "string"
                    },
                    "units" : {
                        "type" : "string"
                    },
                    "validValues" : {
                        "type" : "object",
                        "properties" : {
                            "categories" : {
                                "type" : "array",
                                "items" : {
                                    "type" : "object",
                                    "properties" : {
                                        "label" : {
                                            "type" : "string"
                                        },
                                        "value" : {
                                            "type" : "string"
                                        }
                                    }
                                }
                            },
                            "maximumValue" : {
                                "type" : "string"
                            },
                            "minimumValue" : {
                                "type" : "string"
                            }
                        }
                    }
                }
            },
            "ScaleNewRequest" : {
                "required" : [ "scaleDbId", "scaleDbId", "scaleName" ],
                "type" : "object",
                "properties" : {
                    "additionalInfo" : {
                        "$ref" : "#/components/schemas/AdditionalInfo"
                    },
                    "dataType" : {
                        "type" : "string",
                        "description" : "<p>Class of the scale, entries can be</p>\n<p>\"Code\" -  This scale class is exceptionally used to express complex traits. Code is a nominal scale that combines the expressions of the different traits composing the complex trait. For example a severity trait might be expressed by a 2 digit and 2 character code. The first 2 digits are the percentage of the plant covered by a fungus and the 2 characters refer to the delay in development, e.g. \"75VD\" means \"75 %\" of the plant is infected and the plant is very delayed.</p>\n<p>\"Date\" - The date class is for events expressed in a time format, See ISO 8601</p>\n<p>\"Duration\" - The Duration class is for time elapsed between two events expressed in a time format, e.g. days, hours, months</p>\n<p>\"Nominal\" - Categorical scale that can take one of a limited and fixed number of categories. There is no intrinsic ordering to the categories</p>\n<p>\"Numerical\" - Numerical scales express the trait with real numbers. The numerical scale defines the unit e.g. centimeter, ton per hectare, branches</p>\n<p>\"Ordinal\" - Ordinal scales are scales composed of ordered categories</p>\n<p>\"Text\" - A free text is used to express the trait.</p>",
                        "enum" : [ "Code", "Date", "Duration", "Nominal", "Numerical", "Ordinal", "Text" ]
                    },
                    "decimalPlaces" : {
                        "type" : "integer",
                        "format" : "int32"
                    },
                    "ontologyReference" : {
                        "$ref" : "#/components/schemas/OntologyReference"
                    },
                    "scaleDbId" : {
                        "type" : "string"
                    },
                    "scaleName" : {
                        "type" : "string"
                    },
                    "scalePUI" : {
                        "type" : "string"
                    },
                    "units" : {
                        "type" : "string"
                    },
                    "validValues" : {
                        "type" : "object",
                        "properties" : {
                            "categories" : {
                                "type" : "array",
                                "items" : {
                                    "type" : "object",
                                    "properties" : {
                                        "label" : {
                                            "type" : "string"
                                        },
                                        "value" : {
                                            "type" : "string"
                                        }
                                    }
                                }
                            },
                            "maximumValue" : {
                                "type" : "string"
                            },
                            "minimumValue" : {
                                "type" : "string"
                            }
                        }
                    }
                }
            },
            "Trait" : {
                "required" : [ "traitDbId", "traitName" ],
                "type" : "object",
                "properties" : {
                    "additionalInfo" : {
                        "$ref" : "#/components/schemas/AdditionalInfo"
                    },
                    "attribute" : {
                        "type" : "string"
                    },
                    "attributePUI" : {
                        "type" : "string"
                    },
                    "entity" : {
                        "type" : "string"
                    },
                    "entityPUI" : {
                        "type" : "string"
                    },
                    "mainAbbreviation" : {
                        "type" : "string"
                    },
                    "ontologyReference" : {
                        "$ref" : "#/components/schemas/OntologyReference"
                    },
                    "status" : {
                        "type" : "string"
                    },
                    "traitClass" : {
                        "type" : "string"
                    },
                    "traitDescription" : {
                        "type" : "string"
                    },
                    "traitName" : {
                        "type" : "string"
                    },
                    "traitPUI" : {
                        "type" : "string"
                    }
                }
            },
            "TraitDataType" : {
                "type" : "string",
                "description" : "<p>Class of the scale, entries can be</p>\n<p>\"Code\" -  This scale class is exceptionally used to express complex traits. Code is a nominal scale that combines the expressions of the different traits composing the complex trait. For example a severity trait might be expressed by a 2 digit and 2 character code. The first 2 digits are the percentage of the plant covered by a fungus and the 2 characters refer to the delay in development, e.g. \"75VD\" means \"75 %\" of the plant is infected and the plant is very delayed.</p>\n<p>\"Date\" - The date class is for events expressed in a time format, See ISO 8601</p>\n<p>\"Duration\" - The Duration class is for time elapsed between two events expressed in a time format, e.g. days, hours, months</p>\n<p>\"Nominal\" - Categorical scale that can take one of a limited and fixed number of categories. There is no intrinsic ordering to the categories</p>\n<p>\"Numerical\" - Numerical scales express the trait with real numbers. The numerical scale defines the unit e.g. centimeter, ton per hectare, branches</p>\n<p>\"Ordinal\" - Ordinal scales are scales composed of ordered categories</p>\n<p>\"Text\" - A free text is used to express the trait.</p>",
                "enum" : [ "Code", "Date", "Duration", "Nominal", "Numerical", "Ordinal", "Text" ]
            },
            "TraitNewRequest" : {
                "required" : [ "traitDbId", "traitName" ],
                "type" : "object",
                "properties" : {
                    "additionalInfo" : {
                        "$ref" : "#/components/schemas/AdditionalInfo"
                    },
                    "attribute" : {
                        "type" : "string"
                    },
                    "attributePUI" : {
                        "type" : "string"
                    },
                    "entity" : {
                        "type" : "string"
                    },
                    "entityPUI" : {
                        "type" : "string"
                    },
                    "mainAbbreviation" : {
                        "type" : "string"
                    },
                    "ontologyReference" : {
                        "$ref" : "#/components/schemas/OntologyReference"
                    },
                    "status" : {
                        "type" : "string"
                    },
                    "traitClass" : {
                        "type" : "string"
                    },
                    "traitDbId" : {
                        "type" : "string"
                    },
                    "traitDescription" : {
                        "type" : "string"
                    },
                    "traitName" : {
                        "type" : "string"
                    },
                    "traitPUI" : {
                        "type" : "string"
                    }
                }
            },
            "Variable" : {
                "required" : [ "method", "scale", "trait" ],
                "type" : "object",
                "properties" : {
                    "additionalInfo" : {
                        "$ref" : "#/components/schemas/AdditionalInfo"
                    },
                    "commonCropName" : {
                        "type" : "string"
                    },
                    "contextOfUse" : {
                        "type" : "array",
                        "items" : {
                            "type" : "string"
                        }
                    },
                    "defaultValue" : {
                        "type" : "string"
                    },
                    "documentationURL" : {
                        "type" : "string"
                    },
                    "externalReferences" : {
                        "type" : "array",
                        "items" : {
                            "$ref" : "#/components/schemas/ExternalReference"
                        }
                    },
                    "growthStage" : {
                        "type" : "string"
                    },
                    "institution" : {
                        "type" : "string"
                    },
                    "language" : {
                        "type" : "string"
                    },
                    "method" : {
                        "$ref" : "#/components/schemas/Method"
                    },
                    "ontologyReference" : {
                        "$ref" : "#/components/schemas/OntologyReference"
                    },
                    "scale" : {
                        "$ref" : "#/components/schemas/Scale"
                    },
                    "scientist" : {
                        "type" : "string"
                    },
                    "status" : {
                        "type" : "string"
                    },
                    "submissionTimestamp" : {
                        "type" : "string"
                    },
                    "synonyms" : {
                        "type" : "array",
                        "items" : {
                            "type" : "string"
                        }
                    },
                    "trait" : {
                        "$ref" : "#/components/schemas/Trait"
                    }
                }
            },
            "basePagination" : {
                "required" : [ "currentPage", "pageSize" ],
                "type" : "object",
                "properties" : {
                    "currentPage" : {
                        "type" : "integer",
                        "description" : "The index number for the returned page of data. This should always match the requested page number or the default page (0).",
                        "example" : 0,
                        "default" : 0
                    },
                    "pageSize" : {
                        "type" : "integer",
                        "description" : "The number of data elements returned, aka the size of the current page. If the requested page does not have enough elements to fill a page at the requested page size, this field should indicate the actual number of elements returned.",
                        "example" : 1000,
                        "default" : 1000
                    },
                    "totalCount" : {
                        "type" : "integer",
                        "description" : "The total number of elements that are available on the server and match the requested query parameters.",
                        "example" : 10
                    },
                    "totalPages" : {
                        "type" : "integer",
                        "description" : "The total number of pages of elements available on the server. This should be calculated with the following formula. \n<br> totalPages = CEILING( totalCount / requested_page_size)",
                        "example" : 1
                    }
                },
                "description" : "The pagination object is applicable only when the payload contains a \"data\" key. It describes the pagination of the data contained in the \"data\" array, as a way to identify which subset of data is being returned. \n<br> Pages are zero indexed, so the first page will be page 0 (zero)."
            },
            "dataFile" : {
                "required" : [ "fileURL" ],
                "type" : "object",
                "properties" : {
                    "fileURL" : {
                        "type" : "string",
                        "description" : "The absolute URL where the file is located",
                        "format" : "uri",
                        "example" : "https://wiki.brapi.org/examples/datafile.xlsx"
                    },
                    "fileName" : {
                        "type" : "string",
                        "description" : "The name of the file",
                        "example" : "datafile.xlsx"
                    },
                    "fileSize" : {
                        "type" : "integer",
                        "description" : "The size of the file in bytes",
                        "example" : 4398
                    },
                    "fileDescription" : {
                        "type" : "string",
                        "description" : "A human readable description of the file contents",
                        "example" : "This is an Excel data file"
                    },
                    "fileType" : {
                        "type" : "string",
                        "description" : "The type or format of the file. Preferably MIME Type.",
                        "example" : "application/vnd.ms-excel"
                    },
                    "fileMD5Hash" : {
                        "type" : "string",
                        "description" : "The MD5 Hash of the file contents to be used as a check sum",
                        "example" : "c2365e900c81a89cf74d83dab60df146"
                    }
                },
                "description" : "A dataFile contains a URL and the relevant file metadata to represent a file"
            },
            "metadata" : {
                "allOf" : [ {
                    "$ref" : "#/components/schemas/metadataBase"
                }, {
                    "type" : "object",
                    "properties" : {
                        "pagination" : {
                            "$ref" : "#/components/schemas/basePagination"
                        }
                    }
                } ]
            },
            "metadataBase" : {
                "type" : "object",
                "properties" : {
                    "datafiles" : {
                        "type" : "array",
                        "description" : "The datafiles contains a list of file URLs and metadata. \nThese files contain additional information related to the returned object and can be retrieved by a subsequent call. \nThis could be a supplementary data file, an informational file, the uploaded file where the data originated from, a generated file representing the whole dataset in a particular format, or any other related file. ",
                        "example" : [ ],
                        "items" : {
                            "$ref" : "#/components/schemas/dataFile"
                        }
                    },
                    "status" : {
                        "type" : "array",
                        "description" : "The status field contains a list of informational status messages from the server. \nIf no status is reported, an empty list should be returned. See Error Reporting for more information.",
                        "items" : {
                            "$ref" : "#/components/schemas/status"
                        }
                    }
                },
                "description" : "An object in the BrAPI standard response model that describes some information about the service call being performed. This includes supplementary data, status log messages, and pagination information."
            },
            "metadataTokenPagination" : {
                "allOf" : [ {
                    "$ref" : "#/components/schemas/metadataBase"
                }, {
                    "type" : "object",
                    "properties" : {
                        "pagination" : {
                            "$ref" : "#/components/schemas/tokenPagination"
                        }
                    }
                } ]
            },
            "status" : {
                "required" : [ "message", "messageType" ],
                "type" : "object",
                "properties" : {
                    "message" : {
                        "type" : "string",
                        "description" : "A short message concerning the status of this request/response",
                        "example" : "Request accepted, response successful"
                    },
                    "messageType" : {
                        "type" : "string",
                        "description" : "The logging level for the attached message",
                        "example" : "INFO",
                        "enum" : [ "DEBUG", "ERROR", "WARNING", "INFO" ]
                    }
                },
                "description" : "An array of status messages to convey technical logging information from the server to the client."
            },
            "tokenPagination" : {
                "allOf" : [ {
                    "$ref" : "#/components/schemas/basePagination"
                }, {
                    "required" : [ "nextPageToken" ],
                    "type" : "object",
                    "properties" : {
                        "nextPageToken" : {
                            "type" : "string",
                            "description" : "**Deprecated in v2.1** Please use `page`. Github issue number #451 \n<br>The string token used to query the next page of data.",
                            "example" : "cb668f63",
                            "deprecated" : true
                        },
                        "currentPageToken" : {
                            "type" : "string",
                            "description" : "**Deprecated in v2.1** Please use `page`. Github issue number #451 \n<br>The string token used to query the current page of data.",
                            "example" : "48bc6ac1",
                            "deprecated" : true
                        },
                        "prevPageToken" : {
                            "type" : "string",
                            "description" : "**Deprecated in v2.1** Please use `page`. Github issue number #451 \n<br>The string token used to query the previous page of data.",
                            "example" : "9659857e",
                            "deprecated" : true
                        }
                    },
                    "description" : "**Deprecated in v2.1** Please use `page`. Github issue number #451 \n<br>The pagination object is applicable only when the payload contains a \"data\" key. It describes the pagination of the data contained in the \"data\" array, as a way to identify which subset of data is being returned. \n<br>Tokenized pages are for large data sets which can not be efficiently broken into indexed pages. Use the nextPageToken and prevPageToken to construct an additional query and move to the next or previous page respectively.  ",
                    "example" : {
                        "currentPage" : 0,
                        "pageSize" : 1000,
                        "totalCount" : 10,
                        "totalPages" : 1
                    }
                } ]
            }
        },
        "responses" : {
            "ObservationVariableSingleResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "ObservationVariableSingleResponse",
                            "required" : [ "metadata", "result" ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "$ref" : "#/components/schemas/ObservationVariable"
                                }
                            }
                        }
                    }
                }
            },
            "SeedLotSingleResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "SeedLotSingleResponse",
                            "required" : [ "metadata", "result" ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "$ref" : "#/components/schemas/SeedLot"
                                }
                            }
                        }
                    }
                }
            },
            "VariantSingleResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "VariantSingleResponse",
                            "required" : [ "metadata", "result" ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "$ref" : "#/components/schemas/Variant"
                                }
                            }
                        }
                    }
                }
            },
            "202AcceptedSearchResponse" : {
                "description" : "Accepted",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "202AcceptedSearchResponse",
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "type" : "object",
                                    "properties" : {
                                        "searchResultsDbId" : {
                                            "type" : "string",
                                            "example" : "551ae08c"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "StudySingleResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "StudySingleResponse",
                            "required" : [ "metadata", "result" ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "$ref" : "#/components/schemas/Study"
                                }
                            }
                        }
                    }
                }
            },
            "MarkerPositionListResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "MarkerPositionListResponse",
                            "required" : [ "metadata", "result" ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "required" : [ "data" ],
                                    "type" : "object",
                                    "properties" : {
                                        "data" : {
                                            "type" : "array",
                                            "items" : {
                                                "$ref" : "#/components/schemas/MarkerPosition"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "TrialListResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "TrialListResponse",
                            "required" : [ "metadata", "result" ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "required" : [ "data" ],
                                    "type" : "object",
                                    "properties" : {
                                        "data" : {
                                            "type" : "array",
                                            "items" : {
                                                "$ref" : "#/components/schemas/Trial"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "MethodSingleResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "MethodSingleResponse",
                            "required" : [ "metadata", "result" ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "$ref" : "#/components/schemas/Method"
                                }
                            }
                        }
                    }
                }
            },
            "SeedLotListResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "SeedLotListResponse",
                            "required" : [ "metadata", "result" ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "required" : [ "data" ],
                                    "type" : "object",
                                    "properties" : {
                                        "data" : {
                                            "type" : "array",
                                            "items" : {
                                                "$ref" : "#/components/schemas/SeedLot"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "VariantSetListResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "VariantSetListResponse",
                            "required" : [ "metadata", "result" ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "required" : [ "data" ],
                                    "type" : "object",
                                    "properties" : {
                                        "data" : {
                                            "type" : "array",
                                            "items" : {
                                                "$ref" : "#/components/schemas/VariantSet"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "SampleSingleResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "SampleSingleResponse",
                            "required" : [ "metadata", "result" ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "$ref" : "#/components/schemas/Sample"
                                }
                            }
                        }
                    }
                }
            },
            "CallSetListResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "CallSetListResponse",
                            "required" : [ "metadata", "result" ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "required" : [ "data" ],
                                    "type" : "object",
                                    "properties" : {
                                        "data" : {
                                            "type" : "array",
                                            "items" : {
                                                "$ref" : "#/components/schemas/CallSet"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "CallSetSingleResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "CallSetSingleResponse",
                            "required" : [ "metadata", "result" ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "$ref" : "#/components/schemas/CallSet"
                                }
                            }
                        }
                    }
                }
            },
            "VariantSetSingleResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "VariantSetSingleResponse",
                            "required" : [ "metadata", "result" ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "$ref" : "#/components/schemas/VariantSet"
                                }
                            }
                        }
                    }
                }
            },
            "ReferenceSetSingleResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "ReferenceSetSingleResponse",
                            "required" : [ "metadata", "result" ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "$ref" : "#/components/schemas/ReferenceSet"
                                }
                            }
                        }
                    }
                }
            },
            "ObservationVariableListResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "ObservationVariableListResponse",
                            "required" : [ "metadata", "result" ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "required" : [ "data" ],
                                    "type" : "object",
                                    "properties" : {
                                        "data" : {
                                            "type" : "array",
                                            "items" : {
                                                "$ref" : "#/components/schemas/ObservationVariable"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "CrossListResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "CrossListResponse",
                            "required" : [ "metadata", "result" ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "required" : [ "data" ],
                                    "type" : "object",
                                    "properties" : {
                                        "data" : {
                                            "type" : "array",
                                            "items" : {
                                                "$ref" : "#/components/schemas/Cross"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "ImageSingleResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "ImageSingleResponse",
                            "required" : [ "metadata", "result" ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "$ref" : "#/components/schemas/Image"
                                }
                            }
                        }
                    }
                }
            },
            "PlateListResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "PlateListResponse",
                            "required" : [ "metadata", "result" ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "required" : [ "data" ],
                                    "type" : "object",
                                    "properties" : {
                                        "data" : {
                                            "type" : "array",
                                            "items" : {
                                                "$ref" : "#/components/schemas/Plate"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "SeasonListResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "SeasonListResponse",
                            "required" : [ "metadata", "result" ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "required" : [ "data" ],
                                    "type" : "object",
                                    "properties" : {
                                        "data" : {
                                            "type" : "array",
                                            "items" : {
                                                "$ref" : "#/components/schemas/Season"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "ObservationUnitListResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "ObservationUnitListResponse",
                            "required" : [ "metadata", "result" ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "required" : [ "data" ],
                                    "type" : "object",
                                    "properties" : {
                                        "data" : {
                                            "type" : "array",
                                            "items" : {
                                                "$ref" : "#/components/schemas/ObservationUnit"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "ReferenceListResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "ReferenceListResponse",
                            "required" : [ "metadata", "result" ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "required" : [ "data" ],
                                    "type" : "object",
                                    "properties" : {
                                        "data" : {
                                            "type" : "array",
                                            "items" : {
                                                "$ref" : "#/components/schemas/Reference"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "ObservationListResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "ObservationListResponse",
                            "required" : [ "metadata", "result" ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "required" : [ "data" ],
                                    "type" : "object",
                                    "properties" : {
                                        "data" : {
                                            "type" : "array",
                                            "items" : {
                                                "$ref" : "#/components/schemas/Observation"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "AlleleMatrixListResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "AlleleMatrixListResponse",
                            "required" : [ "metadata", "result" ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "required" : [ "data" ],
                                    "type" : "object",
                                    "properties" : {
                                        "data" : {
                                            "type" : "array",
                                            "items" : {
                                                "$ref" : "#/components/schemas/AlleleMatrix"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "GenomeMapSingleResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "GenomeMapSingleResponse",
                            "required" : [ "metadata", "result" ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "$ref" : "#/components/schemas/GenomeMap"
                                }
                            }
                        }
                    }
                }
            },
            "PersonListResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "PersonListResponse",
                            "required" : [ "metadata", "result" ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "required" : [ "data" ],
                                    "type" : "object",
                                    "properties" : {
                                        "data" : {
                                            "type" : "array",
                                            "items" : {
                                                "$ref" : "#/components/schemas/Person"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "PlannedCrossListResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "PlannedCrossListResponse",
                            "required" : [ "metadata", "result" ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "required" : [ "data" ],
                                    "type" : "object",
                                    "properties" : {
                                        "data" : {
                                            "type" : "array",
                                            "items" : {
                                                "$ref" : "#/components/schemas/PlannedCross"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "LocationListResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "LocationListResponse",
                            "required" : [ "metadata", "result" ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "required" : [ "data" ],
                                    "type" : "object",
                                    "properties" : {
                                        "data" : {
                                            "type" : "array",
                                            "items" : {
                                                "$ref" : "#/components/schemas/Location"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "403Forbidden" : {
                "description" : "Forbidden",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "type" : "string"
                        },
                        "example" : "ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action"
                    }
                }
            },
            "OntologySingleResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "OntologySingleResponse",
                            "required" : [ "metadata", "result" ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "$ref" : "#/components/schemas/Ontology"
                                }
                            }
                        }
                    }
                }
            },
            "ProgramListResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "ProgramListResponse",
                            "required" : [ "metadata", "result" ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "required" : [ "data" ],
                                    "type" : "object",
                                    "properties" : {
                                        "data" : {
                                            "type" : "array",
                                            "items" : {
                                                "$ref" : "#/components/schemas/Program"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "ObservationUnitSingleResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "ObservationUnitSingleResponse",
                            "required" : [ "metadata", "result" ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "$ref" : "#/components/schemas/ObservationUnit"
                                }
                            }
                        }
                    }
                }
            },
            "ScaleListResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "ScaleListResponse",
                            "required" : [ "metadata", "result" ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "required" : [ "data" ],
                                    "type" : "object",
                                    "properties" : {
                                        "data" : {
                                            "type" : "array",
                                            "items" : {
                                                "$ref" : "#/components/schemas/Scale"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "ListListResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "ListListResponse",
                            "required" : [ "metadata", "result" ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "required" : [ "data" ],
                                    "type" : "object",
                                    "properties" : {
                                        "data" : {
                                            "type" : "array",
                                            "items" : {
                                                "$ref" : "#/components/schemas/List"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "400BadRequest" : {
                "description" : "Bad Request",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "type" : "string"
                        },
                        "example" : "ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object\n\nERROR - 2018-10-08T18:15:11Z - Invalid query parameter\n\nERROR - 2018-10-08T18:15:11Z - Required parameter is missing"
                    }
                }
            },
            "MethodListResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "MethodListResponse",
                            "required" : [ "metadata", "result" ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "required" : [ "data" ],
                                    "type" : "object",
                                    "properties" : {
                                        "data" : {
                                            "type" : "array",
                                            "items" : {
                                                "$ref" : "#/components/schemas/Method"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "CrossingProjectListResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "CrossingProjectListResponse",
                            "required" : [ "metadata", "result" ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "required" : [ "data" ],
                                    "type" : "object",
                                    "properties" : {
                                        "data" : {
                                            "type" : "array",
                                            "items" : {
                                                "$ref" : "#/components/schemas/CrossingProject"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "GermplasmAttributeSingleResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "GermplasmAttributeSingleResponse",
                            "required" : [ "metadata", "result" ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "$ref" : "#/components/schemas/GermplasmAttribute"
                                }
                            }
                        }
                    }
                }
            },
            "TraitSingleResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "TraitSingleResponse",
                            "required" : [ "metadata", "result" ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "$ref" : "#/components/schemas/Trait"
                                }
                            }
                        }
                    }
                }
            },
            "401Unauthorized" : {
                "description" : "Unauthorized",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "type" : "string"
                        },
                        "example" : "ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token"
                    }
                }
            },
            "GermplasmAttributeListResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "GermplasmAttributeListResponse",
                            "required" : [ "metadata", "result" ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "required" : [ "data" ],
                                    "type" : "object",
                                    "properties" : {
                                        "data" : {
                                            "type" : "array",
                                            "items" : {
                                                "$ref" : "#/components/schemas/GermplasmAttribute"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "GermplasmListResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "GermplasmListResponse",
                            "required" : [ "metadata", "result" ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "required" : [ "data" ],
                                    "type" : "object",
                                    "properties" : {
                                        "data" : {
                                            "type" : "array",
                                            "items" : {
                                                "$ref" : "#/components/schemas/Germplasm"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "CrossingProjectSingleResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "CrossingProjectSingleResponse",
                            "required" : [ "metadata", "result" ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "$ref" : "#/components/schemas/CrossingProject"
                                }
                            }
                        }
                    }
                }
            },
            "EventListResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "EventListResponse",
                            "required" : [ "metadata", "result" ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "required" : [ "data" ],
                                    "type" : "object",
                                    "properties" : {
                                        "data" : {
                                            "type" : "array",
                                            "items" : {
                                                "$ref" : "#/components/schemas/Event"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "TraitListResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "TraitListResponse",
                            "required" : [ "metadata", "result" ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "required" : [ "data" ],
                                    "type" : "object",
                                    "properties" : {
                                        "data" : {
                                            "type" : "array",
                                            "items" : {
                                                "$ref" : "#/components/schemas/Trait"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "SampleListResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "SampleListResponse",
                            "required" : [ "metadata", "result" ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "required" : [ "data" ],
                                    "type" : "object",
                                    "properties" : {
                                        "data" : {
                                            "type" : "array",
                                            "items" : {
                                                "$ref" : "#/components/schemas/Sample"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "ReferenceSetListResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "ReferenceSetListResponse",
                            "required" : [ "metadata", "result" ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "required" : [ "data" ],
                                    "type" : "object",
                                    "properties" : {
                                        "data" : {
                                            "type" : "array",
                                            "items" : {
                                                "$ref" : "#/components/schemas/ReferenceSet"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "TrialSingleResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "TrialSingleResponse",
                            "required" : [ "metadata", "result" ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "$ref" : "#/components/schemas/Trial"
                                }
                            }
                        }
                    }
                }
            },
            "GermplasmSingleResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "GermplasmSingleResponse",
                            "required" : [ "metadata", "result" ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "$ref" : "#/components/schemas/Germplasm"
                                }
                            }
                        }
                    }
                }
            },
            "SeasonSingleResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "SeasonSingleResponse",
                            "required" : [ "metadata", "result" ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "$ref" : "#/components/schemas/Season"
                                }
                            }
                        }
                    }
                }
            },
            "ReferenceSingleResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "ReferenceSingleResponse",
                            "required" : [ "metadata", "result" ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "$ref" : "#/components/schemas/Reference"
                                }
                            }
                        }
                    }
                }
            },
            "OntologyListResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "OntologyListResponse",
                            "required" : [ "metadata", "result" ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "required" : [ "data" ],
                                    "type" : "object",
                                    "properties" : {
                                        "data" : {
                                            "type" : "array",
                                            "items" : {
                                                "$ref" : "#/components/schemas/Ontology"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "404NotFound" : {
                "description" : "Not Found",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "type" : "string"
                        },
                        "example" : "ERROR - 2018-10-08T18:15:11Z - The requested object DbId is not found"
                    }
                }
            },
            "StudyListResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "StudyListResponse",
                            "required" : [ "metadata", "result" ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "required" : [ "data" ],
                                    "type" : "object",
                                    "properties" : {
                                        "data" : {
                                            "type" : "array",
                                            "items" : {
                                                "$ref" : "#/components/schemas/Study"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "ScaleSingleResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "ScaleSingleResponse",
                            "required" : [ "metadata", "result" ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "$ref" : "#/components/schemas/Scale"
                                }
                            }
                        }
                    }
                }
            },
            "BreedingMethodSingleResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "BreedingMethodSingleResponse",
                            "required" : [ "metadata", "result" ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "$ref" : "#/components/schemas/BreedingMethod"
                                }
                            }
                        }
                    }
                }
            },
            "CallListResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "CallListResponse",
                            "required" : [ "metadata", "result" ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "required" : [ "data" ],
                                    "type" : "object",
                                    "properties" : {
                                        "data" : {
                                            "type" : "array",
                                            "items" : {
                                                "$ref" : "#/components/schemas/Call"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "LocationSingleResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "LocationSingleResponse",
                            "required" : [ "metadata", "result" ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "$ref" : "#/components/schemas/Location"
                                }
                            }
                        }
                    }
                }
            },
            "PersonSingleResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "PersonSingleResponse",
                            "required" : [ "metadata", "result" ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "$ref" : "#/components/schemas/Person"
                                }
                            }
                        }
                    }
                }
            },
            "ImageListResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "ImageListResponse",
                            "required" : [ "metadata", "result" ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "required" : [ "data" ],
                                    "type" : "object",
                                    "properties" : {
                                        "data" : {
                                            "type" : "array",
                                            "items" : {
                                                "$ref" : "#/components/schemas/Image"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "VariantListResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "VariantListResponse",
                            "required" : [ "metadata", "result" ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "required" : [ "data" ],
                                    "type" : "object",
                                    "properties" : {
                                        "data" : {
                                            "type" : "array",
                                            "items" : {
                                                "$ref" : "#/components/schemas/Variant"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "PlateSingleResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "PlateSingleResponse",
                            "required" : [ "metadata", "result" ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "$ref" : "#/components/schemas/Plate"
                                }
                            }
                        }
                    }
                }
            },
            "GermplasmAttributeValueListResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "GermplasmAttributeValueListResponse",
                            "required" : [ "metadata", "result" ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "required" : [ "data" ],
                                    "type" : "object",
                                    "properties" : {
                                        "data" : {
                                            "type" : "array",
                                            "items" : {
                                                "$ref" : "#/components/schemas/GermplasmAttributeValue"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "BreedingMethodListResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "BreedingMethodListResponse",
                            "required" : [ "metadata", "result" ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "required" : [ "data" ],
                                    "type" : "object",
                                    "properties" : {
                                        "data" : {
                                            "type" : "array",
                                            "items" : {
                                                "$ref" : "#/components/schemas/BreedingMethod"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "GermplasmAttributeValueSingleResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "GermplasmAttributeValueSingleResponse",
                            "required" : [ "metadata", "result" ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "$ref" : "#/components/schemas/GermplasmAttributeValue"
                                }
                            }
                        }
                    }
                }
            },
            "GenomeMapListResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "GenomeMapListResponse",
                            "required" : [ "metadata", "result" ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "required" : [ "data" ],
                                    "type" : "object",
                                    "properties" : {
                                        "data" : {
                                            "type" : "array",
                                            "items" : {
                                                "$ref" : "#/components/schemas/GenomeMap"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "PedigreeNodeListResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "PedigreeNodeListResponse",
                            "required" : [ "metadata", "result" ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "required" : [ "data" ],
                                    "type" : "object",
                                    "properties" : {
                                        "data" : {
                                            "type" : "array",
                                            "items" : {
                                                "$ref" : "#/components/schemas/PedigreeNode"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "ObservationSingleResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "ObservationSingleResponse",
                            "required" : [ "metadata", "result" ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "$ref" : "#/components/schemas/Observation"
                                }
                            }
                        }
                    }
                }
            },
            "ListSingleResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "ListSingleResponse",
                            "required" : [ "metadata", "result" ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "$ref" : "#/components/schemas/List"
                                }
                            }
                        }
                    }
                }
            },
            "ProgramSingleResponse" : {
                "description" : "OK",
                "content" : {
                    "application/json" : {
                        "schema" : {
                            "title" : "ProgramSingleResponse",
                            "required" : [ "metadata", "result" ],
                            "type" : "object",
                            "properties" : {
                                "@context" : {
                                    "$ref" : "#/components/schemas/Context"
                                },
                                "metadata" : {
                                    "$ref" : "#/components/schemas/metadata"
                                },
                                "result" : {
                                    "$ref" : "#/components/schemas/Program"
                                }
                            }
                        }
                    }
                }
            }
        },
        "parameters" : {
            "externalReferenceID" : {
                "name" : "externalReferenceID",
                "in" : "query",
                "description" : "**Deprecated in v2.1** Please use `externalReferenceId`. Github issue number #460 \n<br>An external reference ID. Could be a simple string or a URI. (use with `externalReferenceSource` parameter)",
                "required" : false,
                "deprecated" : true,
                "style" : "form",
                "explode" : true,
                "schema" : {
                    "type" : "string"
                }
            },
            "externalReferenceId" : {
                "name" : "externalReferenceId",
                "in" : "query",
                "description" : "An external reference ID. Could be a simple string or a URI. (use with `externalReferenceSource` parameter)",
                "required" : false,
                "style" : "form",
                "explode" : true,
                "schema" : {
                    "type" : "string"
                }
            },
            "externalReferenceSource" : {
                "name" : "externalReferenceSource",
                "in" : "query",
                "description" : "An identifier for the source system or database of an external reference (use with `externalReferenceId` parameter)",
                "required" : false,
                "style" : "form",
                "explode" : true,
                "schema" : {
                    "type" : "string"
                }
            },
            "acceptHeader" : {
                "name" : "Accept",
                "in" : "header",
                "description" : "A standard HTTP request header that is used to request a specific content type (JSON, CSV, etc) which is \"acceptable\" to the client and should be returned by the server",
                "required" : true,
                "style" : "simple",
                "explode" : false,
                "schema" : {
                    "$ref" : "#/components/schemas/ContentTypes"
                },
                "example" : "application/json"
            },
            "searchResultsDbId" : {
                "name" : "searchResultsDbId",
                "in" : "path",
                "description" : "Unique identifier which references the search results",
                "required" : true,
                "style" : "simple",
                "explode" : false,
                "schema" : {
                    "type" : "string"
                }
            },
            "pageSize" : {
                "name" : "pageSize",
                "in" : "query",
                "description" : "The size of the pages to be returned. Default is `1000`.",
                "required" : false,
                "style" : "form",
                "explode" : true,
                "schema" : {
                    "type" : "integer"
                },
                "example" : 1000
            },
            "authorizationHeader" : {
                "name" : "Authorization",
                "in" : "header",
                "description" : "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>",
                "required" : false,
                "style" : "simple",
                "explode" : false,
                "schema" : {
                    "pattern" : "^Bearer .*$",
                    "type" : "string"
                },
                "example" : "Bearer XXXX"
            },
            "page" : {
                "name" : "page",
                "in" : "query",
                "description" : "Used to request a specific page of data to be returned.\n\nThe page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.",
                "required" : false,
                "style" : "form",
                "explode" : true,
                "schema" : {
                    "type" : "integer"
                },
                "example" : "0"
            },
            "pageToken" : {
                "name" : "pageToken",
                "in" : "query",
                "description" : "**Deprecated in v2.1** Please use `page`. Github issue number #451 \n<br> Used to request a specific page of data to be returned.\n<br> Tokenized pages are for large data sets which can not be efficiently broken into indexed pages. Use the nextPageToken and prevPageToken from a prior response to construct a query and move to the next or previous page respectively. ",
                "required" : false,
                "deprecated" : true,
                "style" : "form",
                "explode" : true,
                "schema" : {
                    "type" : "string"
                },
                "example" : "33c27874"
            }
        },
        "securitySchemes" : {
            "AuthorizationToken" : {
                "type" : "http",
                "description" : "OAuth Bearer Token - A valid Bearer token to prove authorization",
                "scheme" : "bearer",
                "bearerFormat" : "nonce token or JWT"
            }
        }
    }
}