{
  "openapi" : "3.0.0",
  "info" : {
    "title" : "BrAPI-Core",
    "description" : "The <a href=\"https://brapi.org/\">Breeding API (BrAPI)</a> is a Standardized RESTful Web Service API Specification for communicating Plant Breeding Data. BrAPI allows for easy data sharing between databases and tools involved in plant breeding.",
    "version" : "2.1.1"
  },
  "servers" : [ {
    "url" : "/"
  } ],
  "security" : [ {
    "AuthorizationToken" : [ ]
  } ],
  "tags" : [ {
    "name" : "Server Info",
    "description" : "Check the available calls on a server",
    "externalDocs" : {
      "description" : "Docs",
      "url" : "https://wiki.brapi.org/"
    }
  }, {
    "name" : "Common Crop Names",
    "description" : "List of crops supported by this server",
    "externalDocs" : {
      "description" : "Docs",
      "url" : "https://wiki.brapi.org/"
    }
  }, {
    "name" : "Programs",
    "description" : "Information about Programs",
    "externalDocs" : {
      "description" : "Docs",
      "url" : "https://wiki.brapi.org/"
    }
  }, {
    "name" : "Trials",
    "description" : "Information about Trials",
    "externalDocs" : {
      "description" : "Docs",
      "url" : "https://wiki.brapi.org/"
    }
  }, {
    "name" : "Studies",
    "description" : "Information about Studies",
    "externalDocs" : {
      "description" : "Docs",
      "url" : "https://wiki.brapi.org/"
    }
  }, {
    "name" : "Locations",
    "description" : "Information about Locations",
    "externalDocs" : {
      "description" : "Docs",
      "url" : "https://wiki.brapi.org/"
    }
  }, {
    "name" : "Seasons",
    "description" : "Information about Seasons",
    "externalDocs" : {
      "description" : "Docs",
      "url" : "https://wiki.brapi.org/"
    }
  }, {
    "name" : "Lists",
    "description" : "Create and manipulate generic lists",
    "externalDocs" : {
      "description" : "Docs",
      "url" : "https://wiki.brapi.org/"
    }
  }, {
    "name" : "People",
    "description" : "Create and manipulate information about people",
    "externalDocs" : {
      "description" : "Docs",
      "url" : "https://wiki.brapi.org/"
    }
  }, {
    "name" : "Germplasm",
    "description" : "Information about Germplasm",
    "externalDocs" : {
      "description" : "Docs",
      "url" : "https://wiki.brapi.org/"
    }
  }, {
    "name" : "Germplasm Attributes",
    "description" : "Information about Germplasm Attributes",
    "externalDocs" : {
      "description" : "Docs",
      "url" : "https://wiki.brapi.org/"
    }
  }, {
    "name" : "Germplasm Attribute Values",
    "description" : "Information about Germplasm Attribute Values",
    "externalDocs" : {
      "description" : "Docs",
      "url" : "https://wiki.brapi.org/"
    }
  }, {
    "name" : "Crossing Projects",
    "description" : "Information about Crossing Projects",
    "externalDocs" : {
      "description" : "Docs",
      "url" : "https://wiki.brapi.org/"
    }
  }, {
    "name" : "Crosses",
    "description" : "Information about Crosses",
    "externalDocs" : {
      "description" : "Docs",
      "url" : "https://wiki.brapi.org/"
    }
  }, {
    "name" : "Seed Lots",
    "description" : "Information about Seed Lots",
    "externalDocs" : {
      "description" : "Docs",
      "url" : "https://wiki.brapi.org/"
    }
  }, {
    "name" : "Observations",
    "description" : "Retrieve and edit information about Observations",
    "externalDocs" : {
      "description" : "Docs",
      "url" : "https://wiki.brapi.org/"
    }
  }, {
    "name" : "Observation Units",
    "description" : "Retrieve and edit information about Observation Units. An Observation Unit can be anything in a field you might observe as part of a Study",
    "externalDocs" : {
      "description" : "Docs",
      "url" : "https://wiki.brapi.org/"
    }
  }, {
    "name" : "Observation Variables",
    "description" : "Retrieve and edit information about Observation Variables. An Observation Variable is composed by the unique combination of one Trait, one Method and one Scale.",
    "externalDocs" : {
      "description" : "Docs",
      "url" : "https://wiki.brapi.org/"
    }
  }, {
    "name" : "Methods",
    "description" : "Retrieve and edit information about Methods.",
    "externalDocs" : {
      "description" : "Docs",
      "url" : "https://wiki.brapi.org/"
    }
  }, {
    "name" : "Traits",
    "description" : "Retrieve and edit information about Traits.",
    "externalDocs" : {
      "description" : "Docs",
      "url" : "https://wiki.brapi.org/"
    }
  }, {
    "name" : "Scales",
    "description" : "Retrieve and edit information about Scales.",
    "externalDocs" : {
      "description" : "Docs",
      "url" : "https://wiki.brapi.org/"
    }
  }, {
    "name" : "Ontologies",
    "description" : "Retrieve and edit information about Ontologies used by a server.",
    "externalDocs" : {
      "description" : "Docs",
      "url" : "https://wiki.brapi.org/"
    }
  }, {
    "name" : "Images",
    "description" : "Retrieve and edit Images and Image meta-data",
    "externalDocs" : {
      "description" : "Docs",
      "url" : "https://wiki.brapi.org/"
    }
  }, {
    "name" : "Events",
    "description" : "Retrieve and edit information about Events. Events can be planned like watering or fertilizing, or unplanned like weather or pests.",
    "externalDocs" : {
      "description" : "Docs",
      "url" : "https://wiki.brapi.org/"
    }
  }, {
    "name" : "Calls",
    "description" : "Individual genotype allele calls",
    "externalDocs" : {
      "description" : "Docs",
      "url" : "https://wiki.brapi.org/"
    }
  }, {
    "name" : "Call Sets",
    "description" : "Each Call Set is related to one physical sample",
    "externalDocs" : {
      "description" : "Docs",
      "url" : "https://wiki.brapi.org/"
    }
  }, {
    "name" : "Variants",
    "description" : "Information about Variants, also called Markers",
    "externalDocs" : {
      "description" : "Docs",
      "url" : "https://wiki.brapi.org/"
    }
  }, {
    "name" : "Variant Sets",
    "description" : "Information about Variant Sets, also called Data Sets or Allele Matrices",
    "externalDocs" : {
      "description" : "Docs",
      "url" : "https://wiki.brapi.org/"
    }
  }, {
    "name" : "Plates",
    "description" : "Information about plates containing samples",
    "externalDocs" : {
      "description" : "Docs",
      "url" : "https://wiki.brapi.org/"
    }
  }, {
    "name" : "Samples",
    "description" : "Information about physical samples",
    "externalDocs" : {
      "description" : "Docs",
      "url" : "https://wiki.brapi.org/"
    }
  }, {
    "name" : "References",
    "description" : "Genetic sequences used for reference",
    "externalDocs" : {
      "description" : "Docs",
      "url" : "https://wiki.brapi.org/"
    }
  }, {
    "name" : "Reference Sets",
    "description" : "Collections of references",
    "externalDocs" : {
      "description" : "Docs",
      "url" : "https://wiki.brapi.org/"
    }
  }, {
    "name" : "Genome Maps",
    "description" : "Information about physical and genetic maps",
    "externalDocs" : {
      "description" : "Docs",
      "url" : "https://wiki.brapi.org/"
    }
  }, {
    "name" : "Vendor",
    "description" : "This interface is specific to facilities that performs an external analysis, such as genotyping facilities. The interface should be implemented by that facility''s server. The breeding database is the client of this interface.",
    "externalDocs" : {
      "description" : "Docs",
      "url" : "https://wiki.brapi.org/"
    }
  } ],
  "paths" : {
    "/allelematrix" : {
      "get" : {
        "tags" : [ "Allele Matrix" ],
        "summary" : "Use this endpoint to retrieve a two dimensional matrix of genotype data",
        "description" : "Use this endpoint to retrieve a two dimensional matrix of genotype data. The response structure is based on the VCF file format, \nbut the search and filter parameters give the ability to slice and merge data sets. This allows the user to return the subset of data they are interested in, \nwithout having to download the entire genotype file.\n<br/>Each row of data (outer array) corresponds to a variant definition, and each column (inner array) corresponds to a callSet.    ",
        "parameters" : [ {
          "name" : "dimensionVariantPage",
          "in" : "query",
          "description" : "The requested page number for the Variant dimension of the matrix",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "dimensionVariantPageSize",
          "in" : "query",
          "description" : "The requested page size for the Variant dimension of the matrix",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "dimensionCallSetPage",
          "in" : "query",
          "description" : "The requested page number for the CallSet dimension of the matrix",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "dimensionCallSetPageSize",
          "in" : "query",
          "description" : "The requested page size for the CallSet dimension of the matrix",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "$ref" : "#/components/parameters/preview"
        }, {
          "$ref" : "#/components/parameters/dataMatrixNames"
        }, {
          "$ref" : "#/components/parameters/dataMatrixAbbreviations"
        }, {
          "$ref" : "#/components/parameters/positionRange"
        }, {
          "$ref" : "#/components/parameters/germplasmDbId"
        }, {
          "$ref" : "#/components/parameters/germplasmName"
        }, {
          "$ref" : "#/components/parameters/germplasmPUI"
        }, {
          "$ref" : "#/components/parameters/callSetDbId"
        }, {
          "$ref" : "#/components/parameters/variantDbId"
        }, {
          "$ref" : "#/components/parameters/variantSetDbId"
        }, {
          "$ref" : "#/components/parameters/expandHomozygotes"
        }, {
          "$ref" : "#/components/parameters/unknownString"
        }, {
          "$ref" : "#/components/parameters/sepPhased"
        }, {
          "$ref" : "#/components/parameters/sepUnphased"
        }, {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/AlleleMatrixResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/attributes" : {
      "get" : {
        "tags" : [ "Germplasm Attributes" ],
        "summary" : "Get the Germplasm Attributes",
        "description" : "List available attributes.",
        "parameters" : [ {
          "name" : "attributeCategory",
          "in" : "query",
          "description" : "The general category for the attribute. very similar to Trait class.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "attributeDbId",
          "in" : "query",
          "description" : "The unique id for an attribute",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "attributeName",
          "in" : "query",
          "description" : "The human readable name for an attribute",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "attributePUI",
          "in" : "query",
          "description" : "The Permanent Unique Identifier of an Attribute, usually in the form of a URI",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "$ref" : "#/components/parameters/methodDbId"
        }, {
          "$ref" : "#/components/parameters/methodName"
        }, {
          "$ref" : "#/components/parameters/methodPUI"
        }, {
          "$ref" : "#/components/parameters/scaleDbId"
        }, {
          "$ref" : "#/components/parameters/scaleName"
        }, {
          "$ref" : "#/components/parameters/scalePUI"
        }, {
          "$ref" : "#/components/parameters/traitDbId"
        }, {
          "$ref" : "#/components/parameters/traitName"
        }, {
          "$ref" : "#/components/parameters/traitPUI"
        }, {
          "$ref" : "#/components/parameters/commonCropName"
        }, {
          "$ref" : "#/components/parameters/programDbId"
        }, {
          "$ref" : "#/components/parameters/germplasmDbId"
        }, {
          "$ref" : "#/components/parameters/externalReferenceID"
        }, {
          "$ref" : "#/components/parameters/externalReferenceId"
        }, {
          "$ref" : "#/components/parameters/externalReferenceSource"
        }, {
          "$ref" : "#/components/parameters/page"
        }, {
          "$ref" : "#/components/parameters/pageSize"
        }, {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/GermplasmAttributeListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      },
      "post" : {
        "tags" : [ "Germplasm Attributes" ],
        "summary" : "Create new Germplasm Attributes",
        "description" : "Create new Germplasm Attributes",
        "parameters" : [ {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/GermplasmAttributeNewRequest"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/GermplasmAttributeListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/attributes/categories" : {
      "get" : {
        "tags" : [ "Germplasm Attributes" ],
        "summary" : "Get the Categories of Germplasm Attributes",
        "description" : "List all available attribute categories.",
        "parameters" : [ {
          "$ref" : "#/components/parameters/page"
        }, {
          "$ref" : "#/components/parameters/pageSize"
        }, {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "title" : "GermplasmAttributeCategoryListResponse",
                  "required" : [ "metadata", "result" ],
                  "type" : "object",
                  "properties" : {
                    "@context" : {
                      "$ref" : "#/components/schemas/Context"
                    },
                    "metadata" : {
                      "$ref" : "#/components/schemas/metadata"
                    },
                    "result" : {
                      "required" : [ "data" ],
                      "type" : "object",
                      "properties" : {
                        "data" : {
                          "type" : "array",
                          "description" : "The `data` array is part of the BrAPI standard List Response JSON container. `data` will always contain the primary list of objects being returned by a BrAPI endpoint. `data` is also the only array impacted by the `metadata.pagination` details. When the pagination parameters change, the `data` array will reflect those changes in the JSON response.",
                          "example" : [ "Morphological", "Agronomic" ],
                          "items" : {
                            "type" : "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/attributes/{attributeDbId}" : {
      "get" : {
        "tags" : [ "Germplasm Attributes" ],
        "summary" : "Get the details for a specific Germplasm Attribute",
        "description" : "Get the details for a specific Germplasm Attribute",
        "parameters" : [ {
          "name" : "attributeDbId",
          "in" : "path",
          "description" : "The unique id for an attribute",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/GermplasmAttributeSingleResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      },
      "put" : {
        "tags" : [ "Germplasm Attributes" ],
        "summary" : "Update an existing Germplasm Attribute",
        "description" : "Update an existing Germplasm Attribute",
        "parameters" : [ {
          "name" : "attributeDbId",
          "in" : "path",
          "description" : "The unique id for an attribute",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/GermplasmAttributeNewRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/GermplasmAttributeSingleResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/attributevalues" : {
      "get" : {
        "tags" : [ "Germplasm Attribute Values" ],
        "summary" : "Get the Germplasm Attribute Values",
        "description" : "Get the Germplasm Attribute Values",
        "parameters" : [ {
          "name" : "attributeValueDbId",
          "in" : "query",
          "description" : "The unique id for an attribute value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "attributeDbId",
          "in" : "query",
          "description" : "The unique id for an attribute",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "attributeName",
          "in" : "query",
          "description" : "The human readable name for an attribute",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "$ref" : "#/components/parameters/commonCropName"
        }, {
          "$ref" : "#/components/parameters/programDbId"
        }, {
          "$ref" : "#/components/parameters/germplasmDbId"
        }, {
          "$ref" : "#/components/parameters/externalReferenceID"
        }, {
          "$ref" : "#/components/parameters/externalReferenceId"
        }, {
          "$ref" : "#/components/parameters/externalReferenceSource"
        }, {
          "$ref" : "#/components/parameters/page"
        }, {
          "$ref" : "#/components/parameters/pageSize"
        }, {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/GermplasmAttributeValueListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      },
      "post" : {
        "tags" : [ "Germplasm Attribute Values" ],
        "summary" : "Create new Germplasm Attribute Values",
        "description" : "Create new Germplasm Attribute Values",
        "parameters" : [ {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/GermplasmAttributeValueNewRequest"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/GermplasmAttributeValueListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/attributevalues/{attributeValueDbId}" : {
      "get" : {
        "tags" : [ "Germplasm Attribute Values" ],
        "summary" : "Get the details for a specific Germplasm Attribute",
        "description" : "Get the details for a specific Germplasm Attribute",
        "parameters" : [ {
          "name" : "attributeValueDbId",
          "in" : "path",
          "description" : "The unique id for an attribute value",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/GermplasmAttributeValueSingleResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      },
      "put" : {
        "tags" : [ "Germplasm Attribute Values" ],
        "summary" : "Update an existing Germplasm Attribute Value",
        "description" : "Update an existing Germplasm Attribute Value",
        "parameters" : [ {
          "name" : "attributeValueDbId",
          "in" : "path",
          "description" : "The unique id for an attribute value",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/GermplasmAttributeValueNewRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/GermplasmAttributeValueSingleResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/breedingmethods" : {
      "get" : {
        "tags" : [ "Germplasm" ],
        "summary" : "Get the Breeding Methods",
        "description" : "Get the list of germplasm breeding methods available in a system.",
        "parameters" : [ {
          "$ref" : "#/components/parameters/page"
        }, {
          "$ref" : "#/components/parameters/pageSize"
        }, {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "title" : "BreedingMethodListResponse",
                  "required" : [ "metadata", "result" ],
                  "type" : "object",
                  "properties" : {
                    "@context" : {
                      "$ref" : "#/components/schemas/Context"
                    },
                    "metadata" : {
                      "$ref" : "#/components/schemas/metadata"
                    },
                    "result" : {
                      "required" : [ "data" ],
                      "type" : "object",
                      "properties" : {
                        "data" : {
                          "type" : "array",
                          "description" : "The `data` array is part of the BrAPI standard List Response JSON container. `data` will always contain the primary list of objects being returned by a BrAPI endpoint. `data` is also the only array impacted by the `metadata.pagination` details. When the pagination parameters change, the `data` array will reflect those changes in the JSON response.",
                          "items" : {
                            "$ref" : "#/components/schemas/BreedingMethod"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/breedingmethods/{breedingMethodDbId}" : {
      "get" : {
        "tags" : [ "Germplasm" ],
        "summary" : "Get the details of a specific Breeding Method",
        "description" : "Get the details of a specific Breeding Method used to produce Germplasm",
        "parameters" : [ {
          "name" : "breedingMethodDbId",
          "in" : "path",
          "description" : "Internal database identifier for a breeding method",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "title" : "BreedingMethodSingleResponse",
                  "required" : [ "metadata", "result" ],
                  "type" : "object",
                  "properties" : {
                    "@context" : {
                      "$ref" : "#/components/schemas/Context"
                    },
                    "metadata" : {
                      "$ref" : "#/components/schemas/metadata"
                    },
                    "result" : {
                      "$ref" : "#/components/schemas/BreedingMethod"
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/404NotFound"
          }
        }
      }
    },
    "/calls" : {
      "get" : {
        "tags" : [ "Calls" ],
        "summary" : "Gets a filtered list of `Calls`",
        "description" : "Gets a filtered list of `Call` JSON objects.",
        "parameters" : [ {
          "name" : "callSetDbId",
          "in" : "query",
          "description" : "The ID which uniquely identifies a `CallSet` within the given database server",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "variantDbId",
          "in" : "query",
          "description" : "The ID which uniquely identifies a `Variant` within the given database server",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "variantSetDbId",
          "in" : "query",
          "description" : "The ID which uniquely identifies a `VariantSet` within the given database server",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "expandHomozygotes",
          "in" : "query",
          "description" : "Should homozygotes be expanded (true) or collapsed into a single occurrence (false)",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "unknownString",
          "in" : "query",
          "description" : "The string to use as a representation for missing data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "sepPhased",
          "in" : "query",
          "description" : "The string to use as a separator for phased allele calls",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "sepUnphased",
          "in" : "query",
          "description" : "The string to use as a separator for unphased allele calls",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "$ref" : "#/components/parameters/pageToken"
        }, {
          "$ref" : "#/components/parameters/page"
        }, {
          "$ref" : "#/components/parameters/pageSize"
        }, {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/CallsListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      },
      "put" : {
        "tags" : [ "Calls" ],
        "summary" : "Update existing `Calls` with new genotype value or metadata",
        "description" : "Update existing `Calls` with new genotype value or metadata\n<br/>Implementation Note - \n<br/>A `Call` object does not have a DbId of its own. It is defined by the unique combination of \n`callSetDbId`, `variantDbId`, and `variantSetDbId`. These three fields MUST be present for every \n`call` update request. This endpoint should not allow these fields to be modified for a given \n`call`. Modifying these fields in the database is effectively moving a cell to a different location\nin the genotype matrix. This action is dangerous and can cause data collisions.     ",
        "parameters" : [ {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/Call"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/CallsListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/callsets" : {
      "get" : {
        "tags" : [ "Call Sets" ],
        "summary" : "Gets a filtered list of `CallSet` JSON objects.",
        "description" : "Gets a filtered list of `CallSet` JSON objects.",
        "parameters" : [ {
          "name" : "callSetDbId",
          "in" : "query",
          "description" : "The ID which uniquely identifies a `CallSet` within the given database server",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "callSetName",
          "in" : "query",
          "description" : "The human readable name of a `CallSet`.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "variantSetDbId",
          "in" : "query",
          "description" : "The ID which uniquely identifies a `VariantSet` within the given database server",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "sampleDbId",
          "in" : "query",
          "description" : "The ID which uniquely identifies a `Sample` within the given database server\n<br>Filter results to only include `CallSets` generated from this `Sample`",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "$ref" : "#/components/parameters/germplasmDbId"
        }, {
          "$ref" : "#/components/parameters/page"
        }, {
          "$ref" : "#/components/parameters/pageSize"
        }, {
          "$ref" : "#/components/parameters/externalReferenceId"
        }, {
          "$ref" : "#/components/parameters/externalReferenceSource"
        }, {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/CallSetsListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/callsets/{callSetDbId}" : {
      "get" : {
        "tags" : [ "Call Sets" ],
        "summary" : "Gets a `CallSet` by ID.",
        "description" : "Gets a `CallSet` by ID.",
        "parameters" : [ {
          "name" : "callSetDbId",
          "in" : "path",
          "description" : "The ID which uniquely identifies a `CallSet` within the given database server",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "title" : "callSetResponse",
                  "required" : [ "metadata", "result" ],
                  "type" : "object",
                  "properties" : {
                    "@context" : {
                      "$ref" : "#/components/schemas/Context"
                    },
                    "metadata" : {
                      "$ref" : "#/components/schemas/metadata"
                    },
                    "result" : {
                      "$ref" : "#/components/schemas/CallSet"
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/404NotFound"
          }
        }
      }
    },
    "/callsets/{callSetDbId}/calls" : {
      "get" : {
        "tags" : [ "Call Sets" ],
        "summary" : "Gets a list of `Calls` associated with a `CallSet`.",
        "description" : "Gets a list of `Calls` associated with a `CallSet`.",
        "parameters" : [ {
          "name" : "callSetDbId",
          "in" : "path",
          "description" : "The ID which uniquely identifies a `CallSet` within the given database server",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "expandHomozygotes",
          "in" : "query",
          "description" : "Should homozygotes be expanded (true) or collapsed into a single occurrence (false)",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "unknownString",
          "in" : "query",
          "description" : "The string to use as a representation for missing data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "sepPhased",
          "in" : "query",
          "description" : "The string to use as a separator for phased allele calls",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "sepUnphased",
          "in" : "query",
          "description" : "The string to use as a separator for unphased allele calls",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "$ref" : "#/components/parameters/pageToken"
        }, {
          "$ref" : "#/components/parameters/page"
        }, {
          "$ref" : "#/components/parameters/pageSize"
        }, {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/CallsListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/commoncropnames" : {
      "get" : {
        "tags" : [ "Common Crop Names" ],
        "summary" : "Get the Common Crop Names",
        "description" : "List the common crop names for the crops available in a database server. \n\nThis call is ** required ** for multi-crop systems where data from multiple \ncrops may be stored in the same database server. A distinct database server \nis defined by everything in the URL before \"/brapi/v2\", including host \nname and base path.\n\nThis call is recommended for single crop systems to be compatible with \nmulti-crop clients. For a single crop system the response should contain \nan array with exactly 1 element. \n\nThe common crop name can be used as a search parameter for Programs, \nStudies, and Germplasm.",
        "parameters" : [ {
          "$ref" : "#/components/parameters/page"
        }, {
          "$ref" : "#/components/parameters/pageSize"
        }, {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "title" : "commonCropNamesResponse",
                  "required" : [ "metadata", "result" ],
                  "type" : "object",
                  "properties" : {
                    "@context" : {
                      "$ref" : "#/components/schemas/Context"
                    },
                    "metadata" : {
                      "$ref" : "#/components/schemas/metadata"
                    },
                    "result" : {
                      "required" : [ "data" ],
                      "type" : "object",
                      "properties" : {
                        "data" : {
                          "type" : "array",
                          "description" : "The array of crop names available on the server",
                          "example" : [ "Tomatillo", "Paw Paw" ],
                          "items" : {
                            "type" : "string",
                            "description" : "supported crop name"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/crosses" : {
      "get" : {
        "tags" : [ "Crosses" ],
        "summary" : "Get a filtered list of Cross entities",
        "description" : "Get a filtered list of Cross entities.",
        "parameters" : [ {
          "name" : "crossingProjectDbId",
          "in" : "query",
          "description" : "Search for Crossing Projects with this unique id",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "crossingProjectName",
          "in" : "query",
          "description" : "The human readable name for a crossing project",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "crossDbId",
          "in" : "query",
          "description" : "Search for Cross with this unique id",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "crossName",
          "in" : "query",
          "description" : "Search for Cross with this human readable name",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "$ref" : "#/components/parameters/commonCropName"
        }, {
          "$ref" : "#/components/parameters/programDbId"
        }, {
          "$ref" : "#/components/parameters/externalReferenceID"
        }, {
          "$ref" : "#/components/parameters/externalReferenceId"
        }, {
          "$ref" : "#/components/parameters/externalReferenceSource"
        }, {
          "$ref" : "#/components/parameters/page"
        }, {
          "$ref" : "#/components/parameters/pageSize"
        }, {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/CrossesListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      },
      "put" : {
        "tags" : [ "Crosses" ],
        "summary" : "Update existing Cross entities on this server",
        "description" : "Update existing Cross entities on this server",
        "parameters" : [ {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "additionalProperties" : {
                  "$ref" : "#/components/schemas/CrossNewRequest"
                },
                "description" : "A map of new Cross entities. The key is the crossDbId of the entity to be updated, the value is the Cross object.",
                "example" : {
                  "<crossDbId_1>" : {
                    "additionalInfo" : { },
                    "crossAttributes" : [ {
                      "crossAttributeName" : "string",
                      "crossAttributeValue" : "string"
                    } ],
                    "crossName" : "my_Crosses_2018_01",
                    "crossType" : "BIPARENTAL",
                    "crossingProjectDbId" : "696d7c92",
                    "crossingProjectName" : "my_Crosses_2018",
                    "parent1" : {
                      "germplasmDbId" : "d34b10c3",
                      "germplasmName" : "TME_419",
                      "observationUnitDbId" : "3f0a1798",
                      "observationUnitName" : "my_Plot_9001",
                      "parentType" : "FEMALE"
                    },
                    "parent2" : {
                      "germplasmDbId" : "776a609c",
                      "germplasmName" : "TME_419",
                      "observationUnitDbId" : "2e1926a7",
                      "observationUnitName" : "my_Plot_9002",
                      "parentType" : "MALE"
                    },
                    "pollinationTimeStamp" : "2019-08-15T18:49:00.327Z"
                  },
                  "<crossDbId_2>" : {
                    "additionalInfo" : { },
                    "crossAttributes" : [ {
                      "crossAttributeName" : "string",
                      "crossAttributeValue" : "string"
                    } ],
                    "crossName" : "my_Crosses_2018_02",
                    "crossType" : "BIPARENTAL",
                    "crossingProjectDbId" : "696d7c92",
                    "crossingProjectName" : "my_Crosses_2018",
                    "parent1" : {
                      "germplasmDbId" : "c43a2fd2",
                      "germplasmName" : "TME_419",
                      "observationUnitDbId" : "3f2a37b8",
                      "observationUnitName" : "my_Plot_9013",
                      "parentType" : "FEMALE"
                    },
                    "parent2" : {
                      "germplasmDbId" : "124b10ad",
                      "germplasmName" : "TME_419",
                      "observationUnitDbId" : 27194637,
                      "observationUnitName" : "my_Plot_9014",
                      "parentType" : "MALE"
                    },
                    "pollinationTimeStamp" : "2019-08-15T18:49:00.327Z"
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/CrossesListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      },
      "post" : {
        "tags" : [ "Crosses" ],
        "summary" : "Create new Cross entities on this server",
        "description" : "Create new Cross entities on this server",
        "parameters" : [ {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/CrossNewRequest"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/CrossesListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/crossingprojects" : {
      "get" : {
        "tags" : [ "Crossing Projects" ],
        "summary" : "Get a filtered list of Crossing Projects",
        "description" : "Get a filtered list of Crossing Projects.",
        "parameters" : [ {
          "name" : "crossingProjectDbId",
          "in" : "query",
          "description" : "Search for Crossing Projects with this unique id",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "crossingProjectName",
          "in" : "query",
          "description" : "The human readable name for a crossing project",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "includePotentialParents",
          "in" : "query",
          "description" : "If the parameter 'includePotentialParents' is false, the array 'potentialParents' should be empty, null, or excluded from the response object.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "$ref" : "#/components/parameters/commonCropName"
        }, {
          "$ref" : "#/components/parameters/programDbId"
        }, {
          "$ref" : "#/components/parameters/externalReferenceID"
        }, {
          "$ref" : "#/components/parameters/externalReferenceId"
        }, {
          "$ref" : "#/components/parameters/externalReferenceSource"
        }, {
          "$ref" : "#/components/parameters/page"
        }, {
          "$ref" : "#/components/parameters/pageSize"
        }, {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/CrossingProjectsListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      },
      "post" : {
        "tags" : [ "Crossing Projects" ],
        "summary" : "Create new Crossing Project entities on this server",
        "description" : "Create new Crossing Project entities on this server",
        "parameters" : [ {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/CrossingProjectNewRequest"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/CrossingProjectsListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/crossingprojects/{crossingProjectDbId}" : {
      "get" : {
        "tags" : [ "Crossing Projects" ],
        "summary" : "Get a filtered list of Crossing Projects",
        "description" : "Get a filtered list of Crossing Projects.",
        "parameters" : [ {
          "name" : "crossingProjectDbId",
          "in" : "path",
          "description" : "The unique identifier for a crossing project",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/CrossingProjectsSingleResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      },
      "put" : {
        "tags" : [ "Crossing Projects" ],
        "summary" : "Update an existing Crossing Project",
        "description" : "Update an existing Crossing Project entity on this server",
        "parameters" : [ {
          "name" : "crossingProjectDbId",
          "in" : "path",
          "description" : "Search for Crossing Projects with this unique id",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CrossingProjectNewRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/CrossingProjectsSingleResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/delete/images" : {
      "post" : {
        "tags" : [ "Images" ],
        "summary" : "Submit a delete request for `Images`",
        "description" : "Submit a delete request for `Images`",
        "parameters" : [ {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ImageSearchRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/ImageDeleteResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/delete/observations" : {
      "post" : {
        "tags" : [ "Observations" ],
        "summary" : "Submit a delete request for `Observations`",
        "description" : "Submit a delete request for `Observations`",
        "parameters" : [ {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ObservationSearchRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/ObservationDeleteResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/events" : {
      "get" : {
        "tags" : [ "Events" ],
        "summary" : "Get the Events",
        "description" : "Get list of events",
        "parameters" : [ {
          "name" : "observationUnitDbId",
          "in" : "query",
          "description" : "Filter based on an ObservationUnit unique identifier in which the events occurred",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "eventDbId",
          "in" : "query",
          "description" : "Filter based on an Event DbId",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "eventType",
          "in" : "query",
          "description" : "Filter based on an Event Type",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "dateRangeStart",
          "in" : "query",
          "description" : "Filter based on an Date Range",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "dateRangeEnd",
          "in" : "query",
          "description" : "Filter based on an Date Range",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "$ref" : "#/components/parameters/studyDbId"
        }, {
          "$ref" : "#/components/parameters/page"
        }, {
          "$ref" : "#/components/parameters/pageSize"
        }, {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "title" : "eventsResponse",
                  "required" : [ "metadata", "result" ],
                  "type" : "object",
                  "properties" : {
                    "@context" : {
                      "$ref" : "#/components/schemas/Context"
                    },
                    "metadata" : {
                      "$ref" : "#/components/schemas/metadata"
                    },
                    "result" : {
                      "required" : [ "data" ],
                      "type" : "object",
                      "properties" : {
                        "data" : {
                          "type" : "array",
                          "description" : "The `data` array is part of the BrAPI standard List Response JSON container. `data` will always contain the primary list of objects being returned by a BrAPI endpoint. `data` is also the only array impacted by the `metadata.pagination` details. When the pagination parameters change, the `data` array will reflect those changes in the JSON response.",
                          "items" : {
                            "$ref" : "#/components/schemas/Event"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/germplasm" : {
      "get" : {
        "tags" : [ "Germplasm" ],
        "summary" : "Get a filtered list of Germplasm",
        "description" : "Addresses these needs\n\n- General germplasm search mechanism that accepts POST for complex queries \n\n- Possibility to search germplasm by more parameters than those allowed by the existing germplasm search \n\n- Possibility to get MCPD details by PUID rather than dbId",
        "parameters" : [ {
          "name" : "accessionNumber",
          "in" : "query",
          "description" : "The unique identifier for a material or germplasm within a genebank\n\nMCPD (v2.1) (ACCENUMB) 2. This is the unique identifier for accessions within a genebank, and is assigned when a sample is entered into the genebank collection (e.g. \"PI 113869\").",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "collection",
          "in" : "query",
          "description" : "A specific panel/collection/population name this germplasm belongs to.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "binomialName",
          "in" : "query",
          "description" : "The full binomial name (scientific name) to identify a germplasm",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "genus",
          "in" : "query",
          "description" : "Genus name to identify germplasm",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "species",
          "in" : "query",
          "description" : "Species name to identify germplasm",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "synonym",
          "in" : "query",
          "description" : "Alternative name or ID used to reference this germplasm",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "parentDbId",
          "in" : "query",
          "description" : "Search for Germplasm with this parent",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "progenyDbId",
          "in" : "query",
          "description" : "Search for Germplasm with this child",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "$ref" : "#/components/parameters/commonCropName"
        }, {
          "$ref" : "#/components/parameters/programDbId"
        }, {
          "$ref" : "#/components/parameters/trialDbId"
        }, {
          "$ref" : "#/components/parameters/studyDbId"
        }, {
          "$ref" : "#/components/parameters/germplasmDbId"
        }, {
          "$ref" : "#/components/parameters/germplasmName"
        }, {
          "$ref" : "#/components/parameters/germplasmPUI"
        }, {
          "$ref" : "#/components/parameters/externalReferenceID"
        }, {
          "$ref" : "#/components/parameters/externalReferenceId"
        }, {
          "$ref" : "#/components/parameters/externalReferenceSource"
        }, {
          "$ref" : "#/components/parameters/page"
        }, {
          "$ref" : "#/components/parameters/pageSize"
        }, {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/GermplasmListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      },
      "post" : {
        "tags" : [ "Germplasm" ],
        "summary" : "Create new Germplasm entities on this server",
        "description" : "Create new Germplasm entities on this server",
        "parameters" : [ {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/GermplasmNewRequest"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/GermplasmListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/germplasm/{germplasmDbId}" : {
      "get" : {
        "tags" : [ "Germplasm" ],
        "summary" : "Get the details of a specific Germplasm",
        "description" : "Germplasm Details by germplasmDbId was merged with Germplasm Multi Crop Passport Data. The MCPD fields are optional and marked with the prefix [MCPD].",
        "parameters" : [ {
          "name" : "germplasmDbId",
          "in" : "path",
          "description" : "The internal id of the germplasm",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/GermplasmSingleResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/404NotFound"
          }
        }
      },
      "put" : {
        "tags" : [ "Germplasm" ],
        "summary" : "Update the details of an existing Germplasm",
        "description" : "Germplasm Details by germplasmDbId was merged with Germplasm Multi Crop Passport Data. The MCPD fields are optional and marked with the prefix [MCPD].",
        "parameters" : [ {
          "name" : "germplasmDbId",
          "in" : "path",
          "description" : "The internal id of the germplasm",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/GermplasmNewRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/GermplasmSingleResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/404NotFound"
          }
        }
      }
    },
    "/germplasm/{germplasmDbId}/mcpd" : {
      "get" : {
        "tags" : [ "Germplasm" ],
        "summary" : "Get the details of a specific Germplasm in MCPD format",
        "description" : "Get all MCPD details of a germplasm\n\n<a target=\"_blank\" href=\"https://www.bioversityInternational.org/fileadmin/user_upload/online_library/publications/pdfs/FAOBIOVERSITY_MULTI-CROP_PASSPORT_DESCRIPTORS_V.2.1_2015_2020.pdf\"> MCPD v2.1 spec can be found here </a>\n\nImplementation Notes\n\n- When the MCPD spec identifies a field which can have multiple values returned, the JSON response should be an array instead of a semi-colon separated string.",
        "parameters" : [ {
          "name" : "germplasmDbId",
          "in" : "path",
          "description" : "the internal id of the germplasm",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "title" : "GermplasmMCPDResponse",
                  "required" : [ "metadata", "result" ],
                  "type" : "object",
                  "properties" : {
                    "@context" : {
                      "$ref" : "#/components/schemas/Context"
                    },
                    "metadata" : {
                      "$ref" : "#/components/schemas/metadata"
                    },
                    "result" : {
                      "$ref" : "#/components/schemas/GermplasmMCPD"
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/404NotFound"
          }
        }
      }
    },
    "/germplasm/{germplasmDbId}/pedigree" : {
      "get" : {
        "tags" : [ "Germplasm" ],
        "summary" : "**Deprecated in v2.1** Please use `GET /pedigree?germplasmDbId={germplasmDbId}`. Github issue number #481 \n<br/> Get the pedigree details of a specific Germplasm",
        "description" : "**Deprecated in v2.1** Please use `GET /pedigree?germplasmDbId={germplasmDbId}`. Github issue number #481 \n<br/> Get the parentage information of a specific Germplasm",
        "parameters" : [ {
          "name" : "germplasmDbId",
          "in" : "path",
          "description" : "the internal id of the germplasm",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "notation",
          "in" : "query",
          "description" : "text representation of the pedigree",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "includeSiblings",
          "in" : "query",
          "description" : "include array of siblings in response",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "title" : "GermplasmPedigreeResponse",
                  "required" : [ "metadata", "result" ],
                  "type" : "object",
                  "properties" : {
                    "@context" : {
                      "$ref" : "#/components/schemas/Context"
                    },
                    "metadata" : {
                      "$ref" : "#/components/schemas/metadata"
                    },
                    "result" : {
                      "$ref" : "#/components/schemas/PedigreeNodeDEP"
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/404NotFound"
          }
        },
        "deprecated" : true
      }
    },
    "/germplasm/{germplasmDbId}/progeny" : {
      "get" : {
        "tags" : [ "Germplasm" ],
        "summary" : "**Deprecated in v2.1** Please use `GET /pedigree?germplasmDbId={germplasmDbId}`. Github issue number #481 \n<br/> Get the progeny details of a specific Germplasm",
        "description" : "**Deprecated in v2.1** Please use `GET /pedigree?germplasmDbId={germplasmDbId}`. Github issue number #481 \n<br/> Get the germplasmDbIds for all the Progeny of a particular germplasm.\n<br/> Implementation Notes\n<br/> - Regarding the ''parentType'' field in the progeny object. Given a germplasm A having a progeny B and C, ''parentType'' for progeny B refers to the ''parentType'' of A toward B.",
        "parameters" : [ {
          "name" : "germplasmDbId",
          "in" : "path",
          "description" : "the internal id of the germplasm",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "title" : "GermplasmProgenyResponse",
                  "required" : [ "metadata", "result" ],
                  "type" : "object",
                  "properties" : {
                    "@context" : {
                      "$ref" : "#/components/schemas/Context"
                    },
                    "metadata" : {
                      "$ref" : "#/components/schemas/metadata"
                    },
                    "result" : {
                      "$ref" : "#/components/schemas/ProgenyNodeDEP"
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/404NotFound"
          }
        },
        "deprecated" : true
      }
    },
    "/images" : {
      "get" : {
        "tags" : [ "Images" ],
        "summary" : "Get the image metadata summaries",
        "description" : "Get filtered set of image metadata\n\nImplementation Notes\n\n- ''imageURL'' should be a complete URL describing the location of the image. There is no BrAPI call for \nretrieving the image content, so it could be on a different path, or a different host.\n\n- ''descriptiveOntologyTerm'' can be thought of as Tags for the image. These could be simple descriptive \nwords, or ontology references, or full ontology URI''s.",
        "parameters" : [ {
          "name" : "imageDbId",
          "in" : "query",
          "description" : "The unique identifier for a image",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "imageName",
          "in" : "query",
          "description" : "The human readable name of an image",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "observationUnitDbId",
          "in" : "query",
          "description" : "The unique identifier of the observation unit an image is portraying",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "observationDbId",
          "in" : "query",
          "description" : "The unique identifier of the observation an image is associated with",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "descriptiveOntologyTerm",
          "in" : "query",
          "description" : "A descriptive term associated with an image",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "$ref" : "#/components/parameters/commonCropName"
        }, {
          "$ref" : "#/components/parameters/programDbId"
        }, {
          "$ref" : "#/components/parameters/externalReferenceID"
        }, {
          "$ref" : "#/components/parameters/externalReferenceId"
        }, {
          "$ref" : "#/components/parameters/externalReferenceSource"
        }, {
          "$ref" : "#/components/parameters/page"
        }, {
          "$ref" : "#/components/parameters/pageSize"
        }, {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/ImageListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      },
      "post" : {
        "tags" : [ "Images" ],
        "summary" : "Create new image metadata records",
        "description" : "Create new image metadata records\n\nImplementation Notes\n\n- This endpoint should be implemented with 'PUT /images/{imageDbId}/imagecontent' for full image upload capability\n\n- ''imageURL'' should be a complete URL describing the location of the image. There is no BrAPI call for retrieving \nthe image content, so it could be on a different path, or a different host.\n\n- ''descriptiveOntologyTerm'' can be thought of as Tags for the image. These could be simple descriptive words, or \nontology references, or full ontology URI's.\n\n- The '/images' calls support a GeoJSON object structure for describing their location. The BrAPI spec for GeoJSON \nonly supports two of the possible geometries; Points and Polygons.\n\n- With most images, the Point geometry should be used, and it should indicate the longitude and latitude of the camera.\n\n- For top down images (ie from drones, cranes, etc), the Point geometry may be used to indicate the longitude and \nlatitude of the centroid of the image content, and the Polygon geometry may be used to indicate the border of the \nimage content.\n\nAn example use case is available on the BrAPI Wiki -> https://wiki.brapi.org/index.php/Image_Upload",
        "parameters" : [ {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/ImageNewRequest"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/ImageListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/images/{imageDbId}" : {
      "get" : {
        "tags" : [ "Images" ],
        "summary" : "Get the an image metadata summary",
        "description" : "Get one image metadata object\n\nImplementation Notes\n\n- ''imageURL'' should be a complete URL describing the location of the image. There is no BrAPI call for \nretrieving the image content, so it could be on a different path, or a different host.\n\n- ''descriptiveOntologyTerm'' can be thought of as Tags for the image. These could be simple descriptive \nwords, or ontology references, or full ontology URI''s.",
        "parameters" : [ {
          "name" : "imageDbId",
          "in" : "path",
          "description" : "The unique identifier for a image",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/ImageSingleResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/404NotFound"
          }
        }
      },
      "put" : {
        "tags" : [ "Images" ],
        "summary" : "Update an existing image metadata record",
        "description" : "Update an existing image metadata record\n\nImplementation Notes\n\n- This endpoint should be implemented with 'PUT /images/{imageDbId}/imagecontent' for full image update capability\n\n- A server may choose to modify the image metadata object based on the actually image which has been uploaded. \n\n- Image data may be stored in a database or file system. Servers should generate and provide the \"imageURL\" as an \nabsolute path for retrieving the image, wherever it happens to live. \n\n- 'descriptiveOntologyTerm' can be thought of as Tags for the image. These could be simple descriptive words, or \nontology references, or full ontology URI's. \n\n- The '/images' calls support a GeoJSON object structure for describing their location. The BrAPI spec for GeoJSON \nonly supports two of the possible geometries; Points and Polygons. \n\n- With most images, the Point geometry should be used, and it should indicate the longitude and latitude of the camera. \n\n- For top down images (ie from drones, cranes, etc), the Point geometry may be used to indicate the longitude and \nlatitude of the centroid of the image content, and the Polygon geometry may be used to indicate the border of the \nimage content.\n\nAn example use case is available on the BrAPI Wiki -> https://wiki.brapi.org/index.php/Image_Upload",
        "parameters" : [ {
          "name" : "imageDbId",
          "in" : "path",
          "description" : "The unique identifier for a image",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ImageNewRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/ImageSingleResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/404NotFound"
          }
        }
      }
    },
    "/images/{imageDbId}/imagecontent" : {
      "put" : {
        "tags" : [ "Images" ],
        "summary" : "Attach an image binary file to an existing image metadata record",
        "description" : "This endpoint is used to attach an image binary file to an existing image metadata record. All of the other Images endpoints \ndeal with the JSON for image metadata, but 'PUT /images/{imageDbId}/imagecontent' allows you to send any binary file with a Content \nType (MIME) of image/*. When the real image is uploaded, the server may choose to update some of the metadata to reflect the \nreality of the image that was uploaded, and should respond with the updated JSON.\n\nImplementation Notes\n\n- This endpoint should be implemented with 'POST /images' for full image upload capability\n\n- This endpoint should be implemented with 'PUT /images/{imageDbId}' for full image update capability\n\n- A server may choose to modify the image metadata object based on the actually image which has been uploaded by this endpoint. \n\n- Image data may be stored in a database or file system. Servers should generate and provide the \"imageURL\" for retrieving the \n  image binary file. \n\nAn example use case is available on the BrAPI Wiki -> https://wiki.brapi.org/index.php/Image_Upload",
        "parameters" : [ {
          "name" : "imageDbId",
          "in" : "path",
          "description" : "The unique identifier for an image",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "requestBody" : {
          "content" : {
            "image/*" : {
              "schema" : {
                "type" : "string",
                "format" : "binary"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/ImageSingleResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/404NotFound"
          }
        }
      }
    },
    "/lists" : {
      "get" : {
        "tags" : [ "Lists" ],
        "summary" : "Get filtered set of generic lists",
        "description" : "Get filtered set of generic lists",
        "parameters" : [ {
          "name" : "listType",
          "in" : "query",
          "description" : "A flag to indicate the type of objects that are referenced in a List",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "$ref" : "#/components/schemas/ListTypes"
          }
        }, {
          "name" : "listName",
          "in" : "query",
          "description" : "The human readable name of a List",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "listDbId",
          "in" : "query",
          "description" : "The unique identifier of a List",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "listSource",
          "in" : "query",
          "description" : "A short tag to indicate the source of a list",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "$ref" : "#/components/parameters/commonCropName"
        }, {
          "$ref" : "#/components/parameters/programDbId"
        }, {
          "$ref" : "#/components/parameters/externalReferenceID"
        }, {
          "$ref" : "#/components/parameters/externalReferenceId"
        }, {
          "$ref" : "#/components/parameters/externalReferenceSource"
        }, {
          "$ref" : "#/components/parameters/page"
        }, {
          "$ref" : "#/components/parameters/pageSize"
        }, {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/ListsListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      },
      "post" : {
        "tags" : [ "Lists" ],
        "summary" : "Create New List Objects",
        "description" : "Create new list objects in the database",
        "parameters" : [ {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/ListNewRequest"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/ListsListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/lists/{listDbId}" : {
      "get" : {
        "tags" : [ "Lists" ],
        "summary" : "Get the details of a specific List",
        "description" : "Get a specific generic lists",
        "parameters" : [ {
          "name" : "listDbId",
          "in" : "path",
          "description" : "The unique identifier of a List",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/ListsSingleResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/404NotFound"
          }
        }
      },
      "put" : {
        "tags" : [ "Lists" ],
        "summary" : "Update an existing generic list",
        "description" : "Update an existing generic list",
        "parameters" : [ {
          "name" : "listDbId",
          "in" : "path",
          "description" : "The unique identifier of a List",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ListNewRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/ListsSingleResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/404NotFound"
          }
        }
      }
    },
    "/lists/{listDbId}/data" : {
      "post" : {
        "tags" : [ "Lists" ],
        "summary" : "Add new data members to a specific List",
        "description" : "Add new data members to a specific List",
        "parameters" : [ {
          "name" : "listDbId",
          "in" : "path",
          "description" : "The unique identifier of a generic List",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "example" : [ "758a78c0", "2c78f9ee" ],
                "items" : {
                  "type" : "string"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "title" : "listResponse",
                  "required" : [ "metadata", "result" ],
                  "type" : "object",
                  "properties" : {
                    "@context" : {
                      "$ref" : "#/components/schemas/Context"
                    },
                    "metadata" : {
                      "$ref" : "#/components/schemas/metadata"
                    },
                    "result" : {
                      "$ref" : "#/components/schemas/ListDetails"
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/404NotFound"
          }
        }
      }
    },
    "/lists/{listDbId}/items" : {
      "post" : {
        "tags" : [ "Lists" ],
        "summary" : "Add Items to a specific List",
        "description" : "**Deprecated in v2.1** Please use `POST /lists/{listDbId}/data`. Github issue number #444 \n<br/> Add new data to a specific generic lists",
        "parameters" : [ {
          "name" : "listDbId",
          "in" : "path",
          "description" : "The unique identifier of a List",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "example" : [ "758a78c0", "2c78f9ee" ],
                "items" : {
                  "type" : "string"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "title" : "listResponse",
                  "required" : [ "metadata", "result" ],
                  "type" : "object",
                  "properties" : {
                    "@context" : {
                      "$ref" : "#/components/schemas/Context"
                    },
                    "metadata" : {
                      "$ref" : "#/components/schemas/metadata"
                    },
                    "result" : {
                      "$ref" : "#/components/schemas/ListDetails"
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/404NotFound"
          }
        },
        "deprecated" : true
      }
    },
    "/locations" : {
      "get" : {
        "tags" : [ "Locations" ],
        "summary" : "Get a filtered list of Locations",
        "description" : "Get a list of locations.\n* The `countryCode` is as per [ISO_3166-1_alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) spec.\n* `altitude` is in meters.",
        "parameters" : [ {
          "name" : "locationType",
          "in" : "query",
          "description" : "The type of location this represents (ex. Field Station, Breeding Location, Storage Location, etc)",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "locationDbId",
          "in" : "query",
          "description" : "The unique identifier for a Location",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "locationName",
          "in" : "query",
          "description" : "A human readable name for a location\n<br/> MIAPPE V1.1 (DM-18) Experimental site name - The name of the natural site, experimental field, greenhouse, phenotyping facility, etc. where the experiment took place.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "parentLocationDbId",
          "in" : "query",
          "description" : "The unique identifier for a Location\n<br/> The Parent Location defines the encompassing location that this location belongs to. \nFor example, an Institution might have multiple Field Stations inside it and each Field Station might have multiple Fields.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "parentLocationName",
          "in" : "query",
          "description" : "A human readable name for a location\n<br/> The Parent Location defines the encompassing location that this location belongs to. \nFor example, an Institution might have multiple Field Stations inside it and each Field Station might have multiple Fields.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "$ref" : "#/components/parameters/commonCropName"
        }, {
          "$ref" : "#/components/parameters/programDbId"
        }, {
          "$ref" : "#/components/parameters/externalReferenceID"
        }, {
          "$ref" : "#/components/parameters/externalReferenceId"
        }, {
          "$ref" : "#/components/parameters/externalReferenceSource"
        }, {
          "$ref" : "#/components/parameters/page"
        }, {
          "$ref" : "#/components/parameters/pageSize"
        }, {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/LocationListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      },
      "post" : {
        "tags" : [ "Locations" ],
        "summary" : "Create new Locations",
        "description" : "Add new locations to database\n* The `countryCode` is as per [ISO_3166-1_alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) spec.\n* `altitude` is in meters.",
        "parameters" : [ {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/LocationNewRequest"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/LocationListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/locations/{locationDbId}" : {
      "get" : {
        "tags" : [ "Locations" ],
        "summary" : "Get the details of a specific Location",
        "description" : "Get details for a location.\n- The `countryCode` is as per [ISO_3166-1_alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) spec.\n- `altitude` is in meters.'",
        "parameters" : [ {
          "name" : "locationDbId",
          "in" : "path",
          "description" : "The internal DB id for a location",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/LocationSingleResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/404NotFound"
          }
        }
      },
      "put" : {
        "tags" : [ "Locations" ],
        "summary" : "Update the details for an existing Location",
        "description" : "Update the details for an existing location.\n- The `countryCode` is as per [ISO_3166-1_alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) spec.\n- `altitude` is in meters.'",
        "parameters" : [ {
          "name" : "locationDbId",
          "in" : "path",
          "description" : "The internal DB id for a location",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/LocationNewRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/LocationSingleResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/404NotFound"
          }
        }
      }
    },
    "/maps" : {
      "get" : {
        "tags" : [ "Genome Maps" ],
        "summary" : "Get the Genomic Maps",
        "description" : "Get list of maps",
        "parameters" : [ {
          "name" : "mapDbId",
          "in" : "query",
          "description" : "The ID which uniquely identifies a `GenomeMap`",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "mapPUI",
          "in" : "query",
          "description" : "The DOI or other permanent identifier for a `GenomeMap`",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "scientificName",
          "in" : "query",
          "description" : "Full scientific binomial format name. This includes Genus, Species, and Sub-species",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "type",
          "in" : "query",
          "description" : "The type of map, usually \"Genetic\" or \"Physical\"",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "$ref" : "#/components/parameters/commonCropName"
        }, {
          "$ref" : "#/components/parameters/programDbId"
        }, {
          "$ref" : "#/components/parameters/trialDbId"
        }, {
          "$ref" : "#/components/parameters/studyDbId"
        }, {
          "$ref" : "#/components/parameters/page"
        }, {
          "$ref" : "#/components/parameters/pageSize"
        }, {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "title" : "GenomeMapListResponse",
                  "required" : [ "metadata", "result" ],
                  "type" : "object",
                  "properties" : {
                    "@context" : {
                      "$ref" : "#/components/schemas/Context"
                    },
                    "metadata" : {
                      "$ref" : "#/components/schemas/metadata"
                    },
                    "result" : {
                      "required" : [ "data" ],
                      "type" : "object",
                      "properties" : {
                        "data" : {
                          "type" : "array",
                          "description" : "The `data` array is part of the BrAPI standard List Response JSON container. `data` will always contain the primary list of objects being returned by a BrAPI endpoint. `data` is also the only array impacted by the `metadata.pagination` details. When the pagination parameters change, the `data` array will reflect those changes in the JSON response.",
                          "items" : {
                            "$ref" : "#/components/schemas/GenomeMap"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/maps/{mapDbId}" : {
      "get" : {
        "tags" : [ "Genome Maps" ],
        "summary" : "Get the details of a specific Genomic Map",
        "description" : "Provides the number of markers on each linkageGroup and the max position on the linkageGroup",
        "parameters" : [ {
          "name" : "mapDbId",
          "in" : "path",
          "description" : "The ID which uniquely identifies a `GenomeMap`",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "title" : "GenomeMapSingleResponse",
                  "required" : [ "metadata", "result" ],
                  "type" : "object",
                  "properties" : {
                    "@context" : {
                      "$ref" : "#/components/schemas/Context"
                    },
                    "metadata" : {
                      "$ref" : "#/components/schemas/metadata"
                    },
                    "result" : {
                      "$ref" : "#/components/schemas/GenomeMap"
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/404NotFound"
          }
        }
      }
    },
    "/maps/{mapDbId}/linkagegroups" : {
      "get" : {
        "tags" : [ "Genome Maps" ],
        "summary" : "Get the Linkage Groups of a specific Genomic Map",
        "description" : "Get the Linkage Groups of a specific Genomic Map. A Linkage Group is the BrAPI generic term for a named section of a map. A Linkage Group can represent a Chromosome, Scaffold, or Linkage Group.",
        "parameters" : [ {
          "name" : "mapDbId",
          "in" : "path",
          "description" : "The ID which uniquely identifies a `GenomeMap`",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "$ref" : "#/components/parameters/page"
        }, {
          "$ref" : "#/components/parameters/pageSize"
        }, {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "title" : "LinkageGroupListResponse",
                  "required" : [ "metadata", "result" ],
                  "type" : "object",
                  "properties" : {
                    "@context" : {
                      "$ref" : "#/components/schemas/Context"
                    },
                    "metadata" : {
                      "$ref" : "#/components/schemas/metadata"
                    },
                    "result" : {
                      "required" : [ "data" ],
                      "type" : "object",
                      "properties" : {
                        "data" : {
                          "type" : "array",
                          "description" : "The `data` array is part of the BrAPI standard List Response JSON container. `data` will always contain the primary list of objects being returned by a BrAPI endpoint. `data` is also the only array impacted by the `metadata.pagination` details. When the pagination parameters change, the `data` array will reflect those changes in the JSON response.",
                          "items" : {
                            "$ref" : "#/components/schemas/LinkageGroup"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/404NotFound"
          }
        }
      }
    },
    "/markerpositions" : {
      "get" : {
        "tags" : [ "Genome Maps" ],
        "summary" : "Get marker position info",
        "description" : "Get marker position information, based on Map, Linkage Group, and Marker ID",
        "parameters" : [ {
          "name" : "mapDbId",
          "in" : "query",
          "description" : "The ID which uniquely identifies a `GenomeMap`",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "linkageGroupName",
          "in" : "query",
          "description" : "The Uniquely Identifiable name of a `LinkageGroup`\n<br> This might be a chromosome identifier or the generic linkage group identifier if the chromosome is not applicable.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "variantDbId",
          "in" : "query",
          "description" : "The unique id for a marker",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "minPosition",
          "in" : "query",
          "description" : "The minimum position",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "maxPosition",
          "in" : "query",
          "description" : "The maximum position",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "$ref" : "#/components/parameters/page"
        }, {
          "$ref" : "#/components/parameters/pageSize"
        }, {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/MarkerPositionListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/methods" : {
      "get" : {
        "tags" : [ "Methods" ],
        "summary" : "Get the Methods",
        "description" : "Returns a list of Methods available on a server.\n\nAn Observation Variable has 3 critical parts; A Trait being observed, a Method for making the observation, and a Scale on which the observation can be measured and compared with other observations.'",
        "parameters" : [ {
          "name" : "methodDbId",
          "in" : "query",
          "description" : "The unique identifier for a method",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "observationVariableDbId",
          "in" : "query",
          "description" : "The unique identifier for an observation variable",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "$ref" : "#/components/parameters/ontologyDbId"
        }, {
          "$ref" : "#/components/parameters/commonCropName"
        }, {
          "$ref" : "#/components/parameters/programDbId"
        }, {
          "$ref" : "#/components/parameters/externalReferenceID"
        }, {
          "$ref" : "#/components/parameters/externalReferenceId"
        }, {
          "$ref" : "#/components/parameters/externalReferenceSource"
        }, {
          "$ref" : "#/components/parameters/page"
        }, {
          "$ref" : "#/components/parameters/pageSize"
        }, {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/MethodListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      },
      "post" : {
        "tags" : [ "Methods" ],
        "summary" : "Add new Methods",
        "description" : "Create new method objects in the database",
        "parameters" : [ {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/MethodNewRequest"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/MethodListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/methods/{methodDbId}" : {
      "get" : {
        "tags" : [ "Methods" ],
        "summary" : "Get the details for a specific Method",
        "description" : "Retrieve details about a specific method\n\nAn Observation Variable has 3 critical parts; A Trait being observed, a Method for making the observation, and a Scale on which the observation can be measured and compared with other observations.",
        "parameters" : [ {
          "name" : "methodDbId",
          "in" : "path",
          "description" : "Id of the method to retrieve details of.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/MethodSingleResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/404NotFound"
          }
        }
      },
      "put" : {
        "tags" : [ "Methods" ],
        "summary" : "Update an existing Method",
        "description" : "Update the details of an existing method",
        "parameters" : [ {
          "name" : "methodDbId",
          "in" : "path",
          "description" : "Id of the method to retrieve details of.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MethodNewRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/MethodSingleResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/404NotFound"
          }
        }
      }
    },
    "/observationlevels" : {
      "get" : {
        "tags" : [ "Observation Units" ],
        "summary" : "Get the Observation Levels",
        "description" : "Call to retrieve the list of supported observation levels. \n\nObservation levels indicate the granularity level at which the measurements are taken. `levelName` defines the level, `levelOrder` defines where that level exists in the hierarchy of levels. `levelOrder`s lower numbers are at the top of the hierarchy (ie field > 0) and higher numbers are at the bottom of the hierarchy (ie plant > 6). \n\nThe values are used to supply the `observationLevel` parameter in the observation unit details call.\n      \nFor more information on Observation Levels, please review the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Observation_Levels\">Observation Levels documentation</a>.",
        "parameters" : [ {
          "$ref" : "#/components/parameters/programDbId"
        }, {
          "$ref" : "#/components/parameters/trialDbId"
        }, {
          "$ref" : "#/components/parameters/studyDbId"
        }, {
          "$ref" : "#/components/parameters/page"
        }, {
          "$ref" : "#/components/parameters/pageSize"
        }, {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "title" : "ObservationLevelListResponse",
                  "required" : [ "metadata", "result" ],
                  "type" : "object",
                  "properties" : {
                    "@context" : {
                      "$ref" : "#/components/schemas/Context"
                    },
                    "metadata" : {
                      "$ref" : "#/components/schemas/metadata"
                    },
                    "result" : {
                      "required" : [ "data" ],
                      "type" : "object",
                      "properties" : {
                        "data" : {
                          "type" : "array",
                          "description" : "The `data` array is part of the BrAPI standard List Response JSON container. `data` will always contain the primary list of objects being returned by a BrAPI endpoint. `data` is also the only array impacted by the `metadata.pagination` details. When the pagination parameters change, the `data` array will reflect those changes in the JSON response.",
                          "example" : [ {
                            "levelName" : "field",
                            "levelOrder" : 0
                          }, {
                            "levelName" : "block",
                            "levelOrder" : 1
                          }, {
                            "levelName" : "plot",
                            "levelOrder" : 2
                          }, {
                            "levelName" : "sub-plot",
                            "levelOrder" : 3
                          }, {
                            "levelName" : "plant",
                            "levelOrder" : 4
                          } ],
                          "items" : {
                            "$ref" : "#/components/schemas/ObservationUnitHierarchyLevel"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/observations" : {
      "get" : {
        "tags" : [ "Observations" ],
        "summary" : "Get a filtered set of Observations",
        "description" : "Retrieve all observations where there are measurements for the given observation variables. \n\nobservationTimestamp should be ISO8601 format with timezone -> YYYY-MM-DDThh:mm:ss+hhmm ",
        "parameters" : [ {
          "name" : "observationDbId",
          "in" : "query",
          "description" : "The unique ID of an Observation",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "observationUnitDbId",
          "in" : "query",
          "description" : "The unique ID of an Observation Unit",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "observationVariableDbId",
          "in" : "query",
          "description" : "The unique ID of an observation variable",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "locationDbId",
          "in" : "query",
          "description" : "The unique ID of a location where these observations were collected",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "seasonDbId",
          "in" : "query",
          "description" : "The year or Phenotyping campaign of a multi-annual study (trees, grape, ...)",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "observationTimeStampRangeStart",
          "in" : "query",
          "description" : "Timestamp range start",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "observationTimeStampRangeEnd",
          "in" : "query",
          "description" : "Timestamp range end",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "$ref" : "#/components/parameters/observationUnitLevelName"
        }, {
          "$ref" : "#/components/parameters/observationUnitLevelOrder"
        }, {
          "$ref" : "#/components/parameters/observationUnitLevelCode"
        }, {
          "$ref" : "#/components/parameters/observationUnitLevelRelationshipName"
        }, {
          "$ref" : "#/components/parameters/observationUnitLevelRelationshipOrder"
        }, {
          "$ref" : "#/components/parameters/observationUnitLevelRelationshipCode"
        }, {
          "$ref" : "#/components/parameters/observationUnitLevelRelationshipDbId"
        }, {
          "$ref" : "#/components/parameters/commonCropName"
        }, {
          "$ref" : "#/components/parameters/programDbId"
        }, {
          "$ref" : "#/components/parameters/trialDbId"
        }, {
          "$ref" : "#/components/parameters/studyDbId"
        }, {
          "$ref" : "#/components/parameters/germplasmDbId"
        }, {
          "$ref" : "#/components/parameters/externalReferenceID"
        }, {
          "$ref" : "#/components/parameters/externalReferenceId"
        }, {
          "$ref" : "#/components/parameters/externalReferenceSource"
        }, {
          "$ref" : "#/components/parameters/page"
        }, {
          "$ref" : "#/components/parameters/pageSize"
        }, {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/ObservationListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      },
      "put" : {
        "tags" : [ "Observations" ],
        "summary" : "Update multiple Observation entities",
        "description" : "Update multiple Observation entities simultaneously with a single call \n\nInclude as many `observationDbIds` in the request as needed. \n\nNote - In strictly typed languages, this structure can be represented as a Map or Dictionary of objects and parsed directly from JSON. ",
        "parameters" : [ {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "additionalProperties" : {
                  "$ref" : "#/components/schemas/ObservationNewRequest"
                },
                "example" : {
                  "<observationDbId_1>" : {
                    "additionalInfo" : { },
                    "collector" : "917d3ae0",
                    "externalReferences" : [ {
                      "referenceID" : "75a50e76",
                      "referenceSource" : "Remote Data Collection Upload Tool"
                    } ],
                    "germplasmDbId" : "2408ab11",
                    "germplasmName" : "A0000003",
                    "observationTimeStamp" : "2020-08-12T18:10:40.413Z",
                    "observationUnitDbId" : "598111d4",
                    "observationUnitName" : "Plot 1",
                    "observationVariableDbId" : "c403d107",
                    "observationVariableName" : "Plant Height in meters",
                    "season" : {
                      "season" : "Spring",
                      "seasonDbId" : "Spring_2018",
                      "year" : 2018
                    },
                    "studyDbId" : "ef2829db",
                    "uploadedBy" : "a2f7f60b",
                    "value" : "2.3"
                  },
                  "<observationDbId_2>" : {
                    "additionalInfo" : { },
                    "collector" : "03ba8c2c",
                    "externalReferences" : [ {
                      "referenceID" : "75a50e76",
                      "referenceSource" : "Remote Data Collection Upload Tool"
                    } ],
                    "germplasmDbId" : "69310ca4",
                    "germplasmName" : "A0000438",
                    "observationTimeStamp" : "2020-08-12T18:10:40.413Z",
                    "observationUnitDbId" : "1177a714",
                    "observationUnitName" : "Plot 13",
                    "observationVariableDbId" : "e4f8ba8c",
                    "observationVariableName" : "Carotenoid",
                    "season" : {
                      "season" : "Spring",
                      "seasonDbId" : "Spring_2018",
                      "year" : 2018
                    },
                    "studyDbId" : "6f9e267d",
                    "uploadedBy" : "182c72ad",
                    "value" : "2.5"
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/ObservationListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/404NotFound"
          }
        }
      },
      "post" : {
        "tags" : [ "Observations" ],
        "summary" : "Add new Observation entities",
        "description" : "Add new Observation entities",
        "parameters" : [ {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/ObservationNewRequest"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/ObservationListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/404NotFound"
          }
        }
      }
    },
    "/observations/table" : {
      "get" : {
        "tags" : [ "Observations" ],
        "summary" : "Get a list of Observations in a table format",
        "description" : "<p>This service is designed to retrieve a table of time dependant observation values as a matrix of Observation Units and Observation Variables.\nThis is also sometimes called a Time Series. This service takes the \"Sparse Table\" approach for representing this time dependant data.</p>\n<p>The table may be represented by JSON, CSV, or TSV. The \"Accept\" HTTP header is used for the client to request different return formats. \nBy default, if the \"Accept\" header is not included in the request, the server should return JSON as described below.</p>\n<p>The table is REQUIRED to have the following columns</p>\n<ul>\n  <li>observationUnitDbId - Each row is related to one Observation Unit</li>\n  <li>observationTimeStamp - Each row is has a time stamp for when the observation was taken</li>\n  <li>At least one column with an observationVariableDbId</li>\n</ul>\n<p>The table may have any or all of the following OPTIONAL columns. Included columns are decided by the server developer</p>\n<ul>\n  <li>observationUnitName</li>\n  <li>studyDbId</li>\n  <li>studyName</li>\n  <li>germplasmDbId</li>\n  <li>germplasmName</li>\n  <li>positionCoordinateX</li>\n  <li>positionCoordinateY</li>\n  <li>year</li>\n</ul>\n<p>The table also may have any number of Observation Unit Hierarchy Level columns. For example:</p>\n<ul>\n  <li>field</li>\n  <li>plot</li>\n  <li>sub-plot</li>\n  <li>plant</li>\n  <li>pot</li>\n  <li>block</li>\n  <li>entry</li>\n  <li>rep</li>\n</ul>\n<p>The JSON representation provides a pair of extra arrays for defining the headers of the table. \nThe first array \"headerRow\" will always contain \"observationUnitDbId\" and any or all of the OPTIONAL column header names. \nThe second array \"observationVariables\" contains the names and DbIds for the Observation Variables represented in the table. \nBy appending the two arrays, you can construct the complete header row of the table. </p>\n<p>For CSV and TSV representations of the table, an extra header row is needed to describe both the Observation Variable DbId and the Observation Variable Name for each data column. \nSee the example responses below</p> ",
        "parameters" : [ {
          "name" : "observationUnitDbId",
          "in" : "query",
          "description" : "The unique ID of an Observation Unit",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "observationVariableDbId",
          "in" : "query",
          "description" : "The unique ID of an observation variable",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "locationDbId",
          "in" : "query",
          "description" : "The unique ID of a location where these observations were collected",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "seasonDbId",
          "in" : "query",
          "description" : "The year or Phenotyping campaign of a multi-annual study (trees, grape, ...)",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "observationLevel",
          "in" : "query",
          "description" : "**Deprecated in v2.1** Please use `observationUnitLevelName`. Github issue number #464 \n<br>The type of the observationUnit. Returns only the observation unit of the specified type; the parent levels ID can be accessed through observationUnitStructure. ",
          "required" : false,
          "deprecated" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "searchResultsDbId",
          "in" : "query",
          "description" : "Permanent unique identifier which references the search results",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "observationTimeStampRangeStart",
          "in" : "query",
          "description" : "Timestamp range start",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "name" : "observationTimeStampRangeEnd",
          "in" : "query",
          "description" : "Timestamp range end",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          }
        }, {
          "$ref" : "#/components/parameters/programDbId"
        }, {
          "$ref" : "#/components/parameters/trialDbId"
        }, {
          "$ref" : "#/components/parameters/studyDbId"
        }, {
          "$ref" : "#/components/parameters/germplasmDbId"
        }, {
          "$ref" : "#/components/parameters/observationUnitLevelName"
        }, {
          "$ref" : "#/components/parameters/observationUnitLevelOrder"
        }, {
          "$ref" : "#/components/parameters/observationUnitLevelCode"
        }, {
          "$ref" : "#/components/parameters/observationUnitLevelRelationshipName"
        }, {
          "$ref" : "#/components/parameters/observationUnitLevelRelationshipOrder"
        }, {
          "$ref" : "#/components/parameters/observationUnitLevelRelationshipCode"
        }, {
          "$ref" : "#/components/parameters/observationUnitLevelRelationshipDbId"
        }, {
          "$ref" : "#/components/parameters/acceptHeader"
        }, {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/ObservationTableResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/observations/{observationDbId}" : {
      "get" : {
        "tags" : [ "Observations" ],
        "summary" : "Get the details of a specific Observations",
        "description" : "Get the details of a specific Observations\n\nobservationTimestamp should be ISO8601 format with timezone -> YYYY-MM-DDThh:mm:ss+hhmm",
        "parameters" : [ {
          "name" : "observationDbId",
          "in" : "path",
          "description" : "The unique ID of an observation",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/ObservationSingleResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/404NotFound"
          }
        }
      },
      "put" : {
        "tags" : [ "Observations" ],
        "summary" : "Update an existing Observation",
        "description" : "Update an existing Observation",
        "parameters" : [ {
          "name" : "observationDbId",
          "in" : "path",
          "description" : "The unique ID of an observation",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ObservationNewRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/ObservationSingleResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/404NotFound"
          }
        }
      }
    },
    "/observationunits" : {
      "get" : {
        "tags" : [ "Observation Units" ],
        "summary" : "Get a filtered set of Observation Units",
        "description" : "Get a filtered set of Observation Units",
        "parameters" : [ {
          "name" : "observationUnitDbId",
          "in" : "query",
          "description" : "The unique ID of an Observation Unit",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "observationUnitName",
          "in" : "query",
          "description" : "The human readable identifier for an Observation Unit",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "locationDbId",
          "in" : "query",
          "description" : "The unique ID of a location where these observations were collected",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "seasonDbId",
          "in" : "query",
          "description" : "The year or Phenotyping campaign of a multi-annual study (trees, grape, ...)",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "includeObservations",
          "in" : "query",
          "description" : "Use this parameter to include a list of observations embedded in each ObservationUnit object. \n\nCAUTION - Use this parameter at your own risk. It may return large, unpaginated lists of observation data. Only set this value to True if you are sure you need to. ",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "$ref" : "#/components/parameters/observationUnitLevelName"
        }, {
          "$ref" : "#/components/parameters/observationUnitLevelOrder"
        }, {
          "$ref" : "#/components/parameters/observationUnitLevelCode"
        }, {
          "$ref" : "#/components/parameters/observationUnitLevelRelationshipName"
        }, {
          "$ref" : "#/components/parameters/observationUnitLevelRelationshipOrder"
        }, {
          "$ref" : "#/components/parameters/observationUnitLevelRelationshipCode"
        }, {
          "$ref" : "#/components/parameters/observationUnitLevelRelationshipDbId"
        }, {
          "$ref" : "#/components/parameters/commonCropName"
        }, {
          "$ref" : "#/components/parameters/programDbId"
        }, {
          "$ref" : "#/components/parameters/trialDbId"
        }, {
          "$ref" : "#/components/parameters/studyDbId"
        }, {
          "$ref" : "#/components/parameters/germplasmDbId"
        }, {
          "$ref" : "#/components/parameters/externalReferenceID"
        }, {
          "$ref" : "#/components/parameters/externalReferenceId"
        }, {
          "$ref" : "#/components/parameters/externalReferenceSource"
        }, {
          "$ref" : "#/components/parameters/page"
        }, {
          "$ref" : "#/components/parameters/pageSize"
        }, {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/ObservationUnitListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      },
      "put" : {
        "tags" : [ "Observation Units" ],
        "summary" : "Update a set of Observation Units",
        "description" : "Update a set of Observation Units \n\nNote - In strictly typed languages, this structure can be represented as a Map or Dictionary of objects and parsed directly to JSON. ",
        "parameters" : [ {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "additionalProperties" : {
                  "$ref" : "#/components/schemas/ObservationUnitNewRequest"
                },
                "example" : {
                  "<observationUnitDbId_1>" : {
                    "additionalInfo" : { },
                    "externalReferences" : [ {
                      "referenceID" : "doi:10.155454/12341234",
                      "referenceSource" : "DOI"
                    } ],
                    "germplasmDbId" : "e9d9ed57",
                    "germplasmName" : "A0000001",
                    "locationDbId" : "0e208b20",
                    "locationName" : "Field Station Alpha",
                    "observationUnitName" : "Plot 31",
                    "observationUnitPUI" : "http://pui.per/plot/1a9afc14",
                    "observationUnitPosition" : {
                      "entryType" : "TEST",
                      "geoCoordinates" : {
                        "geometry" : {
                          "coordinates" : [ -76.506042, 42.417373, 123 ],
                          "type" : "Point"
                        },
                        "type" : "Feature"
                      },
                      "observationLevel" : {
                        "levelCode" : "Plot_456",
                        "levelName" : "plot",
                        "levelOrder" : 2
                      },
                      "observationLevelRelationships" : [ {
                        "levelCode" : "Field_1",
                        "levelName" : "field",
                        "levelOrder" : 0
                      }, {
                        "levelCode" : "Block_6",
                        "levelName" : "block",
                        "levelOrder" : 1
                      }, {
                        "levelCode" : "Plot_456",
                        "levelName" : "plot",
                        "levelOrder" : 2
                      } ],
                      "positionCoordinateX" : "78",
                      "positionCoordinateXType" : "GRID_COL",
                      "positionCoordinateY" : 8.0,
                      "positionCoordinateYType" : "GRID_ROW"
                    },
                    "programDbId" : "2d763a7a",
                    "programName" : "The Perfect Breeding Program",
                    "seedLotDbId" : "261ecb09",
                    "studyDbId" : "9865addc",
                    "studyName" : "Purple_Tomato_1",
                    "treatments" : [ {
                      "factor" : "fertilizer",
                      "modality" : "low fertilizer"
                    } ],
                    "trialDbId" : "776a609c",
                    "trialName" : "Purple Tomato"
                  },
                  "<observationUnitDbId_2>" : {
                    "additionalInfo" : { },
                    "externalReferences" : [ {
                      "referenceID" : "doi:10.155454/12341234",
                      "referenceSource" : "DOI"
                    } ],
                    "germplasmDbId" : "e9d9ed57",
                    "germplasmName" : "A0000001",
                    "locationDbId" : "0e208b20",
                    "locationName" : "Field Station Alpha",
                    "observationUnitName" : "Plot 17",
                    "observationUnitPUI" : "http://pui.per/plot/1a9afc14",
                    "observationUnitPosition" : {
                      "entryType" : "TEST",
                      "geoCoordinates" : {
                        "geometry" : {
                          "coordinates" : [ -76.506042, 42.417373, 123 ],
                          "type" : "Point"
                        },
                        "type" : "Feature"
                      },
                      "observationLevel" : {
                        "levelCode" : "Plot_123",
                        "levelName" : "plot",
                        "levelOrder" : 2
                      },
                      "observationLevelRelationships" : [ {
                        "levelCode" : "Field_1",
                        "levelName" : "field",
                        "levelOrder" : 0
                      }, {
                        "levelCode" : "Block_12",
                        "levelName" : "block",
                        "levelOrder" : 1
                      }, {
                        "levelCode" : "Plot_123",
                        "levelName" : "plot",
                        "levelOrder" : 2
                      } ],
                      "positionCoordinateX" : "74",
                      "positionCoordinateXType" : "GRID_COL",
                      "positionCoordinateY" : "03",
                      "positionCoordinateYType" : "GRID_ROW"
                    },
                    "programDbId" : "2d763a7a",
                    "programName" : "The Perfect Breeding Program",
                    "seedLotDbId" : "261ecb09",
                    "studyDbId" : "9865addc",
                    "studyName" : "Purple_Tomato_1",
                    "treatments" : [ {
                      "factor" : "fertilizer",
                      "modality" : "low fertilizer"
                    } ],
                    "trialDbId" : "776a609c",
                    "trialName" : "Purple Tomato"
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/ObservationUnitListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      },
      "post" : {
        "tags" : [ "Observation Units" ],
        "summary" : "Add new Observation Units",
        "description" : "Add new Observation Units",
        "parameters" : [ {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/ObservationUnitNewRequest"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/ObservationUnitListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/observationunits/table" : {
      "get" : {
        "tags" : [ "Observation Units" ],
        "summary" : "Get a list of Observations in a table format",
        "description" : "<p>This service is designed to retrieve a table for observation values as a matrix of Observation Units and Observation Variables.</p>\n<p>The table may be represented by JSON, CSV, or TSV. The \"Accept\" HTTP header is used for the client to request different return formats. \nBy default, if the \"Accept\" header is not included in the request, the server should return JSON as described below.</p>\n<p>The table is REQUIRED to have the following columns</p>\n<ul>\n  <li>observationUnitDbId - Each row is related to one Observation Unit</li>\n  <li>At least one column with an observationVariableDbId</li>\n</ul>\n<p>The table may have any or all of the following OPTIONAL columns. Included columns are decided by the server developer</p>\n<ul>\n  <li>observationUnitName</li>\n  <li>studyDbId</li>\n  <li>studyName</li>\n  <li>germplasmDbId</li>\n  <li>germplasmName</li>\n  <li>positionCoordinateX</li>\n  <li>positionCoordinateY</li>\n  <li>year</li>\n</ul>\n<p>The table also may have any number of Observation Unit Hierarchy Level columns. For example:</p>\n<ul>\n  <li>field</li>\n  <li>plot</li>\n  <li>sub-plot</li>\n  <li>plant</li>\n  <li>pot</li>\n  <li>block</li>\n  <li>entry</li>\n  <li>rep</li>\n</ul>\n<p>The JSON representation provides a pair of extra arrays for defining the headers of the table. \nThe first array \"headerRow\" will always contain \"observationUnitDbId\" and any or all of the OPTIONAL column header names. \nThe second array \"observationVariables\" contains the names and DbIds for the Observation Variables represented in the table. \nBy appending the two arrays, you can construct the complete header row of the table. </p>\n<p>For CSV and TSV representations of the table, an extra header row is needed to describe both the Observation Variable DbId and the Observation Variable Name for each data column. \nSee the example responses below</p> ",
        "parameters" : [ {
          "name" : "observationUnitDbId",
          "in" : "query",
          "description" : "The unique ID of an Observation Unit",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "observationVariableDbId",
          "in" : "query",
          "description" : "The unique ID of an observation variable",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "locationDbId",
          "in" : "query",
          "description" : "The unique ID of a location where these observations were collected",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "seasonDbId",
          "in" : "query",
          "description" : "The year or Phenotyping campaign of a multi-annual study (trees, grape, ...)",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "observationLevel",
          "in" : "query",
          "description" : "**Deprecated in v2.1** Please use `observationUnitLevelName`. Github issue number #464 \n<br>The type of the observationUnit. Returns only the observation unit of the specified type; the parent levels ID can be accessed through observationUnitStructure. ",
          "required" : false,
          "deprecated" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "$ref" : "#/components/parameters/programDbId"
        }, {
          "$ref" : "#/components/parameters/trialDbId"
        }, {
          "$ref" : "#/components/parameters/studyDbId"
        }, {
          "$ref" : "#/components/parameters/germplasmDbId"
        }, {
          "$ref" : "#/components/parameters/observationUnitLevelName"
        }, {
          "$ref" : "#/components/parameters/observationUnitLevelOrder"
        }, {
          "$ref" : "#/components/parameters/observationUnitLevelCode"
        }, {
          "$ref" : "#/components/parameters/observationUnitLevelRelationshipName"
        }, {
          "$ref" : "#/components/parameters/observationUnitLevelRelationshipOrder"
        }, {
          "$ref" : "#/components/parameters/observationUnitLevelRelationshipCode"
        }, {
          "$ref" : "#/components/parameters/observationUnitLevelRelationshipDbId"
        }, {
          "$ref" : "#/components/parameters/acceptHeader"
        }, {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/ObservationUnitTableResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/observationunits/{observationUnitDbId}" : {
      "get" : {
        "tags" : [ "Observation Units" ],
        "summary" : "Get the details of a specific Observation Unit",
        "description" : "Get the details of a specific Observation Unit",
        "parameters" : [ {
          "name" : "observationUnitDbId",
          "in" : "path",
          "description" : "The unique ID of the specific Observation Unit",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/ObservationUnitSingleResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      },
      "put" : {
        "tags" : [ "Observation Units" ],
        "summary" : "Update an existing Observation Units",
        "description" : "Update an existing Observation Units",
        "parameters" : [ {
          "name" : "observationUnitDbId",
          "in" : "path",
          "description" : "The unique ID of the specific Observation Unit",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ObservationUnitNewRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/ObservationUnitSingleResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/ontologies" : {
      "get" : {
        "tags" : [ "Ontologies" ],
        "summary" : "Get a filtered list of Ontologies",
        "description" : "Retrieve a list of ontologies available in the system. \nEach Ontology record describes the metadata of an existing ontology, it does not include all the terms that are part of that ontology.",
        "parameters" : [ {
          "name" : "ontologyName",
          "in" : "query",
          "description" : "The human readable identifier for an ontology definition",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "$ref" : "#/components/parameters/ontologyDbId"
        }, {
          "$ref" : "#/components/parameters/page"
        }, {
          "$ref" : "#/components/parameters/pageSize"
        }, {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/OntologyListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      },
      "post" : {
        "tags" : [ "Ontologies" ],
        "summary" : "Create a new Ontology record in the database",
        "description" : "Use this endpoint to create a new Ontology record in the database\nEach Ontology record describes the metadata of an existing ontology, it does not include all the terms that are part of that ontology.",
        "parameters" : [ {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/OntologyNewRequest"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/OntologyListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/ontologies/{ontologyDbId}" : {
      "get" : {
        "tags" : [ "Ontologies" ],
        "summary" : "Get a specific Ontology record by its ontologyDbId",
        "description" : "Use this endpoint to retrieve a specific Ontology record by its ontologyDbId. \nEach Ontology record describes the metadata of an existing ontology, it does not include all the terms that are part of that ontology.",
        "parameters" : [ {
          "name" : "ontologyDbId",
          "in" : "path",
          "description" : "The unique identifier for an ontology definition. Use this parameter to filter results based on a specific ontology \n\nUse `GET /ontologies` to find the list of available ontologies on a server.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/OntologySingleResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      },
      "put" : {
        "tags" : [ "Ontologies" ],
        "summary" : "Update a specific Ontology record",
        "description" : "Use this endpoint to update a specific Ontology record. \nEach Ontology record describes the metadata of an existing ontology, it does not include all the terms that are part of that ontology.",
        "parameters" : [ {
          "name" : "ontologyDbId",
          "in" : "path",
          "description" : "The unique identifier for an ontology definition. Use this parameter to filter results based on a specific ontology \n\nUse `GET /ontologies` to find the list of available ontologies on a server.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/OntologyNewRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/OntologySingleResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/pedigree" : {
      "get" : {
        "tags" : [ "Pedigree" ],
        "summary" : "Get a filtered list of pedigree nodes which represent a subset of a pedigree tree",
        "description" : "Get a filtered list of pedigree nodes which represent a subset of a pedigree tree",
        "parameters" : [ {
          "name" : "accessionNumber",
          "in" : "query",
          "description" : "The unique identifier for a material or germplasm within a genebank\n\nMCPD (v2.1) (ACCENUMB) 2. This is the unique identifier for accessions within a genebank, and is assigned when a sample is entered into the genebank collection (e.g. \"PI 113869\").",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "collection",
          "in" : "query",
          "description" : "A specific panel/collection/population name this germplasm belongs to.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "familyCode",
          "in" : "query",
          "description" : "A familyCode representing the family this germplasm belongs to.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "binomialName",
          "in" : "query",
          "description" : "The full binomial name (scientific name) of a germplasm",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "genus",
          "in" : "query",
          "description" : "The scientific genus of a germplasm",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "species",
          "in" : "query",
          "description" : "The scientific species of a germplasm",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "synonym",
          "in" : "query",
          "description" : "An alternative name or ID used to reference this germplasm",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "includeParents",
          "in" : "query",
          "description" : "If this parameter is true, include the array of parents in the response",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "includeSiblings",
          "in" : "query",
          "description" : "If this parameter is true, include the array of siblings in the response",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "includeProgeny",
          "in" : "query",
          "description" : "If this parameter is true, include the array of progeny in the response",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "includeFullTree",
          "in" : "query",
          "description" : "Recursively include ALL of the nodes present in this pedigree tree.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "pedigreeDepth",
          "in" : "query",
          "description" : "Recursively include this number of levels up the tree in the response",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "progenyDepth",
          "in" : "query",
          "description" : "Recursively include this number of levels down the tree in the response",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "$ref" : "#/components/parameters/commonCropName"
        }, {
          "$ref" : "#/components/parameters/programDbId"
        }, {
          "$ref" : "#/components/parameters/trialDbId"
        }, {
          "$ref" : "#/components/parameters/studyDbId"
        }, {
          "$ref" : "#/components/parameters/germplasmDbId"
        }, {
          "$ref" : "#/components/parameters/germplasmName"
        }, {
          "$ref" : "#/components/parameters/germplasmPUI"
        }, {
          "$ref" : "#/components/parameters/externalReferenceId"
        }, {
          "$ref" : "#/components/parameters/externalReferenceSource"
        }, {
          "$ref" : "#/components/parameters/page"
        }, {
          "$ref" : "#/components/parameters/pageSize"
        }, {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/PedigreeListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/404NotFound"
          }
        }
      },
      "put" : {
        "tags" : [ "Pedigree" ],
        "summary" : "Send a list of pedigree nodes to update existing information on a server",
        "description" : "Send a list of pedigree nodes to update existing information on a server",
        "parameters" : [ {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "additionalProperties" : {
                  "$ref" : "#/components/schemas/PedigreeNode"
                },
                "example" : {
                  "<germplasmDbId_1>" : {
                    "breedingMethodDbId" : "ffcce7ef",
                    "breedingMethodName" : "Male Backcross",
                    "crossingProjectDbId" : "625e745a",
                    "crossingYear" : 2005,
                    "defaultDisplayName" : "A0021004",
                    "familyCode" : "F0000203",
                    "germplasmDbId" : "<germplasmDbId_1>",
                    "germplasmName" : "A0021004",
                    "germplasmPUI" : "http://pui.per/accession/A0000003",
                    "parents" : [ {
                      "germplasmDbId" : "b66958de",
                      "germplasmName" : "A0000592",
                      "parentType" : "MALE"
                    }, {
                      "germplasmDbId" : "a55847ed",
                      "germplasmName" : "A0036658",
                      "parentType" : "FEMALE"
                    } ],
                    "pedigreeString" : "A0000592/A0036658",
                    "progeny" : [ {
                      "germplasmDbId" : "c66ddf14",
                      "germplasmName" : "A0006842",
                      "parentType" : "FEMALE"
                    }, {
                      "germplasmDbId" : "3a548793",
                      "germplasmName" : "A0037593",
                      "parentType" : "FEMALE"
                    }, {
                      "germplasmDbId" : "<germplasmDbId_2>",
                      "germplasmName" : "A0031485",
                      "parentType" : "MALE"
                    } ],
                    "siblings" : [ {
                      "germplasmDbId" : "46c9785f",
                      "germplasmName" : "A0001126"
                    }, {
                      "germplasmDbId" : "d7534a70",
                      "germplasmName" : "A0009514"
                    } ]
                  },
                  "<germplasmDbId_2>" : {
                    "breedingMethodDbId" : "ffcce7ef",
                    "breedingMethodName" : "Male Backcross",
                    "crossingProjectDbId" : "745ad753",
                    "crossingYear" : 2005,
                    "defaultDisplayName" : "A0031485",
                    "familyCode" : "F0000203",
                    "germplasmDbId" : "<germplasmDbId_2>",
                    "germplasmName" : "A0031485",
                    "germplasmPUI" : "http://pui.per/accession/A0000003",
                    "parents" : [ {
                      "germplasmDbId" : "<germplasmDbId_1>",
                      "germplasmName" : "A0021004",
                      "parentType" : "MALE"
                    }, {
                      "germplasmDbId" : "7eda5584",
                      "germplasmName" : "A0001126",
                      "parentType" : "FEMALE"
                    } ],
                    "pedigreeString" : "A0021004/A0001126",
                    "progeny" : [ {
                      "germplasmDbId" : "ddf14c66",
                      "germplasmName" : "A0001466",
                      "parentType" : "MALE"
                    } ],
                    "siblings" : [ {
                      "germplasmDbId" : "5f46c978",
                      "germplasmName" : "A0005469"
                    } ]
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/PedigreeListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/404NotFound"
          }
        }
      },
      "post" : {
        "tags" : [ "Pedigree" ],
        "summary" : "Send a list of new pedigree nodes to a server",
        "description" : "Send a list of new pedigree nodes to a server",
        "parameters" : [ {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/PedigreeNode"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/PedigreeListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/404NotFound"
          }
        }
      }
    },
    "/people" : {
      "get" : {
        "tags" : [ "People" ],
        "summary" : "Get filtered list of People",
        "description" : "Get filtered list of people",
        "parameters" : [ {
          "name" : "firstName",
          "in" : "query",
          "description" : "A persons first name",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "lastName",
          "in" : "query",
          "description" : "A persons last name",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "personDbId",
          "in" : "query",
          "description" : "The unique ID of a person",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "userID",
          "in" : "query",
          "description" : "A systems user ID associated with this person. Different from personDbId because you could have a person who is not a user of the system.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "$ref" : "#/components/parameters/commonCropName"
        }, {
          "$ref" : "#/components/parameters/programDbId"
        }, {
          "$ref" : "#/components/parameters/externalReferenceID"
        }, {
          "$ref" : "#/components/parameters/externalReferenceId"
        }, {
          "$ref" : "#/components/parameters/externalReferenceSource"
        }, {
          "$ref" : "#/components/parameters/page"
        }, {
          "$ref" : "#/components/parameters/pageSize"
        }, {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/PersonListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      },
      "post" : {
        "tags" : [ "People" ],
        "summary" : "Create new People",
        "description" : "Create new People entities. `personDbId` is generated and managed by the server.",
        "parameters" : [ {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/PersonNewRequest"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/PersonListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/people/{personDbId}" : {
      "get" : {
        "tags" : [ "People" ],
        "summary" : "Get the details for a specific Person",
        "description" : "Get the details for a specific Person",
        "parameters" : [ {
          "name" : "personDbId",
          "in" : "path",
          "description" : "The unique ID of a person",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/PersonSingleResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/404NotFound"
          }
        }
      },
      "put" : {
        "tags" : [ "People" ],
        "summary" : "Update an existing Person",
        "description" : "Update an existing Person",
        "parameters" : [ {
          "name" : "personDbId",
          "in" : "path",
          "description" : "The unique ID of a person",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PersonNewRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/PersonSingleResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/404NotFound"
          }
        }
      }
    },
    "/plannedcrosses" : {
      "get" : {
        "tags" : [ "Crosses" ],
        "summary" : "Get a filtered list of Planned Cross entities",
        "description" : "Get a filtered list of Planned Cross entities.",
        "parameters" : [ {
          "name" : "crossingProjectDbId",
          "in" : "query",
          "description" : "Search for Crossing Projects with this unique id",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "crossingProjectName",
          "in" : "query",
          "description" : "The human readable name for a crossing project",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "plannedCrossDbId",
          "in" : "query",
          "description" : "Search for Planned Cross with this unique id",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "plannedCrossName",
          "in" : "query",
          "description" : "Search for Planned Cross with this human readable name",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "status",
          "in" : "query",
          "description" : "The status of this planned cross. Is it waiting to be performed ('TODO'), has it been completed successfully ('DONE'), or has it not been done on purpose ('SKIPPED').",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "TODO", "DONE", "SKIPPED" ]
          }
        }, {
          "$ref" : "#/components/parameters/commonCropName"
        }, {
          "$ref" : "#/components/parameters/programDbId"
        }, {
          "$ref" : "#/components/parameters/externalReferenceID"
        }, {
          "$ref" : "#/components/parameters/externalReferenceId"
        }, {
          "$ref" : "#/components/parameters/externalReferenceSource"
        }, {
          "$ref" : "#/components/parameters/page"
        }, {
          "$ref" : "#/components/parameters/pageSize"
        }, {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/PlannedCrossesListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      },
      "put" : {
        "tags" : [ "Crosses" ],
        "summary" : "Update existing Planned Cross entities on this server",
        "description" : "Update existing Planned Cross entities on this server",
        "parameters" : [ {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "additionalProperties" : {
                  "$ref" : "#/components/schemas/PlannedCrossNewRequest"
                },
                "description" : "A map of new Planned Cross entities. The key is the plannedCrossDbId of the entity to be updated, the value is the Planned Cross object.",
                "example" : {
                  "<plannedCrossDbId_1>" : {
                    "additionalInfo" : { },
                    "crossAttributes" : [ {
                      "crossAttributeName" : "string",
                      "crossAttributeValue" : "string"
                    } ],
                    "crossType" : "BIPARENTAL",
                    "crossingProjectDbId" : "696d7c92",
                    "crossingProjectName" : "my_Crosses_2018",
                    "parent1" : {
                      "germplasmDbId" : "d34b10c3",
                      "germplasmName" : "TME_419",
                      "observationUnitDbId" : "3f0a1798",
                      "observationUnitName" : "my_Plot_9001",
                      "parentType" : "FEMALE"
                    },
                    "parent2" : {
                      "germplasmDbId" : "776a609c",
                      "germplasmName" : "TME_419",
                      "observationUnitDbId" : "2e1926a7",
                      "observationUnitName" : "my_Plot_9002",
                      "parentType" : "MALE"
                    },
                    "plannedCrossName" : "my_Crosses_2018_01",
                    "pollinationTimeStamp" : "2019-08-15T18:49:00.327Z"
                  },
                  "<plannedCrossDbId_2>" : {
                    "additionalInfo" : { },
                    "crossAttributes" : [ {
                      "crossAttributeName" : "string",
                      "crossAttributeValue" : "string"
                    } ],
                    "crossType" : "BIPARENTAL",
                    "crossingProjectDbId" : "696d7c92",
                    "crossingProjectName" : "my_Crosses_2018",
                    "parent1" : {
                      "germplasmDbId" : "c43a2fd2",
                      "germplasmName" : "TME_419",
                      "observationUnitDbId" : "3f2a37b8",
                      "observationUnitName" : "my_Plot_9013",
                      "parentType" : "FEMALE"
                    },
                    "parent2" : {
                      "germplasmDbId" : "124b10ad",
                      "germplasmName" : "TME_419",
                      "observationUnitDbId" : 27194637,
                      "observationUnitName" : "my_Plot_9014",
                      "parentType" : "MALE"
                    },
                    "plannedCrossName" : "my_Crosses_2018_02",
                    "pollinationTimeStamp" : "2019-08-15T18:49:00.327Z"
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/PlannedCrossesListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      },
      "post" : {
        "tags" : [ "Crosses" ],
        "summary" : "Create new Planned Cross entities on this server",
        "description" : "Create new Planned Cross entities on this server",
        "parameters" : [ {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/PlannedCrossNewRequest"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/PlannedCrossesListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/plates" : {
      "get" : {
        "tags" : [ "Plates" ],
        "summary" : "Get a filtered list of Plates.",
        "description" : "Get a filtered list of `Plates`. Each `Plate` is a collection of `Samples` that are physically grouped together.",
        "parameters" : [ {
          "name" : "sampleDbId",
          "in" : "query",
          "description" : "The unique identifier for a `Sample`",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "sampleName",
          "in" : "query",
          "description" : "The human readable name of the `Sample`",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "sampleGroupDbId",
          "in" : "query",
          "description" : "The unique identifier for a group of related `Samples`",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "observationUnitDbId",
          "in" : "query",
          "description" : "The ID which uniquely identifies an `ObservationUnit`",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "plateDbId",
          "in" : "query",
          "description" : "The ID which uniquely identifies a `Plate` of `Samples`",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "plateName",
          "in" : "query",
          "description" : "The human readable name of a `Plate` of `Samples`",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "$ref" : "#/components/parameters/commonCropName"
        }, {
          "$ref" : "#/components/parameters/programDbId"
        }, {
          "$ref" : "#/components/parameters/trialDbId"
        }, {
          "$ref" : "#/components/parameters/studyDbId"
        }, {
          "$ref" : "#/components/parameters/germplasmDbId"
        }, {
          "$ref" : "#/components/parameters/externalReferenceID"
        }, {
          "$ref" : "#/components/parameters/externalReferenceId"
        }, {
          "$ref" : "#/components/parameters/externalReferenceSource"
        }, {
          "$ref" : "#/components/parameters/page"
        }, {
          "$ref" : "#/components/parameters/pageSize"
        }, {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/PlateListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      },
      "put" : {
        "tags" : [ "Plates" ],
        "summary" : "Update the details of existing Plates",
        "description" : "Update the details of existing Plates",
        "parameters" : [ {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "additionalProperties" : {
                  "$ref" : "#/components/schemas/PlateNewRequest"
                },
                "example" : {
                  "<plateDbId_1>" : {
                    "additionalInfo" : { },
                    "externalReferences" : [ ],
                    "plateBarcode" : "3a027b59",
                    "plateFormat" : "PLATE_96",
                    "plateName" : "Plate_alpha_20191022",
                    "programDbId" : "bd748e00",
                    "sampleType" : "Tissue",
                    "studyDbId" : "64bd6bf9",
                    "trialDbId" : "d34c5349"
                  },
                  "<plateDbId_2>" : {
                    "additionalInfo" : { },
                    "externalReferences" : [ ],
                    "plateBarcode" : "27b593a0",
                    "plateFormat" : "PLATE_96",
                    "plateName" : "Plate_alpha_20191022",
                    "programDbId" : "bd748e00",
                    "sampleType" : "Tissue",
                    "studyDbId" : "64bd6bf9",
                    "trialDbId" : "d34c5349"
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/PlateListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/404NotFound"
          }
        }
      },
      "post" : {
        "tags" : [ "Plates" ],
        "summary" : "Submit new Plate entities to the server",
        "description" : "Submit new Plate entities to the server",
        "parameters" : [ {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/PlateNewRequest"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/PlateListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/plates/{plateDbId}" : {
      "get" : {
        "tags" : [ "Plates" ],
        "summary" : "Get the details of a specific Plate.",
        "description" : "Get the details of a specific `Plate`. Each `Plate` is a collection of `Samples` that are physically grouped together.",
        "parameters" : [ {
          "name" : "plateDbId",
          "in" : "path",
          "description" : "The ID which uniquely identifies a `Plate`",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/PlateSingleResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/404NotFound"
          }
        }
      }
    },
    "/programs" : {
      "get" : {
        "tags" : [ "Programs" ],
        "summary" : "Get a filtered list of breeding Programs",
        "description" : "Get a filtered list of breeding Programs. This list can be filtered by common crop name to narrow results to a specific crop.",
        "parameters" : [ {
          "name" : "abbreviation",
          "in" : "query",
          "description" : "A shortened version of the human readable name for a Program",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "programType",
          "in" : "query",
          "description" : "The type of program entity this object represents\n<br/> 'STANARD' represents a standard, permenant breeding program\n<br/> 'PROJECT' represents a short term project, usually with a set time limit based on funding ",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "STANARD", "PROJECT" ]
          }
        }, {
          "$ref" : "#/components/parameters/commonCropName"
        }, {
          "$ref" : "#/components/parameters/programDbId"
        }, {
          "$ref" : "#/components/parameters/programName"
        }, {
          "$ref" : "#/components/parameters/externalReferenceID"
        }, {
          "$ref" : "#/components/parameters/externalReferenceId"
        }, {
          "$ref" : "#/components/parameters/externalReferenceSource"
        }, {
          "$ref" : "#/components/parameters/page"
        }, {
          "$ref" : "#/components/parameters/pageSize"
        }, {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/ProgramListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      },
      "post" : {
        "tags" : [ "Programs" ],
        "summary" : "Add new breeding Programs to the database",
        "description" : "Add new breeding Programs to the database. The `programDbId` is set by the server, all other fields are take from the request body, or a default value is used.",
        "parameters" : [ {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/ProgramNewRequest"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/ProgramListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/programs/{programDbId}" : {
      "get" : {
        "tags" : [ "Programs" ],
        "summary" : "Get a breeding Program by Id",
        "description" : "Get a single breeding Program by Id. This can be used to quickly get the details of a Program when you have the Id from another entity.",
        "parameters" : [ {
          "name" : "programDbId",
          "in" : "path",
          "description" : "Filter by the common crop name. Exact match.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/ProgramSingleResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      },
      "put" : {
        "tags" : [ "Programs" ],
        "summary" : "Update an existing Program",
        "description" : "Update the details of an existing breeding Program.",
        "parameters" : [ {
          "name" : "programDbId",
          "in" : "path",
          "description" : "Filter by the common crop name. Exact match.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ProgramNewRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/ProgramSingleResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/references" : {
      "get" : {
        "tags" : [ "References" ],
        "summary" : "Gets a filtered list of `Reference` objects.",
        "description" : "`GET /references` will return a filtered list of `Reference` JSON objects.",
        "parameters" : [ {
          "name" : "referenceDbId",
          "in" : "query",
          "description" : "The ID of the `Reference` to be retrieved.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "referenceSetDbId",
          "in" : "query",
          "description" : "The ID of the `ReferenceSet` to be retrieved.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "accession",
          "in" : "query",
          "description" : "If set, return the reference sets for which the `accession` matches this string (case-sensitive, exact match).",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "md5checksum",
          "in" : "query",
          "description" : "If specified, return the references for which the `md5checksum` matches this string (case-sensitive, exact match).",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "isDerived",
          "in" : "query",
          "description" : "If the reference is derived from a source sequence",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "minLength",
          "in" : "query",
          "description" : "The minimum length of the reference sequences to be retrieved.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "maxLength",
          "in" : "query",
          "description" : "The maximum length of the reference sequences to be retrieved.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "$ref" : "#/components/parameters/commonCropName"
        }, {
          "$ref" : "#/components/parameters/programDbId"
        }, {
          "$ref" : "#/components/parameters/trialDbId"
        }, {
          "$ref" : "#/components/parameters/studyDbId"
        }, {
          "$ref" : "#/components/parameters/externalReferenceId"
        }, {
          "$ref" : "#/components/parameters/externalReferenceSource"
        }, {
          "$ref" : "#/components/parameters/page"
        }, {
          "$ref" : "#/components/parameters/pageSize"
        }, {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/ReferencesListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/references/{referenceDbId}" : {
      "get" : {
        "tags" : [ "References" ],
        "summary" : "Gets a `Reference` by ID.",
        "description" : "`GET /references/{reference_id}` will return a JSON version of\n`Reference`.",
        "parameters" : [ {
          "name" : "referenceDbId",
          "in" : "path",
          "description" : "The ID of the `Reference` to be retrieved.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "responses" : {
          "200" : {
            "description" : "A successful response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "title" : "ReferenceSingleResponse",
                  "required" : [ "metadata", "result" ],
                  "type" : "object",
                  "properties" : {
                    "@context" : {
                      "$ref" : "#/components/schemas/Context"
                    },
                    "metadata" : {
                      "$ref" : "#/components/schemas/metadata"
                    },
                    "result" : {
                      "$ref" : "#/components/schemas/Reference"
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/404NotFound"
          }
        }
      }
    },
    "/references/{referenceDbId}/bases" : {
      "get" : {
        "tags" : [ "References" ],
        "summary" : "Lists `Reference` bases by ID and optional range.",
        "description" : "Lists `Reference` bases by ID and optional range.",
        "parameters" : [ {
          "name" : "referenceDbId",
          "in" : "path",
          "description" : "The ID of the `Reference` to be retrieved.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "start",
          "in" : "query",
          "description" : "The start position (0-based) of this query. Defaults to 0.\nGenomic positions are non-negative integers less than reference length.\nRequests spanning the join of circular genomes are represented as\ntwo requests one on each side of the join (position 0).",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "end",
          "in" : "query",
          "description" : "The end position (0-based, exclusive) of this query. Defaults to the length of this `Reference`.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "pageToken",
          "in" : "query",
          "description" : "The continuation token, which is used to page through large result sets.\nTo get the next page of results, set this parameter to the value of\n`next_page_token` from the previous response.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "responses" : {
          "200" : {
            "description" : "A successful response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "title" : "ReferenceBasesResponse",
                  "required" : [ "metadata", "result" ],
                  "type" : "object",
                  "properties" : {
                    "@context" : {
                      "$ref" : "#/components/schemas/Context"
                    },
                    "metadata" : {
                      "$ref" : "#/components/schemas/metadata"
                    },
                    "result" : {
                      "$ref" : "#/components/schemas/ReferenceBases"
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/404NotFound"
          }
        }
      }
    },
    "/referencesets" : {
      "get" : {
        "tags" : [ "Reference Sets" ],
        "summary" : "Gets a list of `ReferenceSets`.",
        "description" : "Gets a filtered list of `ReferenceSets`.",
        "parameters" : [ {
          "name" : "referenceSetDbId",
          "in" : "query",
          "description" : "The ID of the `ReferenceSet` to be retrieved.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "accession",
          "in" : "query",
          "description" : "If set, return the reference sets for which the `accession` matches this string (case-sensitive, exact match).",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "assemblyPUI",
          "in" : "query",
          "description" : "If set, return the reference sets for which the `assemblyId` matches this string (case-sensitive, exact match).",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "md5checksum",
          "in" : "query",
          "description" : "If set, return the reference sets for which the `md5checksum` matches this string (case-sensitive, exact match).",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "$ref" : "#/components/parameters/commonCropName"
        }, {
          "$ref" : "#/components/parameters/programDbId"
        }, {
          "$ref" : "#/components/parameters/trialDbId"
        }, {
          "$ref" : "#/components/parameters/studyDbId"
        }, {
          "$ref" : "#/components/parameters/externalReferenceId"
        }, {
          "$ref" : "#/components/parameters/externalReferenceSource"
        }, {
          "$ref" : "#/components/parameters/page"
        }, {
          "$ref" : "#/components/parameters/pageSize"
        }, {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/ReferenceSetsListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/referencesets/{referenceSetDbId}" : {
      "get" : {
        "tags" : [ "Reference Sets" ],
        "summary" : "Gets a `ReferenceSet` by ID.",
        "description" : "Gets a `ReferenceSet` by ID.",
        "parameters" : [ {
          "name" : "referenceSetDbId",
          "in" : "path",
          "description" : "The ID of the `ReferenceSet` to be retrieved.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "responses" : {
          "200" : {
            "description" : "A successful response.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "title" : "ReferenceSetsSingleResponse",
                  "required" : [ "metadata", "result" ],
                  "type" : "object",
                  "properties" : {
                    "@context" : {
                      "$ref" : "#/components/schemas/Context"
                    },
                    "metadata" : {
                      "$ref" : "#/components/schemas/metadata"
                    },
                    "result" : {
                      "$ref" : "#/components/schemas/ReferenceSet"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/samples" : {
      "get" : {
        "tags" : [ "Samples" ],
        "summary" : "Get the Samples",
        "description" : "Used to retrieve list of Samples from a Sample Tracking system based on some search criteria.",
        "parameters" : [ {
          "name" : "sampleDbId",
          "in" : "query",
          "description" : "The unique identifier for a `Sample`",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "sampleName",
          "in" : "query",
          "description" : "The human readable name of the `Sample`",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "sampleGroupDbId",
          "in" : "query",
          "description" : "The unique identifier for a group of related `Samples`",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "observationUnitDbId",
          "in" : "query",
          "description" : "The ID which uniquely identifies an `ObservationUnit`",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "plateDbId",
          "in" : "query",
          "description" : "The ID which uniquely identifies a `Plate` of `Sample`",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "plateName",
          "in" : "query",
          "description" : "The human readable name of a `Plate` of `Sample`",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "$ref" : "#/components/parameters/commonCropName"
        }, {
          "$ref" : "#/components/parameters/programDbId"
        }, {
          "$ref" : "#/components/parameters/trialDbId"
        }, {
          "$ref" : "#/components/parameters/studyDbId"
        }, {
          "$ref" : "#/components/parameters/germplasmDbId"
        }, {
          "$ref" : "#/components/parameters/externalReferenceID"
        }, {
          "$ref" : "#/components/parameters/externalReferenceId"
        }, {
          "$ref" : "#/components/parameters/externalReferenceSource"
        }, {
          "$ref" : "#/components/parameters/page"
        }, {
          "$ref" : "#/components/parameters/pageSize"
        }, {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/SampleListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      },
      "put" : {
        "tags" : [ "Samples" ],
        "summary" : "Update the details of existing Samples",
        "description" : "Update the details of existing Samples",
        "parameters" : [ {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "additionalProperties" : {
                  "$ref" : "#/components/schemas/SampleNewRequest"
                },
                "example" : {
                  "<sampleDbId_1>" : {
                    "additionalInfo" : { },
                    "column" : 6,
                    "externalReferences" : [ ],
                    "germplasmDbId" : "7e08d538",
                    "observationUnitDbId" : "073a3ce5",
                    "plateDbId" : "2dce16d1",
                    "plateName" : "Plate_alpha_20191022",
                    "programDbId" : "bd748e00",
                    "row" : "B",
                    "sampleBarcode" : "3a027b59",
                    "sampleDescription" : "This sample was taken from the root of a tree",
                    "sampleGroupDbId" : "8524b436",
                    "sampleName" : "Sample_alpha_20191022",
                    "samplePUI" : "doi:10.15454/312953986E3",
                    "sampleTimestamp" : "2018-01-01T18:47:23-0600",
                    "sampleType" : "Tissue",
                    "studyDbId" : "64bd6bf9",
                    "takenBy" : "Bob",
                    "tissueType" : "Root",
                    "trialDbId" : "d34c5349",
                    "well" : "B6"
                  },
                  "<sampleDbId_2>" : {
                    "additionalInfo" : { },
                    "column" : 6,
                    "externalReferences" : [ ],
                    "germplasmDbId" : "7e08d538",
                    "observationUnitDbId" : "073a3ce5",
                    "plateDbId" : "2dce16d1",
                    "plateName" : "Plate_alpha_20191022",
                    "programDbId" : "bd748e00",
                    "row" : "B",
                    "sampleBarcode" : "3a027b59",
                    "sampleDescription" : "This sample was taken from the root of a tree",
                    "sampleGroupDbId" : "8524b436",
                    "sampleName" : "Sample_alpha_20191022",
                    "samplePUI" : "doi:10.15454/312953986E3",
                    "sampleTimestamp" : "2018-01-01T18:47:23-0600",
                    "sampleType" : "Tissue",
                    "studyDbId" : "64bd6bf9",
                    "takenBy" : "Bob",
                    "tissueType" : "Root",
                    "trialDbId" : "d34c5349",
                    "well" : "B6"
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/SampleListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/404NotFound"
          }
        }
      },
      "post" : {
        "tags" : [ "Samples" ],
        "summary" : "Add new Samples",
        "description" : "Call to register the event of a sample being taken. Sample ID is assigned as a result of the operation and returned in response.",
        "parameters" : [ {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/SampleNewRequest"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/SampleListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/samples/{sampleDbId}" : {
      "get" : {
        "tags" : [ "Samples" ],
        "summary" : "Get the details of a specific Sample",
        "description" : "Used to retrieve the details of a single Sample from a Sample Tracking system.",
        "parameters" : [ {
          "name" : "sampleDbId",
          "in" : "path",
          "description" : "The unique identifier for a `Sample`",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/SampleSingleResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/404NotFound"
          }
        }
      },
      "put" : {
        "tags" : [ "Samples" ],
        "summary" : "Update the details of an existing Sample",
        "description" : "**Deprecated in v2.1** Please use `PUT /samples`. Github issue number #462 \n<br/>Update the details of an existing Sample",
        "parameters" : [ {
          "name" : "sampleDbId",
          "in" : "path",
          "description" : "The unique identifier for a `Sample`",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SampleNewRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/SampleSingleResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/404NotFound"
          }
        },
        "deprecated" : true
      }
    },
    "/scales" : {
      "get" : {
        "tags" : [ "Scales" ],
        "summary" : "Get the Scales",
        "description" : "Returns a list of Scales available on a server.\n\nAn Observation Variable has 3 critical parts; A Trait being observed, a Method for making the observation, and a Scale on which the observation can be measured and compared with other observations.",
        "parameters" : [ {
          "name" : "scaleDbId",
          "in" : "query",
          "description" : "The unique identifier for a scale",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "observationVariableDbId",
          "in" : "query",
          "description" : "The unique identifier for an observation variable",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "$ref" : "#/components/parameters/ontologyDbId"
        }, {
          "$ref" : "#/components/parameters/commonCropName"
        }, {
          "$ref" : "#/components/parameters/programDbId"
        }, {
          "$ref" : "#/components/parameters/externalReferenceID"
        }, {
          "$ref" : "#/components/parameters/externalReferenceId"
        }, {
          "$ref" : "#/components/parameters/externalReferenceSource"
        }, {
          "$ref" : "#/components/parameters/page"
        }, {
          "$ref" : "#/components/parameters/pageSize"
        }, {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/ScaleListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      },
      "post" : {
        "tags" : [ "Scales" ],
        "summary" : "Add new Scales",
        "description" : "Create new scale objects in the database",
        "parameters" : [ {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/ScaleNewRequest"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/ScaleListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/scales/{scaleDbId}" : {
      "get" : {
        "tags" : [ "Scales" ],
        "summary" : "Get the details of a specific Scale",
        "description" : "Retrieve details about a specific scale\n\nAn Observation Variable has 3 critical parts: A Trait being observed, a Method for making the observation, and a Scale on which the observation can be measured and compared with other observations.",
        "parameters" : [ {
          "name" : "scaleDbId",
          "in" : "path",
          "description" : "Id of the scale to retrieve details of.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/ScaleSingleResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/404NotFound"
          }
        }
      },
      "put" : {
        "tags" : [ "Scales" ],
        "summary" : "Update an existing Scale",
        "description" : "Update the details of an existing scale",
        "parameters" : [ {
          "name" : "scaleDbId",
          "in" : "path",
          "description" : "Id of the scale to retrieve details of.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ScaleNewRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/ScaleSingleResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/404NotFound"
          }
        }
      }
    },
    "/search/allelematrix" : {
      "post" : {
        "tags" : [ "Allele Matrix" ],
        "summary" : "Submit a search request for a Allele Matrix",
        "description" : "Use this endpoint to retrieve a two dimensional matrix of genotype data. The response structure is based on the VCF format, but the search and filter parameters give the ability to slice and merge data sets. This allows the user to return the subset of data they are interested in, without having to download the entire genotype file.\n<br/>Each row of data (outer array) corresponds to a variant definition, and each column (inner array) corresponds to a callSet. \n<br/>Search requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. If a server needs more time to process the request, it might respond with a `searchResultsDbId`. Use the corresponding `GET /search/allelematrix/{searchResultsDbId}` to retrieve the results of the search. \n<br/>Review the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
        "parameters" : [ {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "requestBody" : {
          "description" : "Study Search request",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AlleleMatrixSearchRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/AlleleMatrixResponse"
          },
          "202" : {
            "$ref" : "#/components/responses/202AcceptedSearchResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/search/allelematrix/{searchResultsDbId}" : {
      "get" : {
        "tags" : [ "Allele Matrix" ],
        "summary" : "Get the results of a Allele Matrix search request",
        "description" : "Use this endpoint to retrieve a two dimensional matrix of genotype data. The response structure is based on the VCF format, but the search and filter parameters give the ability to slice and merge data sets. This allows the user to return the subset of data they are interested in, without having to download the entire genotype file.\n<br/>Each row of data (outer array) corresponds to a variant definition, and each column (inner array) corresponds to a callSet. \n<br/>Clients should submit a search request using the corresponding `POST /search/allelematrix` endpoint. Search requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. If a server needs more time to process the request, it might respond with a `searchResultsDbId`. Use this endpoint to retrieve the results of the search. \n<br/>Review the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
        "parameters" : [ {
          "$ref" : "#/components/parameters/searchResultsDbId"
        }, {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/AlleleMatrixResponse"
          },
          "202" : {
            "$ref" : "#/components/responses/202AcceptedSearchResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/search/attributes" : {
      "post" : {
        "tags" : [ "Germplasm Attributes" ],
        "summary" : "Submit a search request for Germplasm `Attributes`",
        "description" : "Submit a search request for Germplasm `Attributes`<br/>\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse the corresponding `GET /search/attributes/{searchResultsDbId}` to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
        "parameters" : [ {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/GermplasmAttributeSearchRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/GermplasmAttributeListResponse"
          },
          "202" : {
            "$ref" : "#/components/responses/202AcceptedSearchResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/search/attributes/{searchResultsDbId}" : {
      "get" : {
        "tags" : [ "Germplasm Attributes" ],
        "summary" : "Get the results of a Germplasm `Attributes` search request",
        "description" : "Get the results of a Germplasm `Attributes` search request <br/>\nClients should submit a search request using the corresponding `POST /search/attributes` endpoint.\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse this endpoint to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
        "parameters" : [ {
          "$ref" : "#/components/parameters/searchResultsDbId"
        }, {
          "$ref" : "#/components/parameters/page"
        }, {
          "$ref" : "#/components/parameters/pageSize"
        }, {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/GermplasmAttributeListResponse"
          },
          "202" : {
            "$ref" : "#/components/responses/202AcceptedSearchResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/404NotFound"
          }
        }
      }
    },
    "/search/attributevalues" : {
      "post" : {
        "tags" : [ "Germplasm Attribute Values" ],
        "summary" : "Submit a search request for Germplasm `AttributeValues`",
        "description" : "Submit a search request for Germplasm `AttributeValues`<br/>\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse the corresponding `GET /search/attributevalues/{searchResultsDbId}` to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
        "parameters" : [ {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/GermplasmAttributeValueSearchRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/GermplasmAttributeValueListResponse"
          },
          "202" : {
            "$ref" : "#/components/responses/202AcceptedSearchResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/search/attributevalues/{searchResultsDbId}" : {
      "get" : {
        "tags" : [ "Germplasm Attribute Values" ],
        "summary" : "Get the results of a Germplasm `AttributeValues` search request",
        "description" : "Get the results of a Germplasm `AttributeValues` search request <br/>\nClients should submit a search request using the corresponding `POST /search/attributevalues` endpoint.\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse this endpoint to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
        "parameters" : [ {
          "$ref" : "#/components/parameters/searchResultsDbId"
        }, {
          "$ref" : "#/components/parameters/page"
        }, {
          "$ref" : "#/components/parameters/pageSize"
        }, {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/GermplasmAttributeValueListResponse"
          },
          "202" : {
            "$ref" : "#/components/responses/202AcceptedSearchResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/404NotFound"
          }
        }
      }
    },
    "/search/calls" : {
      "post" : {
        "tags" : [ "Calls" ],
        "summary" : "Submit a search request for `Calls`",
        "description" : "Submit a search request for `Calls`<br/>\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse the corresponding `GET /search/calls/{searchResultsDbId}` to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details. \n<br/>\n<br/>\n<strong>NOTE:</strong> This endpoint uses Token based pagination. Please Review the \n<a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Pagination\">Pagination documentation</a> for additional implementation details.",
        "parameters" : [ {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "requestBody" : {
          "description" : "Study Search request",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CallsSearchRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/CallsListResponse"
          },
          "202" : {
            "$ref" : "#/components/responses/202AcceptedSearchResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/search/calls/{searchResultsDbId}" : {
      "get" : {
        "tags" : [ "Calls" ],
        "summary" : "Get the results of a `Calls` search request",
        "description" : "Get the results of a `Calls` search request <br/>\nClients should submit a search request using the corresponding `POST /search/calls` endpoint.\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse this endpoint to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.\n<br/>",
        "parameters" : [ {
          "$ref" : "#/components/parameters/searchResultsDbId"
        }, {
          "$ref" : "#/components/parameters/pageToken"
        }, {
          "$ref" : "#/components/parameters/page"
        }, {
          "$ref" : "#/components/parameters/pageSize"
        }, {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/CallsListResponse"
          },
          "202" : {
            "$ref" : "#/components/responses/202AcceptedSearchResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/search/callsets" : {
      "post" : {
        "tags" : [ "Call Sets" ],
        "summary" : "Submit a search request for `CallSets`",
        "description" : "Submit a search request for `CallSets` \n<br> Search requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse the corresponding `GET /search/callsets/{searchResultsDbId}` to retrieve the results of the search. \n<br> Review the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
        "parameters" : [ {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "requestBody" : {
          "description" : "Study Search request",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/callSetsSearchRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/CallSetsListResponse"
          },
          "202" : {
            "$ref" : "#/components/responses/202AcceptedSearchResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/search/callsets/{searchResultsDbId}" : {
      "get" : {
        "tags" : [ "Call Sets" ],
        "summary" : "Get the results of a `CallSets` search request",
        "description" : "Get the results of a `CallSets` search request \n<br> Clients should submit a search request using the corresponding `POST /search/callsets` endpoint.\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse this endpoint to retrieve the results of the search. \n<br>Review the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
        "parameters" : [ {
          "$ref" : "#/components/parameters/searchResultsDbId"
        }, {
          "$ref" : "#/components/parameters/page"
        }, {
          "$ref" : "#/components/parameters/pageSize"
        }, {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/CallSetsListResponse"
          },
          "202" : {
            "$ref" : "#/components/responses/202AcceptedSearchResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/search/germplasm" : {
      "post" : {
        "tags" : [ "Germplasm" ],
        "summary" : "Submit a search request for `Germplasm`",
        "description" : "Submit a search request for `Germplasm`<br/>\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse the corresponding `GET /search/germplasm/{searchResultsDbId}` to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
        "parameters" : [ {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/GermplasmSearchRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/GermplasmListResponse"
          },
          "202" : {
            "$ref" : "#/components/responses/202AcceptedSearchResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/search/germplasm/{searchResultsDbId}" : {
      "get" : {
        "tags" : [ "Germplasm" ],
        "summary" : "Get the results of a `Germplasm` search request",
        "description" : "Get the results of a `Germplasm` search request <br/>\nClients should submit a search request using the corresponding `POST /search/germplasm` endpoint.\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse this endpoint to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
        "parameters" : [ {
          "$ref" : "#/components/parameters/searchResultsDbId"
        }, {
          "$ref" : "#/components/parameters/page"
        }, {
          "$ref" : "#/components/parameters/pageSize"
        }, {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/GermplasmListResponse"
          },
          "202" : {
            "$ref" : "#/components/responses/202AcceptedSearchResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/404NotFound"
          }
        }
      }
    },
    "/search/images" : {
      "post" : {
        "tags" : [ "Images" ],
        "summary" : "Submit a search request for `XXEntitiesXX`",
        "description" : "Submit a search request for `XXEntitiesXX`<br/>\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse the corresponding `GET /search/XXEntitiesXX/{searchResultsDbId}` to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.\n<br/>\n<br/>\nImage Implementation Notes<br/>\n- `imageURL` should be a complete URL describing the location of the image. There is no BrAPI call for retrieving the image content, so it could be on a different path, or a different host.<br/>\n- `descriptiveOntologyTerm` can be thought of as Tags for the image. These could be simple descriptive words, or ontology references, or full ontology URI's.<br/>",
        "parameters" : [ {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "commonCropNames" : {
                    "type" : "array",
                    "description" : "The BrAPI Common Crop Name is the simple, generalized, widely accepted name of the organism being researched. It is most often used in multi-crop systems where digital resources need to be divided at a high level. Things like 'Maize', 'Wheat', and 'Rice' are examples of common crop names.\n\nUse this parameter to only return results associated with the given crops. \n\nUse `GET /commoncropnames` to find the list of available crops on a server.",
                    "example" : [ "Tomatillo", "Paw Paw" ],
                    "items" : {
                      "type" : "string"
                    }
                  },
                  "descriptiveOntologyTerms" : {
                    "type" : "array",
                    "description" : "A list of terms to formally describe the image to search for. Each item could be a simple Tag, an Ontology reference Id, or a full ontology URL.",
                    "example" : [ "doi:10.1002/0470841559", "Red", "ncbi:0300294" ],
                    "items" : {
                      "type" : "string"
                    }
                  },
                  "externalReferenceIDs" : {
                    "type" : "array",
                    "description" : "**Deprecated in v2.1** Please use `externalReferenceIds`. Github issue number #460 \n<br>List of external reference IDs. Could be a simple strings or a URIs. (use with `externalReferenceSources` parameter)",
                    "example" : [ "doi:10.155454/12341234", "14a19841" ],
                    "deprecated" : true,
                    "items" : {
                      "type" : "string"
                    }
                  },
                  "externalReferenceIds" : {
                    "type" : "array",
                    "description" : "List of external reference IDs. Could be a simple strings or a URIs. (use with `externalReferenceSources` parameter)",
                    "example" : [ "doi:10.155454/12341234", "14a19841" ],
                    "items" : {
                      "type" : "string"
                    }
                  },
                  "externalReferenceSources" : {
                    "type" : "array",
                    "description" : "List of identifiers for the source system or database of an external reference (use with `externalReferenceIDs` parameter)",
                    "example" : [ "DOI", "Field App Name" ],
                    "items" : {
                      "type" : "string"
                    }
                  },
                  "imageDbIds" : {
                    "type" : "array",
                    "description" : "A list of image Ids to search for",
                    "example" : [ "564b64a6", "0d122d1d" ],
                    "items" : {
                      "type" : "string"
                    }
                  },
                  "imageFileNames" : {
                    "type" : "array",
                    "description" : "Image file names to search for.",
                    "example" : [ "image_01032019.jpg", "picture_field_1234.jpg" ],
                    "items" : {
                      "type" : "string"
                    }
                  },
                  "imageFileSizeMax" : {
                    "type" : "integer",
                    "description" : "A maximum image file size to search for.",
                    "example" : 20000000
                  },
                  "imageFileSizeMin" : {
                    "type" : "integer",
                    "description" : "A minimum image file size to search for.",
                    "example" : 1000
                  },
                  "imageHeightMax" : {
                    "type" : "integer",
                    "description" : "A maximum image height to search for.",
                    "example" : 1080
                  },
                  "imageHeightMin" : {
                    "type" : "integer",
                    "description" : "A minimum image height to search for.",
                    "example" : 720
                  },
                  "imageLocation" : {
                    "title" : "GeoJSONSearchArea",
                    "type" : "object",
                    "properties" : {
                      "geometry" : {
                        "title" : "GeoJSON Geometry",
                        "type" : "object",
                        "description" : "A geometry as defined by GeoJSON (RFC 7946). In this context, only Point or Polygon geometry are allowed.",
                        "example" : {
                          "coordinates" : [ -76.506042, 42.417373, 123 ],
                          "type" : "Point"
                        },
                        "discriminator" : {
                          "propertyName" : "type",
                          "mapping" : {
                            "Point" : "#/components/schemas/pointGeometry",
                            "Polygon" : "#/components/schemas/polygonGeometry"
                          }
                        },
                        "oneOf" : [ {
                          "required" : [ "coordinates", "type" ],
                          "type" : "object",
                          "properties" : {
                            "coordinates" : {
                              "minItems" : 2,
                              "type" : "array",
                              "description" : "A single position",
                              "example" : [ -76.506042, 42.417373, 123 ],
                              "items" : {
                                "type" : "number"
                              }
                            },
                            "type" : {
                              "type" : "string",
                              "description" : "The literal string \"Point\"",
                              "example" : "Point",
                              "default" : "Point"
                            }
                          },
                          "description" : "Copied from RFC 7946 Section 3.1.1\n\nA position is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or\neasting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element."
                        }, {
                          "required" : [ "coordinates", "type" ],
                          "type" : "object",
                          "properties" : {
                            "coordinates" : {
                              "type" : "array",
                              "description" : "An array of linear rings",
                              "example" : [ [ [ -77.456654, 42.241133, 494 ], [ -75.414133, 41.508282, 571 ], [ -76.506042, 42.417373, 123 ], [ -77.456654, 42.241133, 346 ] ] ],
                              "items" : {
                                "minItems" : 4,
                                "type" : "array",
                                "description" : "An array of at least four positions where the first equals the last",
                                "example" : [ [ -77.456654, 42.241133, 494 ], [ -75.414133, 41.508282, 571 ], [ -76.506042, 42.417373, 123 ], [ -77.456654, 42.241133, 346 ] ],
                                "items" : {
                                  "minItems" : 2,
                                  "type" : "array",
                                  "description" : "A single position",
                                  "example" : [ -76.506042, 42.417373, 123 ],
                                  "items" : {
                                    "type" : "number"
                                  }
                                }
                              }
                            },
                            "type" : {
                              "type" : "string",
                              "description" : "The literal string \"Polygon\"",
                              "example" : "Polygon",
                              "default" : "Polygon"
                            }
                          },
                          "description" : "An array of Linear Rings. Each Linear Ring is an array of Points. \n\nA Point is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or\neasting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element."
                        } ]
                      },
                      "type" : {
                        "type" : "string",
                        "description" : "The literal string \"Feature\"",
                        "example" : "Feature",
                        "default" : "Feature"
                      }
                    },
                    "description" : "A GeoJSON Polygon which describes an area to search for other GeoJSON objects. All contained Points and intersecting Polygons should be returned as search results. \n\nAll coordinates are decimal values on the WGS84 geographic coordinate reference system.",
                    "example" : {
                      "geometry" : {
                        "coordinates" : [ [ [ -77.456654, 42.241133 ], [ -75.414133, 41.508282 ], [ -76.506042, 42.417373 ], [ -77.456654, 42.241133 ] ] ],
                        "type" : "Polygon"
                      },
                      "type" : "Feature"
                    }
                  },
                  "imageNames" : {
                    "type" : "array",
                    "description" : "Human readable names to search for.",
                    "example" : [ "Image 43", "Tractor in field" ],
                    "items" : {
                      "type" : "string"
                    }
                  },
                  "imageTimeStampRangeEnd" : {
                    "type" : "string",
                    "description" : "The latest timestamp to search for.",
                    "format" : "date-time"
                  },
                  "imageTimeStampRangeStart" : {
                    "type" : "string",
                    "description" : "The earliest timestamp to search for.",
                    "format" : "date-time"
                  },
                  "imageWidthMax" : {
                    "type" : "integer",
                    "description" : "A maximum image width to search for.",
                    "example" : 1920
                  },
                  "imageWidthMin" : {
                    "type" : "integer",
                    "description" : "A minimum image width to search for.",
                    "example" : 1280
                  },
                  "mimeTypes" : {
                    "type" : "array",
                    "description" : "A set of image file types to search for.",
                    "example" : [ "image/jpg", "image/jpeg", "image/gif" ],
                    "items" : {
                      "pattern" : "image/.*",
                      "type" : "string"
                    }
                  },
                  "observationDbIds" : {
                    "type" : "array",
                    "description" : "A list of observation Ids this image is associated with to search for",
                    "example" : [ "47326456", "fc9823ac" ],
                    "items" : {
                      "type" : "string"
                    }
                  },
                  "observationUnitDbIds" : {
                    "type" : "array",
                    "description" : "A set of observation unit identifiers to search for.",
                    "example" : [ "f5e4b273", "328c9424" ],
                    "items" : {
                      "type" : "string"
                    }
                  },
                  "page" : {
                    "type" : "integer",
                    "description" : "Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.",
                    "example" : 0
                  },
                  "pageSize" : {
                    "type" : "integer",
                    "description" : "The size of the pages to be returned. Default is `1000`.",
                    "example" : 1000
                  },
                  "programDbIds" : {
                    "type" : "array",
                    "description" : "A BrAPI Program represents the high level organization or group who is responsible for conducting trials and studies. Things like Breeding Programs and Funded Projects are considered BrAPI Programs. \n\nUse this parameter to only return results associated with the given programs. \n\nUse `GET /programs` to find the list of available programs on a server.",
                    "example" : [ "8f5de35b", "0e2d4a13" ],
                    "items" : {
                      "type" : "string"
                    }
                  },
                  "programNames" : {
                    "type" : "array",
                    "description" : "Use this parameter to only return results associated with the given program names. Program names are not required to be unique.\n\nUse `GET /programs` to find the list of available programs on a server.",
                    "example" : [ "Better Breeding Program", "Best Breeding Program" ],
                    "items" : {
                      "type" : "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/ImageListResponse"
          },
          "202" : {
            "$ref" : "#/components/responses/202AcceptedSearchResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/search/images/{searchResultsDbId}" : {
      "get" : {
        "tags" : [ "Images" ],
        "summary" : "Get the results of a `Images` search request",
        "description" : "Get the results of a `Images` search request <br/>\nClients should submit a search request using the corresponding `POST /search/images` endpoint.\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse this endpoint to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.\n<br/>\n<br/>\nImage Implementation Notes<br/>\n- `imageURL` should be a complete URL describing the location of the image. There is no BrAPI call for retrieving the image content, so it could be on a different path, or a different host.<br/>\n- `descriptiveOntologyTerm` can be thought of as Tags for the image. These could be simple descriptive words, or ontology references, or full ontology URI's.<br/>",
        "parameters" : [ {
          "$ref" : "#/components/parameters/searchResultsDbId"
        }, {
          "$ref" : "#/components/parameters/page"
        }, {
          "$ref" : "#/components/parameters/pageSize"
        }, {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/ImageListResponse"
          },
          "202" : {
            "$ref" : "#/components/responses/202AcceptedSearchResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/404NotFound"
          }
        }
      }
    },
    "/search/lists" : {
      "post" : {
        "tags" : [ "Lists" ],
        "summary" : "Submit a search request for Lists",
        "description" : "Submit a search request for Lists <br/>\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse the corresponding `GET /search/lists/{searchResultsDbId}` to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
        "parameters" : [ {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ListSearchRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/ListsListResponse"
          },
          "202" : {
            "$ref" : "#/components/responses/202AcceptedSearchResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/search/lists/{searchResultsDbId}" : {
      "get" : {
        "tags" : [ "Lists" ],
        "summary" : "Get the results of a `List` search request",
        "description" : "Get the results of a `List` search request <br/>\nClients should submit a search request using the corresponding `POST /search/lists` endpoint.\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse this endpoint to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
        "parameters" : [ {
          "$ref" : "#/components/parameters/searchResultsDbId"
        }, {
          "$ref" : "#/components/parameters/page"
        }, {
          "$ref" : "#/components/parameters/pageSize"
        }, {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/ListsListResponse"
          },
          "202" : {
            "$ref" : "#/components/responses/202AcceptedSearchResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/search/locations" : {
      "post" : {
        "tags" : [ "Locations" ],
        "summary" : "Submit a search request for `Locations`",
        "description" : "Submit a search request for `Locations`<br/>\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse the corresponding `GET /search/locations/{searchResultsDbId}` to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
        "parameters" : [ {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/LocationSearchRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/LocationListResponse"
          },
          "202" : {
            "$ref" : "#/components/responses/202AcceptedSearchResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/search/locations/{searchResultsDbId}" : {
      "get" : {
        "tags" : [ "Locations" ],
        "summary" : "Get the results of a `Locations` search request",
        "description" : "Get the results of a `Locations` search request <br/>\nClients should submit a search request using the corresponding `POST /search/location` endpoint.\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse this endpoint to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
        "parameters" : [ {
          "$ref" : "#/components/parameters/searchResultsDbId"
        }, {
          "$ref" : "#/components/parameters/page"
        }, {
          "$ref" : "#/components/parameters/pageSize"
        }, {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/LocationListResponse"
          },
          "202" : {
            "$ref" : "#/components/responses/202AcceptedSearchResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/search/markerpositions" : {
      "post" : {
        "tags" : [ "Genome Maps" ],
        "summary" : "Submit a search request for `MarkerPositions`",
        "description" : "Submit a search request for `MarkerPositions`<br/>\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse the corresponding `GET /search/markerpositions/{searchResultsDbId}` to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
        "parameters" : [ {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MarkerPositionSearchRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/MarkerPositionListResponse"
          },
          "202" : {
            "$ref" : "#/components/responses/202AcceptedSearchResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/search/markerpositions/{searchResultsDbId}" : {
      "get" : {
        "tags" : [ "Genome Maps" ],
        "summary" : "Get the results of a `MarkerPositions` search request",
        "description" : "Get the results of a `MarkerPositions` search request <br/>\nClients should submit a search request using the corresponding `POST /search/markerpositions` endpoint.\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse this endpoint to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
        "parameters" : [ {
          "$ref" : "#/components/parameters/searchResultsDbId"
        }, {
          "$ref" : "#/components/parameters/page"
        }, {
          "$ref" : "#/components/parameters/pageSize"
        }, {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/MarkerPositionListResponse"
          },
          "202" : {
            "$ref" : "#/components/responses/202AcceptedSearchResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/search/observations" : {
      "post" : {
        "tags" : [ "Observations" ],
        "summary" : "Submit a search request for `Observations`",
        "description" : "Submit a search request for `Observations`<br/>\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse the corresponding `GET /search/observations/{searchResultsDbId}` to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
        "parameters" : [ {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "object",
                "properties" : {
                  "commonCropNames" : {
                    "type" : "array",
                    "description" : "The BrAPI Common Crop Name is the simple, generalized, widely accepted name of the organism being researched. It is most often used in multi-crop systems where digital resources need to be divided at a high level. Things like 'Maize', 'Wheat', and 'Rice' are examples of common crop names.\n\nUse this parameter to only return results associated with the given crops. \n\nUse `GET /commoncropnames` to find the list of available crops on a server.",
                    "example" : [ "Tomatillo", "Paw Paw" ],
                    "items" : {
                      "type" : "string"
                    }
                  },
                  "externalReferenceIDs" : {
                    "type" : "array",
                    "description" : "**Deprecated in v2.1** Please use `externalReferenceIds`. Github issue number #460 \n<br>List of external reference IDs. Could be a simple strings or a URIs. (use with `externalReferenceSources` parameter)",
                    "example" : [ "doi:10.155454/12341234", "14a19841" ],
                    "deprecated" : true,
                    "items" : {
                      "type" : "string"
                    }
                  },
                  "externalReferenceIds" : {
                    "type" : "array",
                    "description" : "List of external reference IDs. Could be a simple strings or a URIs. (use with `externalReferenceSources` parameter)",
                    "example" : [ "doi:10.155454/12341234", "14a19841" ],
                    "items" : {
                      "type" : "string"
                    }
                  },
                  "externalReferenceSources" : {
                    "type" : "array",
                    "description" : "List of identifiers for the source system or database of an external reference (use with `externalReferenceIDs` parameter)",
                    "example" : [ "DOI", "Field App Name" ],
                    "items" : {
                      "type" : "string"
                    }
                  },
                  "germplasmDbIds" : {
                    "type" : "array",
                    "description" : "List of IDs which uniquely identify germplasm to search for",
                    "example" : [ "e9c6edd7", "1b1df4a6" ],
                    "items" : {
                      "type" : "string"
                    }
                  },
                  "germplasmNames" : {
                    "type" : "array",
                    "description" : "List of human readable names to identify germplasm to search for",
                    "example" : [ "A0000003", "A0000477" ],
                    "items" : {
                      "type" : "string"
                    }
                  },
                  "locationDbIds" : {
                    "type" : "array",
                    "description" : "The location ids to search for",
                    "example" : [ "b28911cf", "5071d1e4" ],
                    "items" : {
                      "type" : "string"
                    }
                  },
                  "locationNames" : {
                    "type" : "array",
                    "description" : "A human readable names to search for",
                    "example" : [ "Location Alpha", "The Large Hadron Collider" ],
                    "items" : {
                      "type" : "string"
                    }
                  },
                  "observationDbIds" : {
                    "type" : "array",
                    "description" : "The unique id of an Observation",
                    "nullable" : true,
                    "example" : [ "6a4a59d8", "3ff067e0" ],
                    "items" : {
                      "type" : "string"
                    }
                  },
                  "observationLevelRelationships" : {
                    "type" : "array",
                    "description" : "Searches for values in ObservationUnit->observationUnitPosition->observationLevelRelationships",
                    "nullable" : true,
                    "example" : [ {
                      "levelCode" : "Field_1",
                      "levelName" : "field"
                    } ],
                    "items" : {
                      "title" : "ObservationUnitLevelRelationship",
                      "type" : "object",
                      "properties" : {
                        "levelCode" : {
                          "type" : "string",
                          "description" : "An ID code or number to represent a real thing that may or may not be an an observation unit.\n<br/>For example, if the 'levelName' is 'plot', then the 'levelCode' would be the plot number or plot barcode. If this plot is also considered an ObservationUnit, then the appropriate observationUnitDbId should also be recorded.\n<br/>If the 'levelName' is 'field', then the 'levelCode' might be something like '3' or 'F3' to indicate the third field at a research station. ",
                          "nullable" : true,
                          "example" : "Plot_123"
                        },
                        "levelName" : {
                          "type" : "string",
                          "description" : "A name for this level \n\n**Standard Level Names: study, field, entry, rep, block, sub-block, plot, sub-plot, plant, pot, sample** \n\nFor more information on Observation Levels, please review the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Observation_Levels\">Observation Levels documentation</a>. ",
                          "nullable" : true,
                          "example" : "plot"
                        },
                        "levelOrder" : {
                          "type" : "integer",
                          "description" : "`levelOrder` defines where that level exists in the hierarchy of levels. `levelOrder`'s lower numbers \nare at the top of the hierarchy (ie field -> 1) and higher numbers are at the bottom of the hierarchy (ie plant -> 9). \n\nFor more information on Observation Levels, please review the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Observation_Levels\">Observation Levels documentation</a>. ",
                          "nullable" : true,
                          "example" : 2
                        },
                        "observationUnitDbId" : {
                          "type" : "string",
                          "description" : "The ID which uniquely identifies an observation unit\n<br/>If this level has on ObservationUnit associated with it, record the observationUnitDbId here. This is intended to construct a strict hierarchy of observationUnits. \n<br/>If there is no ObservationUnit associated with this level, this field can set to NULL or omitted from the response.",
                          "nullable" : true,
                          "example" : "5ab883e9"
                        }
                      },
                      "description" : "Observation levels indicate the granularity level at which the measurements are taken. `levelName` \ndefines the level, `levelOrder` defines where that level exists in the hierarchy of levels. \n`levelOrder`s lower numbers are at the top of the hierarchy (ie field > 0) and higher numbers are \nat the bottom of the hierarchy (ie plant > 6). `levelCode` is an ID code for this level tag. Identify \nthis observation unit by each level of the hierarchy where it exists. \n\nFor more information on Observation Levels, please review the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Observation_Levels\">Observation Levels documentation</a>. \n\n**Standard Level Names: study, field, entry, rep, block, sub-block, plot, sub-plot, plant, pot, sample** "
                    }
                  },
                  "observationLevels" : {
                    "type" : "array",
                    "description" : "Searches for values in ObservationUnit->observationUnitPosition->observationLevel",
                    "nullable" : true,
                    "example" : [ {
                      "levelCode" : "Plot_123",
                      "levelName" : "plot"
                    }, {
                      "levelCode" : "Plot_456",
                      "levelName" : "plot"
                    }, {
                      "levelCode" : "Plot_789",
                      "levelName" : "plot"
                    } ],
                    "items" : {
                      "title" : "ObservationUnitLevel",
                      "type" : "object",
                      "properties" : {
                        "levelCode" : {
                          "type" : "string",
                          "description" : "An ID code or number to represent a real thing that may or may not be an an observation unit.\n<br/>For example, if the 'levelName' is 'plot', then the 'levelCode' would be the plot number or plot barcode. If this plot is also considered an ObservationUnit, then the appropriate observationUnitDbId should also be recorded.\n<br/>If the 'levelName' is 'field', then the 'levelCode' might be something like '3' or 'F3' to indicate the third field at a research station. ",
                          "nullable" : true,
                          "example" : "Plot_123"
                        },
                        "levelName" : {
                          "type" : "string",
                          "description" : "A name for this level \n\n**Standard Level Names: study, field, entry, rep, block, sub-block, plot, sub-plot, plant, pot, sample** \n\nFor more information on Observation Levels, please review the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Observation_Levels\">Observation Levels documentation</a>. ",
                          "nullable" : true,
                          "example" : "plot"
                        },
                        "levelOrder" : {
                          "type" : "integer",
                          "description" : "`levelOrder` defines where that level exists in the hierarchy of levels. `levelOrder`'s lower numbers \nare at the top of the hierarchy (ie field -> 1) and higher numbers are at the bottom of the hierarchy (ie plant -> 9). \n\nFor more information on Observation Levels, please review the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Observation_Levels\">Observation Levels documentation</a>. ",
                          "nullable" : true,
                          "example" : 2
                        }
                      },
                      "description" : "Observation levels indicate the granularity level at which the measurements are taken. `levelName` \ndefines the level, `levelOrder` defines where that level exists in the hierarchy of levels. \n`levelOrder`s lower numbers are at the top of the hierarchy (ie field > 0) and higher numbers are \nat the bottom of the hierarchy (ie plant > 6). `levelCode` is an ID code for this level tag. Identify \nthis observation unit by each level of the hierarchy where it exists. \n\nFor more information on Observation Levels, please review the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Observation_Levels\">Observation Levels documentation</a>. \n\n**Standard Level Names: study, field, entry, rep, block, sub-block, plot, sub-plot, plant, pot, sample** "
                    }
                  },
                  "observationTimeStampRangeEnd" : {
                    "type" : "string",
                    "description" : "Timestamp range end",
                    "format" : "date-time",
                    "nullable" : true
                  },
                  "observationTimeStampRangeStart" : {
                    "type" : "string",
                    "description" : "Timestamp range start",
                    "format" : "date-time",
                    "nullable" : true
                  },
                  "observationUnitDbIds" : {
                    "type" : "array",
                    "description" : "The unique id of an Observation Unit",
                    "nullable" : true,
                    "example" : [ "76f559b5", "066bc5d3" ],
                    "items" : {
                      "type" : "string"
                    }
                  },
                  "observationVariableDbIds" : {
                    "type" : "array",
                    "description" : "The DbIds of Variables to search for",
                    "example" : [ "a646187d", "6d23513b" ],
                    "items" : {
                      "type" : "string"
                    }
                  },
                  "observationVariableNames" : {
                    "type" : "array",
                    "description" : "The names of Variables to search for",
                    "example" : [ "Plant Height in meters", "Wheat rust score 1-5" ],
                    "items" : {
                      "type" : "string"
                    }
                  },
                  "observationVariablePUIs" : {
                    "type" : "array",
                    "description" : "The Permanent Unique Identifier of an Observation Variable, usually in the form of a URI",
                    "example" : [ "http://my-traits.com/trait/CO_123:0008012", "http://my-traits.com/trait/CO_123:0007261" ],
                    "items" : {
                      "type" : "string"
                    }
                  },
                  "page" : {
                    "type" : "integer",
                    "description" : "Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.",
                    "example" : 0
                  },
                  "pageSize" : {
                    "type" : "integer",
                    "description" : "The size of the pages to be returned. Default is `1000`.",
                    "example" : 1000
                  },
                  "programDbIds" : {
                    "type" : "array",
                    "description" : "A BrAPI Program represents the high level organization or group who is responsible for conducting trials and studies. Things like Breeding Programs and Funded Projects are considered BrAPI Programs. \n\nUse this parameter to only return results associated with the given programs. \n\nUse `GET /programs` to find the list of available programs on a server.",
                    "example" : [ "8f5de35b", "0e2d4a13" ],
                    "items" : {
                      "type" : "string"
                    }
                  },
                  "programNames" : {
                    "type" : "array",
                    "description" : "Use this parameter to only return results associated with the given program names. Program names are not required to be unique.\n\nUse `GET /programs` to find the list of available programs on a server.",
                    "example" : [ "Better Breeding Program", "Best Breeding Program" ],
                    "items" : {
                      "type" : "string"
                    }
                  },
                  "seasonDbIds" : {
                    "type" : "array",
                    "description" : "The year or Phenotyping campaign of a multi-annual study (trees, grape, ...)",
                    "nullable" : true,
                    "example" : [ "Spring 2018", "Season A" ],
                    "items" : {
                      "type" : "string"
                    }
                  },
                  "studyDbIds" : {
                    "type" : "array",
                    "description" : "List of study identifiers to search for",
                    "example" : [ "cf6c4bd4", "691e69d6" ],
                    "items" : {
                      "type" : "string"
                    }
                  },
                  "studyNames" : {
                    "type" : "array",
                    "description" : "List of study names to filter search results",
                    "example" : [ "The First Bob Study 2017", "Wheat Yield Trial 246" ],
                    "items" : {
                      "type" : "string"
                    }
                  },
                  "trialDbIds" : {
                    "type" : "array",
                    "description" : "The ID which uniquely identifies a trial to search for",
                    "example" : [ "d2593dc2", "9431a731" ],
                    "items" : {
                      "type" : "string"
                    }
                  },
                  "trialNames" : {
                    "type" : "array",
                    "description" : "The human readable name of a trial to search for",
                    "example" : [ "All Yield Trials 2016", "Disease Resistance Study Comparison Group" ],
                    "items" : {
                      "type" : "string"
                    }
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/ObservationListResponse"
          },
          "202" : {
            "$ref" : "#/components/responses/202AcceptedSearchResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/search/observations/{searchResultsDbId}" : {
      "get" : {
        "tags" : [ "Observations" ],
        "summary" : "Get the results of a `Observations` search request",
        "description" : "Get the results of a `Observations` search request <br/>\nClients should submit a search request using the corresponding `POST /search/observations` endpoint.\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse this endpoint to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
        "parameters" : [ {
          "$ref" : "#/components/parameters/acceptHeader"
        }, {
          "$ref" : "#/components/parameters/authorizationHeader"
        }, {
          "$ref" : "#/components/parameters/searchResultsDbId"
        }, {
          "$ref" : "#/components/parameters/page"
        }, {
          "$ref" : "#/components/parameters/pageSize"
        } ],
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/ObservationListResponse"
          },
          "202" : {
            "$ref" : "#/components/responses/202AcceptedSearchResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/search/observationunits" : {
      "post" : {
        "tags" : [ "Observation Units" ],
        "summary" : "Submit a search request for `ObservationUnits`",
        "description" : "Submit a search request for `ObservationUnits`<br/>\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse the corresponding `GET /search/observationunits/{searchResultsDbId}` to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
        "parameters" : [ {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ObservationUnitSearchRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/ObservationUnitListResponse"
          },
          "202" : {
            "$ref" : "#/components/responses/202AcceptedSearchResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/search/observationunits/{searchResultsDbId}" : {
      "get" : {
        "tags" : [ "Observation Units" ],
        "summary" : "Get the results of a `ObservationUnits` search request",
        "description" : "Get the results of a `ObservationUnits` search request <br/>\nClients should submit a search request using the corresponding `POST /search/observationunits` endpoint.\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse this endpoint to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
        "parameters" : [ {
          "$ref" : "#/components/parameters/searchResultsDbId"
        }, {
          "$ref" : "#/components/parameters/page"
        }, {
          "$ref" : "#/components/parameters/pageSize"
        }, {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/ObservationUnitListResponse"
          },
          "202" : {
            "$ref" : "#/components/responses/202AcceptedSearchResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/404NotFound"
          }
        }
      }
    },
    "/search/pedigree" : {
      "post" : {
        "tags" : [ "Pedigree" ],
        "summary" : "Submit a search request for `Pedigree`",
        "description" : "Submit a search request for `Pedigree`<br/>\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse the corresponding `GET /search/germplasm/{searchResultsDbId}` to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
        "parameters" : [ {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PedigreeSearchRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/PedigreeListResponse"
          },
          "202" : {
            "$ref" : "#/components/responses/202AcceptedSearchResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/search/pedigree/{searchResultsDbId}" : {
      "get" : {
        "tags" : [ "Pedigree" ],
        "summary" : "Get the results of a `Pedigree` search request",
        "description" : "Get the results of a `Pedigree` search request <br/>\nClients should submit a search request using the corresponding `POST /search/germplasm` endpoint.\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse this endpoint to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
        "parameters" : [ {
          "$ref" : "#/components/parameters/searchResultsDbId"
        }, {
          "$ref" : "#/components/parameters/page"
        }, {
          "$ref" : "#/components/parameters/pageSize"
        }, {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/PedigreeListResponse"
          },
          "202" : {
            "$ref" : "#/components/responses/202AcceptedSearchResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/404NotFound"
          }
        }
      }
    },
    "/search/people" : {
      "post" : {
        "tags" : [ "People" ],
        "summary" : "Submit a search request for `People`",
        "description" : "Submit a search request for `People`<br/>\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse the corresponding `GET /search/people/{searchResultsDbId}` to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
        "parameters" : [ {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PersonSearchRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/PersonListResponse"
          },
          "202" : {
            "$ref" : "#/components/responses/202AcceptedSearchResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/search/people/{searchResultsDbId}" : {
      "get" : {
        "tags" : [ "People" ],
        "summary" : "Get the results of a `People` search request",
        "description" : "Get the results of a `People` search request <br/>\nClients should submit a search request using the corresponding `POST /search/people` endpoint.\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse this endpoint to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
        "parameters" : [ {
          "$ref" : "#/components/parameters/searchResultsDbId"
        }, {
          "$ref" : "#/components/parameters/page"
        }, {
          "$ref" : "#/components/parameters/pageSize"
        }, {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/PersonListResponse"
          },
          "202" : {
            "$ref" : "#/components/responses/202AcceptedSearchResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/search/plates" : {
      "post" : {
        "tags" : [ "Plates" ],
        "summary" : "Submit a search request for `Plates`",
        "description" : "Submit a search request for `Plates`<br/>\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse the corresponding `GET /search/plates/{searchResultsDbId}` to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
        "parameters" : [ {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PlateSearchRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/PlateListResponse"
          },
          "202" : {
            "$ref" : "#/components/responses/202AcceptedSearchResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/search/plates/{searchResultsDbId}" : {
      "get" : {
        "tags" : [ "Plates" ],
        "summary" : "Get the results of a `Plates` search request",
        "description" : "Get the results of a `Plates` search request <br/>\nClients should submit a search request using the corresponding `POST /search/plates` endpoint.\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse this endpoint to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
        "parameters" : [ {
          "$ref" : "#/components/parameters/searchResultsDbId"
        }, {
          "$ref" : "#/components/parameters/page"
        }, {
          "$ref" : "#/components/parameters/pageSize"
        }, {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/PlateListResponse"
          },
          "202" : {
            "$ref" : "#/components/responses/202AcceptedSearchResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/404NotFound"
          }
        }
      }
    },
    "/search/programs" : {
      "post" : {
        "tags" : [ "Programs" ],
        "summary" : "Submit a search request for `Programs`",
        "description" : "Submit a search request for `Programs`<br/>\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse the corresponding `GET /search/programs/{searchResultsDbId}` to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
        "parameters" : [ {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ProgramSearchRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/ProgramListResponse"
          },
          "202" : {
            "$ref" : "#/components/responses/202AcceptedSearchResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/search/programs/{searchResultsDbId}" : {
      "get" : {
        "tags" : [ "Programs" ],
        "summary" : "Get the results of a `Programs` search request",
        "description" : "Get the results of a `Programs` search request <br/>\nClients should submit a search request using the corresponding `POST /search/programs` endpoint.\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse this endpoint to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
        "parameters" : [ {
          "$ref" : "#/components/parameters/searchResultsDbId"
        }, {
          "$ref" : "#/components/parameters/page"
        }, {
          "$ref" : "#/components/parameters/pageSize"
        }, {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/ProgramListResponse"
          },
          "202" : {
            "$ref" : "#/components/responses/202AcceptedSearchResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/404NotFound"
          }
        }
      }
    },
    "/search/references" : {
      "post" : {
        "tags" : [ "References" ],
        "summary" : "Submit a search request for `References`",
        "description" : "Submit a search request for `References`<br/>\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse the corresponding `GET /search/references/{searchResultsDbId}` to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
        "parameters" : [ {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "requestBody" : {
          "description" : "References Search request",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ReferencesSearchRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/ReferencesListResponse"
          },
          "202" : {
            "$ref" : "#/components/responses/202AcceptedSearchResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/search/references/{searchResultsDbId}" : {
      "get" : {
        "tags" : [ "References" ],
        "summary" : "Get the results of a `References` search request",
        "description" : "Get the results of a `References` search request <br/>\nClients should submit a search request using the corresponding `POST /search/references` endpoint.\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse this endpoint to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
        "parameters" : [ {
          "$ref" : "#/components/parameters/searchResultsDbId"
        }, {
          "$ref" : "#/components/parameters/page"
        }, {
          "$ref" : "#/components/parameters/pageSize"
        }, {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/ReferencesListResponse"
          },
          "202" : {
            "$ref" : "#/components/responses/202AcceptedSearchResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/search/referencesets" : {
      "post" : {
        "tags" : [ "Reference Sets" ],
        "summary" : "Submit a search request for `ReferenceSets`",
        "description" : "Submit a search request for `ReferenceSets`<br/>\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse the corresponding `GET /search/referencesets/{searchResultsDbId}` to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
        "parameters" : [ {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ReferenceSetsSearchRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/ReferenceSetsListResponse"
          },
          "202" : {
            "$ref" : "#/components/responses/202AcceptedSearchResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/search/referencesets/{searchResultsDbId}" : {
      "get" : {
        "tags" : [ "Reference Sets" ],
        "summary" : "Get the results of a `ReferenceSets` search request",
        "description" : "Get the results of a `ReferenceSets` search request <br/>\nClients should submit a search request using the corresponding `POST /search/referencesets` endpoint.\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse this endpoint to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
        "parameters" : [ {
          "$ref" : "#/components/parameters/searchResultsDbId"
        }, {
          "$ref" : "#/components/parameters/page"
        }, {
          "$ref" : "#/components/parameters/pageSize"
        }, {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/ReferenceSetsListResponse"
          },
          "202" : {
            "$ref" : "#/components/responses/202AcceptedSearchResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/search/samples" : {
      "post" : {
        "tags" : [ "Samples" ],
        "summary" : "Submit a search request for `Samples`",
        "description" : "Submit a search request for `Samples`<br/>\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse the corresponding `GET /search/samples/{searchResultsDbId}` to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
        "parameters" : [ {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SampleSearchRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/SampleListResponse"
          },
          "202" : {
            "$ref" : "#/components/responses/202AcceptedSearchResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/search/samples/{searchResultsDbId}" : {
      "get" : {
        "tags" : [ "Samples" ],
        "summary" : "Get the results of a `Samples` search request",
        "description" : "Get the results of a `Samples` search request <br/>\nClients should submit a search request using the corresponding `POST /search/samples` endpoint.\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse this endpoint to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
        "parameters" : [ {
          "$ref" : "#/components/parameters/searchResultsDbId"
        }, {
          "$ref" : "#/components/parameters/page"
        }, {
          "$ref" : "#/components/parameters/pageSize"
        }, {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/SampleListResponse"
          },
          "202" : {
            "$ref" : "#/components/responses/202AcceptedSearchResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/404NotFound"
          }
        }
      }
    },
    "/search/studies" : {
      "post" : {
        "tags" : [ "Studies" ],
        "summary" : "Submit a search request for `Studies`",
        "description" : "Submit a search request for `Studies`<br/>\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse the corresponding `GET /search/studies/{searchResultsDbId}` to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
        "parameters" : [ {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "requestBody" : {
          "description" : "Study Search request",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/StudySearchRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/StudyListResponse"
          },
          "202" : {
            "$ref" : "#/components/responses/202AcceptedSearchResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/search/studies/{searchResultsDbId}" : {
      "get" : {
        "tags" : [ "Studies" ],
        "summary" : "Get the results of a `Studies` search request",
        "description" : "Get the results of a `Studies` search request <br/>\nClients should submit a search request using the corresponding `POST /search/studies` endpoint.\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse this endpoint to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
        "parameters" : [ {
          "$ref" : "#/components/parameters/searchResultsDbId"
        }, {
          "$ref" : "#/components/parameters/page"
        }, {
          "$ref" : "#/components/parameters/pageSize"
        }, {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/StudyListResponse"
          },
          "202" : {
            "$ref" : "#/components/responses/202AcceptedSearchResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/404NotFound"
          }
        }
      }
    },
    "/search/trials" : {
      "post" : {
        "tags" : [ "Trials" ],
        "summary" : "Submit a search request for `Trials`",
        "description" : "Submit a search request for `Trials`<br/>\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse the corresponding `GET /search/trials/{searchResultsDbId}` to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
        "parameters" : [ {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TrialSearchRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/TrialListResponse"
          },
          "202" : {
            "$ref" : "#/components/responses/202AcceptedSearchResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/search/trials/{searchResultsDbId}" : {
      "get" : {
        "tags" : [ "Trials" ],
        "summary" : "Get the results of a `Trials` search request",
        "description" : "Get the results of a `Trials` search request <br/>\nClients should submit a search request using the corresponding `POST /search/trials` endpoint.\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse this endpoint to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
        "parameters" : [ {
          "$ref" : "#/components/parameters/searchResultsDbId"
        }, {
          "$ref" : "#/components/parameters/page"
        }, {
          "$ref" : "#/components/parameters/pageSize"
        }, {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/TrialListResponse"
          },
          "202" : {
            "$ref" : "#/components/responses/202AcceptedSearchResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/404NotFound"
          }
        }
      }
    },
    "/search/variables" : {
      "post" : {
        "tags" : [ "Observation Variables" ],
        "summary" : "Submit a search request for Observation `Variables`",
        "description" : "Submit a search request for Observation `Variables`<br/>\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse the corresponding `GET /search/variables/{searchResultsDbId}` to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
        "parameters" : [ {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ObservationVariableSearchRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/ObservationVariableListResponse"
          },
          "202" : {
            "$ref" : "#/components/responses/202AcceptedSearchResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/search/variables/{searchResultsDbId}" : {
      "get" : {
        "tags" : [ "Observation Variables" ],
        "summary" : "Get the results of a Observation `variables` search request",
        "description" : "Get the results of a Observation `variables` search request <br/>\nClients should submit a search request using the corresponding `POST /search/variables` endpoint.\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse this endpoint to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
        "parameters" : [ {
          "$ref" : "#/components/parameters/searchResultsDbId"
        }, {
          "$ref" : "#/components/parameters/page"
        }, {
          "$ref" : "#/components/parameters/pageSize"
        }, {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/ObservationVariableListResponse"
          },
          "202" : {
            "$ref" : "#/components/responses/202AcceptedSearchResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/404NotFound"
          }
        }
      }
    },
    "/search/variants" : {
      "post" : {
        "tags" : [ "Variants" ],
        "summary" : "Submit a search request for `Variants`",
        "description" : "Submit a search request for `Variants`<br/>\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse the corresponding `GET /search/variants/{searchResultsDbId}` to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.\n<br/>\n<br/>\n<strong>NOTE:</strong> This endpoint uses Token based pagination. Please Review the \n<a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Pagination\">Pagination documentation</a> for additional implementation details.",
        "parameters" : [ {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "requestBody" : {
          "description" : "Study Search request",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/variantsSearchRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/VariantsListResponse"
          },
          "202" : {
            "$ref" : "#/components/responses/202AcceptedSearchResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/search/variants/{searchResultsDbId}" : {
      "get" : {
        "tags" : [ "Variants" ],
        "summary" : "Get the results of a `Variants` search request",
        "description" : "Get the results of a `Variants` search request <br/>\nClients should submit a search request using the corresponding `POST /search/variants` endpoint.\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse this endpoint to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.\n<br/>",
        "parameters" : [ {
          "$ref" : "#/components/parameters/searchResultsDbId"
        }, {
          "$ref" : "#/components/parameters/pageToken"
        }, {
          "$ref" : "#/components/parameters/page"
        }, {
          "$ref" : "#/components/parameters/pageSize"
        }, {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/VariantsListResponse"
          },
          "202" : {
            "$ref" : "#/components/responses/202AcceptedSearchResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/search/variantsets" : {
      "post" : {
        "tags" : [ "Variant Sets" ],
        "summary" : "Submit a search request for `VariantSets`",
        "description" : "Submit a search request for `VariantSets`<br/>\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse the corresponding `GET /search/variantsets/{searchResultsDbId}` to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
        "parameters" : [ {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "requestBody" : {
          "description" : "Study Search request",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/VariantSetsSearchRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/VariantSetsListResponse"
          },
          "202" : {
            "$ref" : "#/components/responses/202AcceptedSearchResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/search/variantsets/{searchResultsDbId}" : {
      "get" : {
        "tags" : [ "Variant Sets" ],
        "summary" : "Get the results of a `VariantSets` search request",
        "description" : "Get the results of a `VariantSets` search request <br/>\nClients should submit a search request using the corresponding `POST /search/variantsets` endpoint.\nSearch requests allow a client to send a complex query for data. However, the server may not respond with the search results immediately. \nIf a server needs more time to process the request, it might respond with a `searchResultsDbId`. \nUse this endpoint to retrieve the results of the search. <br/> \nReview the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Search_Services#POST_Search_Entity\">Search Services documentation</a> for additional implementation details.",
        "parameters" : [ {
          "$ref" : "#/components/parameters/searchResultsDbId"
        }, {
          "$ref" : "#/components/parameters/page"
        }, {
          "$ref" : "#/components/parameters/pageSize"
        }, {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/VariantSetsListResponse"
          },
          "202" : {
            "$ref" : "#/components/responses/202AcceptedSearchResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/seasons" : {
      "get" : {
        "tags" : [ "Seasons" ],
        "summary" : "Get the Seasons",
        "description" : "Call to retrieve all seasons in the database.\n\nA season is made of 2 parts; the primary year and a term which defines a segment of the year. \nThis could be a traditional season, like \"Spring\" or \"Summer\" or this could be a month, like \n\"May\" or \"June\" or this could be an arbitrary season name which is meaningful to the breeding \nprogram like \"PlantingTime_3\" or \"Season E\"",
        "parameters" : [ {
          "name" : "seasonDbId",
          "in" : "query",
          "description" : "The unique identifier for a season. For backward compatibility it can be a string like '2012', '1957-2004'",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "b230a1d2, Spring_2017, 3"
        }, {
          "name" : "season",
          "in" : "query",
          "description" : "The term to describe a given season. Example \"Spring\" OR \"May\" OR \"Planting_Time_7\".",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "Spring"
        }, {
          "name" : "seasonName",
          "in" : "query",
          "description" : "The term to describe a given season. Example \"Spring\" OR \"May\" OR \"Planting_Time_7\".",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "Spring"
        }, {
          "name" : "year",
          "in" : "query",
          "description" : "The 4 digit year of a season. Example \"2017\"",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          },
          "example" : 2017
        }, {
          "$ref" : "#/components/parameters/page"
        }, {
          "$ref" : "#/components/parameters/pageSize"
        }, {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/SeasonListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      },
      "post" : {
        "tags" : [ "Seasons" ],
        "summary" : "POST new Seasons",
        "description" : "Add new season entries to the database",
        "parameters" : [ {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/Season"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/SeasonListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/seasons/{seasonDbId}" : {
      "get" : {
        "tags" : [ "Seasons" ],
        "summary" : "Get the a single Season",
        "description" : "Get the a single Season",
        "parameters" : [ {
          "name" : "seasonDbId",
          "in" : "path",
          "description" : "The unique identifier for a season. For backward compatibility it can be a string like '2012', '1957-2004'",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          },
          "example" : "b230a1d2, Spring_2017, 3"
        }, {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/SeasonSingleResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      },
      "put" : {
        "tags" : [ "Seasons" ],
        "summary" : "Update existing Seasons",
        "description" : "Update existing Seasons",
        "parameters" : [ {
          "name" : "seasonDbId",
          "in" : "path",
          "description" : "The unique identifier for a season. For backward compatibility it can be a string like '2012', '1957-2004'",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          },
          "example" : "b230a1d2, Spring_2017, 3"
        }, {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Season"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/SeasonSingleResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/seedlots" : {
      "get" : {
        "tags" : [ "Seed Lots" ],
        "summary" : "Get a filtered list of Seed Lot descriptions",
        "description" : "Get a filtered list of Seed Lot descriptions available in a system.",
        "parameters" : [ {
          "name" : "seedLotDbId",
          "in" : "query",
          "description" : "Unique id for a seed lot on this server",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "crossDbId",
          "in" : "query",
          "description" : "Search for Cross with this unique id",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "crossName",
          "in" : "query",
          "description" : "Search for Cross with this human readable name",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "$ref" : "#/components/parameters/commonCropName"
        }, {
          "$ref" : "#/components/parameters/programDbId"
        }, {
          "$ref" : "#/components/parameters/germplasmDbId"
        }, {
          "$ref" : "#/components/parameters/germplasmName"
        }, {
          "$ref" : "#/components/parameters/externalReferenceID"
        }, {
          "$ref" : "#/components/parameters/externalReferenceId"
        }, {
          "$ref" : "#/components/parameters/externalReferenceSource"
        }, {
          "$ref" : "#/components/parameters/page"
        }, {
          "$ref" : "#/components/parameters/pageSize"
        }, {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/SeedLotListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      },
      "post" : {
        "tags" : [ "Seed Lots" ],
        "summary" : "Add new Seed Lot descriptions to a server",
        "description" : "Add new Seed Lot descriptions to a server",
        "parameters" : [ {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/SeedLotNewRequest"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/SeedLotListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/seedlots/transactions" : {
      "get" : {
        "tags" : [ "Seed Lots" ],
        "summary" : "Get a filtered list of Seed Lot Transactions",
        "description" : "Get a filtered list of Seed Lot Transactions",
        "parameters" : [ {
          "name" : "transactionDbId",
          "in" : "query",
          "description" : "Unique id for a transaction on this server",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "seedLotDbId",
          "in" : "query",
          "description" : "Unique id for a seed lot on this server",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "crossDbId",
          "in" : "query",
          "description" : "Search for Cross with this unique id",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "crossName",
          "in" : "query",
          "description" : "Search for Cross with this human readable name",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "$ref" : "#/components/parameters/commonCropName"
        }, {
          "$ref" : "#/components/parameters/programDbId"
        }, {
          "$ref" : "#/components/parameters/germplasmDbId"
        }, {
          "$ref" : "#/components/parameters/germplasmName"
        }, {
          "$ref" : "#/components/parameters/externalReferenceID"
        }, {
          "$ref" : "#/components/parameters/externalReferenceId"
        }, {
          "$ref" : "#/components/parameters/externalReferenceSource"
        }, {
          "$ref" : "#/components/parameters/page"
        }, {
          "$ref" : "#/components/parameters/pageSize"
        }, {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/SeedLotTransactionListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      },
      "post" : {
        "tags" : [ "Seed Lots" ],
        "summary" : "Add new Seed Lot Transaction to be recorded",
        "description" : "Add new Seed Lot Transaction to be recorded",
        "parameters" : [ {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/SeedLotTransactionNewRequest"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/SeedLotTransactionListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/seedlots/{seedLotDbId}" : {
      "get" : {
        "tags" : [ "Seed Lots" ],
        "summary" : "Get a specific Seed Lot",
        "description" : "Get a specific Seed Lot by seedLotDbId",
        "parameters" : [ {
          "name" : "seedLotDbId",
          "in" : "path",
          "description" : "Unique id for a seed lot on this server",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/SeedLotSingleResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/404NotFound"
          }
        }
      },
      "put" : {
        "tags" : [ "Seed Lots" ],
        "summary" : "Update an existing Seed Lot",
        "description" : "Update an existing Seed Lot",
        "parameters" : [ {
          "name" : "seedLotDbId",
          "in" : "path",
          "description" : "Unique id for a seed lot on this server",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SeedLotNewRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/SeedLotSingleResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/404NotFound"
          }
        }
      }
    },
    "/seedlots/{seedLotDbId}/transactions" : {
      "get" : {
        "tags" : [ "Seed Lots" ],
        "summary" : "Get all Transactions related to a specific Seed Lot",
        "description" : "Get all Transactions related to a specific Seed Lot",
        "parameters" : [ {
          "name" : "seedLotDbId",
          "in" : "path",
          "description" : "Unique id for a seed lot on this server",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "transactionDbId",
          "in" : "query",
          "description" : "Unique id for a Transaction that has occurred",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "transactionDirection",
          "in" : "query",
          "description" : "Filter results to only include transactions directed to the specific Seed Lot (TO), away from the specific Seed Lot (FROM), or both (BOTH). The default value for this parameter is BOTH",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "TO", "FROM", "BOTH" ]
          }
        }, {
          "$ref" : "#/components/parameters/page"
        }, {
          "$ref" : "#/components/parameters/pageSize"
        }, {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/SeedLotTransactionListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/404NotFound"
          }
        }
      }
    },
    "/serverinfo" : {
      "get" : {
        "tags" : [ "Server Info" ],
        "summary" : "Get the list of implemented Calls",
        "description" : "Implementation Notes\n\nHaving a consistent structure for the path string of each call is very \nimportant for teams to be able to connect and find errors. Read more on Github.\n\nHere are the rules for the path of each call that should be returned\n\nEvery word in the call path should match the documentation exactly, both in \nspelling and capitalization. Note that path strings are all lower case, but \npath parameters are camel case.\n\nEach path should start relative to \\\"/\\\" and therefore should not include \\\"/\\\"\n\nNo leading or trailing slashes (\\\"/\\\") \n\nPath parameters are wrapped in curly braces (\\\"{}\\\"). The name of the path parameter \nshould be spelled exactly as it is specified in the documentation.\n\nExamples \n\nGOOD   \"call\": \"germplasm/{germplasmDbId}/pedigree\" \n\nBAD    \"call\": \"germplasm/{id}/pedigree\"\n\nBAD    \"call\": \"germplasm/{germplasmDBid}/pedigree\" \n\nBAD    \"call\": \"brapi/v2/germplasm/{germplasmDbId}/pedigree\" \n\nBAD    \"call\": \"/germplasm/{germplasmDbId}/pedigree/\" \n\nBAD    \"call\": \"germplasm/<germplasmDbId>/pedigree\"",
        "parameters" : [ {
          "name" : "contentType",
          "in" : "query",
          "description" : "Filter the list of endpoints based on the response content type.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "$ref" : "#/components/schemas/ContentTypes"
          }
        }, {
          "name" : "dataType",
          "in" : "query",
          "description" : "**Deprecated in v2.1** Please use `contentType`. Github issue number #443\n<br>The data format supported by the call.",
          "required" : false,
          "deprecated" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "$ref" : "#/components/schemas/ContentTypes"
          }
        }, {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "title" : "ServerInfoResponse",
                  "required" : [ "metadata", "result" ],
                  "type" : "object",
                  "properties" : {
                    "@context" : {
                      "$ref" : "#/components/schemas/Context"
                    },
                    "metadata" : {
                      "$ref" : "#/components/schemas/metadata"
                    },
                    "result" : {
                      "$ref" : "#/components/schemas/ServerInfo"
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/studies" : {
      "get" : {
        "tags" : [ "Studies" ],
        "summary" : "Get a filtered list of Studies",
        "description" : "Get list of studies\n\nStartDate and endDate should be ISO-8601 format for dates",
        "parameters" : [ {
          "name" : "studyType",
          "in" : "query",
          "description" : "Filter based on study type unique identifier",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "locationDbId",
          "in" : "query",
          "description" : "Filter by location",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "seasonDbId",
          "in" : "query",
          "description" : "Filter by season or year",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "studyCode",
          "in" : "query",
          "description" : "Filter by study code",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "studyPUI",
          "in" : "query",
          "description" : "Filter by study PUI",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "observationVariableDbId",
          "in" : "query",
          "description" : "Filter by observation variable DbId",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "active",
          "in" : "query",
          "description" : "A flag to indicate if a Study is currently active and ongoing",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "sortBy",
          "in" : "query",
          "description" : "Name of the field to sort by.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "studyDbId", "trialDbId", "programDbId", "locationDbId", "seasonDbId", "studyType", "studyName", "studyLocation", "programName" ]
          }
        }, {
          "name" : "sortOrder",
          "in" : "query",
          "description" : "Sort order direction. Ascending/Descending.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "asc", "ASC", "desc", "DESC" ]
          }
        }, {
          "$ref" : "#/components/parameters/commonCropName"
        }, {
          "$ref" : "#/components/parameters/programDbId"
        }, {
          "$ref" : "#/components/parameters/trialDbId"
        }, {
          "$ref" : "#/components/parameters/studyDbId"
        }, {
          "$ref" : "#/components/parameters/studyName"
        }, {
          "$ref" : "#/components/parameters/germplasmDbId"
        }, {
          "$ref" : "#/components/parameters/externalReferenceID"
        }, {
          "$ref" : "#/components/parameters/externalReferenceId"
        }, {
          "$ref" : "#/components/parameters/externalReferenceSource"
        }, {
          "$ref" : "#/components/parameters/page"
        }, {
          "$ref" : "#/components/parameters/pageSize"
        }, {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/StudyListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      },
      "post" : {
        "tags" : [ "Studies" ],
        "summary" : "Create new Studies.",
        "description" : "Create new studies\n\nImplementation Notes\n\nStartDate and endDate should be ISO-8601 format for dates\n\n`studyDbId` is generated by the server.",
        "parameters" : [ {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/StudyNewRequest"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/StudyListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/studies/{studyDbId}" : {
      "get" : {
        "tags" : [ "Studies" ],
        "summary" : "Get the details for a specific Study",
        "description" : "Retrieve the information of the study required for field data collection\n\nAn additionalInfo field was added to provide a controlled vocabulary for less common data fields.",
        "parameters" : [ {
          "name" : "studyDbId",
          "in" : "path",
          "description" : "Identifier of the study. Usually a number, could be alphanumeric.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/StudySingleResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/404NotFound"
          }
        }
      },
      "put" : {
        "tags" : [ "Studies" ],
        "summary" : "Update an existing Study",
        "description" : "Update an existing Study with new data",
        "parameters" : [ {
          "name" : "studyDbId",
          "in" : "path",
          "description" : "Identifier of the study. Usually a number, could be alphanumeric.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/StudyNewRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/StudySingleResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/404NotFound"
          }
        }
      }
    },
    "/studytypes" : {
      "get" : {
        "tags" : [ "Studies" ],
        "summary" : "Get the Study Types",
        "description" : "Call to retrieve the list of study types.",
        "parameters" : [ {
          "$ref" : "#/components/parameters/page"
        }, {
          "$ref" : "#/components/parameters/pageSize"
        }, {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "title" : "studyTypesResponse",
                  "required" : [ "metadata", "result" ],
                  "type" : "object",
                  "properties" : {
                    "@context" : {
                      "$ref" : "#/components/schemas/Context"
                    },
                    "metadata" : {
                      "$ref" : "#/components/schemas/metadata"
                    },
                    "result" : {
                      "required" : [ "data" ],
                      "type" : "object",
                      "properties" : {
                        "data" : {
                          "type" : "array",
                          "description" : "The list of all StudyTypes available on a given server.",
                          "example" : [ "Crossing Nursery", "Yield study" ],
                          "items" : {
                            "type" : "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/traits" : {
      "get" : {
        "tags" : [ "Traits" ],
        "summary" : "Get the Traits",
        "description" : "Call to retrieve a list of traits available in the system and their associated variables.\n\nAn Observation Variable has 3 critical parts; A Trait being observed, a Method for making the observation, and a Scale on which the observation can be measured and compared with other observations.'",
        "parameters" : [ {
          "name" : "traitDbId",
          "in" : "query",
          "description" : "The unique identifier for a trait",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "observationVariableDbId",
          "in" : "query",
          "description" : "The unique identifier for an observation variable",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "$ref" : "#/components/parameters/ontologyDbId"
        }, {
          "$ref" : "#/components/parameters/commonCropName"
        }, {
          "$ref" : "#/components/parameters/programDbId"
        }, {
          "$ref" : "#/components/parameters/externalReferenceID"
        }, {
          "$ref" : "#/components/parameters/externalReferenceId"
        }, {
          "$ref" : "#/components/parameters/externalReferenceSource"
        }, {
          "$ref" : "#/components/parameters/page"
        }, {
          "$ref" : "#/components/parameters/pageSize"
        }, {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/TraitListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      },
      "post" : {
        "tags" : [ "Traits" ],
        "summary" : "Add new Traits",
        "description" : "Create new trait objects in the database",
        "parameters" : [ {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/TraitNewRequest"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/TraitListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/traits/{traitDbId}" : {
      "get" : {
        "tags" : [ "Traits" ],
        "summary" : "Get the details of a specific Trait",
        "description" : "Retrieve the details of a single trait\n\nAn Observation Variable has 3 critical parts: A Trait being observed, a Method for making the observation, and a Scale on which the observation can be measured and compared with other observations.",
        "parameters" : [ {
          "name" : "traitDbId",
          "in" : "path",
          "description" : "Id of the trait to retrieve details of.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/TraitSingleResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/404NotFound"
          }
        }
      },
      "put" : {
        "tags" : [ "Traits" ],
        "summary" : "Update an existing Trait",
        "description" : "Update an existing trait",
        "parameters" : [ {
          "name" : "traitDbId",
          "in" : "path",
          "description" : "Id of the trait to retrieve details of.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TraitNewRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/TraitSingleResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/404NotFound"
          }
        }
      }
    },
    "/trials" : {
      "get" : {
        "tags" : [ "Trials" ],
        "summary" : "Get a filtered list of Trials",
        "description" : "Retrieve a filtered list of breeding Trials. A Trial is a collection of Studies",
        "parameters" : [ {
          "name" : "active",
          "in" : "query",
          "description" : "A flag to indicate if a Trial is currently active and ongoing",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "contactDbId",
          "in" : "query",
          "description" : "Contact entities associated with this trial",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "locationDbId",
          "in" : "query",
          "description" : "Filter by location",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "searchDateRangeStart",
          "in" : "query",
          "description" : "The start of the overlapping search date range. `searchDateRangeStart` must be before `searchDateRangeEnd`.\n\nReturn a Trial entity if any of the following cases are true\n\n- `searchDateRangeStart` is before `trial.endDate` AND `searchDateRangeEnd` is null \n\n- `searchDateRangeStart` is before `trial.endDate` AND `searchDateRangeEnd` is after `trial.startDate`\n\n- `searchDateRangeEnd` is after `trial.startDate` AND `searchDateRangeStart` is null\n\n- `searchDateRangeEnd` is after `trial.startDate` AND `searchDateRangeStart` is before `trial.endDate`",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date"
          }
        }, {
          "name" : "searchDateRangeEnd",
          "in" : "query",
          "description" : "The start of the overlapping search date range. `searchDateRangeStart` must be before `searchDateRangeEnd`.\n\nReturn a Trial entity if any of the following cases are true\n\n- `searchDateRangeStart` is before `trial.endDate` AND `searchDateRangeEnd` is null \n\n- `searchDateRangeStart` is before `trial.endDate` AND `searchDateRangeEnd` is after `trial.startDate`\n\n- `searchDateRangeEnd` is after `trial.startDate` AND `searchDateRangeStart` is null\n\n- `searchDateRangeEnd` is after `trial.startDate` AND `searchDateRangeStart` is before `trial.endDate`",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "format" : "date"
          }
        }, {
          "name" : "trialPUI",
          "in" : "query",
          "description" : "Filter by trial PUI",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "sortBy",
          "in" : "query",
          "description" : "Sort order. Name of the field to sort by.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "trialDbId", "trialName", "programDbId", "programName", "locationDbId", "startDate", "endDate" ]
          }
        }, {
          "name" : "sortOrder",
          "in" : "query",
          "description" : "Sort order direction: asc/desc",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string",
            "enum" : [ "asc", "ASC", "desc", "DESC" ]
          }
        }, {
          "$ref" : "#/components/parameters/commonCropName"
        }, {
          "$ref" : "#/components/parameters/programDbId"
        }, {
          "$ref" : "#/components/parameters/trialDbId"
        }, {
          "$ref" : "#/components/parameters/trialName"
        }, {
          "$ref" : "#/components/parameters/studyDbId"
        }, {
          "$ref" : "#/components/parameters/externalReferenceID"
        }, {
          "$ref" : "#/components/parameters/externalReferenceId"
        }, {
          "$ref" : "#/components/parameters/externalReferenceSource"
        }, {
          "$ref" : "#/components/parameters/page"
        }, {
          "$ref" : "#/components/parameters/pageSize"
        }, {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/TrialListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      },
      "post" : {
        "tags" : [ "Trials" ],
        "summary" : "Create new trials",
        "description" : "Create new breeding Trials. A Trial represents a collection of related Studies. `trialDbId` is generated by the server.",
        "parameters" : [ {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/TrialNewRequest"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/TrialListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/trials/{trialDbId}" : {
      "get" : {
        "tags" : [ "Trials" ],
        "summary" : "Get the details of a specific Trial",
        "description" : "Get the details of a specific Trial",
        "parameters" : [ {
          "name" : "trialDbId",
          "in" : "path",
          "description" : "The internal trialDbId",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/TrialSingleResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/404NotFound"
          }
        }
      },
      "put" : {
        "tags" : [ "Trials" ],
        "summary" : "Update the details of an existing Trial",
        "description" : "Update the details of an existing Trial",
        "parameters" : [ {
          "name" : "trialDbId",
          "in" : "path",
          "description" : "The internal trialDbId",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TrialNewRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/TrialSingleResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/404NotFound"
          }
        }
      }
    },
    "/variables" : {
      "get" : {
        "tags" : [ "Observation Variables" ],
        "summary" : "Get the Observation Variables",
        "description" : "Call to retrieve a list of observationVariables available in the system.",
        "parameters" : [ {
          "name" : "observationVariableDbId",
          "in" : "query",
          "description" : "Variable's unique ID",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "observationVariableName",
          "in" : "query",
          "description" : "Human readable name of an Observation Variable",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "observationVariablePUI",
          "in" : "query",
          "description" : "The Permanent Unique Identifier of a Observation Variable, usually in the form of a URI",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "traitClass",
          "in" : "query",
          "description" : "Variable's trait class (phenological, physiological, morphological, etc.)",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "$ref" : "#/components/parameters/methodDbId"
        }, {
          "$ref" : "#/components/parameters/methodName"
        }, {
          "$ref" : "#/components/parameters/methodPUI"
        }, {
          "$ref" : "#/components/parameters/scaleDbId"
        }, {
          "$ref" : "#/components/parameters/scaleName"
        }, {
          "$ref" : "#/components/parameters/scalePUI"
        }, {
          "$ref" : "#/components/parameters/traitDbId"
        }, {
          "$ref" : "#/components/parameters/traitName"
        }, {
          "$ref" : "#/components/parameters/traitPUI"
        }, {
          "$ref" : "#/components/parameters/ontologyDbId"
        }, {
          "$ref" : "#/components/parameters/commonCropName"
        }, {
          "$ref" : "#/components/parameters/programDbId"
        }, {
          "$ref" : "#/components/parameters/trialDbId"
        }, {
          "$ref" : "#/components/parameters/studyDbId"
        }, {
          "$ref" : "#/components/parameters/externalReferenceID"
        }, {
          "$ref" : "#/components/parameters/externalReferenceId"
        }, {
          "$ref" : "#/components/parameters/externalReferenceSource"
        }, {
          "$ref" : "#/components/parameters/page"
        }, {
          "$ref" : "#/components/parameters/pageSize"
        }, {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/ObservationVariableListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      },
      "post" : {
        "tags" : [ "Observation Variables" ],
        "summary" : "Add new Observation Variables",
        "description" : "Add new Observation Variables to the system.",
        "parameters" : [ {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/ObservationVariableNewRequest"
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/ObservationVariableListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/variables/{observationVariableDbId}" : {
      "get" : {
        "tags" : [ "Observation Variables" ],
        "summary" : "Get the details for a specific Observation Variable",
        "description" : "Retrieve variable details",
        "parameters" : [ {
          "name" : "observationVariableDbId",
          "in" : "path",
          "description" : "string id of the variable",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/ObservationVariableSingleResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/404NotFound"
          }
        }
      },
      "put" : {
        "tags" : [ "Observation Variables" ],
        "summary" : "Update an existing Observation Variable",
        "description" : "Update an existing Observation Variable",
        "parameters" : [ {
          "name" : "observationVariableDbId",
          "in" : "path",
          "description" : "string id of the variable",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ObservationVariableNewRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/ObservationVariableSingleResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/404NotFound"
          }
        }
      }
    },
    "/variants" : {
      "get" : {
        "tags" : [ "Variants" ],
        "summary" : "Gets a filtered list of `Variants`.",
        "description" : "Gets a filtered list of `Variants`.",
        "parameters" : [ {
          "name" : "variantDbId",
          "in" : "query",
          "description" : "The ID which uniquely identifies a `Variant`",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "variantSetDbId",
          "in" : "query",
          "description" : "The ID which uniquely identifies a `VariantSet`",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "referenceDbId",
          "in" : "query",
          "description" : "The ID which uniquely identifies a `Reference`",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "referenceSetDbId",
          "in" : "query",
          "description" : "The ID which uniquely identifies a `ReferenceSet`",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "$ref" : "#/components/parameters/pageToken"
        }, {
          "$ref" : "#/components/parameters/page"
        }, {
          "$ref" : "#/components/parameters/pageSize"
        }, {
          "$ref" : "#/components/parameters/externalReferenceId"
        }, {
          "$ref" : "#/components/parameters/externalReferenceSource"
        }, {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/VariantsListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/variants/{variantDbId}" : {
      "get" : {
        "tags" : [ "Variants" ],
        "summary" : "Gets a `Variant` by ID.",
        "description" : "The endpoint `GET /variants/{id}` will return a JSON version of `Variant`.",
        "parameters" : [ {
          "name" : "variantDbId",
          "in" : "path",
          "description" : "The ID which uniquely identifies a `Variant`",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "title" : "VariantSingleResponse",
                  "required" : [ "metadata", "result" ],
                  "type" : "object",
                  "properties" : {
                    "@context" : {
                      "$ref" : "#/components/schemas/Context"
                    },
                    "metadata" : {
                      "$ref" : "#/components/schemas/metadata"
                    },
                    "result" : {
                      "$ref" : "#/components/schemas/Variant"
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/404NotFound"
          }
        }
      }
    },
    "/variants/{variantDbId}/calls" : {
      "get" : {
        "tags" : [ "Variants" ],
        "summary" : "Gets a list of `Calls` associated with a `Variant`.",
        "description" : "The variant calls for this particular variant. Each one represents the determination of genotype with respect to this variant. `Calls` in this array are implicitly associated with this `Variant`.",
        "parameters" : [ {
          "name" : "variantDbId",
          "in" : "path",
          "description" : "The ID which uniquely identifies a `Variant`",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "expandHomozygotes",
          "in" : "query",
          "description" : "Should homozygotes be expanded (true) or collapsed into a single occurrence (false)",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "unknownString",
          "in" : "query",
          "description" : "The string to use as a representation for missing data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "sepPhased",
          "in" : "query",
          "description" : "The string to use as a separator for phased allele calls",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "sepUnphased",
          "in" : "query",
          "description" : "The string to use as a separator for unphased allele calls",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "$ref" : "#/components/parameters/pageToken"
        }, {
          "$ref" : "#/components/parameters/page"
        }, {
          "$ref" : "#/components/parameters/pageSize"
        }, {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/CallsListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/variantsets" : {
      "get" : {
        "tags" : [ "Variant Sets" ],
        "summary" : "Gets a filtered list of `VariantSets`.",
        "description" : "Will return a filtered list of `VariantSet`.",
        "parameters" : [ {
          "name" : "variantSetDbId",
          "in" : "query",
          "description" : "The ID of the `VariantSet` to be retrieved.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "variantDbId",
          "in" : "query",
          "description" : "The ID of the `Variant` to be retrieved.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "callSetDbId",
          "in" : "query",
          "description" : "The ID of the `CallSet` to be retrieved.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "referenceSetDbId",
          "in" : "query",
          "description" : "The ID of the reference set that describes the sequences used by the variants in this set.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "$ref" : "#/components/parameters/commonCropName"
        }, {
          "$ref" : "#/components/parameters/programDbId"
        }, {
          "$ref" : "#/components/parameters/studyDbId"
        }, {
          "$ref" : "#/components/parameters/studyName"
        }, {
          "$ref" : "#/components/parameters/externalReferenceId"
        }, {
          "$ref" : "#/components/parameters/externalReferenceSource"
        }, {
          "$ref" : "#/components/parameters/page"
        }, {
          "$ref" : "#/components/parameters/pageSize"
        }, {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/VariantSetsListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/variantsets/extract" : {
      "post" : {
        "tags" : [ "Variant Sets" ],
        "summary" : "Create new `VariantSet` based on search results",
        "description" : "Will perform a search for `Calls` which match the search criteria in `variantSetsExtractRequest`. The results of the search will be used to create a new `VariantSet` on the server. The new `VariantSet` will be returned.",
        "parameters" : [ {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "requestBody" : {
          "description" : "Study Search request",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/VariantSetsExtractRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "title" : "variantSetResponse",
                  "required" : [ "metadata", "result" ],
                  "type" : "object",
                  "properties" : {
                    "@context" : {
                      "$ref" : "#/components/schemas/Context"
                    },
                    "metadata" : {
                      "$ref" : "#/components/schemas/metadata"
                    },
                    "result" : {
                      "$ref" : "#/components/schemas/VariantSet"
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/404NotFound"
          }
        }
      }
    },
    "/variantsets/{variantSetDbId}" : {
      "get" : {
        "tags" : [ "Variant Sets" ],
        "summary" : "Gets a `VariantSet` by ID.",
        "description" : "This call will return a JSON version of a `VariantSet`.",
        "parameters" : [ {
          "name" : "variantSetDbId",
          "in" : "path",
          "description" : "The ID of the `Variant` to be retrieved.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "title" : "variantSetResponse",
                  "required" : [ "metadata", "result" ],
                  "type" : "object",
                  "properties" : {
                    "@context" : {
                      "$ref" : "#/components/schemas/Context"
                    },
                    "metadata" : {
                      "$ref" : "#/components/schemas/metadata"
                    },
                    "result" : {
                      "$ref" : "#/components/schemas/VariantSet"
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/404NotFound"
          }
        }
      }
    },
    "/variantsets/{variantSetDbId}/calls" : {
      "get" : {
        "tags" : [ "Variant Sets" ],
        "summary" : "Gets a list of `Calls` associated with a `VariantSet`.",
        "description" : "Gets a list of `Calls` associated with a `VariantSet`.",
        "parameters" : [ {
          "name" : "variantSetDbId",
          "in" : "path",
          "description" : "The ID of the `VariantSet` to be retrieved.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "expandHomozygotes",
          "in" : "query",
          "description" : "Should homozygotes be expanded (true) or collapsed into a single occurrence (false)",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "unknownString",
          "in" : "query",
          "description" : "The string to use as a representation for missing data",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "sepPhased",
          "in" : "query",
          "description" : "The string to use as a separator for phased allele calls",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "sepUnphased",
          "in" : "query",
          "description" : "The string to use as a separator for unphased allele calls",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "$ref" : "#/components/parameters/pageToken"
        }, {
          "$ref" : "#/components/parameters/page"
        }, {
          "$ref" : "#/components/parameters/pageSize"
        }, {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/CallsListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/variantsets/{variantSetDbId}/callsets" : {
      "get" : {
        "tags" : [ "Variant Sets" ],
        "summary" : "Gets a list of `CallSets` associated with a `VariantSet`.",
        "description" : "Gets a list of `CallSets` associated with a `VariantSet`.",
        "parameters" : [ {
          "name" : "callSetDbId",
          "in" : "query",
          "description" : "The ID of the `CallSet` to be retrieved.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "callSetName",
          "in" : "query",
          "description" : "The human readable name of the `CallSet` to be retrieved.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "variantSetDbId",
          "in" : "path",
          "description" : "The ID of the `VariantSet` to be retrieved.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "$ref" : "#/components/parameters/page"
        }, {
          "$ref" : "#/components/parameters/pageSize"
        }, {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/CallSetsListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/variantsets/{variantSetDbId}/variants" : {
      "get" : {
        "tags" : [ "Variant Sets" ],
        "summary" : "Gets a `Variants` for a given `VariantSet`.",
        "description" : "This call will return an array of `Variants`.",
        "parameters" : [ {
          "name" : "variantDbId",
          "in" : "query",
          "description" : "The ID of the `Variant` to be retrieved.",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "variantSetDbId",
          "in" : "path",
          "description" : "The ID of the `VariantSet` to be retrieved.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "$ref" : "#/components/parameters/pageToken"
        }, {
          "$ref" : "#/components/parameters/page"
        }, {
          "$ref" : "#/components/parameters/pageSize"
        }, {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "responses" : {
          "200" : {
            "$ref" : "#/components/responses/VariantsListResponse"
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/vendor/orders" : {
      "get" : {
        "tags" : [ "Vendor" ],
        "summary" : "List current available orders",
        "description" : "List current available orders",
        "parameters" : [ {
          "name" : "orderId",
          "in" : "query",
          "description" : "The order id returned by the vendor when the order was successfully submitted. From response of \"POST /vendor/orders\"",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "submissionId",
          "in" : "query",
          "description" : "The submission id returned by the vendor when a set of plates was successfully submitted. From response of \"POST /vendor/plates\"",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "$ref" : "#/components/parameters/page"
        }, {
          "$ref" : "#/components/parameters/pageSize"
        }, {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "title" : "VendorOrderListResponse",
                  "required" : [ "metadata", "result" ],
                  "type" : "object",
                  "properties" : {
                    "@context" : {
                      "$ref" : "#/components/schemas/Context"
                    },
                    "metadata" : {
                      "$ref" : "#/components/schemas/metadata"
                    },
                    "result" : {
                      "required" : [ "data" ],
                      "type" : "object",
                      "properties" : {
                        "data" : {
                          "type" : "array",
                          "description" : "The `data` array is part of the BrAPI standard List Response JSON container. `data` will always contain the primary list of objects being returned by a BrAPI endpoint. `data` is also the only array impacted by the `metadata.pagination` details. When the pagination parameters change, the `data` array will reflect those changes in the JSON response.",
                          "items" : {
                            "$ref" : "#/components/schemas/VendorOrder"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      },
      "post" : {
        "tags" : [ "Vendor" ],
        "summary" : "Submit New Order",
        "description" : "Submit a new order to a vendor",
        "parameters" : [ {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/VendorOrderSubmissionRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "title" : "VendorOrderSubmissionSingleResponse",
                  "type" : "object",
                  "properties" : {
                    "@context" : {
                      "$ref" : "#/components/schemas/Context"
                    },
                    "metadata" : {
                      "$ref" : "#/components/schemas/metadata"
                    },
                    "result" : {
                      "$ref" : "#/components/schemas/VendorOrderSubmission"
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/vendor/orders/{orderId}/plates" : {
      "get" : {
        "tags" : [ "Vendor" ],
        "summary" : "Get the Plates for a specific Order",
        "description" : "Retrieve the plate and sample details of an order being processed",
        "parameters" : [ {
          "name" : "orderId",
          "in" : "path",
          "description" : "The order id returned by the vendor when the order was successfully submitted.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "$ref" : "#/components/parameters/page"
        }, {
          "$ref" : "#/components/parameters/pageSize"
        }, {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "title" : "VendorPlateListResponse",
                  "required" : [ "metadata", "result" ],
                  "type" : "object",
                  "properties" : {
                    "@context" : {
                      "$ref" : "#/components/schemas/Context"
                    },
                    "metadata" : {
                      "$ref" : "#/components/schemas/metadata"
                    },
                    "result" : {
                      "required" : [ "data" ],
                      "type" : "object",
                      "properties" : {
                        "data" : {
                          "type" : "array",
                          "description" : "The `data` array is part of the BrAPI standard List Response JSON container. `data` will always contain the primary list of objects being returned by a BrAPI endpoint. `data` is also the only array impacted by the `metadata.pagination` details. When the pagination parameters change, the `data` array will reflect those changes in the JSON response.",
                          "items" : {
                            "$ref" : "#/components/schemas/VendorPlate"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/404NotFound"
          }
        }
      }
    },
    "/vendor/orders/{orderId}/results" : {
      "get" : {
        "tags" : [ "Vendor" ],
        "summary" : "Get the results of a specific Order",
        "description" : "Retrieve the data files generated by the vendors analysis",
        "parameters" : [ {
          "name" : "orderId",
          "in" : "path",
          "description" : "The order id returned by the vendor when the order was successfully submitted.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "$ref" : "#/components/parameters/page"
        }, {
          "$ref" : "#/components/parameters/pageSize"
        }, {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "title" : "VendorResultFileListResponse",
                  "required" : [ "metadata", "result" ],
                  "type" : "object",
                  "properties" : {
                    "@context" : {
                      "$ref" : "#/components/schemas/Context"
                    },
                    "metadata" : {
                      "$ref" : "#/components/schemas/metadata"
                    },
                    "result" : {
                      "required" : [ "data" ],
                      "type" : "object",
                      "properties" : {
                        "data" : {
                          "type" : "array",
                          "description" : "The `data` array is part of the BrAPI standard List Response JSON container. `data` will always contain the primary list of objects being returned by a BrAPI endpoint. `data` is also the only array impacted by the `metadata.pagination` details. When the pagination parameters change, the `data` array will reflect those changes in the JSON response.",
                          "items" : {
                            "$ref" : "#/components/schemas/VendorResultFile"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/404NotFound"
          }
        }
      }
    },
    "/vendor/orders/{orderId}/status" : {
      "get" : {
        "tags" : [ "Vendor" ],
        "summary" : "Get the status of a specific Order",
        "description" : "Retrieve the current status of an order being processed",
        "parameters" : [ {
          "name" : "orderId",
          "in" : "path",
          "description" : "The order id returned by the vendor when the order was successfully submitted.",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "title" : "VendorOrderStatusResponse",
                  "required" : [ "metadata", "result" ],
                  "type" : "object",
                  "properties" : {
                    "@context" : {
                      "$ref" : "#/components/schemas/Context"
                    },
                    "metadata" : {
                      "$ref" : "#/components/schemas/metadata"
                    },
                    "result" : {
                      "type" : "object",
                      "properties" : {
                        "status" : {
                          "type" : "string",
                          "enum" : [ "registered", "received", "inProgress", "completed", "rejected" ]
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/404NotFound"
          }
        }
      }
    },
    "/vendor/plates" : {
      "post" : {
        "tags" : [ "Vendor" ],
        "summary" : "Submit a new set of Sample data",
        "description" : "Submit a new set of Sample data",
        "parameters" : [ {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/VendorPlateSubmissionRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "title" : "VendorPlateSubmissionIdSingleResponse",
                  "required" : [ "metadata", "result" ],
                  "type" : "object",
                  "properties" : {
                    "@context" : {
                      "$ref" : "#/components/schemas/Context"
                    },
                    "metadata" : {
                      "$ref" : "#/components/schemas/metadata"
                    },
                    "result" : {
                      "$ref" : "#/components/schemas/VendorPlateSubmissionId"
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          }
        }
      }
    },
    "/vendor/plates/{submissionId}" : {
      "get" : {
        "tags" : [ "Vendor" ],
        "summary" : "Get the data for a submitted set of plates",
        "description" : "Get data for a submitted set of plates",
        "parameters" : [ {
          "name" : "submissionId",
          "in" : "path",
          "description" : "The submission id returned by the vendor when a set of plates was successfully submitted. From response of \"POST /vendor/plates\"",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "title" : "VendorPlateSubmissionSingleResponse",
                  "required" : [ "metadata", "result" ],
                  "type" : "object",
                  "properties" : {
                    "@context" : {
                      "$ref" : "#/components/schemas/Context"
                    },
                    "metadata" : {
                      "$ref" : "#/components/schemas/metadata"
                    },
                    "result" : {
                      "$ref" : "#/components/schemas/VendorPlateSubmission"
                    }
                  }
                }
              }
            }
          },
          "400" : {
            "$ref" : "#/components/responses/400BadRequest"
          },
          "401" : {
            "$ref" : "#/components/responses/401Unauthorized"
          },
          "403" : {
            "$ref" : "#/components/responses/403Forbidden"
          },
          "404" : {
            "$ref" : "#/components/responses/404NotFound"
          }
        }
      }
    },
    "/vendor/specifications" : {
      "get" : {
        "tags" : [ "Vendor" ],
        "summary" : "Get the Vendor Specifications",
        "description" : "Defines the plate format specification for the vendor.",
        "parameters" : [ {
          "$ref" : "#/components/parameters/authorizationHeader"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "title" : "VendorSpecificationSingleResponse",
                  "required" : [ "metadata", "result" ],
                  "type" : "object",
                  "properties" : {
                    "@context" : {
                      "$ref" : "#/components/schemas/Context"
                    },
                    "metadata" : {
                      "$ref" : "#/components/schemas/metadata"
                    },
                    "result" : {
                      "$ref" : "#/components/schemas/VendorSpecification"
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components" : {
    "schemas" : {
      "AlleleMatrix" : {
        "required" : [ "callSetDbIds", "variantSetDbIds" ],
        "type" : "object",
        "properties" : {
          "callSetDbIds" : {
            "type" : "array",
            "description" : "A list of unique identifiers for the CallSets contained in the matrix response. This array should match the ordering for columns in the matrix. A CallSet is a unique combination of a Sample and a sequencing event. CallSets often have a 1-to-1 relationship with Samples, but this is not always the case.",
            "example" : [ "aca00001", "aca00002", "aca00003" ],
            "items" : {
              "type" : "string"
            }
          },
          "dataMatrices" : {
            "type" : "array",
            "description" : "The 'dataMatrices' are an array of matrix objects that hold the allele data and associated metadata. Each matrix should be the same size and orientation, aligned with the \"callSetDbIds\" as columns and the \"variantDbIds\" as rows.",
            "nullable" : true,
            "example" : [ {
              "dataMatrix" : [ [ "0|0", "1|0", "1/1" ], [ "0|0", "1|0", "1/1" ], [ "0|0", "1|0", "1/1" ] ],
              "dataMatrixAbbreviation" : "GT",
              "dataMatrixName" : "Genotype",
              "dataType" : "string"
            }, {
              "dataMatrix" : [ [ "48", "48", "43" ], [ "49", "3", "41" ], [ "21", "2", "35" ] ],
              "dataMatrixAbbreviation" : "GQ",
              "dataMatrixName" : "Genotype Quality",
              "dataType" : "integer"
            } ],
            "items" : {
              "type" : "object",
              "properties" : {
                "dataMatrix" : {
                  "type" : "array",
                  "description" : "The two dimensional array of data, providing the allele matrix or an additional layer of metadata associated with each genotype value. Each matrix should be the same size and orientation, aligned with the \"callSetDbIds\" as columns and the \"variantDbIds\" as rows.",
                  "nullable" : true,
                  "example" : [ [ "0|0", "1|0", "1/1" ], [ "0|0", "1|0", "1/1" ], [ "0|0", "1|0", "1/1" ] ],
                  "items" : {
                    "type" : "array",
                    "description" : "An array of rows in the data matrix",
                    "items" : {
                      "type" : "string",
                      "description" : "All the values per row (columns) in the data matrix"
                    }
                  }
                },
                "dataMatrixAbbreviation" : {
                  "type" : "string",
                  "description" : "The abbreviated code of the field represented in this data matrix. These codes should match the VCF standard when possible and the key word \"GT\" is reserved for the allele matrix. Examples of other metadata matrices include: \"GQ\", \"RD\", and \"HQ\"\n<br> This maps to a FORMAT field in the VCF file standard.",
                  "nullable" : true,
                  "example" : "GT"
                },
                "dataMatrixName" : {
                  "type" : "string",
                  "description" : "The name of the field represented in this data matrix. The key word \"Genotype\" is reserved for the allele matrix. Examples of other metadata matrices include: \"Genotype Quality\", \"Read Depth\", and \"Haplotype Quality\"\n<br> This maps to a FORMAT field in the VCF file standard.",
                  "nullable" : true,
                  "example" : "Genotype"
                },
                "dataType" : {
                  "type" : "string",
                  "description" : "The type of field represented in this data matrix. This is intended to help parse the data out of JSON.",
                  "nullable" : true,
                  "example" : "string",
                  "enum" : [ "string", "integer", "float", "boolean" ]
                }
              },
              "description" : "This is a single data matrix. It could be the allele matrix or an additional layer of metadata associated with each genotype value."
            }
          },
          "expandHomozygotes" : {
            "type" : "boolean",
            "description" : "Should homozygotes be expanded (true) or collapsed into a single occurrence (false)",
            "nullable" : true,
            "example" : true
          },
          "pagination" : {
            "type" : "array",
            "description" : "Pagination for the matrix",
            "nullable" : true,
            "example" : [ {
              "dimension" : "VARIANTS",
              "page" : 0,
              "pageSize" : 500,
              "totalCount" : 10000,
              "totalPages" : 20
            }, {
              "dimension" : "CALLSETS",
              "page" : 4,
              "pageSize" : 1000,
              "totalCount" : 10000,
              "totalPages" : 10
            } ],
            "items" : {
              "type" : "object",
              "properties" : {
                "dimension" : {
                  "type" : "string",
                  "description" : "The dimension of the matrix being paginated",
                  "nullable" : true,
                  "example" : "VARIANTS",
                  "enum" : [ "CALLSETS", "VARIANTS" ]
                },
                "page" : {
                  "type" : "integer",
                  "description" : "the requested page number (zero indexed)",
                  "nullable" : true,
                  "example" : 0
                },
                "pageSize" : {
                  "type" : "integer",
                  "description" : "the maximum number of elements per page in this dimension of the matrix",
                  "nullable" : true,
                  "example" : 500
                },
                "totalCount" : {
                  "type" : "integer",
                  "description" : "The total number of elements that are available on the server and match the requested query parameters.",
                  "nullable" : true,
                  "example" : 10000
                },
                "totalPages" : {
                  "type" : "integer",
                  "description" : "The total number of pages of elements available on the server. This should be calculated with the following formula. \n<br/>totalPages = CEILING( totalCount / requested_page_size)",
                  "nullable" : true,
                  "example" : 20
                }
              }
            }
          },
          "sepPhased" : {
            "type" : "string",
            "description" : "The string used as a separator for phased allele calls.",
            "nullable" : true,
            "example" : "|"
          },
          "sepUnphased" : {
            "type" : "string",
            "description" : "The string used as a separator for unphased allele calls.",
            "nullable" : true,
            "example" : "/"
          },
          "unknownString" : {
            "type" : "string",
            "description" : "The string used as a representation for missing data.",
            "nullable" : true,
            "example" : "."
          },
          "variantDbIds" : {
            "type" : "array",
            "description" : "A list of unique identifiers for the Variants contained in the matrix response. This array should match the ordering for rows in the matrix.",
            "nullable" : true,
            "example" : [ "feb54257", "feb40355", "feb40323" ],
            "items" : {
              "type" : "string"
            }
          },
          "variantSetDbIds" : {
            "type" : "array",
            "description" : "A list of unique identifiers for the VariantSets contained in the matrix response. A VariantSet is a data set originating from a sequencing event. Often, users will only be interested in data from a single VariantSet, but in some cases a user might be interested in a matrix with data from multiple VariantSets.",
            "example" : [ "cfde3944", "cfde2077", "cfde4424" ],
            "items" : {
              "type" : "string"
            }
          }
        },
        "x-brapi-metadata" : {
          "description" : "The AlleleMatrix object is used to describe a matrix of genotyping results. This 2d array of data reduces the overall size of the response for larger datasets, when compared to the Calls endpoints. This makes genotype data retrieval faster and easier.",
          "module" : "BrAPI-Genotyping",
          "primaryModel" : true,
          "title" : "AlleleMatrix"
        }
      },
      "AlleleMatrixSearchRequest" : {
        "type" : "object",
        "properties" : {
          "callSetDbIds" : {
            "type" : "array",
            "description" : "A list of IDs which uniquely identify `CallSets` within the given database server",
            "example" : [ "a03202ec", "274e4f63" ],
            "items" : {
              "type" : "string"
            }
          },
          "dataMatrixAbbreviations" : {
            "type" : "array",
            "description" : "`dataMatrixAbbreviations` is a comma seperated list of abbreviations (ie 'GT', 'RD' etc). This list controls which data matrices are returned in the response.",
            "nullable" : true,
            "example" : [ "GT", "RD" ],
            "items" : {
              "type" : "string"
            }
          },
          "dataMatrixNames" : {
            "type" : "array",
            "description" : "`dataMatrixNames` is a list of names (ie 'Genotype', 'Read Depth' etc). This list controls which data matrices are returned in the response.",
            "nullable" : true,
            "example" : [ "Genotype", "Read Depth" ],
            "items" : {
              "type" : "string"
            }
          },
          "expandHomozygotes" : {
            "type" : "boolean",
            "description" : "Should homozygotes be expanded (true) or collapsed into a single occurrence (false)",
            "nullable" : true,
            "example" : true
          },
          "germplasmDbIds" : {
            "type" : "array",
            "description" : "A list of IDs which uniquely identify `Germplasm` within the given database server",
            "nullable" : true,
            "example" : [ "a03202ec", "274e4f63" ],
            "items" : {
              "type" : "string"
            }
          },
          "germplasmNames" : {
            "type" : "array",
            "description" : "A list of human readable `Germplasm` names",
            "nullable" : true,
            "example" : [ "a03202ec", "274e4f63" ],
            "items" : {
              "type" : "string"
            }
          },
          "germplasmPUIs" : {
            "type" : "array",
            "description" : "A list of permanent unique identifiers associated with `Germplasm`",
            "nullable" : true,
            "example" : [ "a03202ec", "274e4f63" ],
            "items" : {
              "type" : "string"
            }
          },
          "pagination" : {
            "type" : "array",
            "description" : "Pagination for the matrix",
            "nullable" : true,
            "example" : [ {
              "dimension" : "variants",
              "page" : 0,
              "pageSize" : 500
            }, {
              "dimension" : "callsets",
              "page" : 4,
              "pageSize" : 1000
            } ],
            "items" : {
              "type" : "object",
              "properties" : {
                "dimension" : {
                  "type" : "string",
                  "description" : "the dimension of the matrix being paginated",
                  "example" : "VARIANTS",
                  "enum" : [ "CALLSETS", "VARIANTS" ]
                },
                "page" : {
                  "type" : "integer",
                  "description" : "the requested page number (zero indexed)",
                  "example" : 0
                },
                "pageSize" : {
                  "type" : "integer",
                  "description" : "the maximum number of elements per page in this dimension of the matrix",
                  "example" : 500
                }
              }
            }
          },
          "positionRanges" : {
            "type" : "array",
            "description" : "The postion range to search\n<br/>\nUses the format \"<chrom>:<start>-<end>\" where <chrom> is the chromosome name, <start> is \nthe starting position of the range, and <end> is the ending position of the range",
            "nullable" : true,
            "example" : [ "20:1000-35000", "20:87000-125000" ],
            "items" : {
              "type" : "string"
            }
          },
          "preview" : {
            "type" : "boolean",
            "description" : "Default Value = false\n<br/>\nIf 'preview' is set to true, then the server should only return the lists of 'callSetDbIds', \n'variantDbIds', and 'variantSetDbIds'. The server should not return any matrix data. This\nis intended to be a preview and give the client a sense of how large the matrix returned will be\n<br/>\nIf 'preview' is set to false or not set (default), then the server should return all the matrix\ndata as requested.",
            "example" : true,
            "default" : false
          },
          "sampleDbIds" : {
            "type" : "array",
            "description" : "A list of IDs which uniquely identify `Samples` within the given database server",
            "nullable" : true,
            "example" : [ "a03202ec", "274e4f63" ],
            "items" : {
              "type" : "string"
            }
          },
          "sepPhased" : {
            "type" : "string",
            "description" : "The string used as a separator for phased allele calls.",
            "nullable" : true,
            "example" : "|"
          },
          "sepUnphased" : {
            "type" : "string",
            "description" : "The string used as a separator for unphased allele calls.",
            "nullable" : true,
            "example" : "/"
          },
          "unknownString" : {
            "type" : "string",
            "description" : "The string used as a representation for missing data.",
            "nullable" : true,
            "example" : "."
          },
          "variantDbIds" : {
            "type" : "array",
            "description" : "A list of IDs which uniquely identify `Variants` within the given database server",
            "nullable" : true,
            "example" : [ "bba0b258", "ff97d4f0" ],
            "items" : {
              "type" : "string"
            }
          },
          "variantSetDbIds" : {
            "type" : "array",
            "description" : "A list of IDs which uniquely identify `VariantSets` within the given database server",
            "nullable" : true,
            "example" : [ "407c0508", "49e24dfc" ],
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "Analysis" : {
        "type" : "object",
        "properties" : {
          "analysisDbId" : {
            "type" : "string",
            "description" : "Unique identifier for this analysis description",
            "nullable" : true,
            "example" : "6191a6bd"
          },
          "analysisName" : {
            "type" : "string",
            "description" : "A human readable name for this analysis",
            "nullable" : true,
            "example" : "Standard QC"
          },
          "created" : {
            "type" : "string",
            "description" : "The time at which this record was created, in ISO 8601 format.",
            "format" : "date-time",
            "nullable" : true
          },
          "description" : {
            "type" : "string",
            "description" : "A human readable description of the analysis",
            "nullable" : true,
            "example" : "This is a formal description of a QC methodology. Blah blah blah ..."
          },
          "software" : {
            "type" : "array",
            "description" : "The software run to generate this analysis.",
            "nullable" : true,
            "example" : [ "https://github.com/genotyping/QC" ],
            "items" : {
              "type" : "string"
            }
          },
          "type" : {
            "type" : "string",
            "description" : "The type of analysis.",
            "nullable" : true,
            "example" : "QC"
          },
          "updated" : {
            "type" : "string",
            "description" : "The time at which this record was last updated, in ISO 8601 format.",
            "format" : "date-time",
            "nullable" : true
          }
        },
        "description" : "An analysis contains an interpretation of one or several experiments. (e.g. SNVs, copy number variations, methylation status) together with information about the methodology used."
      },
      "AvailableFormat" : {
        "type" : "object",
        "properties" : {
          "dataFormat" : {
            "type" : "string",
            "description" : "dataFormat defines the structure of the data within a file (ie DartSeq, VCF, Hapmap, tabular, etc)",
            "nullable" : true,
            "enum" : [ "DartSeq", "VCF", "Hapmap", "tabular", "JSON" ]
          },
          "expandHomozygotes" : {
            "type" : "boolean",
            "description" : "Should homozygotes be expanded (true) or collapsed into a single occurrence (false)",
            "nullable" : true,
            "example" : true
          },
          "fileFormat" : {
            "type" : "string",
            "description" : "fileFormat defines the MIME type of the file (ie text/csv, application/excel, application/zip). This should also be reflected in the Accept and ContentType HTTP headers for every relevant request and response.",
            "nullable" : true,
            "enum" : [ "text/csv", "text/tsv", "application/excel", "application/zip", "application/json" ]
          },
          "fileURL" : {
            "type" : "string",
            "description" : "A URL which indicates the location of the file version of this VariantSet. Could be a static file URL or an API endpoint which generates the file.",
            "format" : "uri",
            "nullable" : true
          },
          "sepPhased" : {
            "type" : "string",
            "description" : "The string used as a separator for phased allele calls.",
            "nullable" : true,
            "example" : "|"
          },
          "sepUnphased" : {
            "type" : "string",
            "description" : "The string used as a separator for unphased allele calls.",
            "nullable" : true,
            "example" : "/"
          },
          "unknownString" : {
            "type" : "string",
            "description" : "The string used as a representation for missing data.",
            "nullable" : true,
            "example" : "."
          }
        },
        "description" : "Each 'availableFormat' object is a pairing of dataFormat and fileFormat. These must be communicated in pairs because they are not independant parameters and sometimes one influences the other."
      },
      "BreedingMethod" : {
        "required" : [ "breedingMethodDbId" ],
        "type" : "object",
        "properties" : {
          "abbreviation" : {
            "type" : "string",
            "description" : "A shortened version of the human readable name for a Breeding Method",
            "nullable" : true,
            "example" : "MB"
          },
          "breedingMethodDbId" : {
            "type" : "string",
            "description" : "the unique identifier for this breeding method",
            "example" : "ffcce7ef"
          },
          "breedingMethodName" : {
            "type" : "string",
            "description" : "human readable name of the breeding method",
            "nullable" : true,
            "example" : "Male Backcross"
          },
          "description" : {
            "type" : "string",
            "description" : "human readable description of the breeding method",
            "nullable" : true,
            "example" : "Backcross to recover a specific gene."
          }
        },
        "x-brapi-metadata" : {
          "description" : "The techniques and protocol used to produce a Cross or Germplasm",
          "module" : "BrAPI-Germplasm",
          "primaryModel" : true,
          "title" : "Breeding Method"
        }
      },
      "Call" : {
        "required" : [ "callSetDbId", "variantDbId", "variantSetDbId" ],
        "type" : "object",
        "properties" : {
          "additionalInfo" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.",
            "nullable" : true
          },
          "callSetDbId" : {
            "type" : "string",
            "description" : "The ID of the call set this variant call belongs to.\n\nIf this field is not present, the ordering of the call sets from a `SearchCallSetsRequest` over this `VariantSet` is guaranteed to match the ordering of the calls on this `Variant`. The number of results will also be the same.",
            "example" : "16466f55"
          },
          "callSetName" : {
            "type" : "string",
            "description" : "The name of the call set this variant call belongs to. If this field is not present, the ordering of the call sets from a `SearchCallSetsRequest` over this `VariantSet` is guaranteed to match the ordering of the calls on this `Variant`. The number of results will also be the same.",
            "example" : "Sample_123_DNA_Run_456"
          },
          "genotype" : {
            "$ref" : "#/components/schemas/ListValue"
          },
          "genotypeMetadata" : {
            "type" : "array",
            "description" : "Genotype Metadata are additional layers of metadata associated with each genotype.",
            "items" : {
              "type" : "object",
              "properties" : {
                "dataType" : {
                  "type" : "string",
                  "description" : "The type of field represented in this Genotype Field. This is intended to help parse the data out of JSON.",
                  "example" : "integer",
                  "enum" : [ "string", "integer", "float", "boolean" ]
                },
                "fieldAbbreviation" : {
                  "type" : "string",
                  "description" : "The abbreviated code of the field represented in this Genotype Field. These codes should match the VCF standard when possible. Examples include: \"GQ\", \"RD\", and \"HQ\"\n<br> This maps to a FORMAT field in the VCF file standard.",
                  "example" : "GQ"
                },
                "fieldName" : {
                  "type" : "string",
                  "description" : "The name of the field represented in this Genotype Field. Examples include: \"Genotype Quality\", \"Read Depth\", and \"Haplotype Quality\"\n<br> This maps to a FORMAT field in the VCF file standard.",
                  "example" : "Genotype Quality"
                },
                "fieldValue" : {
                  "type" : "string",
                  "description" : "The additional metadata value associated with this genotype call",
                  "example" : "45.2"
                }
              }
            }
          },
          "genotypeValue" : {
            "type" : "string",
            "description" : "The value of this genotype call",
            "example" : "1/1"
          },
          "genotype_likelihood" : {
            "type" : "array",
            "description" : "**Deprecated in v2.1** Please use `genotypeMetadata`. Github issue number #491             \n<br>The genotype likelihood for this variant call. Each array entry represents how likely a specific genotype is for this call as log10(P(data | genotype)), analogous to the GL tag in the VCF spec. The value ordering is defined by the GL tag in the VCF spec.",
            "example" : [ 1.0 ],
            "deprecated" : true,
            "items" : {
              "type" : "number",
              "format" : "double"
            }
          },
          "phaseSet" : {
            "type" : "string",
            "description" : "If this field is populated, this variant call's genotype ordering implies the phase of the bases and \nis consistent with any other variant calls on the same contig which have the same phase set string.",
            "example" : "6410afc5"
          },
          "variantDbId" : {
            "type" : "string",
            "description" : "The ID of the variant this call belongs to.",
            "example" : "538c8ecf"
          },
          "variantName" : {
            "type" : "string",
            "description" : "The name of the variant this call belongs to.",
            "example" : "Marker A"
          },
          "variantSetDbId" : {
            "type" : "string",
            "description" : "The unique identifier for a VariantSet",
            "example" : "87a6ac1e"
          },
          "variantSetName" : {
            "type" : "string",
            "description" : "The human readable name for a VariantSet",
            "example" : "Maize QC DataSet 002334"
          }
        },
        "description" : "A `Call` represents the determination of genotype with respect to a particular `Variant`.\n\nIt may include associated information such as quality and phasing. For example, a call might assign a probability of 0.32 to the occurrence of a SNP named RS_1234 in a call set with the name NA_12345.",
        "x-brapi-metadata" : {
          "description" : "A Call represents the determination of genotype with respect to a particular Variant. It may include associated information such as quality and phasing. For example, a call might assign a probability of 0.32 to the occurrence of a SNP named RS_1234 in a Call Set with the name NA_12345.",
          "module" : "BrAPI-Genotyping",
          "primaryModel" : true,
          "title" : "Call"
        }
      },
      "CallSet" : {
        "required" : [ "callSetDbId" ],
        "type" : "object",
        "properties" : {
          "additionalInfo" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.",
            "nullable" : true
          },
          "callSetDbId" : {
            "type" : "string",
            "description" : "The ID which uniquely identifies a CallSet within the given database server",
            "example" : "eb2bfd3d"
          },
          "callSetName" : {
            "type" : "string",
            "description" : "The human readable name which identifies a germplasm within the given database server",
            "nullable" : true,
            "example" : "Sample_123_DNA_Run_456"
          },
          "created" : {
            "type" : "string",
            "description" : "The date this call set was created",
            "format" : "date-time",
            "nullable" : true
          },
          "externalReferences" : {
            "$ref" : "#/components/schemas/ExternalReferences"
          },
          "sampleDbId" : {
            "type" : "string",
            "description" : "The Biosample entity the call set data was generated from.",
            "nullable" : true,
            "example" : "5e50e11d"
          },
          "studyDbId" : {
            "type" : "string",
            "description" : "The ID which uniquely identifies a study within the given database server",
            "nullable" : true,
            "example" : "708149c1"
          },
          "updated" : {
            "type" : "string",
            "description" : "The time at which this call set was last updated",
            "format" : "date-time",
            "nullable" : true
          },
          "variantSetDbIds" : {
            "type" : "array",
            "description" : "The IDs of the variantSets this callSet has calls in.",
            "nullable" : true,
            "example" : [ "cfd3d60f", "a4e8bfe9" ],
            "items" : {
              "type" : "string"
            }
          }
        },
        "description" : "A CallSet is a collection of Calls that were generated by the same analysis of the same Sample",
        "x-brapi-metadata" : {
          "description" : "A CallSet is a collection of Calls that were generated by the same analysis of the same Sample",
          "module" : "BrAPI-Genotyping",
          "primaryModel" : true,
          "title" : "CallSet"
        }
      },
      "CallsSearchRequest" : {
        "type" : "object",
        "properties" : {
          "callSetDbIds" : {
            "type" : "array",
            "description" : "A list of IDs which uniquely identify `CallSets` within the given database server",
            "nullable" : true,
            "example" : [ "a03202ec", "274e4f63" ],
            "items" : {
              "type" : "string"
            }
          },
          "expandHomozygotes" : {
            "type" : "boolean",
            "description" : "Should homozygotes be expanded (true) or collapsed into a single occurrence (false)",
            "nullable" : true,
            "example" : true
          },
          "page" : {
            "type" : "integer",
            "description" : "Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.",
            "example" : 0
          },
          "pageSize" : {
            "type" : "integer",
            "description" : "The size of the pages to be returned. Default is `1000`.",
            "example" : 1000
          },
          "pageToken" : {
            "type" : "string",
            "description" : "**Deprecated in v2.1** Please use `page`. Github issue number #451 \n<br>Used to request a specific page of data to be returned.\n<br>Tokenized pages are for large data sets which can not be efficiently broken into indexed pages. Use the nextPageToken and prevPageToken from a prior response to construct a query and move to the next or previous page respectively. ",
            "example" : "33c27874",
            "deprecated" : true
          },
          "sepPhased" : {
            "type" : "string",
            "description" : "The string used as a separator for phased allele calls.",
            "nullable" : true,
            "example" : "|"
          },
          "sepUnphased" : {
            "type" : "string",
            "description" : "The string used as a separator for unphased allele calls.",
            "nullable" : true,
            "example" : "/"
          },
          "unknownString" : {
            "type" : "string",
            "description" : "The string used as a representation for missing data.",
            "nullable" : true,
            "example" : "."
          },
          "variantDbIds" : {
            "type" : "array",
            "description" : "A list of IDs which uniquely identify `Variant` within the given database server",
            "nullable" : true,
            "example" : [ "bba0b258", "ff97d4f0" ],
            "items" : {
              "type" : "string"
            }
          },
          "variantSetDbIds" : {
            "type" : "array",
            "description" : "A list of IDs which uniquely identify `VariantSets` within the given database server",
            "nullable" : true,
            "example" : [ "407c0508", "49e24dfc" ],
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "Contact" : {
        "required" : [ "contactDbId" ],
        "type" : "object",
        "properties" : {
          "contactDbId" : {
            "type" : "string",
            "description" : "The ID which uniquely identifies this contact\n\nMIAPPE V1.1 (DM-33) Person ID - An identifier for the data submitter. If that submitter is an individual, ORCID identifiers are recommended.",
            "example" : "5f4e5509"
          },
          "email" : {
            "type" : "string",
            "description" : "The contacts email address\n\nMIAPPE V1.1 (DM-32) Person email - The electronic mail address of the person.",
            "nullable" : true,
            "example" : "bob@bob.com"
          },
          "instituteName" : {
            "type" : "string",
            "description" : "The name of the institution which this contact is part of\n\nMIAPPE V1.1 (DM-35) Person affiliation - The institution the person belongs to",
            "nullable" : true,
            "example" : "The BrAPI Institute"
          },
          "name" : {
            "type" : "string",
            "description" : "The full name of this contact person\n\nMIAPPE V1.1 (DM-31) Person name - The name of the person (either full name or as used in scientific publications)",
            "nullable" : true,
            "example" : "Bob Robertson"
          },
          "orcid" : {
            "type" : "string",
            "description" : "The Open Researcher and Contributor ID for this contact person (orcid.org)\n\nMIAPPE V1.1 (DM-33) Person ID - An identifier for the data submitter. If that submitter is an individual, ORCID identifiers are recommended.",
            "nullable" : true,
            "example" : "http://orcid.org/0000-0001-8640-1750"
          },
          "type" : {
            "type" : "string",
            "description" : "The type of person this contact represents (ex: Coordinator, Scientist, PI, etc.)\n\nMIAPPE V1.1 (DM-34) Person role - Type of contribution of the person to the investigation",
            "nullable" : true,
            "example" : "PI"
          }
        }
      },
      "ContentTypes" : {
        "type" : "string",
        "enum" : [ "application/json", "text/csv", "text/tsv", "application/flapjack" ]
      },
      "Context" : {
        "title" : "context",
        "type" : "array",
        "description" : "The JSON-LD Context is used to provide JSON-LD definitions to each field in a JSON object. By providing an array of context file urls, a BrAPI response object becomes JSON-LD compatible.  \n\nFor more information, see https://w3c.github.io/json-ld-syntax/#the-context",
        "example" : [ "https://brapi.org/jsonld/context/metadata.jsonld" ],
        "items" : {
          "type" : "string",
          "format" : "uri"
        }
      },
      "Cross" : {
        "required" : [ "crossDbId" ],
        "type" : "object",
        "properties" : {
          "additionalInfo" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.",
            "nullable" : true
          },
          "crossAttributes" : {
            "type" : "array",
            "description" : "Set of custom attributes associated with a cross",
            "nullable" : true,
            "items" : {
              "type" : "object",
              "properties" : {
                "crossAttributeName" : {
                  "type" : "string",
                  "description" : "the human readable name of a cross attribute",
                  "nullable" : true,
                  "example" : "Humidity Percentage"
                },
                "crossAttributeValue" : {
                  "type" : "string",
                  "description" : "the value of a cross attribute",
                  "nullable" : true,
                  "example" : "45"
                }
              },
              "description" : "a custom attributes associated with a cross"
            }
          },
          "crossDbId" : {
            "type" : "string",
            "description" : "the unique identifier for a cross",
            "example" : "d105fd6f"
          },
          "crossName" : {
            "type" : "string",
            "description" : "the human readable name for a cross",
            "nullable" : true,
            "example" : "my_Crosses_2018_01"
          },
          "crossType" : {
            "type" : "string",
            "description" : "the type of cross",
            "nullable" : true,
            "example" : "BIPARENTAL",
            "enum" : [ "BIPARENTAL", "SELF", "OPEN_POLLINATED", "BULK", "BULK_SELFED", "BULK_OPEN_POLLINATED", "DOUBLE_HAPLOID" ]
          },
          "crossingProjectDbId" : {
            "type" : "string",
            "description" : "the unique identifier for a crossing project",
            "nullable" : true,
            "example" : "696d7c92"
          },
          "crossingProjectName" : {
            "type" : "string",
            "description" : "the human readable name for a crossing project",
            "nullable" : true,
            "example" : "my_Crosses_2018"
          },
          "externalReferences" : {
            "title" : "ExternalReferences",
            "type" : "array",
            "description" : "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.",
            "example" : [ {
              "referenceId" : "doi:10.155454/12341234",
              "referenceSource" : "DOI"
            }, {
              "referenceId" : "75a50e76",
              "referenceSource" : "Remote Data Collection Upload Tool"
            } ],
            "items" : {
              "type" : "object",
              "properties" : {
                "referenceID" : {
                  "type" : "string",
                  "description" : "**Deprecated in v2.1** Please use `referenceId`. Github issue number #460 \n<br>The external reference ID. Could be a simple string or a URI.",
                  "nullable" : true,
                  "deprecated" : true
                },
                "referenceId" : {
                  "type" : "string",
                  "description" : "The external reference ID. Could be a simple string or a URI."
                },
                "referenceSource" : {
                  "type" : "string",
                  "description" : "An identifier for the source system or database of this reference"
                }
              }
            }
          },
          "parent1" : {
            "type" : "object",
            "properties" : {
              "germplasmDbId" : {
                "type" : "string",
                "description" : "the unique identifier for a germplasm",
                "nullable" : true,
                "example" : "d34b10c3"
              },
              "germplasmName" : {
                "type" : "string",
                "description" : "the human readable name for a germplasm",
                "nullable" : true,
                "example" : "TME_419"
              },
              "observationUnitDbId" : {
                "type" : "string",
                "description" : "the unique identifier for an observation unit",
                "nullable" : true,
                "example" : "2e1926a7"
              },
              "observationUnitName" : {
                "type" : "string",
                "description" : "the human readable name for an observation unit",
                "nullable" : true,
                "example" : "my_Plot_9001"
              },
              "parentType" : {
                "type" : "string",
                "description" : "The type of parent ex. 'MALE', 'FEMALE', 'SELF', 'POPULATION', etc.",
                "example" : "MALE",
                "enum" : [ "MALE", "FEMALE", "SELF", "POPULATION" ]
              }
            },
            "nullable" : true
          },
          "parent2" : {
            "type" : "object",
            "properties" : {
              "germplasmDbId" : {
                "type" : "string",
                "description" : "the unique identifier for a germplasm",
                "nullable" : true,
                "example" : "d34b10c3"
              },
              "germplasmName" : {
                "type" : "string",
                "description" : "the human readable name for a germplasm",
                "nullable" : true,
                "example" : "TME_419"
              },
              "observationUnitDbId" : {
                "type" : "string",
                "description" : "the unique identifier for an observation unit",
                "nullable" : true,
                "example" : "2e1926a7"
              },
              "observationUnitName" : {
                "type" : "string",
                "description" : "the human readable name for an observation unit",
                "nullable" : true,
                "example" : "my_Plot_9001"
              },
              "parentType" : {
                "type" : "string",
                "description" : "The type of parent ex. 'MALE', 'FEMALE', 'SELF', 'POPULATION', etc.",
                "example" : "MALE",
                "enum" : [ "MALE", "FEMALE", "SELF", "POPULATION" ]
              }
            },
            "nullable" : true
          },
          "plannedCrossDbId" : {
            "type" : "string",
            "description" : "the unique identifier for a planned cross",
            "nullable" : true,
            "example" : "c8905568"
          },
          "plannedCrossName" : {
            "type" : "string",
            "description" : "the human readable name for a planned cross",
            "nullable" : true,
            "example" : "my_Crosses_2018_01"
          },
          "pollinationEvents" : {
            "type" : "array",
            "description" : "The list of pollination events that occurred for this cross",
            "nullable" : true,
            "items" : {
              "type" : "object",
              "properties" : {
                "pollinationNumber" : {
                  "type" : "string",
                  "description" : "The unique identifier for this pollination event",
                  "nullable" : true
                },
                "pollinationSuccessful" : {
                  "type" : "boolean",
                  "description" : "True if the pollination was successful",
                  "nullable" : true
                },
                "pollinationTimeStamp" : {
                  "type" : "string",
                  "description" : "The timestamp when the pollination took place",
                  "format" : "date-time",
                  "nullable" : true
                }
              }
            }
          },
          "pollinationTimeStamp" : {
            "type" : "string",
            "description" : "**Deprecated in v2.1** Please use `pollinationEvents`. Github issue number #265 \n<br>The timestamp when the pollination took place",
            "format" : "date-time",
            "nullable" : true,
            "deprecated" : true
          }
        },
        "x-brapi-metadata" : {
          "description" : "The identifiers and metadata represent that specific organisms have mated to produce offspring with particular traits or genes. The offspring of a Cross might be developed into a Germplasm if the desired traits are present.",
          "module" : "BrAPI-Germplasm",
          "primaryModel" : true,
          "title" : "Cross"
        }
      },
      "CrossNewRequest" : {
        "type" : "object",
        "properties" : {
          "additionalInfo" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.",
            "nullable" : true
          },
          "crossAttributes" : {
            "type" : "array",
            "description" : "Set of custom attributes associated with a cross",
            "nullable" : true,
            "items" : {
              "type" : "object",
              "properties" : {
                "crossAttributeName" : {
                  "type" : "string",
                  "description" : "the human readable name of a cross attribute",
                  "nullable" : true,
                  "example" : "Humidity Percentage"
                },
                "crossAttributeValue" : {
                  "type" : "string",
                  "description" : "the value of a cross attribute",
                  "nullable" : true,
                  "example" : "45"
                }
              },
              "description" : "a custom attributes associated with a cross"
            }
          },
          "crossName" : {
            "type" : "string",
            "description" : "the human readable name for a cross",
            "nullable" : true,
            "example" : "my_Crosses_2018_01"
          },
          "crossType" : {
            "type" : "string",
            "description" : "the type of cross",
            "nullable" : true,
            "example" : "BIPARENTAL",
            "enum" : [ "BIPARENTAL", "SELF", "OPEN_POLLINATED", "BULK", "BULK_SELFED", "BULK_OPEN_POLLINATED", "DOUBLE_HAPLOID" ]
          },
          "crossingProjectDbId" : {
            "type" : "string",
            "description" : "the unique identifier for a crossing project",
            "nullable" : true,
            "example" : "696d7c92"
          },
          "crossingProjectName" : {
            "type" : "string",
            "description" : "the human readable name for a crossing project",
            "nullable" : true,
            "example" : "my_Crosses_2018"
          },
          "externalReferences" : {
            "title" : "ExternalReferences",
            "type" : "array",
            "description" : "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.",
            "example" : [ {
              "referenceId" : "doi:10.155454/12341234",
              "referenceSource" : "DOI"
            }, {
              "referenceId" : "75a50e76",
              "referenceSource" : "Remote Data Collection Upload Tool"
            } ],
            "items" : {
              "type" : "object",
              "properties" : {
                "referenceID" : {
                  "type" : "string",
                  "description" : "**Deprecated in v2.1** Please use `referenceId`. Github issue number #460 \n<br>The external reference ID. Could be a simple string or a URI.",
                  "nullable" : true,
                  "deprecated" : true
                },
                "referenceId" : {
                  "type" : "string",
                  "description" : "The external reference ID. Could be a simple string or a URI."
                },
                "referenceSource" : {
                  "type" : "string",
                  "description" : "An identifier for the source system or database of this reference"
                }
              }
            }
          },
          "parent1" : {
            "type" : "object",
            "properties" : {
              "germplasmDbId" : {
                "type" : "string",
                "description" : "the unique identifier for a germplasm",
                "nullable" : true,
                "example" : "d34b10c3"
              },
              "germplasmName" : {
                "type" : "string",
                "description" : "the human readable name for a germplasm",
                "nullable" : true,
                "example" : "TME_419"
              },
              "observationUnitDbId" : {
                "type" : "string",
                "description" : "the unique identifier for an observation unit",
                "nullable" : true,
                "example" : "2e1926a7"
              },
              "observationUnitName" : {
                "type" : "string",
                "description" : "the human readable name for an observation unit",
                "nullable" : true,
                "example" : "my_Plot_9001"
              },
              "parentType" : {
                "type" : "string",
                "description" : "The type of parent ex. 'MALE', 'FEMALE', 'SELF', 'POPULATION', etc.",
                "example" : "MALE",
                "enum" : [ "MALE", "FEMALE", "SELF", "POPULATION" ]
              }
            },
            "nullable" : true
          },
          "parent2" : {
            "type" : "object",
            "properties" : {
              "germplasmDbId" : {
                "type" : "string",
                "description" : "the unique identifier for a germplasm",
                "nullable" : true,
                "example" : "d34b10c3"
              },
              "germplasmName" : {
                "type" : "string",
                "description" : "the human readable name for a germplasm",
                "nullable" : true,
                "example" : "TME_419"
              },
              "observationUnitDbId" : {
                "type" : "string",
                "description" : "the unique identifier for an observation unit",
                "nullable" : true,
                "example" : "2e1926a7"
              },
              "observationUnitName" : {
                "type" : "string",
                "description" : "the human readable name for an observation unit",
                "nullable" : true,
                "example" : "my_Plot_9001"
              },
              "parentType" : {
                "type" : "string",
                "description" : "The type of parent ex. 'MALE', 'FEMALE', 'SELF', 'POPULATION', etc.",
                "example" : "MALE",
                "enum" : [ "MALE", "FEMALE", "SELF", "POPULATION" ]
              }
            },
            "nullable" : true
          },
          "plannedCrossDbId" : {
            "type" : "string",
            "description" : "the unique identifier for a planned cross",
            "nullable" : true,
            "example" : "c8905568"
          },
          "plannedCrossName" : {
            "type" : "string",
            "description" : "the human readable name for a planned cross",
            "nullable" : true,
            "example" : "my_Crosses_2018_01"
          },
          "pollinationEvents" : {
            "type" : "array",
            "description" : "The list of pollination events that occurred for this cross",
            "nullable" : true,
            "items" : {
              "type" : "object",
              "properties" : {
                "pollinationNumber" : {
                  "type" : "string",
                  "description" : "The unique identifier for this pollination event",
                  "nullable" : true
                },
                "pollinationSuccessful" : {
                  "type" : "boolean",
                  "description" : "True if the pollination was successful",
                  "nullable" : true
                },
                "pollinationTimeStamp" : {
                  "type" : "string",
                  "description" : "The timestamp when the pollination took place",
                  "format" : "date-time",
                  "nullable" : true
                }
              }
            }
          },
          "pollinationTimeStamp" : {
            "type" : "string",
            "description" : "**Deprecated in v2.1** Please use `pollinationEvents`. Github issue number #265 \n<br>The timestamp when the pollination took place",
            "format" : "date-time",
            "nullable" : true,
            "deprecated" : true
          }
        }
      },
      "CrossParent" : {
        "type" : "object",
        "properties" : {
          "germplasmDbId" : {
            "type" : "string",
            "description" : "the unique identifier for a germplasm",
            "nullable" : true,
            "example" : "d34b10c3"
          },
          "germplasmName" : {
            "type" : "string",
            "description" : "the human readable name for a germplasm",
            "nullable" : true,
            "example" : "TME_419"
          },
          "observationUnitDbId" : {
            "type" : "string",
            "description" : "the unique identifier for an observation unit",
            "nullable" : true,
            "example" : "2e1926a7"
          },
          "observationUnitName" : {
            "type" : "string",
            "description" : "the human readable name for an observation unit",
            "nullable" : true,
            "example" : "my_Plot_9001"
          },
          "parentType" : {
            "type" : "string",
            "description" : "The type of parent ex. 'MALE', 'FEMALE', 'SELF', 'POPULATION', etc.",
            "example" : "MALE",
            "enum" : [ "MALE", "FEMALE", "SELF", "POPULATION" ]
          }
        }
      },
      "CrossingProject" : {
        "required" : [ "crossingProjectDbId", "crossingProjectName" ],
        "type" : "object",
        "properties" : {
          "additionalInfo" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.",
            "nullable" : true
          },
          "commonCropName" : {
            "type" : "string",
            "description" : "the common name of a crop (for multi-crop systems)",
            "nullable" : true,
            "example" : "Cassava"
          },
          "crossingProjectDbId" : {
            "type" : "string",
            "description" : "The unique identifier for a crossing project",
            "example" : "ce0e1c29"
          },
          "crossingProjectDescription" : {
            "type" : "string",
            "description" : "the description for a crossing project",
            "nullable" : true,
            "example" : "Crosses between germplasm X and germplasm Y in male nursery study X_2018 and female nursery study Y_2018"
          },
          "crossingProjectName" : {
            "type" : "string",
            "description" : "The human readable name for a crossing project",
            "example" : "Crosses_2018"
          },
          "externalReferences" : {
            "title" : "ExternalReferences",
            "type" : "array",
            "description" : "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.",
            "nullable" : true,
            "example" : [ {
              "referenceId" : "doi:10.155454/12341234",
              "referenceSource" : "DOI"
            }, {
              "referenceId" : "75a50e76",
              "referenceSource" : "Remote Data Collection Upload Tool"
            } ],
            "items" : {
              "type" : "object",
              "properties" : {
                "referenceID" : {
                  "type" : "string",
                  "description" : "**Deprecated in v2.1** Please use `referenceId`. Github issue number #460 \n<br>The external reference ID. Could be a simple string or a URI.",
                  "nullable" : true,
                  "deprecated" : true
                },
                "referenceId" : {
                  "type" : "string",
                  "description" : "The external reference ID. Could be a simple string or a URI."
                },
                "referenceSource" : {
                  "type" : "string",
                  "description" : "An identifier for the source system or database of this reference"
                }
              }
            }
          },
          "potentialParents" : {
            "type" : "array",
            "description" : "A list of all the potential parents in the crossing block, available in the crossing project\n<br/> If the parameter 'includePotentialParents' is false, the array 'potentialParents' should be empty, null, or excluded from the response object.",
            "nullable" : true,
            "items" : {
              "type" : "object",
              "properties" : {
                "germplasmDbId" : {
                  "type" : "string",
                  "description" : "the unique identifier for a germplasm",
                  "nullable" : true,
                  "example" : "d34b10c3"
                },
                "germplasmName" : {
                  "type" : "string",
                  "description" : "the human readable name for a germplasm",
                  "nullable" : true,
                  "example" : "TME_419"
                },
                "observationUnitDbId" : {
                  "type" : "string",
                  "description" : "the unique identifier for an observation unit",
                  "nullable" : true,
                  "example" : "2e1926a7"
                },
                "observationUnitName" : {
                  "type" : "string",
                  "description" : "the human readable name for an observation unit",
                  "nullable" : true,
                  "example" : "my_Plot_9001"
                },
                "parentType" : {
                  "type" : "string",
                  "description" : "The type of parent ex. 'MALE', 'FEMALE', 'SELF', 'POPULATION', etc.",
                  "example" : "MALE",
                  "enum" : [ "MALE", "FEMALE", "SELF", "POPULATION" ]
                }
              }
            }
          },
          "programDbId" : {
            "type" : "string",
            "description" : "the unique identifier for a program",
            "nullable" : true,
            "example" : "a088176c"
          },
          "programName" : {
            "type" : "string",
            "description" : "the human readable name for a program",
            "nullable" : true,
            "example" : "IITA Cassava"
          }
        },
        "x-brapi-metadata" : {
          "description" : "A project structure where a list of PlannedCrosses is generated, the crossing events occur in the field, and the resulting actual Crosses can documented.",
          "module" : "BrAPI-Germplasm",
          "primaryModel" : true,
          "title" : "CrossingProject"
        }
      },
      "CrossingProjectNewRequest" : {
        "required" : [ "crossingProjectName" ],
        "type" : "object",
        "properties" : {
          "additionalInfo" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.",
            "nullable" : true
          },
          "commonCropName" : {
            "type" : "string",
            "description" : "the common name of a crop (for multi-crop systems)",
            "nullable" : true,
            "example" : "Cassava"
          },
          "crossingProjectDescription" : {
            "type" : "string",
            "description" : "the description for a crossing project",
            "nullable" : true,
            "example" : "Crosses between germplasm X and germplasm Y in male nursery study X_2018 and female nursery study Y_2018"
          },
          "crossingProjectName" : {
            "type" : "string",
            "description" : "The human readable name for a crossing project",
            "example" : "Crosses_2018"
          },
          "externalReferences" : {
            "title" : "ExternalReferences",
            "type" : "array",
            "description" : "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.",
            "nullable" : true,
            "example" : [ {
              "referenceId" : "doi:10.155454/12341234",
              "referenceSource" : "DOI"
            }, {
              "referenceId" : "75a50e76",
              "referenceSource" : "Remote Data Collection Upload Tool"
            } ],
            "items" : {
              "type" : "object",
              "properties" : {
                "referenceID" : {
                  "type" : "string",
                  "description" : "**Deprecated in v2.1** Please use `referenceId`. Github issue number #460 \n<br>The external reference ID. Could be a simple string or a URI.",
                  "nullable" : true,
                  "deprecated" : true
                },
                "referenceId" : {
                  "type" : "string",
                  "description" : "The external reference ID. Could be a simple string or a URI."
                },
                "referenceSource" : {
                  "type" : "string",
                  "description" : "An identifier for the source system or database of this reference"
                }
              }
            }
          },
          "potentialParents" : {
            "type" : "array",
            "description" : "A list of all the potential parents in the crossing block, available in the crossing project\n<br/> If the parameter 'includePotentialParents' is false, the array 'potentialParents' should be empty, null, or excluded from the response object.",
            "nullable" : true,
            "items" : {
              "type" : "object",
              "properties" : {
                "germplasmDbId" : {
                  "type" : "string",
                  "description" : "the unique identifier for a germplasm",
                  "nullable" : true,
                  "example" : "d34b10c3"
                },
                "germplasmName" : {
                  "type" : "string",
                  "description" : "the human readable name for a germplasm",
                  "nullable" : true,
                  "example" : "TME_419"
                },
                "observationUnitDbId" : {
                  "type" : "string",
                  "description" : "the unique identifier for an observation unit",
                  "nullable" : true,
                  "example" : "2e1926a7"
                },
                "observationUnitName" : {
                  "type" : "string",
                  "description" : "the human readable name for an observation unit",
                  "nullable" : true,
                  "example" : "my_Plot_9001"
                },
                "parentType" : {
                  "type" : "string",
                  "description" : "The type of parent ex. 'MALE', 'FEMALE', 'SELF', 'POPULATION', etc.",
                  "example" : "MALE",
                  "enum" : [ "MALE", "FEMALE", "SELF", "POPULATION" ]
                }
              }
            }
          },
          "programDbId" : {
            "type" : "string",
            "description" : "the unique identifier for a program",
            "nullable" : true,
            "example" : "a088176c"
          },
          "programName" : {
            "type" : "string",
            "description" : "the human readable name for a program",
            "nullable" : true,
            "example" : "IITA Cassava"
          }
        }
      },
      "DataLink" : {
        "type" : "object",
        "properties" : {
          "dataFormat" : {
            "type" : "string",
            "description" : "The structure of the data within a file. For example - VCF, table, image archive, multispectral image archives in EDAM ontology (used in Galaxy)\n\nMIAPPE V1.1 (DM-38) Data file description - Description of the format of the data file. May be a standard file format name, or a description of organization of the data in a tabular file.",
            "nullable" : true,
            "example" : "Image Archive"
          },
          "description" : {
            "type" : "string",
            "description" : "The general description of this data link\n\nMIAPPE V1.1 (DM-38) Data file description - Description of the format of the data file. May be a standard file format name, or a description of organization of the data in a tabular file.",
            "nullable" : true,
            "example" : "Raw drone images collected for this study"
          },
          "fileFormat" : {
            "type" : "string",
            "description" : "The MIME type of the file (ie text/csv, application/excel, application/zip).\n\nMIAPPE V1.1 (DM-38) Data file description - Description of the format of the data file. May be a standard file format name, or a description of organization of the data in a tabular file.",
            "nullable" : true,
            "example" : "application/zip"
          },
          "name" : {
            "type" : "string",
            "description" : "The name of the external data link\n\nMIAPPE V1.1 (DM-38) Data file description - Description of the format of the data file. May be a standard file format name, or a description of organization of the data in a tabular file.",
            "nullable" : true,
            "example" : "image-archive.zip"
          },
          "provenance" : {
            "type" : "string",
            "description" : "The description of the origin or ownership of this linked data. Could be a formal reference to software, method, or workflow.",
            "nullable" : true,
            "example" : "Image Processing Pipeline, built at the University of Antarctica: https://github.com/antarctica/pipeline"
          },
          "scientificType" : {
            "type" : "string",
            "description" : "The general type of data. For example- Genotyping, Phenotyping raw data, Phenotyping reduced data, Environmental, etc",
            "nullable" : true,
            "example" : "Environmental"
          },
          "url" : {
            "type" : "string",
            "description" : "URL describing the location of this data file to view or download\n\nMIAPPE V1.1 (DM-37) Data file link - Link to the data file (or digital object) in a public database or in a persistent institutional repository; or identifier of the data file when submitted together with the MIAPPE submission.",
            "format" : "uri",
            "nullable" : true,
            "example" : "https://brapi.org/image-archive.zip"
          },
          "version" : {
            "type" : "string",
            "description" : "The version number for this data \n\nMIAPPE V1.1 (DM-39) Data file version - The version of the dataset (the actual data).",
            "nullable" : true,
            "example" : "1.0.3"
          }
        }
      },
      "EnvironmentParameter" : {
        "required" : [ "description", "parameterName" ],
        "type" : "object",
        "properties" : {
          "description" : {
            "type" : "string",
            "description" : "Human-readable value of the environment parameter (defined above) constant within the experiment",
            "example" : "the soil type was clay"
          },
          "parameterName" : {
            "type" : "string",
            "description" : "Name of the environment parameter constant within the experiment\n\nMIAPPE V1.1 (DM-58) Environment parameter - Name of the environment parameter constant within the experiment. ",
            "example" : "soil type"
          },
          "parameterPUI" : {
            "type" : "string",
            "description" : "URI pointing to an ontology class for the parameter",
            "nullable" : true,
            "example" : "PECO:0007155"
          },
          "unit" : {
            "type" : "string",
            "description" : "Unit of the value for this parameter",
            "nullable" : true,
            "example" : "pH"
          },
          "unitPUI" : {
            "type" : "string",
            "description" : "URI pointing to an ontology class for the unit",
            "nullable" : true,
            "example" : "PECO:0007059"
          },
          "value" : {
            "type" : "string",
            "description" : "Numerical or categorical value\n\nMIAPPE V1.1 (DM-59) Environment parameter value - Value of the environment parameter (defined above) constant within the experiment.",
            "nullable" : true,
            "example" : "clay soil"
          },
          "valuePUI" : {
            "type" : "string",
            "description" : "URI pointing to an ontology class for the parameter value",
            "nullable" : true,
            "example" : "ENVO:00002262"
          }
        }
      },
      "Event" : {
        "required" : [ "eventDbId", "eventType" ],
        "type" : "object",
        "properties" : {
          "additionalInfo" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.",
            "nullable" : true
          },
          "date" : {
            "type" : "array",
            "description" : "**Deprecated in v2.1** Please use `eventDateRange.discreteDates`. Github issue number #440             \n<br>A list of dates when the event occurred\n<br>MIAPPE V1.1 (DM-68) Event date - Date and time of the event.",
            "nullable" : true,
            "example" : [ "2018-10-08T18:15:11Z", "2018-11-09T18:16:12Z" ],
            "deprecated" : true,
            "items" : {
              "type" : "string",
              "format" : "date-time"
            }
          },
          "eventDateRange" : {
            "type" : "object",
            "properties" : {
              "discreteDates" : {
                "type" : "array",
                "description" : "A list of dates when the event occurred\n<br/>MIAPPE V1.1 (DM-68) Event date - Date and time of the event.",
                "nullable" : true,
                "example" : [ "2018-10-08T18:15:11Z", "2018-11-09T18:16:12Z", "2018-11-19T18:16:12Z" ],
                "items" : {
                  "type" : "string",
                  "format" : "date-time"
                }
              },
              "endDate" : {
                "type" : "string",
                "description" : "The end of a continuous or regularly repetitive event\n<br/>MIAPPE V1.1 (DM-68) Event date - Date and time of the event.",
                "format" : "date-time",
                "nullable" : true,
                "example" : "2018-10-08T18:15:11Z"
              },
              "startDate" : {
                "type" : "string",
                "description" : "The beginning of a continuous or regularly repetitive event\n<br/>MIAPPE V1.1 (DM-68) Event date - Date and time of the event.",
                "format" : "date-time",
                "nullable" : true,
                "example" : "2018-10-08T18:15:11Z"
              }
            },
            "description" : "An object describing when a particular Event has taken place. An Event can occur at one or more discrete time points (`discreteDates`) or an event can happen continuously over a longer period of time (`startDate`, `endDate`)",
            "nullable" : true
          },
          "eventDbId" : {
            "type" : "string",
            "description" : "Internal database identifier",
            "example" : "8566d4cb"
          },
          "eventDescription" : {
            "type" : "string",
            "description" : "A detailed, human-readable description of this event\n<br/>MIAPPE V1.1 (DM-67) Event description - Description of the event, including details such as amount applied and possibly duration of the event. ",
            "nullable" : true,
            "example" : "A set of plots was watered"
          },
          "eventParameters" : {
            "type" : "array",
            "description" : "A list of objects describing additional event parameters. Each of the following accepts a human-readable value or URI",
            "nullable" : true,
            "example" : [ {
              "code" : "tiimp",
              "description" : "Implement or tool used for tillage",
              "name" : "tillage_implement",
              "unit" : "code",
              "value" : "TI001",
              "valueDescription" : "Standard V-Ripper (TI001)"
            }, {
              "code" : "tidep",
              "description" : "Tillage operations depth in centimeters",
              "name" : "tillage_operations_depth",
              "unit" : "cm",
              "valuesByDate" : [ "20", "50", "40" ]
            }, {
              "code" : "timix",
              "description" : "Tillage operations mixing effectiveness",
              "name" : "till_mix_effectiveness",
              "unit" : "percent",
              "value" : "50"
            } ],
            "items" : {
              "type" : "object",
              "properties" : {
                "code" : {
                  "type" : "string",
                  "description" : "The shortened code name of an event parameter\n<br>ICASA \"Code_Display\"",
                  "nullable" : true,
                  "example" : "tiimp"
                },
                "description" : {
                  "type" : "string",
                  "description" : "A human readable description of this event parameter. This description is usually associated with the 'name' and 'code' of an event parameter.",
                  "nullable" : true,
                  "example" : "Implement or tool used for tillage"
                },
                "key" : {
                  "type" : "string",
                  "description" : "**Deprecated in v2.1** Please use `name`. Github issue number #440             \n<br>Specifies the relationship between the event and the given property. E.g. fertilizer, operator",
                  "nullable" : true,
                  "example" : "operator",
                  "deprecated" : true
                },
                "name" : {
                  "type" : "string",
                  "description" : "The full name of an event parameter\n<br>ICASA \"Variable_Name\"",
                  "nullable" : true,
                  "example" : "tillage_implement"
                },
                "rdfValue" : {
                  "type" : "string",
                  "description" : "**Deprecated in v2.1** Please use `code`. Github issue number #440             \n<brThe type of the value given above, e.g. http://xmlns.com/foaf/0.1/Agent",
                  "nullable" : true,
                  "example" : "http://xmlns.com/foaf/0.1/Agent",
                  "deprecated" : true
                },
                "units" : {
                  "type" : "string",
                  "description" : "The units or data type of the 'value'. \n<br>If the 'value' comes from a standardized vocabulary or an encoded list of values, then 'unit' should be 'code'. \n<br>If the 'value' IS NOT a number, then 'unit' should specify a data type eg. 'text', 'boolean', 'date', etc. \n<br>If the value IS a number, then 'unit' should specify the units used eg. 'ml', 'cm', etc\n<br>ICASA \"Unit_or_type\"",
                  "nullable" : true,
                  "example" : "code"
                },
                "value" : {
                  "type" : "string",
                  "description" : "The single value of this event parameter. This single value is accurate for all the dates in the date range. If 'value' is populated then 'valuesByDate' should NOT be populated.",
                  "nullable" : true,
                  "example" : "TI001"
                },
                "valueDescription" : {
                  "type" : "string",
                  "description" : "If the event parameter 'unit' field is 'code', then use 'valueDescription' to add a human readable description to the value.",
                  "nullable" : true,
                  "example" : "Standard V-Ripper (TI001)"
                },
                "valuesByDate" : {
                  "type" : "array",
                  "description" : "An array of values corresponding to each timestamp in the 'discreteDates' array of this event. The 'valuesByDate' array should exactly match the size of the 'discreteDates' array. If 'valuesByDate' is populated then 'value' should NOT be populated.",
                  "nullable" : true,
                  "example" : [ "20", "50", "40" ],
                  "items" : {
                    "type" : "string"
                  }
                }
              }
            }
          },
          "eventType" : {
            "type" : "string",
            "description" : "General category for this event (e.g. fertilizer, irrigation, tillage). Each eventType should correspond to exactly one eventTypeDbId, if provided.\n<br/>ICASA Management events allow for the following types: planting, fertilizer, irrigation, tillage, organic_material, harvest, bed_prep, inorg_mulch, inorg_mul_rem, chemicals, mowing, observation, weeding, puddling, flood_level, other\n<br/>MIAPPE V1.1 (DM-65) Event type - Short name of the event.",
            "example" : "tillage"
          },
          "eventTypeDbId" : {
            "type" : "string",
            "description" : "An identifier for this event type, in the form of an ontology class reference\n<br/>ICASA Management events allow for the following types: planting, fertilizer, irrigation, tillage, organic_material, harvest, bed_prep, inorg_mulch, inorg_mul_rem, chemicals, mowing, observation, weeding, puddling, flood_level, other\n<br/>MIAPPE V1.1 (DM-66) Event accession number - Accession number of the event type in a suitable controlled vocabulary (Crop Ontology).",
            "nullable" : true,
            "example" : "4e7d691e"
          },
          "observationUnitDbIds" : {
            "type" : "array",
            "description" : "A list of the affected observation units. If this parameter is not given, it is understood that the event affected all units in the study",
            "nullable" : true,
            "example" : [ "8439eaff", "d7682e7a", "305ae51c" ],
            "items" : {
              "type" : "string"
            }
          },
          "studyDbId" : {
            "type" : "string",
            "description" : "The study in which the event occurred",
            "nullable" : true,
            "example" : "2cc2001f"
          },
          "studyName" : {
            "type" : "string",
            "description" : "The human readable name of a study",
            "nullable" : true,
            "example" : "2cc2001f"
          }
        },
        "x-brapi-metadata" : {
          "description" : "An event is discrete occurrence at a particular time in the experiment. Events may be the realization of Treatments or parts of Treatments, or may be confounding to Treatments.\n<br> ICASA Management Events allow for the following types -> planting, fertilizer, irrigation, tillage, organic_material, harvest, bed_prep, inorg_mulch, inorg_mul_rem, chemicals, mowing, observation, weeding, puddling, flood_level, other",
          "module" : "BrAPI-Phenotyping",
          "primaryModel" : true,
          "title" : "Event"
        }
      },
      "ExternalReferences" : {
        "title" : "ExternalReferences",
        "type" : "array",
        "description" : "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.",
        "example" : [ {
          "referenceId" : "doi:10.155454/12341234",
          "referenceSource" : "DOI"
        }, {
          "referenceId" : "75a50e76",
          "referenceSource" : "Remote Data Collection Upload Tool"
        } ],
        "items" : {
          "type" : "object",
          "properties" : {
            "referenceID" : {
              "type" : "string",
              "description" : "**Deprecated in v2.1** Please use `referenceId`. Github issue number #460 \n<br>The external reference ID. Could be a simple string or a URI.",
              "nullable" : true,
              "deprecated" : true
            },
            "referenceId" : {
              "type" : "string",
              "description" : "The external reference ID. Could be a simple string or a URI."
            },
            "referenceSource" : {
              "type" : "string",
              "description" : "An identifier for the source system or database of this reference"
            }
          }
        }
      },
      "GenomeMap" : {
        "required" : [ "commonCropName", "mapDbId", "mapName", "type" ],
        "type" : "object",
        "properties" : {
          "additionalInfo" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.",
            "nullable" : true
          },
          "comments" : {
            "type" : "string",
            "description" : "Additional comments about a `GenomeMap`",
            "nullable" : true,
            "example" : "Comments about this map"
          },
          "commonCropName" : {
            "type" : "string",
            "description" : "The common name of the `Crop`",
            "example" : "Paw Paw"
          },
          "documentationURL" : {
            "type" : "string",
            "description" : "A URL to the human readable documentation of an object",
            "format" : "uri",
            "nullable" : true,
            "example" : "https://brapi.org"
          },
          "linkageGroupCount" : {
            "type" : "integer",
            "description" : "The number of linkage groups present in a `GenomeMap`",
            "nullable" : true,
            "example" : 5
          },
          "mapDbId" : {
            "type" : "string",
            "description" : "The ID which uniquely identifies a `GenomeMap`",
            "example" : "142cffd5"
          },
          "mapName" : {
            "type" : "string",
            "description" : "A human readable name for a `GenomeMap`",
            "example" : "Genome Map 1"
          },
          "mapPUI" : {
            "type" : "string",
            "description" : "The DOI or other permanent identifier for a `GenomeMap`",
            "nullable" : true,
            "example" : "doi:10.3207/2959859860"
          },
          "markerCount" : {
            "type" : "integer",
            "description" : "The number of markers present in a `GenomeMap`",
            "nullable" : true,
            "example" : 1100
          },
          "publishedDate" : {
            "type" : "string",
            "description" : "The date this `GenomeMap` was published",
            "format" : "date-time",
            "nullable" : true
          },
          "scientificName" : {
            "type" : "string",
            "description" : "Full scientific binomial format name. This includes Genus, Species, and Sub-species",
            "nullable" : true,
            "example" : "Zea mays"
          },
          "type" : {
            "type" : "string",
            "description" : "The type of map this represents, usually \"Genetic\" or \"Physical\"",
            "example" : "Genetic"
          },
          "unit" : {
            "type" : "string",
            "description" : "The units used to describe the data in a `GenomeMap`",
            "nullable" : true,
            "example" : "cM"
          }
        },
        "x-brapi-metadata" : {
          "description" : "The GenomeMap represents the metadata associated with a reference map of a particular species genome. A GenomeMap can either represent a physical map or genetic map.",
          "module" : "BrAPI-Genotyping",
          "primaryModel" : true,
          "title" : "GenomeMap"
        }
      },
      "Germplasm" : {
        "required" : [ "commonCropName", "germplasmDbId", "germplasmName", "germplasmPUI" ],
        "type" : "object",
        "properties" : {
          "accessionNumber" : {
            "type" : "string",
            "description" : "The unique identifier for a material or germplasm within a genebank\n\nMCPD (v2.1) (ACCENUMB) 2. This is the unique identifier for accessions within a genebank, and is assigned when a sample is entered into the genebank collection (e.g. \"PI 113869\").",
            "nullable" : true,
            "example" : "A0000003"
          },
          "acquisitionDate" : {
            "type" : "string",
            "description" : "The date a material or germplasm was acquired by the genebank \n\nMCPD (v2.1) (ACQDATE) 12. Date on which the accession entered the collection [YYYYMMDD] where YYYY is the year, MM is the month and DD is the day. Missing data (MM or DD) should be indicated with hyphens or \"00\" [double zero].",
            "format" : "date",
            "nullable" : true
          },
          "additionalInfo" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.",
            "nullable" : true
          },
          "biologicalStatusOfAccessionCode" : {
            "type" : "string",
            "description" : "MCPD (v2.1) (SAMPSTAT) 19. The coding scheme proposed can be used at 3 different levels of detail: either by using the general codes such as 100, 200, 300, 400, or by using the more specific codes such as 110, 120, etc. \n\n100) Wild \n110) Natural \n120) Semi-natural/wild \n130) Semi-natural/sown \n200) Weedy \n300) Traditional cultivar/landrace \n400) Breeding/research material \n410) Breeders line \n411) Synthetic population \n412) Hybrid \n413) Founder stock/base population \n414) Inbred line (parent of hybrid cultivar) \n415) Segregating population \n416) Clonal selection \n420) Genetic stock \n421) Mutant (e.g. induced/insertion mutants, tilling populations) \n422) Cytogenetic stocks (e.g. chromosome addition/substitution, aneuploids,  amphiploids) \n423) Other genetic stocks (e.g. mapping populations) \n500) Advanced or improved cultivar (conventional breeding methods) \n600) GMO (by genetic engineering) \n999) Other (Elaborate in REMARKS field)",
            "nullable" : true,
            "example" : "420",
            "enum" : [ "100", "110", "120", "130", "200", "300", "400", "410", "411", "412", "413", "414", "415", "416", "420", "421", "422", "423", "500", "600", "999" ]
          },
          "biologicalStatusOfAccessionDescription" : {
            "type" : "string",
            "description" : "Supplemental text description for 'biologicalStatusOfAccessionCode'",
            "nullable" : true,
            "example" : "Genetic stock"
          },
          "breedingMethodDbId" : {
            "type" : "string",
            "description" : "The unique identifier for the breeding method used to create this germplasm",
            "nullable" : true,
            "example" : "ffcce7ef"
          },
          "breedingMethodName" : {
            "type" : "string",
            "description" : "human readable name of the breeding method",
            "nullable" : true,
            "example" : "Male Backcross"
          },
          "collection" : {
            "type" : "string",
            "description" : "A specific panel/collection/population name this germplasm belongs to.",
            "nullable" : true,
            "example" : "Rice Diversity Panel 1 (RDP1)"
          },
          "commonCropName" : {
            "type" : "string",
            "description" : "Common name for the crop \n\nMCPD (v2.1) (CROPNAME) 10. Common name of the crop. Example: \"malting barley\", \"mas\".",
            "example" : "Maize"
          },
          "countryOfOriginCode" : {
            "type" : "string",
            "description" : "3-letter ISO 3166-1 code of the country in which the sample was originally collected \n\nMCPD (v2.1) (ORIGCTY) 13. 3-letter ISO 3166-1 code of the country in which the sample was originally collected (e.g. landrace, crop wild relative, farmers variety), bred or selected (breeding lines, GMOs, segregating populations, hybrids, modern cultivars, etc.). Note- Descriptors 14 to 16 below should be completed accordingly only if it was \"collected\".",
            "nullable" : true,
            "example" : "BES"
          },
          "defaultDisplayName" : {
            "type" : "string",
            "description" : "Human readable name used for display purposes",
            "nullable" : true,
            "example" : "A0000003"
          },
          "documentationURL" : {
            "type" : "string",
            "description" : "A URL to the human readable documentation of an object",
            "format" : "uri",
            "nullable" : true,
            "example" : "https://wiki.brapi.org"
          },
          "donors" : {
            "type" : "array",
            "description" : "List of donor institutes",
            "nullable" : true,
            "items" : {
              "type" : "object",
              "properties" : {
                "donorAccessionNumber" : {
                  "type" : "string",
                  "description" : "The accession number assigned by the donor\n                              \nMCPD (v2.1) (DONORNUMB) 23. Identifier assigned to an accession by the donor. Follows ACCENUMB standard.",
                  "nullable" : true,
                  "example" : "A0000123"
                },
                "donorInstituteCode" : {
                  "type" : "string",
                  "description" : "The institute code for the donor institute\n<br/>MCPD (v2.1) (DONORCODE) 22. FAO WIEWS code of the donor institute. Follows INSTCODE standard.",
                  "nullable" : true,
                  "example" : "PER001"
                }
              }
            }
          },
          "externalReferences" : {
            "title" : "ExternalReferences",
            "type" : "array",
            "description" : "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.",
            "nullable" : true,
            "example" : [ {
              "referenceId" : "doi:10.155454/12341234",
              "referenceSource" : "DOI"
            }, {
              "referenceId" : "75a50e76",
              "referenceSource" : "Remote Data Collection Upload Tool"
            } ],
            "items" : {
              "type" : "object",
              "properties" : {
                "referenceID" : {
                  "type" : "string",
                  "description" : "**Deprecated in v2.1** Please use `referenceId`. Github issue number #460 \n<br>The external reference ID. Could be a simple string or a URI.",
                  "nullable" : true,
                  "deprecated" : true
                },
                "referenceId" : {
                  "type" : "string",
                  "description" : "The external reference ID. Could be a simple string or a URI."
                },
                "referenceSource" : {
                  "type" : "string",
                  "description" : "An identifier for the source system or database of this reference"
                }
              }
            }
          },
          "genus" : {
            "type" : "string",
            "description" : "Genus name for taxon. Initial uppercase letter required.\n\nMCPD (v2.1) (GENUS) 5. Genus name for taxon. Initial uppercase letter required.\n\nMIAPPE V1.1 (DM-43) Genus - Genus name for the organism under study, according to standard scientific nomenclature.",
            "nullable" : true,
            "example" : "Aspergillus"
          },
          "germplasmDbId" : {
            "type" : "string",
            "description" : "The ID which uniquely identifies a germplasm within the given database server \n<br>MIAPPE V1.1 (DM-41) Biological material ID - Code used to identify the biological material in the data file. Should be unique within the Investigation. Can correspond to experimental plant ID, seed lot ID, etc. This material identification is different from a BiosampleID which corresponds to Observation Unit or Samples sections below.",
            "example" : "d4076594"
          },
          "germplasmName" : {
            "type" : "string",
            "description" : "Name of the germplasm. It can be the preferred name and does not have to be unique.\n\nMCPD (v2.1) (ACCENAME) 11. Either a registered or other designation given to the material received, other than the donors accession number (23) or collecting number (3). First letter uppercase. Multiple names are separated by a semicolon without space.",
            "example" : "A0000003"
          },
          "germplasmOrigin" : {
            "type" : "array",
            "description" : "Information for material (orchard, natural sites, ...). Geographic identification of the plants from which seeds or cutting have been taken to produce that germplasm.",
            "nullable" : true,
            "items" : {
              "type" : "object",
              "properties" : {
                "coordinateUncertainty" : {
                  "type" : "string",
                  "description" : "Uncertainty associated with the coordinates in meters. Leave the value empty if the uncertainty is unknown.",
                  "nullable" : true,
                  "example" : "20"
                },
                "coordinates" : {
                  "title" : "GeoJSON",
                  "type" : "object",
                  "properties" : {
                    "geometry" : {
                      "title" : "GeoJSON Geometry",
                      "type" : "object",
                      "description" : "A geometry as defined by GeoJSON (RFC 7946). In this context, only Point or Polygon geometry are allowed.",
                      "example" : {
                        "coordinates" : [ -76.506042, 42.417373, 123 ],
                        "type" : "Point"
                      },
                      "discriminator" : {
                        "propertyName" : "type",
                        "mapping" : {
                          "Point" : "#/components/schemas/pointGeometry",
                          "Polygon" : "#/components/schemas/polygonGeometry"
                        }
                      },
                      "oneOf" : [ {
                        "required" : [ "coordinates", "type" ],
                        "type" : "object",
                        "properties" : {
                          "coordinates" : {
                            "minItems" : 2,
                            "type" : "array",
                            "description" : "A single position",
                            "example" : [ -76.506042, 42.417373, 123 ],
                            "items" : {
                              "type" : "number"
                            }
                          },
                          "type" : {
                            "type" : "string",
                            "description" : "The literal string \"Point\"",
                            "example" : "Point",
                            "default" : "Point"
                          }
                        },
                        "description" : "Copied from RFC 7946 Section 3.1.1\n\nA position is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or\neasting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element."
                      }, {
                        "required" : [ "coordinates", "type" ],
                        "type" : "object",
                        "properties" : {
                          "coordinates" : {
                            "type" : "array",
                            "description" : "An array of linear rings",
                            "example" : [ [ [ -77.456654, 42.241133, 494 ], [ -75.414133, 41.508282, 571 ], [ -76.506042, 42.417373, 123 ], [ -77.456654, 42.241133, 346 ] ] ],
                            "items" : {
                              "minItems" : 4,
                              "type" : "array",
                              "description" : "An array of at least four positions where the first equals the last",
                              "example" : [ [ -77.456654, 42.241133, 494 ], [ -75.414133, 41.508282, 571 ], [ -76.506042, 42.417373, 123 ], [ -77.456654, 42.241133, 346 ] ],
                              "items" : {
                                "minItems" : 2,
                                "type" : "array",
                                "description" : "A single position",
                                "example" : [ -76.506042, 42.417373, 123 ],
                                "items" : {
                                  "type" : "number"
                                }
                              }
                            }
                          },
                          "type" : {
                            "type" : "string",
                            "description" : "The literal string \"Polygon\"",
                            "example" : "Polygon",
                            "default" : "Polygon"
                          }
                        },
                        "description" : "An array of Linear Rings. Each Linear Ring is an array of Points. \n\nA Point is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or\neasting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element."
                      } ]
                    },
                    "type" : {
                      "type" : "string",
                      "description" : "The literal string \"Feature\"",
                      "example" : "Feature",
                      "default" : "Feature"
                    }
                  },
                  "description" : "One geometry as defined by GeoJSON (RFC 7946). All coordinates are decimal values on the WGS84 geographic coordinate reference system.\n\nCopied from RFC 7946 Section 3.1.1\n\nA position is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or\neasting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element.",
                  "nullable" : true
                }
              },
              "description" : "MIAPPE V1.1 (DM-52) \n\nMIAPPE V1.1 (DM-53) \n\nMIAPPE V1.1 (DM-54) \n\nMIAPPE V1.1 (DM-55)\n\nMCPD (v2.1) (COORDUNCERT) 15.5 \n\nMCPD (v2.1) (ELEVATION) 16. \n\nMCPD (v2.1) (GEOREFMETH) 15.7 \n\nMCPD (v2.1) (DECLATITUDE) 15.1 \n\nMCPD (v2.1) (DECLONGITUDE) 15.3 "
            }
          },
          "germplasmPUI" : {
            "type" : "string",
            "description" : "The Permanent Unique Identifier which represents a germplasm\n\nMIAPPE V1.1 (DM-41) Biological material ID - Code used to identify the biological material in the data file. Should be unique within the Investigation. Can correspond to experimental plant ID, seed lot ID, etc This material identification is different from a BiosampleID which corresponds to Observation Unit or Samples sections below.\n\nMIAPPE V1.1 (DM-51) Material source DOI - Digital Object Identifier (DOI) of the material source\n\nMCPD (v2.1) (PUID) 0. Any persistent, unique identifier assigned to the accession so it can be unambiguously referenced at the global level and the information associated with it harvested through automated means. Report one PUID for each accession. The Secretariat of the International Treaty on Plant Genetic Resources for Food and Agriculture (PGRFA) is facilitating the assignment of a persistent unique identifier (PUID), in the form of a DOI, to PGRFA at the accession level. Genebanks not applying a true PUID to their accessions should use, and request recipients to use, the concatenation of INSTCODE, ACCENUMB, and GENUS as a globally unique identifier similar in most respects to the PUID whenever they exchange information on accessions with third parties.",
            "example" : "http://pui.per/accession/A0000003"
          },
          "germplasmPreprocessing" : {
            "type" : "string",
            "description" : "Description of any process or treatment applied uniformly to the germplasm, prior to the study itself. Can be provided as free text or as an accession number from a suitable controlled vocabulary.",
            "nullable" : true,
            "example" : "EO:0007210; transplanted from study 2351 observation unit ID: pot:894"
          },
          "instituteCode" : {
            "type" : "string",
            "description" : "The code for the institute that maintains the material. \n\nMCPD (v2.1) (INSTCODE) 1. FAO WIEWS code of the institute where the accession is maintained. The codes consist of the 3-letter ISO 3166 country code of the country where the institute is located plus a number (e.g. PER001). The current set of institute codes is available from http://www.fao.org/wiews. For those institutes not yet having an FAO Code, or for those with \"obsolete\" codes, see \"Common formatting rules (v)\".",
            "nullable" : true,
            "example" : "PER001"
          },
          "instituteName" : {
            "type" : "string",
            "description" : "The name of the institute that maintains the material",
            "nullable" : true,
            "example" : "The BrAPI Institute"
          },
          "pedigree" : {
            "type" : "string",
            "description" : "The cross name and optional selection history.\n\nMCPD (v2.1) (ANCEST) 20. Information about either pedigree or other description of ancestral information (e.g. parent variety in case of mutant or selection). For example a pedigree 'Hanna/7*Atlas//Turk/8*Atlas' or a description 'mutation found in Hanna', 'selection from Irene' or 'cross involving amongst others Hanna and Irene'.",
            "nullable" : true,
            "example" : "A0000001/A0000002"
          },
          "seedSource" : {
            "type" : "string",
            "description" : "An identifier for the source of the biological material\n<br/>MIAPPE V1.1 (DM-50) Material source ID (Holding institute/stock centre, accession) - An identifier for the source of the biological material, in the form of a key-value pair comprising the name/identifier of the repository from which the material was sourced plus the accession number of the repository for that material. Where an accession number has not been assigned, but the material has been derived from the crossing of known accessions, the material can be defined as follows: \"mother_accession X father_accession\", or, if father is unknown, as \"mother_accession X UNKNOWN\". For in situ material, the region of provenance may be used when an accession is not available.",
            "nullable" : true,
            "example" : "INRA:095115_inra"
          },
          "seedSourceDescription" : {
            "type" : "string",
            "description" : "Description of the material source\n\nMIAPPE V1.1 (DM-56) Material source description - Description of the material source",
            "nullable" : true,
            "example" : "Branches were collected from a 10-year-old tree growing in a progeny trial established in a loamy brown earth soil."
          },
          "species" : {
            "type" : "string",
            "description" : "Specific epithet portion of the scientific name in lowercase letters.\n\nMCPD (v2.1) (SPECIES) 6. Specific epithet portion of the scientific name in lowercase letters. Only the following abbreviation is allowed: \"sp.\" \n\nMIAPPE V1.1 (DM-44) Species - Species name (formally: specific epithet) for the organism under study, according to standard scientific nomenclature.",
            "nullable" : true,
            "example" : "fructus"
          },
          "speciesAuthority" : {
            "type" : "string",
            "description" : "The authority organization responsible for tracking and maintaining the species name \n\nMCPD (v2.1) (SPAUTHOR) 7. Provide the authority for the species name.",
            "nullable" : true,
            "example" : "Smith, 1822"
          },
          "storageTypes" : {
            "type" : "array",
            "description" : "The type of storage this germplasm is kept in at a genebank.",
            "nullable" : true,
            "example" : [ {
              "code" : "20",
              "description" : "Field collection"
            }, {
              "code" : "11",
              "description" : "Short term"
            } ],
            "items" : {
              "type" : "object",
              "properties" : {
                "code" : {
                  "type" : "string",
                  "description" : "The 2 digit code representing the type of storage this germplasm is kept in at a genebank. \n\nMCPD (v2.1) (STORAGE) 26. If germplasm is maintained under different types of storage, multiple choices are allowed, separated by a semicolon (e.g. 20;30). (Refer to FAO/IPGRI Genebank Standards 1994 for details on storage type.) \n\n10) Seed collection \n11) Short term \n12) Medium term \n13) Long term \n20) Field collection \n30) In vitro collection \n40) Cryo-preserved collection \n50) DNA collection \n99) Other (elaborate in REMARKS field)",
                  "nullable" : true,
                  "example" : "11",
                  "enum" : [ "10", "11", "12", "13", "20", "30", "40", "50", "99" ]
                },
                "description" : {
                  "type" : "string",
                  "description" : "A supplemental text description of the storage type",
                  "nullable" : true,
                  "example" : "Short term"
                }
              }
            }
          },
          "subtaxa" : {
            "type" : "string",
            "description" : "Subtaxon can be used to store any additional taxonomic identifier.\n\nMCPD (v2.1) (SUBTAXA) 8. Subtaxon can be used to store any additional taxonomic identifier. The following abbreviations are allowed: \"subsp.\" (for subspecies); \"convar.\" (for convariety); \"var.\" (for variety); \"f.\" (for form); \"Group\" (for \"cultivar group\").\n\nMIAPPE V1.1 (DM-44) Infraspecific name - Name of any subtaxa level, including variety, crossing name, etc. It can be used to store any additional taxonomic identifier. Either free text description or key-value pair list format (the key is the name of the rank and the value is the value of  the rank). Ranks can be among the following terms: subspecies, cultivar, variety, subvariety, convariety, group, subgroup, hybrid, line, form, subform. For MCPD compliance, the following abbreviations are allowed: subsp. (subspecies); convar. (convariety); var. (variety); f. (form); Group (cultivar group).",
            "nullable" : true,
            "example" : "Aspergillus fructus A"
          },
          "subtaxaAuthority" : {
            "type" : "string",
            "description" : "The authority organization responsible for tracking and maintaining the subtaxon information\n\nMCPD (v2.1) (SUBTAUTHOR) 9. Provide the subtaxon authority at the most detailed taxonomic level.",
            "nullable" : true,
            "example" : "Smith, 1822"
          },
          "synonyms" : {
            "type" : "array",
            "description" : "List of alternative names or IDs used to reference this germplasm\n\nMCPD (v2.1) (OTHERNUMB) 24. Any other identifiers known to exist in other collections for this accession. Use the following format: INSTCODE:ACCENUMB;INSTCODE:identifier;INSTCODE and identifier are separated by a colon without space. Pairs of INSTCODE and identifier are separated by a semicolon without space. When the institute is not known, the identifier should be preceded by a colon.",
            "nullable" : true,
            "items" : {
              "type" : "object",
              "properties" : {
                "synonym" : {
                  "type" : "string",
                  "description" : "Alternative name or ID used to reference this germplasm",
                  "nullable" : true,
                  "example" : "variety_1"
                },
                "type" : {
                  "type" : "string",
                  "description" : "A descriptive classification for this synonym",
                  "nullable" : true,
                  "example" : "Pre-Code"
                }
              }
            }
          },
          "taxonIds" : {
            "type" : "array",
            "description" : "The list of IDs for this SPECIES from different sources. If present, NCBI Taxon should be always listed as \"ncbiTaxon\" preferably with a purl. The rank of this ID should be species.\n\nMIAPPE V1.1 (DM-42) Organism - An identifier for the organism at the species level. Use of the NCBI taxon ID is recommended.",
            "nullable" : true,
            "items" : {
              "required" : [ "sourceName", "taxonId" ],
              "type" : "object",
              "properties" : {
                "sourceName" : {
                  "type" : "string",
                  "description" : "The human readable name of the taxonomy provider",
                  "example" : "NCBI"
                },
                "taxonId" : {
                  "type" : "string",
                  "description" : "The identifier (name, ID, URI) of a particular taxonomy within the source provider",
                  "example" : "2026747"
                }
              }
            }
          }
        },
        "x-brapi-metadata" : {
          "description" : "The conceptual identifiers and metadata describing a genetically unique organism that is noteworthy in some way. Depending on context, a Germplasm might be synonymous with Accession, Line, or Genotype. Note that Germplasm is conceptual data, not necessarily associated to a real physical object, so Seed/Inventory Lots and Observation Units become physical instantiations of a particular Germplasm. Note a Germplasm is unique and noteworthy, so a Cross may or may not create a new Germplasm, since not every Cross is unique or noteworthy.",
          "module" : "BrAPI-Germplasm",
          "primaryModel" : true,
          "title" : "Germplasm"
        }
      },
      "GermplasmAttribute" : {
        "required" : [ "attributeDbId", "attributeName", "method", "scale", "trait" ],
        "type" : "object",
        "properties" : {
          "additionalInfo" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.",
            "nullable" : true
          },
          "attributeCategory" : {
            "type" : "string",
            "description" : "General category for the attribute. very similar to Trait class.",
            "example" : "Morphological"
          },
          "attributeDbId" : {
            "type" : "string",
            "description" : "The ID which uniquely identifies this attribute within the given database server",
            "example" : "2f08b902"
          },
          "attributeDescription" : {
            "type" : "string",
            "description" : "A human readable description of this attribute",
            "example" : "Height of the plant measured in meters by a tape"
          },
          "attributeName" : {
            "type" : "string",
            "description" : "A human readable name for this attribute",
            "example" : "Plant Height 1"
          },
          "attributePUI" : {
            "type" : "string",
            "description" : "The Permanent Unique Identifier of an Attribute, usually in the form of a URI",
            "example" : "http://my-traits.com/trait/CO_123:0008012"
          },
          "commonCropName" : {
            "type" : "string",
            "description" : "Crop name (examples: \"Maize\", \"Wheat\")",
            "nullable" : true,
            "example" : "Maize"
          },
          "contextOfUse" : {
            "type" : "array",
            "description" : "Indication of how trait is routinely used. (examples: [\"Trial evaluation\", \"Nursery evaluation\"])",
            "nullable" : true,
            "example" : [ "Trial evaluation", "Nursery evaluation" ],
            "items" : {
              "type" : "string"
            }
          },
          "defaultValue" : {
            "type" : "string",
            "description" : "Variable default value. (examples: \"red\", \"2.3\", etc.)",
            "nullable" : true,
            "example" : "2.0"
          },
          "documentationURL" : {
            "type" : "string",
            "description" : "A URL to the human readable documentation of an object",
            "format" : "uri",
            "nullable" : true,
            "example" : "https://wiki.brapi.org/documentation.html"
          },
          "externalReferences" : {
            "title" : "ExternalReferences",
            "type" : "array",
            "description" : "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.",
            "nullable" : true,
            "example" : [ {
              "referenceId" : "doi:10.155454/12341234",
              "referenceSource" : "DOI"
            }, {
              "referenceId" : "75a50e76",
              "referenceSource" : "Remote Data Collection Upload Tool"
            } ],
            "items" : {
              "type" : "object",
              "properties" : {
                "referenceID" : {
                  "type" : "string",
                  "description" : "**Deprecated in v2.1** Please use `referenceId`. Github issue number #460 \n<br>The external reference ID. Could be a simple string or a URI.",
                  "nullable" : true,
                  "deprecated" : true
                },
                "referenceId" : {
                  "type" : "string",
                  "description" : "The external reference ID. Could be a simple string or a URI."
                },
                "referenceSource" : {
                  "type" : "string",
                  "description" : "An identifier for the source system or database of this reference"
                }
              }
            }
          },
          "growthStage" : {
            "type" : "string",
            "description" : "Growth stage at which measurement is made (examples: \"flowering\")",
            "nullable" : true,
            "example" : "flowering"
          },
          "institution" : {
            "type" : "string",
            "description" : "Name of institution submitting the variable",
            "nullable" : true,
            "example" : "The BrAPI Institute"
          },
          "language" : {
            "type" : "string",
            "description" : "2 letter ISO 639-1 code for the language of submission of the variable.",
            "nullable" : true,
            "example" : "en"
          },
          "method" : {
            "required" : [ "methodName" ],
            "type" : "object",
            "properties" : {
              "additionalInfo" : {
                "type" : "object",
                "additionalProperties" : {
                  "type" : "string"
                },
                "description" : "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.",
                "nullable" : true
              },
              "bibliographicalReference" : {
                "type" : "string",
                "description" : "Bibliographical reference describing the method.\n<br/>MIAPPE V1.1 (DM-91) Reference associated to the method - URI/DOI of reference describing the method.",
                "nullable" : true,
                "example" : "Smith, 1893, Really Cool Paper, Popular Journal"
              },
              "description" : {
                "type" : "string",
                "description" : "Method description\n<br/>MIAPPE V1.1 (DM-90) Method description - Textual description of the method, which may extend a method defined in an external reference with specific parameters, e.g. growth stage, inoculation precise organ (leaf number)",
                "nullable" : true,
                "example" : "A measuring tape was used"
              },
              "externalReferences" : {
                "title" : "ExternalReferences",
                "type" : "array",
                "description" : "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.",
                "nullable" : true,
                "example" : [ {
                  "referenceId" : "doi:10.155454/12341234",
                  "referenceSource" : "DOI"
                }, {
                  "referenceId" : "75a50e76",
                  "referenceSource" : "Remote Data Collection Upload Tool"
                } ],
                "items" : {
                  "type" : "object",
                  "properties" : {
                    "referenceID" : {
                      "type" : "string",
                      "description" : "**Deprecated in v2.1** Please use `referenceId`. Github issue number #460 \n<br>The external reference ID. Could be a simple string or a URI.",
                      "nullable" : true,
                      "deprecated" : true
                    },
                    "referenceId" : {
                      "type" : "string",
                      "description" : "The external reference ID. Could be a simple string or a URI."
                    },
                    "referenceSource" : {
                      "type" : "string",
                      "description" : "An identifier for the source system or database of this reference"
                    }
                  }
                }
              },
              "formula" : {
                "type" : "string",
                "description" : "For computational methods i.e., when the method consists in assessing the trait by computing measurements, write the generic formula used for the calculation",
                "nullable" : true,
                "example" : "a^2 + b^2 = c^2"
              },
              "methodClass" : {
                "type" : "string",
                "description" : "Method class (examples: \"Measurement\", \"Counting\", \"Estimation\", \"Computation\", etc.)",
                "nullable" : true,
                "example" : "Measurement"
              },
              "methodDbId" : {
                "type" : "string",
                "description" : "Method unique identifier",
                "example" : "0adb2764"
              },
              "methodName" : {
                "type" : "string",
                "description" : "Human readable name for the method\n<br/>MIAPPE V1.1 (DM-88) Method  Name of the method of observation",
                "example" : "Measuring Tape"
              },
              "methodPUI" : {
                "type" : "string",
                "description" : "The Permanent Unique Identifier of a Method, usually in the form of a URI",
                "nullable" : true,
                "example" : "http://my-traits.com/trait/CO_123:0000212"
              },
              "ontologyReference" : {
                "required" : [ "ontologyDbId", "ontologyName" ],
                "type" : "object",
                "properties" : {
                  "documentationLinks" : {
                    "type" : "array",
                    "description" : "links to various ontology documentation",
                    "nullable" : true,
                    "items" : {
                      "type" : "object",
                      "properties" : {
                        "URL" : {
                          "type" : "string",
                          "format" : "uri",
                          "example" : "http://purl.obolibrary.org/obo/ro.owl"
                        },
                        "type" : {
                          "type" : "string",
                          "example" : "OBO",
                          "enum" : [ "OBO", "RDF", "WEBPAGE" ]
                        }
                      }
                    }
                  },
                  "ontologyDbId" : {
                    "type" : "string",
                    "description" : "Ontology database unique identifier",
                    "example" : "6b071868"
                  },
                  "ontologyName" : {
                    "type" : "string",
                    "description" : "Ontology name",
                    "example" : "The Crop Ontology"
                  },
                  "version" : {
                    "type" : "string",
                    "description" : "Ontology version (no specific format)",
                    "nullable" : true,
                    "example" : "7.2.3"
                  }
                },
                "description" : "MIAPPE V1.1\n\n(DM-85) Variable accession number - Accession number of the variable in the Crop Ontology\n\n(DM-87) Trait accession number - Accession number of the trait in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).\n\n(DM-89) Method accession number - Accession number of the method in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).\n\n(DM-93) Scale accession number - Accession number of the scale in a suitable controlled vocabulary (Crop Ontology)."
              }
            },
            "description" : "A description of the way an Observation should be collected. \n<br>For example, an ObservationVariable might be defined with a Trait of \"plant height\", a Scale of \"meters\", and a Method of \"tape measure\". This variable would be distinct from a variable with the Method \"estimation\" or \"drone image processing\". "
          },
          "ontologyReference" : {
            "required" : [ "ontologyDbId", "ontologyName" ],
            "type" : "object",
            "properties" : {
              "documentationLinks" : {
                "type" : "array",
                "description" : "links to various ontology documentation",
                "nullable" : true,
                "items" : {
                  "type" : "object",
                  "properties" : {
                    "URL" : {
                      "type" : "string",
                      "format" : "uri",
                      "example" : "http://purl.obolibrary.org/obo/ro.owl"
                    },
                    "type" : {
                      "type" : "string",
                      "example" : "OBO",
                      "enum" : [ "OBO", "RDF", "WEBPAGE" ]
                    }
                  }
                }
              },
              "ontologyDbId" : {
                "type" : "string",
                "description" : "Ontology database unique identifier",
                "example" : "6b071868"
              },
              "ontologyName" : {
                "type" : "string",
                "description" : "Ontology name",
                "example" : "The Crop Ontology"
              },
              "version" : {
                "type" : "string",
                "description" : "Ontology version (no specific format)",
                "nullable" : true,
                "example" : "7.2.3"
              }
            },
            "description" : "MIAPPE V1.1\n\n(DM-85) Variable accession number - Accession number of the variable in the Crop Ontology\n\n(DM-87) Trait accession number - Accession number of the trait in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).\n\n(DM-89) Method accession number - Accession number of the method in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).\n\n(DM-93) Scale accession number - Accession number of the scale in a suitable controlled vocabulary (Crop Ontology).",
            "nullable" : true
          },
          "scale" : {
            "required" : [ "scaleDbId", "scaleName" ],
            "type" : "object",
            "properties" : {
              "additionalInfo" : {
                "type" : "object",
                "additionalProperties" : {
                  "type" : "string"
                },
                "description" : "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.",
                "nullable" : true
              },
              "dataType" : {
                "type" : "string",
                "description" : "<p>Class of the scale, entries can be</p>\n<p>\"Code\" -  This scale class is exceptionally used to express complex traits. Code is a nominal scale that combines the expressions of the different traits composing the complex trait. For example a severity trait might be expressed by a 2 digit and 2 character code. The first 2 digits are the percentage of the plant covered by a fungus and the 2 characters refer to the delay in development, e.g. \"75VD\" means \"75 %\" of the plant is infected and the plant is very delayed.</p>\n<p>\"Date\" - The date class is for events expressed in a time format, See ISO 8601</p>\n<p>\"Duration\" - The Duration class is for time elapsed between two events expressed in a time format, e.g. days, hours, months</p>\n<p>\"Nominal\" - Categorical scale that can take one of a limited and fixed number of categories. There is no intrinsic ordering to the categories</p>\n<p>\"Numerical\" - Numerical scales express the trait with real numbers. The numerical scale defines the unit e.g. centimeter, ton per hectare, branches</p>\n<p>\"Ordinal\" - Ordinal scales are scales composed of ordered categories</p>\n<p>\"Text\" - A free text is used to express the trait.</p>",
                "nullable" : true,
                "example" : "Numerical",
                "enum" : [ "Code", "Date", "Duration", "Nominal", "Numerical", "Ordinal", "Text" ]
              },
              "decimalPlaces" : {
                "type" : "integer",
                "description" : "For numerical, number of decimal places to be reported",
                "nullable" : true,
                "example" : 2
              },
              "externalReferences" : {
                "title" : "ExternalReferences",
                "type" : "array",
                "description" : "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.",
                "nullable" : true,
                "example" : [ {
                  "referenceId" : "doi:10.155454/12341234",
                  "referenceSource" : "DOI"
                }, {
                  "referenceId" : "75a50e76",
                  "referenceSource" : "Remote Data Collection Upload Tool"
                } ],
                "items" : {
                  "type" : "object",
                  "properties" : {
                    "referenceID" : {
                      "type" : "string",
                      "description" : "**Deprecated in v2.1** Please use `referenceId`. Github issue number #460 \n<br>The external reference ID. Could be a simple string or a URI.",
                      "nullable" : true,
                      "deprecated" : true
                    },
                    "referenceId" : {
                      "type" : "string",
                      "description" : "The external reference ID. Could be a simple string or a URI."
                    },
                    "referenceSource" : {
                      "type" : "string",
                      "description" : "An identifier for the source system or database of this reference"
                    }
                  }
                }
              },
              "ontologyReference" : {
                "required" : [ "ontologyDbId", "ontologyName" ],
                "type" : "object",
                "properties" : {
                  "documentationLinks" : {
                    "type" : "array",
                    "description" : "links to various ontology documentation",
                    "nullable" : true,
                    "items" : {
                      "type" : "object",
                      "properties" : {
                        "URL" : {
                          "type" : "string",
                          "format" : "uri",
                          "example" : "http://purl.obolibrary.org/obo/ro.owl"
                        },
                        "type" : {
                          "type" : "string",
                          "example" : "OBO",
                          "enum" : [ "OBO", "RDF", "WEBPAGE" ]
                        }
                      }
                    }
                  },
                  "ontologyDbId" : {
                    "type" : "string",
                    "description" : "Ontology database unique identifier",
                    "example" : "6b071868"
                  },
                  "ontologyName" : {
                    "type" : "string",
                    "description" : "Ontology name",
                    "example" : "The Crop Ontology"
                  },
                  "version" : {
                    "type" : "string",
                    "description" : "Ontology version (no specific format)",
                    "nullable" : true,
                    "example" : "7.2.3"
                  }
                },
                "description" : "MIAPPE V1.1\n\n(DM-85) Variable accession number - Accession number of the variable in the Crop Ontology\n\n(DM-87) Trait accession number - Accession number of the trait in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).\n\n(DM-89) Method accession number - Accession number of the method in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).\n\n(DM-93) Scale accession number - Accession number of the scale in a suitable controlled vocabulary (Crop Ontology)."
              },
              "scaleDbId" : {
                "type" : "string",
                "description" : "Unique identifier of the scale. If left blank, the upload system will automatically generate a scale ID.",
                "example" : "af730171"
              },
              "scaleName" : {
                "type" : "string",
                "description" : "Name of the scale\n<br/>MIAPPE V1.1 (DM-92) Scale Name of the scale associated with the variable",
                "nullable" : true,
                "example" : "Meters"
              },
              "scalePUI" : {
                "type" : "string",
                "description" : "The Permanent Unique Identifier of a Scale, usually in the form of a URI",
                "nullable" : true,
                "example" : "http://my-traits.com/trait/CO_123:0000112"
              },
              "units" : {
                "type" : "string",
                "description" : "This field can be used to describe the units used for this scale. This should be the abbreviated \nform of the units, intended to be displayed with every value using this scale. Usually this only \napplies when `dataType` is Numeric, but could also be included for other dataTypes when applicable.",
                "nullable" : true,
                "example" : "m"
              },
              "validValues" : {
                "type" : "object",
                "properties" : {
                  "categories" : {
                    "type" : "array",
                    "description" : "List of possible values with optional labels",
                    "example" : [ {
                      "label" : "low",
                      "value" : "0"
                    }, {
                      "label" : "medium",
                      "value" : "5"
                    }, {
                      "label" : "high",
                      "value" : "10"
                    } ],
                    "items" : {
                      "type" : "object",
                      "properties" : {
                        "label" : {
                          "type" : "string",
                          "description" : "A text label for a category"
                        },
                        "value" : {
                          "type" : "string",
                          "description" : "The actual value for a category"
                        }
                      }
                    }
                  },
                  "max" : {
                    "type" : "integer",
                    "description" : "**Deprecated in v2.1** Please use `maximumValue`. Github issue number #450 \n<br>Maximum value for numerical scales. Typically used for data capture control and QC.",
                    "nullable" : true,
                    "example" : 9999,
                    "deprecated" : true
                  },
                  "maximumValue" : {
                    "type" : "string",
                    "description" : "Maximum value for numerical, date, and time scales. Typically used for data capture control and QC.",
                    "nullable" : true,
                    "example" : "9999"
                  },
                  "min" : {
                    "type" : "integer",
                    "description" : "**Deprecated in v2.1** Please use `minimumValue`. Github issue number #450 \n<br>Minimum value for numerical scales. Typically used for data capture control and QC.",
                    "nullable" : true,
                    "example" : 2,
                    "deprecated" : true
                  },
                  "minimumValue" : {
                    "type" : "string",
                    "description" : "Minimum value for numerical, date, and time scales. Typically used for data capture control and QC.",
                    "nullable" : true,
                    "example" : "2"
                  }
                },
                "nullable" : true
              }
            },
            "description" : "A Scale describes the units and acceptable values for an ObservationVariable. \n<br>For example, an ObservationVariable might be defined with a Trait of \"plant height\", a Scale of \"meters\", and a Method of \"tape measure\". This variable would be distinct from a variable with the Scale \"inches\" or \"pixels\"."
          },
          "scientist" : {
            "type" : "string",
            "description" : "Name of scientist submitting the variable.",
            "nullable" : true,
            "example" : "Dr. Bob Robertson"
          },
          "status" : {
            "type" : "string",
            "description" : "Variable status. (examples: \"recommended\", \"obsolete\", \"legacy\", etc.)",
            "nullable" : true,
            "example" : "recommended"
          },
          "submissionTimestamp" : {
            "type" : "string",
            "description" : "Timestamp when the Variable was added (ISO 8601)",
            "format" : "date-time",
            "nullable" : true
          },
          "synonyms" : {
            "type" : "array",
            "description" : "Other variable names",
            "nullable" : true,
            "example" : [ "Maize Height", "Stalk Height", "Corn Height" ],
            "items" : {
              "type" : "string"
            }
          },
          "trait" : {
            "required" : [ "traitName" ],
            "type" : "object",
            "properties" : {
              "additionalInfo" : {
                "type" : "object",
                "additionalProperties" : {
                  "type" : "string"
                },
                "description" : "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.",
                "nullable" : true
              },
              "alternativeAbbreviations" : {
                "type" : "array",
                "description" : "A list of shortened, human readable, names for a Trait. These abbreviations are acceptable alternatives to the mainAbbreviation and do not need to follow any formatting convention.",
                "nullable" : true,
                "example" : [ "H", "PH", "H1" ],
                "items" : {
                  "type" : "string"
                }
              },
              "attribute" : {
                "type" : "string",
                "description" : "A trait can be decomposed as \"Trait\" = \"Entity\" + \"Attribute\", the attribute is the observed feature (or characteristic) of the entity e.g., for \"grain colour\", attribute = \"colour\"",
                "nullable" : true,
                "example" : "height"
              },
              "attributePUI" : {
                "type" : "string",
                "description" : "The Permanent Unique Identifier of a Trait Attribute, usually in the form of a URI\n<br/>A trait can be decomposed as \"Trait\" = \"Entity\" + \"Attribute\", the attribute is the observed feature (or characteristic) of the entity e.g., for \"grain colour\", attribute = \"colour\"",
                "nullable" : true,
                "example" : "http://my-traits.com/trait/PO:00012345"
              },
              "entity" : {
                "type" : "string",
                "description" : "A trait can be decomposed as \"Trait\" = \"Entity\" + \"Attribute\", the entity is the part of the plant that the trait refers to e.g., for \"grain colour\", entity = \"grain\"",
                "nullable" : true,
                "example" : "Stalk"
              },
              "entityPUI" : {
                "type" : "string",
                "description" : "The Permanent Unique Identifier of a Trait Entity, usually in the form of a URI\n<br/>A Trait can be decomposed as \"Trait\" = \"Entity\" + \"Attribute\", the Entity is the part of the plant that the trait refers to e.g., for \"grain colour\", entity = \"grain\" ",
                "nullable" : true,
                "example" : "http://my-traits.com/trait/PATO:00098765"
              },
              "externalReferences" : {
                "title" : "ExternalReferences",
                "type" : "array",
                "description" : "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.",
                "nullable" : true,
                "example" : [ {
                  "referenceId" : "doi:10.155454/12341234",
                  "referenceSource" : "DOI"
                }, {
                  "referenceId" : "75a50e76",
                  "referenceSource" : "Remote Data Collection Upload Tool"
                } ],
                "items" : {
                  "type" : "object",
                  "properties" : {
                    "referenceID" : {
                      "type" : "string",
                      "description" : "**Deprecated in v2.1** Please use `referenceId`. Github issue number #460 \n<br>The external reference ID. Could be a simple string or a URI.",
                      "nullable" : true,
                      "deprecated" : true
                    },
                    "referenceId" : {
                      "type" : "string",
                      "description" : "The external reference ID. Could be a simple string or a URI."
                    },
                    "referenceSource" : {
                      "type" : "string",
                      "description" : "An identifier for the source system or database of this reference"
                    }
                  }
                }
              },
              "mainAbbreviation" : {
                "type" : "string",
                "description" : "A shortened version of the human readable name for a Trait",
                "nullable" : true,
                "example" : "PH"
              },
              "ontologyReference" : {
                "required" : [ "ontologyDbId", "ontologyName" ],
                "type" : "object",
                "properties" : {
                  "documentationLinks" : {
                    "type" : "array",
                    "description" : "links to various ontology documentation",
                    "nullable" : true,
                    "items" : {
                      "type" : "object",
                      "properties" : {
                        "URL" : {
                          "type" : "string",
                          "format" : "uri",
                          "example" : "http://purl.obolibrary.org/obo/ro.owl"
                        },
                        "type" : {
                          "type" : "string",
                          "example" : "OBO",
                          "enum" : [ "OBO", "RDF", "WEBPAGE" ]
                        }
                      }
                    }
                  },
                  "ontologyDbId" : {
                    "type" : "string",
                    "description" : "Ontology database unique identifier",
                    "example" : "6b071868"
                  },
                  "ontologyName" : {
                    "type" : "string",
                    "description" : "Ontology name",
                    "example" : "The Crop Ontology"
                  },
                  "version" : {
                    "type" : "string",
                    "description" : "Ontology version (no specific format)",
                    "nullable" : true,
                    "example" : "7.2.3"
                  }
                },
                "description" : "MIAPPE V1.1\n\n(DM-85) Variable accession number - Accession number of the variable in the Crop Ontology\n\n(DM-87) Trait accession number - Accession number of the trait in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).\n\n(DM-89) Method accession number - Accession number of the method in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).\n\n(DM-93) Scale accession number - Accession number of the scale in a suitable controlled vocabulary (Crop Ontology)."
              },
              "status" : {
                "type" : "string",
                "description" : "Trait status (examples: \"recommended\", \"obsolete\", \"legacy\", etc.)",
                "nullable" : true,
                "example" : "recommended"
              },
              "synonyms" : {
                "type" : "array",
                "description" : "Other trait names",
                "nullable" : true,
                "example" : [ "Height", "Plant Height", "Stalk Height", "Canopy Height" ],
                "items" : {
                  "type" : "string"
                }
              },
              "traitClass" : {
                "type" : "string",
                "description" : "A classification to describe the type of trait and the context it should be considered in.\n<br/> examples- \"morphological\", \"phenological\", \"agronomical\", \"physiological\", \"abiotic stress\", \"biotic stress\", \"biochemical\", \"quality traits\", \"fertility\", etc.",
                "nullable" : true,
                "example" : "phenological"
              },
              "traitDbId" : {
                "type" : "string",
                "description" : "The ID which uniquely identifies a trait",
                "example" : "9b2e34f5"
              },
              "traitDescription" : {
                "type" : "string",
                "description" : "The description of a trait",
                "nullable" : true,
                "example" : "The height of the plant"
              },
              "traitName" : {
                "type" : "string",
                "description" : "The human readable name of a trait\n<br/>MIAPPE V1.1 (DM-86) Trait - Name of the (plant or environmental) trait under observation",
                "example" : "Height"
              },
              "traitPUI" : {
                "type" : "string",
                "description" : "The Permanent Unique Identifier of a Trait, usually in the form of a URI",
                "nullable" : true,
                "example" : "http://my-traits.com/trait/CO_123:0000012"
              }
            },
            "description" : "A Trait describes what property is being observed. \n<br>For example, an ObservationVariable might be defined with a Trait of \"plant height\", a Scale of \"meters\", and a Method of \"tape measure\". This variable would be distinct from a variable with the Trait \"Leaf length\" or \"Flower height\". "
          }
        },
        "x-brapi-metadata" : {
          "description" : "The Trait-Method-Scale definition for a variable, specifically variables related to Germplasm. Similar to an ObservationVariable, but related to a Germplasm instead of an ObservationUnit",
          "module" : "BrAPI-Germplasm",
          "primaryModel" : true,
          "title" : "GermplasmAttribute"
        }
      },
      "GermplasmAttributeNewRequest" : {
        "required" : [ "attributeName", "method", "scale", "trait" ],
        "type" : "object",
        "properties" : {
          "additionalInfo" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.",
            "nullable" : true
          },
          "attributeCategory" : {
            "type" : "string",
            "description" : "General category for the attribute. very similar to Trait class.",
            "example" : "Morphological"
          },
          "attributeDescription" : {
            "type" : "string",
            "description" : "A human readable description of this attribute",
            "example" : "Height of the plant measured in meters by a tape"
          },
          "attributeName" : {
            "type" : "string",
            "description" : "A human readable name for this attribute",
            "example" : "Plant Height 1"
          },
          "attributePUI" : {
            "type" : "string",
            "description" : "The Permanent Unique Identifier of an Attribute, usually in the form of a URI",
            "example" : "http://my-traits.com/trait/CO_123:0008012"
          },
          "commonCropName" : {
            "type" : "string",
            "description" : "Crop name (examples: \"Maize\", \"Wheat\")",
            "nullable" : true,
            "example" : "Maize"
          },
          "contextOfUse" : {
            "type" : "array",
            "description" : "Indication of how trait is routinely used. (examples: [\"Trial evaluation\", \"Nursery evaluation\"])",
            "nullable" : true,
            "example" : [ "Trial evaluation", "Nursery evaluation" ],
            "items" : {
              "type" : "string"
            }
          },
          "defaultValue" : {
            "type" : "string",
            "description" : "Variable default value. (examples: \"red\", \"2.3\", etc.)",
            "nullable" : true,
            "example" : "2.0"
          },
          "documentationURL" : {
            "type" : "string",
            "description" : "A URL to the human readable documentation of an object",
            "format" : "uri",
            "nullable" : true,
            "example" : "https://wiki.brapi.org/documentation.html"
          },
          "externalReferences" : {
            "title" : "ExternalReferences",
            "type" : "array",
            "description" : "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.",
            "nullable" : true,
            "example" : [ {
              "referenceId" : "doi:10.155454/12341234",
              "referenceSource" : "DOI"
            }, {
              "referenceId" : "75a50e76",
              "referenceSource" : "Remote Data Collection Upload Tool"
            } ],
            "items" : {
              "type" : "object",
              "properties" : {
                "referenceID" : {
                  "type" : "string",
                  "description" : "**Deprecated in v2.1** Please use `referenceId`. Github issue number #460 \n<br>The external reference ID. Could be a simple string or a URI.",
                  "nullable" : true,
                  "deprecated" : true
                },
                "referenceId" : {
                  "type" : "string",
                  "description" : "The external reference ID. Could be a simple string or a URI."
                },
                "referenceSource" : {
                  "type" : "string",
                  "description" : "An identifier for the source system or database of this reference"
                }
              }
            }
          },
          "growthStage" : {
            "type" : "string",
            "description" : "Growth stage at which measurement is made (examples: \"flowering\")",
            "nullable" : true,
            "example" : "flowering"
          },
          "institution" : {
            "type" : "string",
            "description" : "Name of institution submitting the variable",
            "nullable" : true,
            "example" : "The BrAPI Institute"
          },
          "language" : {
            "type" : "string",
            "description" : "2 letter ISO 639-1 code for the language of submission of the variable.",
            "nullable" : true,
            "example" : "en"
          },
          "method" : {
            "required" : [ "methodName" ],
            "type" : "object",
            "properties" : {
              "additionalInfo" : {
                "type" : "object",
                "additionalProperties" : {
                  "type" : "string"
                },
                "description" : "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.",
                "nullable" : true
              },
              "bibliographicalReference" : {
                "type" : "string",
                "description" : "Bibliographical reference describing the method.\n<br/>MIAPPE V1.1 (DM-91) Reference associated to the method - URI/DOI of reference describing the method.",
                "nullable" : true,
                "example" : "Smith, 1893, Really Cool Paper, Popular Journal"
              },
              "description" : {
                "type" : "string",
                "description" : "Method description\n<br/>MIAPPE V1.1 (DM-90) Method description - Textual description of the method, which may extend a method defined in an external reference with specific parameters, e.g. growth stage, inoculation precise organ (leaf number)",
                "nullable" : true,
                "example" : "A measuring tape was used"
              },
              "externalReferences" : {
                "title" : "ExternalReferences",
                "type" : "array",
                "description" : "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.",
                "nullable" : true,
                "example" : [ {
                  "referenceId" : "doi:10.155454/12341234",
                  "referenceSource" : "DOI"
                }, {
                  "referenceId" : "75a50e76",
                  "referenceSource" : "Remote Data Collection Upload Tool"
                } ],
                "items" : {
                  "type" : "object",
                  "properties" : {
                    "referenceID" : {
                      "type" : "string",
                      "description" : "**Deprecated in v2.1** Please use `referenceId`. Github issue number #460 \n<br>The external reference ID. Could be a simple string or a URI.",
                      "nullable" : true,
                      "deprecated" : true
                    },
                    "referenceId" : {
                      "type" : "string",
                      "description" : "The external reference ID. Could be a simple string or a URI."
                    },
                    "referenceSource" : {
                      "type" : "string",
                      "description" : "An identifier for the source system or database of this reference"
                    }
                  }
                }
              },
              "formula" : {
                "type" : "string",
                "description" : "For computational methods i.e., when the method consists in assessing the trait by computing measurements, write the generic formula used for the calculation",
                "nullable" : true,
                "example" : "a^2 + b^2 = c^2"
              },
              "methodClass" : {
                "type" : "string",
                "description" : "Method class (examples: \"Measurement\", \"Counting\", \"Estimation\", \"Computation\", etc.)",
                "nullable" : true,
                "example" : "Measurement"
              },
              "methodDbId" : {
                "type" : "string",
                "description" : "Method unique identifier",
                "example" : "0adb2764"
              },
              "methodName" : {
                "type" : "string",
                "description" : "Human readable name for the method\n<br/>MIAPPE V1.1 (DM-88) Method  Name of the method of observation",
                "example" : "Measuring Tape"
              },
              "methodPUI" : {
                "type" : "string",
                "description" : "The Permanent Unique Identifier of a Method, usually in the form of a URI",
                "nullable" : true,
                "example" : "http://my-traits.com/trait/CO_123:0000212"
              },
              "ontologyReference" : {
                "required" : [ "ontologyDbId", "ontologyName" ],
                "type" : "object",
                "properties" : {
                  "documentationLinks" : {
                    "type" : "array",
                    "description" : "links to various ontology documentation",
                    "nullable" : true,
                    "items" : {
                      "type" : "object",
                      "properties" : {
                        "URL" : {
                          "type" : "string",
                          "format" : "uri",
                          "example" : "http://purl.obolibrary.org/obo/ro.owl"
                        },
                        "type" : {
                          "type" : "string",
                          "example" : "OBO",
                          "enum" : [ "OBO", "RDF", "WEBPAGE" ]
                        }
                      }
                    }
                  },
                  "ontologyDbId" : {
                    "type" : "string",
                    "description" : "Ontology database unique identifier",
                    "example" : "6b071868"
                  },
                  "ontologyName" : {
                    "type" : "string",
                    "description" : "Ontology name",
                    "example" : "The Crop Ontology"
                  },
                  "version" : {
                    "type" : "string",
                    "description" : "Ontology version (no specific format)",
                    "nullable" : true,
                    "example" : "7.2.3"
                  }
                },
                "description" : "MIAPPE V1.1\n\n(DM-85) Variable accession number - Accession number of the variable in the Crop Ontology\n\n(DM-87) Trait accession number - Accession number of the trait in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).\n\n(DM-89) Method accession number - Accession number of the method in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).\n\n(DM-93) Scale accession number - Accession number of the scale in a suitable controlled vocabulary (Crop Ontology)."
              }
            },
            "description" : "A description of the way an Observation should be collected. \n<br>For example, an ObservationVariable might be defined with a Trait of \"plant height\", a Scale of \"meters\", and a Method of \"tape measure\". This variable would be distinct from a variable with the Method \"estimation\" or \"drone image processing\". "
          },
          "ontologyReference" : {
            "required" : [ "ontologyDbId", "ontologyName" ],
            "type" : "object",
            "properties" : {
              "documentationLinks" : {
                "type" : "array",
                "description" : "links to various ontology documentation",
                "nullable" : true,
                "items" : {
                  "type" : "object",
                  "properties" : {
                    "URL" : {
                      "type" : "string",
                      "format" : "uri",
                      "example" : "http://purl.obolibrary.org/obo/ro.owl"
                    },
                    "type" : {
                      "type" : "string",
                      "example" : "OBO",
                      "enum" : [ "OBO", "RDF", "WEBPAGE" ]
                    }
                  }
                }
              },
              "ontologyDbId" : {
                "type" : "string",
                "description" : "Ontology database unique identifier",
                "example" : "6b071868"
              },
              "ontologyName" : {
                "type" : "string",
                "description" : "Ontology name",
                "example" : "The Crop Ontology"
              },
              "version" : {
                "type" : "string",
                "description" : "Ontology version (no specific format)",
                "nullable" : true,
                "example" : "7.2.3"
              }
            },
            "description" : "MIAPPE V1.1\n\n(DM-85) Variable accession number - Accession number of the variable in the Crop Ontology\n\n(DM-87) Trait accession number - Accession number of the trait in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).\n\n(DM-89) Method accession number - Accession number of the method in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).\n\n(DM-93) Scale accession number - Accession number of the scale in a suitable controlled vocabulary (Crop Ontology).",
            "nullable" : true
          },
          "scale" : {
            "required" : [ "scaleDbId", "scaleName" ],
            "type" : "object",
            "properties" : {
              "additionalInfo" : {
                "type" : "object",
                "additionalProperties" : {
                  "type" : "string"
                },
                "description" : "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.",
                "nullable" : true
              },
              "dataType" : {
                "type" : "string",
                "description" : "<p>Class of the scale, entries can be</p>\n<p>\"Code\" -  This scale class is exceptionally used to express complex traits. Code is a nominal scale that combines the expressions of the different traits composing the complex trait. For example a severity trait might be expressed by a 2 digit and 2 character code. The first 2 digits are the percentage of the plant covered by a fungus and the 2 characters refer to the delay in development, e.g. \"75VD\" means \"75 %\" of the plant is infected and the plant is very delayed.</p>\n<p>\"Date\" - The date class is for events expressed in a time format, See ISO 8601</p>\n<p>\"Duration\" - The Duration class is for time elapsed between two events expressed in a time format, e.g. days, hours, months</p>\n<p>\"Nominal\" - Categorical scale that can take one of a limited and fixed number of categories. There is no intrinsic ordering to the categories</p>\n<p>\"Numerical\" - Numerical scales express the trait with real numbers. The numerical scale defines the unit e.g. centimeter, ton per hectare, branches</p>\n<p>\"Ordinal\" - Ordinal scales are scales composed of ordered categories</p>\n<p>\"Text\" - A free text is used to express the trait.</p>",
                "nullable" : true,
                "example" : "Numerical",
                "enum" : [ "Code", "Date", "Duration", "Nominal", "Numerical", "Ordinal", "Text" ]
              },
              "decimalPlaces" : {
                "type" : "integer",
                "description" : "For numerical, number of decimal places to be reported",
                "nullable" : true,
                "example" : 2
              },
              "externalReferences" : {
                "title" : "ExternalReferences",
                "type" : "array",
                "description" : "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.",
                "nullable" : true,
                "example" : [ {
                  "referenceId" : "doi:10.155454/12341234",
                  "referenceSource" : "DOI"
                }, {
                  "referenceId" : "75a50e76",
                  "referenceSource" : "Remote Data Collection Upload Tool"
                } ],
                "items" : {
                  "type" : "object",
                  "properties" : {
                    "referenceID" : {
                      "type" : "string",
                      "description" : "**Deprecated in v2.1** Please use `referenceId`. Github issue number #460 \n<br>The external reference ID. Could be a simple string or a URI.",
                      "nullable" : true,
                      "deprecated" : true
                    },
                    "referenceId" : {
                      "type" : "string",
                      "description" : "The external reference ID. Could be a simple string or a URI."
                    },
                    "referenceSource" : {
                      "type" : "string",
                      "description" : "An identifier for the source system or database of this reference"
                    }
                  }
                }
              },
              "ontologyReference" : {
                "required" : [ "ontologyDbId", "ontologyName" ],
                "type" : "object",
                "properties" : {
                  "documentationLinks" : {
                    "type" : "array",
                    "description" : "links to various ontology documentation",
                    "nullable" : true,
                    "items" : {
                      "type" : "object",
                      "properties" : {
                        "URL" : {
                          "type" : "string",
                          "format" : "uri",
                          "example" : "http://purl.obolibrary.org/obo/ro.owl"
                        },
                        "type" : {
                          "type" : "string",
                          "example" : "OBO",
                          "enum" : [ "OBO", "RDF", "WEBPAGE" ]
                        }
                      }
                    }
                  },
                  "ontologyDbId" : {
                    "type" : "string",
                    "description" : "Ontology database unique identifier",
                    "example" : "6b071868"
                  },
                  "ontologyName" : {
                    "type" : "string",
                    "description" : "Ontology name",
                    "example" : "The Crop Ontology"
                  },
                  "version" : {
                    "type" : "string",
                    "description" : "Ontology version (no specific format)",
                    "nullable" : true,
                    "example" : "7.2.3"
                  }
                },
                "description" : "MIAPPE V1.1\n\n(DM-85) Variable accession number - Accession number of the variable in the Crop Ontology\n\n(DM-87) Trait accession number - Accession number of the trait in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).\n\n(DM-89) Method accession number - Accession number of the method in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).\n\n(DM-93) Scale accession number - Accession number of the scale in a suitable controlled vocabulary (Crop Ontology)."
              },
              "scaleDbId" : {
                "type" : "string",
                "description" : "Unique identifier of the scale. If left blank, the upload system will automatically generate a scale ID.",
                "example" : "af730171"
              },
              "scaleName" : {
                "type" : "string",
                "description" : "Name of the scale\n<br/>MIAPPE V1.1 (DM-92) Scale Name of the scale associated with the variable",
                "nullable" : true,
                "example" : "Meters"
              },
              "scalePUI" : {
                "type" : "string",
                "description" : "The Permanent Unique Identifier of a Scale, usually in the form of a URI",
                "nullable" : true,
                "example" : "http://my-traits.com/trait/CO_123:0000112"
              },
              "units" : {
                "type" : "string",
                "description" : "This field can be used to describe the units used for this scale. This should be the abbreviated \nform of the units, intended to be displayed with every value using this scale. Usually this only \napplies when `dataType` is Numeric, but could also be included for other dataTypes when applicable.",
                "nullable" : true,
                "example" : "m"
              },
              "validValues" : {
                "type" : "object",
                "properties" : {
                  "categories" : {
                    "type" : "array",
                    "description" : "List of possible values with optional labels",
                    "example" : [ {
                      "label" : "low",
                      "value" : "0"
                    }, {
                      "label" : "medium",
                      "value" : "5"
                    }, {
                      "label" : "high",
                      "value" : "10"
                    } ],
                    "items" : {
                      "type" : "object",
                      "properties" : {
                        "label" : {
                          "type" : "string",
                          "description" : "A text label for a category"
                        },
                        "value" : {
                          "type" : "string",
                          "description" : "The actual value for a category"
                        }
                      }
                    }
                  },
                  "max" : {
                    "type" : "integer",
                    "description" : "**Deprecated in v2.1** Please use `maximumValue`. Github issue number #450 \n<br>Maximum value for numerical scales. Typically used for data capture control and QC.",
                    "nullable" : true,
                    "example" : 9999,
                    "deprecated" : true
                  },
                  "maximumValue" : {
                    "type" : "string",
                    "description" : "Maximum value for numerical, date, and time scales. Typically used for data capture control and QC.",
                    "nullable" : true,
                    "example" : "9999"
                  },
                  "min" : {
                    "type" : "integer",
                    "description" : "**Deprecated in v2.1** Please use `minimumValue`. Github issue number #450 \n<br>Minimum value for numerical scales. Typically used for data capture control and QC.",
                    "nullable" : true,
                    "example" : 2,
                    "deprecated" : true
                  },
                  "minimumValue" : {
                    "type" : "string",
                    "description" : "Minimum value for numerical, date, and time scales. Typically used for data capture control and QC.",
                    "nullable" : true,
                    "example" : "2"
                  }
                },
                "nullable" : true
              }
            },
            "description" : "A Scale describes the units and acceptable values for an ObservationVariable. \n<br>For example, an ObservationVariable might be defined with a Trait of \"plant height\", a Scale of \"meters\", and a Method of \"tape measure\". This variable would be distinct from a variable with the Scale \"inches\" or \"pixels\"."
          },
          "scientist" : {
            "type" : "string",
            "description" : "Name of scientist submitting the variable.",
            "nullable" : true,
            "example" : "Dr. Bob Robertson"
          },
          "status" : {
            "type" : "string",
            "description" : "Variable status. (examples: \"recommended\", \"obsolete\", \"legacy\", etc.)",
            "nullable" : true,
            "example" : "recommended"
          },
          "submissionTimestamp" : {
            "type" : "string",
            "description" : "Timestamp when the Variable was added (ISO 8601)",
            "format" : "date-time",
            "nullable" : true
          },
          "synonyms" : {
            "type" : "array",
            "description" : "Other variable names",
            "nullable" : true,
            "example" : [ "Maize Height", "Stalk Height", "Corn Height" ],
            "items" : {
              "type" : "string"
            }
          },
          "trait" : {
            "required" : [ "traitName" ],
            "type" : "object",
            "properties" : {
              "additionalInfo" : {
                "type" : "object",
                "additionalProperties" : {
                  "type" : "string"
                },
                "description" : "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.",
                "nullable" : true
              },
              "alternativeAbbreviations" : {
                "type" : "array",
                "description" : "A list of shortened, human readable, names for a Trait. These abbreviations are acceptable alternatives to the mainAbbreviation and do not need to follow any formatting convention.",
                "nullable" : true,
                "example" : [ "H", "PH", "H1" ],
                "items" : {
                  "type" : "string"
                }
              },
              "attribute" : {
                "type" : "string",
                "description" : "A trait can be decomposed as \"Trait\" = \"Entity\" + \"Attribute\", the attribute is the observed feature (or characteristic) of the entity e.g., for \"grain colour\", attribute = \"colour\"",
                "nullable" : true,
                "example" : "height"
              },
              "attributePUI" : {
                "type" : "string",
                "description" : "The Permanent Unique Identifier of a Trait Attribute, usually in the form of a URI\n<br/>A trait can be decomposed as \"Trait\" = \"Entity\" + \"Attribute\", the attribute is the observed feature (or characteristic) of the entity e.g., for \"grain colour\", attribute = \"colour\"",
                "nullable" : true,
                "example" : "http://my-traits.com/trait/PO:00012345"
              },
              "entity" : {
                "type" : "string",
                "description" : "A trait can be decomposed as \"Trait\" = \"Entity\" + \"Attribute\", the entity is the part of the plant that the trait refers to e.g., for \"grain colour\", entity = \"grain\"",
                "nullable" : true,
                "example" : "Stalk"
              },
              "entityPUI" : {
                "type" : "string",
                "description" : "The Permanent Unique Identifier of a Trait Entity, usually in the form of a URI\n<br/>A Trait can be decomposed as \"Trait\" = \"Entity\" + \"Attribute\", the Entity is the part of the plant that the trait refers to e.g., for \"grain colour\", entity = \"grain\" ",
                "nullable" : true,
                "example" : "http://my-traits.com/trait/PATO:00098765"
              },
              "externalReferences" : {
                "title" : "ExternalReferences",
                "type" : "array",
                "description" : "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.",
                "nullable" : true,
                "example" : [ {
                  "referenceId" : "doi:10.155454/12341234",
                  "referenceSource" : "DOI"
                }, {
                  "referenceId" : "75a50e76",
                  "referenceSource" : "Remote Data Collection Upload Tool"
                } ],
                "items" : {
                  "type" : "object",
                  "properties" : {
                    "referenceID" : {
                      "type" : "string",
                      "description" : "**Deprecated in v2.1** Please use `referenceId`. Github issue number #460 \n<br>The external reference ID. Could be a simple string or a URI.",
                      "nullable" : true,
                      "deprecated" : true
                    },
                    "referenceId" : {
                      "type" : "string",
                      "description" : "The external reference ID. Could be a simple string or a URI."
                    },
                    "referenceSource" : {
                      "type" : "string",
                      "description" : "An identifier for the source system or database of this reference"
                    }
                  }
                }
              },
              "mainAbbreviation" : {
                "type" : "string",
                "description" : "A shortened version of the human readable name for a Trait",
                "nullable" : true,
                "example" : "PH"
              },
              "ontologyReference" : {
                "required" : [ "ontologyDbId", "ontologyName" ],
                "type" : "object",
                "properties" : {
                  "documentationLinks" : {
                    "type" : "array",
                    "description" : "links to various ontology documentation",
                    "nullable" : true,
                    "items" : {
                      "type" : "object",
                      "properties" : {
                        "URL" : {
                          "type" : "string",
                          "format" : "uri",
                          "example" : "http://purl.obolibrary.org/obo/ro.owl"
                        },
                        "type" : {
                          "type" : "string",
                          "example" : "OBO",
                          "enum" : [ "OBO", "RDF", "WEBPAGE" ]
                        }
                      }
                    }
                  },
                  "ontologyDbId" : {
                    "type" : "string",
                    "description" : "Ontology database unique identifier",
                    "example" : "6b071868"
                  },
                  "ontologyName" : {
                    "type" : "string",
                    "description" : "Ontology name",
                    "example" : "The Crop Ontology"
                  },
                  "version" : {
                    "type" : "string",
                    "description" : "Ontology version (no specific format)",
                    "nullable" : true,
                    "example" : "7.2.3"
                  }
                },
                "description" : "MIAPPE V1.1\n\n(DM-85) Variable accession number - Accession number of the variable in the Crop Ontology\n\n(DM-87) Trait accession number - Accession number of the trait in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).\n\n(DM-89) Method accession number - Accession number of the method in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).\n\n(DM-93) Scale accession number - Accession number of the scale in a suitable controlled vocabulary (Crop Ontology)."
              },
              "status" : {
                "type" : "string",
                "description" : "Trait status (examples: \"recommended\", \"obsolete\", \"legacy\", etc.)",
                "nullable" : true,
                "example" : "recommended"
              },
              "synonyms" : {
                "type" : "array",
                "description" : "Other trait names",
                "nullable" : true,
                "example" : [ "Height", "Plant Height", "Stalk Height", "Canopy Height" ],
                "items" : {
                  "type" : "string"
                }
              },
              "traitClass" : {
                "type" : "string",
                "description" : "A classification to describe the type of trait and the context it should be considered in.\n<br/> examples- \"morphological\", \"phenological\", \"agronomical\", \"physiological\", \"abiotic stress\", \"biotic stress\", \"biochemical\", \"quality traits\", \"fertility\", etc.",
                "nullable" : true,
                "example" : "phenological"
              },
              "traitDbId" : {
                "type" : "string",
                "description" : "The ID which uniquely identifies a trait",
                "example" : "9b2e34f5"
              },
              "traitDescription" : {
                "type" : "string",
                "description" : "The description of a trait",
                "nullable" : true,
                "example" : "The height of the plant"
              },
              "traitName" : {
                "type" : "string",
                "description" : "The human readable name of a trait\n<br/>MIAPPE V1.1 (DM-86) Trait - Name of the (plant or environmental) trait under observation",
                "example" : "Height"
              },
              "traitPUI" : {
                "type" : "string",
                "description" : "The Permanent Unique Identifier of a Trait, usually in the form of a URI",
                "nullable" : true,
                "example" : "http://my-traits.com/trait/CO_123:0000012"
              }
            },
            "description" : "A Trait describes what property is being observed. \n<br>For example, an ObservationVariable might be defined with a Trait of \"plant height\", a Scale of \"meters\", and a Method of \"tape measure\". This variable would be distinct from a variable with the Trait \"Leaf length\" or \"Flower height\". "
          }
        }
      },
      "GermplasmAttributeSearchRequest" : {
        "type" : "object",
        "properties" : {
          "attributeCategories" : {
            "type" : "array",
            "description" : "General category for the attribute. very similar to Trait class.",
            "nullable" : true,
            "example" : [ "Morphological", "Physical" ],
            "items" : {
              "type" : "string"
            }
          },
          "attributeDbIds" : {
            "type" : "array",
            "description" : "List of Germplasm Attribute IDs to search for",
            "nullable" : true,
            "example" : [ "2ef15c9f", "318e7f7d" ],
            "items" : {
              "type" : "string"
            }
          },
          "attributeNames" : {
            "type" : "array",
            "description" : "List of human readable Germplasm Attribute names to search for",
            "nullable" : true,
            "example" : [ "Plant Height 1", "Root Color" ],
            "items" : {
              "type" : "string"
            }
          },
          "attributePUIs" : {
            "type" : "array",
            "description" : "The Permanent Unique Identifier of an Attribute, usually in the form of a URI",
            "nullable" : true,
            "example" : [ "http://my-traits.com/trait/CO_123:0008012", "http://my-traits.com/trait/CO_123:0007261" ],
            "items" : {
              "type" : "string"
            }
          },
          "commonCropNames" : {
            "type" : "array",
            "description" : "The BrAPI Common Crop Name is the simple, generalized, widely accepted name of the organism being researched. It is most often used in multi-crop systems where digital resources need to be divided at a high level. Things like 'Maize', 'Wheat', and 'Rice' are examples of common crop names.\n\nUse this parameter to only return results associated with the given crops. \n\nUse `GET /commoncropnames` to find the list of available crops on a server.",
            "example" : [ "Tomatillo", "Paw Paw" ],
            "items" : {
              "type" : "string"
            }
          },
          "dataTypes" : {
            "type" : "array",
            "description" : "List of scale data types to filter search results",
            "example" : [ "Numerical", "Ordinal", "Text" ],
            "items" : {
              "type" : "string",
              "description" : "<p>Class of the scale, entries can be</p>\n<p>\"Code\" -  This scale class is exceptionally used to express complex traits. Code is a nominal scale that combines the expressions of the different traits composing the complex trait. For example a severity trait might be expressed by a 2 digit and 2 character code. The first 2 digits are the percentage of the plant covered by a fungus and the 2 characters refer to the delay in development, e.g. \"75VD\" means \"75 %\" of the plant is infected and the plant is very delayed.</p>\n<p>\"Date\" - The date class is for events expressed in a time format, See ISO 8601</p>\n<p>\"Duration\" - The Duration class is for time elapsed between two events expressed in a time format, e.g. days, hours, months</p>\n<p>\"Nominal\" - Categorical scale that can take one of a limited and fixed number of categories. There is no intrinsic ordering to the categories</p>\n<p>\"Numerical\" - Numerical scales express the trait with real numbers. The numerical scale defines the unit e.g. centimeter, ton per hectare, branches</p>\n<p>\"Ordinal\" - Ordinal scales are scales composed of ordered categories</p>\n<p>\"Text\" - A free text is used to express the trait.</p>",
              "example" : "Numerical",
              "enum" : [ "Code", "Date", "Duration", "Nominal", "Numerical", "Ordinal", "Text" ]
            }
          },
          "externalReferenceIDs" : {
            "type" : "array",
            "description" : "**Deprecated in v2.1** Please use `externalReferenceIds`. Github issue number #460 \n<br>List of external reference IDs. Could be a simple strings or a URIs. (use with `externalReferenceSources` parameter)",
            "example" : [ "doi:10.155454/12341234", "14a19841" ],
            "deprecated" : true,
            "items" : {
              "type" : "string"
            }
          },
          "externalReferenceIds" : {
            "type" : "array",
            "description" : "List of external reference IDs. Could be a simple strings or a URIs. (use with `externalReferenceSources` parameter)",
            "example" : [ "doi:10.155454/12341234", "14a19841" ],
            "items" : {
              "type" : "string"
            }
          },
          "externalReferenceSources" : {
            "type" : "array",
            "description" : "List of identifiers for the source system or database of an external reference (use with `externalReferenceIDs` parameter)",
            "example" : [ "DOI", "Field App Name" ],
            "items" : {
              "type" : "string"
            }
          },
          "germplasmDbIds" : {
            "type" : "array",
            "description" : "List of IDs which uniquely identify germplasm to search for",
            "example" : [ "e9c6edd7", "1b1df4a6" ],
            "items" : {
              "type" : "string"
            }
          },
          "germplasmNames" : {
            "type" : "array",
            "description" : "List of human readable names to identify germplasm to search for",
            "example" : [ "A0000003", "A0000477" ],
            "items" : {
              "type" : "string"
            }
          },
          "methodDbIds" : {
            "type" : "array",
            "description" : "List of methods to filter search results",
            "example" : [ "07e34f83", "d3d5517a" ],
            "items" : {
              "type" : "string"
            }
          },
          "methodNames" : {
            "type" : "array",
            "description" : "Human readable name for the method\n<br/>MIAPPE V1.1 (DM-88) Method  Name of the method of observation",
            "example" : [ "Measuring Tape", "Spectrometer" ],
            "items" : {
              "type" : "string"
            }
          },
          "methodPUIs" : {
            "type" : "array",
            "description" : "The Permanent Unique Identifier of a Method, usually in the form of a URI",
            "example" : [ "http://my-traits.com/trait/CO_123:0000212", "http://my-traits.com/trait/CO_123:0003557" ],
            "items" : {
              "type" : "string"
            }
          },
          "ontologyDbIds" : {
            "type" : "array",
            "description" : "List of ontology IDs to search for",
            "example" : [ "f44f7b23", "a26b576e" ],
            "items" : {
              "type" : "string"
            }
          },
          "page" : {
            "type" : "integer",
            "description" : "Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.",
            "example" : 0
          },
          "pageSize" : {
            "type" : "integer",
            "description" : "The size of the pages to be returned. Default is `1000`.",
            "example" : 1000
          },
          "programDbIds" : {
            "type" : "array",
            "description" : "A BrAPI Program represents the high level organization or group who is responsible for conducting trials and studies. Things like Breeding Programs and Funded Projects are considered BrAPI Programs. \n\nUse this parameter to only return results associated with the given programs. \n\nUse `GET /programs` to find the list of available programs on a server.",
            "example" : [ "8f5de35b", "0e2d4a13" ],
            "items" : {
              "type" : "string"
            }
          },
          "programNames" : {
            "type" : "array",
            "description" : "Use this parameter to only return results associated with the given program names. Program names are not required to be unique.\n\nUse `GET /programs` to find the list of available programs on a server.",
            "example" : [ "Better Breeding Program", "Best Breeding Program" ],
            "items" : {
              "type" : "string"
            }
          },
          "scaleDbIds" : {
            "type" : "array",
            "description" : "The unique identifier for a Scale",
            "example" : [ "a13ecffa", "7e1afe4f" ],
            "items" : {
              "type" : "string"
            }
          },
          "scaleNames" : {
            "type" : "array",
            "description" : "Name of the scale\n<br/>MIAPPE V1.1 (DM-92) Scale Name of the scale associated with the variable",
            "example" : [ "Meters", "Liters" ],
            "items" : {
              "type" : "string"
            }
          },
          "scalePUIs" : {
            "type" : "array",
            "description" : "The Permanent Unique Identifier of a Scale, usually in the form of a URI",
            "example" : [ "http://my-traits.com/trait/CO_123:0000336", "http://my-traits.com/trait/CO_123:0000560" ],
            "items" : {
              "type" : "string"
            }
          },
          "studyDbId" : {
            "type" : "array",
            "description" : "**Deprecated in v2.1** Please use `studyDbIds`. Github issue number #483 \n<br>The unique ID of a studies to filter on",
            "example" : [ "5bcac0ae", "7f48e22d" ],
            "deprecated" : true,
            "items" : {
              "type" : "string"
            }
          },
          "studyDbIds" : {
            "type" : "array",
            "description" : "List of study identifiers to search for",
            "example" : [ "cf6c4bd4", "691e69d6" ],
            "items" : {
              "type" : "string"
            }
          },
          "studyNames" : {
            "type" : "array",
            "description" : "List of study names to filter search results",
            "example" : [ "The First Bob Study 2017", "Wheat Yield Trial 246" ],
            "items" : {
              "type" : "string"
            }
          },
          "traitAttributePUIs" : {
            "type" : "array",
            "description" : "The Permanent Unique Identifier of a Trait Attribute, usually in the form of a URI\n<br/>A trait can be decomposed as \"Trait\" = \"Entity\" + \"Attribute\", the attribute is the observed feature (or characteristic) of the entity e.g., for \"grain colour\", attribute = \"colour\"",
            "example" : [ "http://my-traits.com/trait/CO_123:0008336", "http://my-traits.com/trait/CO_123:0001092" ],
            "items" : {
              "type" : "string"
            }
          },
          "traitAttributes" : {
            "type" : "array",
            "description" : "A trait can be decomposed as \"Trait\" = \"Entity\" + \"Attribute\", the attribute is the observed feature (or characteristic) of the entity e.g., for \"grain colour\", attribute = \"colour\"",
            "example" : [ "Height", "Color" ],
            "items" : {
              "type" : "string"
            }
          },
          "traitClasses" : {
            "type" : "array",
            "description" : "List of trait classes to filter search results",
            "example" : [ "morphological", "phenological", "agronomical" ],
            "items" : {
              "type" : "string"
            }
          },
          "traitDbIds" : {
            "type" : "array",
            "description" : "The unique identifier for a Trait",
            "example" : [ "ef81147b", "78d82fad" ],
            "items" : {
              "type" : "string"
            }
          },
          "traitEntities" : {
            "type" : "array",
            "description" : "A trait can be decomposed as \"Trait\" = \"Entity\" + \"Attribute\", the entity is the part of the plant that the trait refers to e.g., for \"grain colour\", entity = \"grain\"",
            "example" : [ "Stalk", "Root" ],
            "items" : {
              "type" : "string"
            }
          },
          "traitEntityPUIs" : {
            "type" : "array",
            "description" : "The Permanent Unique Identifier of a Trait Entity, usually in the form of a URI\n<br/>A trait can be decomposed as \"Trait\" = \"Entity\" + \"Attribute\", the entity is the part of the plant that the trait refers to e.g., for \"grain colour\", entity = \"grain\" ",
            "example" : [ "http://my-traits.com/trait/CO_123:0004098", "http://my-traits.com/trait/CO_123:0002366" ],
            "items" : {
              "type" : "string"
            }
          },
          "traitNames" : {
            "type" : "array",
            "description" : "The human readable name of a trait\n<br/>MIAPPE V1.1 (DM-86) Trait - Name of the (plant or environmental) trait under observation",
            "example" : [ "Stalk Height", "Root Color" ],
            "items" : {
              "type" : "string"
            }
          },
          "traitPUIs" : {
            "type" : "array",
            "description" : "The Permanent Unique Identifier of a Trait, usually in the form of a URI",
            "example" : [ "http://my-traits.com/trait/CO_123:0000456", "http://my-traits.com/trait/CO_123:0000820" ],
            "items" : {
              "type" : "string"
            }
          },
          "trialDbIds" : {
            "type" : "array",
            "description" : "The ID which uniquely identifies a trial to search for",
            "example" : [ "d2593dc2", "9431a731" ],
            "items" : {
              "type" : "string"
            }
          },
          "trialNames" : {
            "type" : "array",
            "description" : "The human readable name of a trial to search for",
            "example" : [ "All Yield Trials 2016", "Disease Resistance Study Comparison Group" ],
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "GermplasmAttributeValue" : {
        "required" : [ "attributeName", "attributeValueDbId" ],
        "type" : "object",
        "properties" : {
          "additionalInfo" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.",
            "nullable" : true
          },
          "attributeDbId" : {
            "type" : "string",
            "description" : "The ID which uniquely identifies this attribute within the given database server",
            "nullable" : true,
            "example" : "e529dd5a"
          },
          "attributeName" : {
            "type" : "string",
            "description" : "A human readable name for this attribute",
            "nullable" : true,
            "example" : "Weevil Resistance"
          },
          "attributeValueDbId" : {
            "type" : "string",
            "description" : "The ID which uniquely identifies this attribute value within the given database server",
            "example" : "33edbab7"
          },
          "determinedDate" : {
            "type" : "string",
            "description" : "The date the value of this attribute was determined for a given germplasm",
            "format" : "date-time",
            "nullable" : true
          },
          "externalReferences" : {
            "title" : "ExternalReferences",
            "type" : "array",
            "description" : "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.",
            "nullable" : true,
            "example" : [ {
              "referenceId" : "doi:10.155454/12341234",
              "referenceSource" : "DOI"
            }, {
              "referenceId" : "75a50e76",
              "referenceSource" : "Remote Data Collection Upload Tool"
            } ],
            "items" : {
              "type" : "object",
              "properties" : {
                "referenceID" : {
                  "type" : "string",
                  "description" : "**Deprecated in v2.1** Please use `referenceId`. Github issue number #460 \n<br>The external reference ID. Could be a simple string or a URI.",
                  "nullable" : true,
                  "deprecated" : true
                },
                "referenceId" : {
                  "type" : "string",
                  "description" : "The external reference ID. Could be a simple string or a URI."
                },
                "referenceSource" : {
                  "type" : "string",
                  "description" : "An identifier for the source system or database of this reference"
                }
              }
            }
          },
          "germplasmDbId" : {
            "type" : "string",
            "description" : "The ID which uniquely identifies a germplasm within the given database server",
            "nullable" : true,
            "example" : "d4076594"
          },
          "germplasmName" : {
            "type" : "string",
            "description" : "Name of the germplasm. It can be the preferred name and does not have to be unique.",
            "nullable" : true,
            "example" : "A0000003"
          },
          "value" : {
            "type" : "string",
            "description" : "The value of this attribute for a given germplasm",
            "nullable" : true,
            "example" : "Present"
          }
        },
        "x-brapi-metadata" : {
          "description" : "The value recorded for a particular Trait/Attribute and a particular Germplasm. Similar to an Observation value, but more concrete, applying to the whole Germplasm instead of a single ObservationUnit.",
          "module" : "BrAPI-Germplasm",
          "primaryModel" : true,
          "title" : "GermplasmAttributeValue"
        }
      },
      "GermplasmAttributeValueNewRequest" : {
        "required" : [ "attributeName" ],
        "type" : "object",
        "properties" : {
          "additionalInfo" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.",
            "nullable" : true
          },
          "attributeDbId" : {
            "type" : "string",
            "description" : "The ID which uniquely identifies this attribute within the given database server",
            "nullable" : true,
            "example" : "e529dd5a"
          },
          "attributeName" : {
            "type" : "string",
            "description" : "A human readable name for this attribute",
            "nullable" : true,
            "example" : "Weevil Resistance"
          },
          "determinedDate" : {
            "type" : "string",
            "description" : "The date the value of this attribute was determined for a given germplasm",
            "format" : "date-time",
            "nullable" : true
          },
          "externalReferences" : {
            "title" : "ExternalReferences",
            "type" : "array",
            "description" : "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.",
            "nullable" : true,
            "example" : [ {
              "referenceId" : "doi:10.155454/12341234",
              "referenceSource" : "DOI"
            }, {
              "referenceId" : "75a50e76",
              "referenceSource" : "Remote Data Collection Upload Tool"
            } ],
            "items" : {
              "type" : "object",
              "properties" : {
                "referenceID" : {
                  "type" : "string",
                  "description" : "**Deprecated in v2.1** Please use `referenceId`. Github issue number #460 \n<br>The external reference ID. Could be a simple string or a URI.",
                  "nullable" : true,
                  "deprecated" : true
                },
                "referenceId" : {
                  "type" : "string",
                  "description" : "The external reference ID. Could be a simple string or a URI."
                },
                "referenceSource" : {
                  "type" : "string",
                  "description" : "An identifier for the source system or database of this reference"
                }
              }
            }
          },
          "germplasmDbId" : {
            "type" : "string",
            "description" : "The ID which uniquely identifies a germplasm within the given database server",
            "nullable" : true,
            "example" : "d4076594"
          },
          "germplasmName" : {
            "type" : "string",
            "description" : "Name of the germplasm. It can be the preferred name and does not have to be unique.",
            "nullable" : true,
            "example" : "A0000003"
          },
          "value" : {
            "type" : "string",
            "description" : "The value of this attribute for a given germplasm",
            "nullable" : true,
            "example" : "Present"
          }
        }
      },
      "GermplasmAttributeValueSearchRequest" : {
        "type" : "object",
        "properties" : {
          "attributeDbIds" : {
            "type" : "array",
            "description" : "List of Germplasm Attribute IDs to search for",
            "nullable" : true,
            "example" : [ "2ef15c9f", "318e7f7d" ],
            "items" : {
              "type" : "string"
            }
          },
          "attributeNames" : {
            "type" : "array",
            "description" : "List of human readable Germplasm Attribute names to search for",
            "nullable" : true,
            "example" : [ "Plant Height 1", "Root Color" ],
            "items" : {
              "type" : "string"
            }
          },
          "attributeValueDbIds" : {
            "type" : "array",
            "description" : "List of Germplasm Attribute Value IDs to search for",
            "nullable" : true,
            "example" : [ "ca4636d0", "c8a92409" ],
            "items" : {
              "type" : "string"
            }
          },
          "commonCropNames" : {
            "type" : "array",
            "description" : "The BrAPI Common Crop Name is the simple, generalized, widely accepted name of the organism being researched. It is most often used in multi-crop systems where digital resources need to be divided at a high level. Things like 'Maize', 'Wheat', and 'Rice' are examples of common crop names.\n\nUse this parameter to only return results associated with the given crops. \n\nUse `GET /commoncropnames` to find the list of available crops on a server.",
            "example" : [ "Tomatillo", "Paw Paw" ],
            "items" : {
              "type" : "string"
            }
          },
          "dataTypes" : {
            "type" : "array",
            "description" : "List of scale data types to filter search results",
            "nullable" : true,
            "example" : [ "Numerical", "Ordinal", "Text" ],
            "items" : {
              "type" : "string",
              "description" : "<p>Class of the scale, entries can be</p>\n<p>\"Code\" -  This scale class is exceptionally used to express complex traits. Code is a nominal scale that combines the expressions of the different traits composing the complex trait. For example a severity trait might be expressed by a 2 digit and 2 character code. The first 2 digits are the percentage of the plant covered by a fungus and the 2 characters refer to the delay in development, e.g. \"75VD\" means \"75 %\" of the plant is infected and the plant is very delayed.</p>\n<p>\"Date\" - The date class is for events expressed in a time format, See ISO 8601</p>\n<p>\"Duration\" - The Duration class is for time elapsed between two events expressed in a time format, e.g. days, hours, months</p>\n<p>\"Nominal\" - Categorical scale that can take one of a limited and fixed number of categories. There is no intrinsic ordering to the categories</p>\n<p>\"Numerical\" - Numerical scales express the trait with real numbers. The numerical scale defines the unit e.g. centimeter, ton per hectare, branches</p>\n<p>\"Ordinal\" - Ordinal scales are scales composed of ordered categories</p>\n<p>\"Text\" - A free text is used to express the trait.</p>",
              "example" : "Numerical",
              "enum" : [ "Code", "Date", "Duration", "Nominal", "Numerical", "Ordinal", "Text" ]
            }
          },
          "externalReferenceIDs" : {
            "type" : "array",
            "description" : "**Deprecated in v2.1** Please use `externalReferenceIds`. Github issue number #460 \n<br>List of external reference IDs. Could be a simple strings or a URIs. (use with `externalReferenceSources` parameter)",
            "example" : [ "doi:10.155454/12341234", "14a19841" ],
            "deprecated" : true,
            "items" : {
              "type" : "string"
            }
          },
          "externalReferenceIds" : {
            "type" : "array",
            "description" : "List of external reference IDs. Could be a simple strings or a URIs. (use with `externalReferenceSources` parameter)",
            "example" : [ "doi:10.155454/12341234", "14a19841" ],
            "items" : {
              "type" : "string"
            }
          },
          "externalReferenceSources" : {
            "type" : "array",
            "description" : "List of identifiers for the source system or database of an external reference (use with `externalReferenceIDs` parameter)",
            "example" : [ "DOI", "Field App Name" ],
            "items" : {
              "type" : "string"
            }
          },
          "germplasmDbIds" : {
            "type" : "array",
            "description" : "List of IDs which uniquely identify germplasm to search for",
            "example" : [ "e9c6edd7", "1b1df4a6" ],
            "items" : {
              "type" : "string"
            }
          },
          "germplasmNames" : {
            "type" : "array",
            "description" : "List of human readable names to identify germplasm to search for",
            "example" : [ "A0000003", "A0000477" ],
            "items" : {
              "type" : "string"
            }
          },
          "methodDbIds" : {
            "type" : "array",
            "description" : "List of methods to filter search results",
            "nullable" : true,
            "example" : [ "07e34f83", "d3d5517a" ],
            "items" : {
              "type" : "string"
            }
          },
          "ontologyDbIds" : {
            "type" : "array",
            "description" : "List of ontology IDs to search for",
            "nullable" : true,
            "example" : [ "f44f7b23", "a26b576e" ],
            "items" : {
              "type" : "string"
            }
          },
          "page" : {
            "type" : "integer",
            "description" : "Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.",
            "example" : 0
          },
          "pageSize" : {
            "type" : "integer",
            "description" : "The size of the pages to be returned. Default is `1000`.",
            "example" : 1000
          },
          "programDbIds" : {
            "type" : "array",
            "description" : "A BrAPI Program represents the high level organization or group who is responsible for conducting trials and studies. Things like Breeding Programs and Funded Projects are considered BrAPI Programs. \n\nUse this parameter to only return results associated with the given programs. \n\nUse `GET /programs` to find the list of available programs on a server.",
            "example" : [ "8f5de35b", "0e2d4a13" ],
            "items" : {
              "type" : "string"
            }
          },
          "programNames" : {
            "type" : "array",
            "description" : "Use this parameter to only return results associated with the given program names. Program names are not required to be unique.\n\nUse `GET /programs` to find the list of available programs on a server.",
            "example" : [ "Better Breeding Program", "Best Breeding Program" ],
            "items" : {
              "type" : "string"
            }
          },
          "scaleDbIds" : {
            "type" : "array",
            "description" : "List of scales to filter search results",
            "nullable" : true,
            "example" : [ "a13ecffa", "7e1afe4f" ],
            "items" : {
              "type" : "string"
            }
          },
          "traitClasses" : {
            "type" : "array",
            "description" : "List of trait classes to filter search results",
            "nullable" : true,
            "example" : [ "morphological", "phenological", "agronomical" ],
            "items" : {
              "type" : "string"
            }
          },
          "traitDbIds" : {
            "type" : "array",
            "description" : "List of trait unique ID to filter search results",
            "nullable" : true,
            "example" : [ "ef81147b", "78d82fad" ],
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "GermplasmMCPD" : {
        "type" : "object",
        "properties" : {
          "accessionNames" : {
            "type" : "array",
            "description" : "MCPD (v2.1) (ACCENAME) 11. A collection of either a registered names or other designations given to the material received, other than the donors accession number (23) or collecting number (3). First letter uppercase.",
            "nullable" : true,
            "example" : [ "Symphony", "Emma" ],
            "items" : {
              "type" : "string"
            }
          },
          "accessionNumber" : {
            "type" : "string",
            "description" : "The unique identifier for a material or germplasm within a genebank\n\nMCPD (v2.1) (ACCENUMB) 2. This is the unique identifier for accessions within a genebank, and is assigned when a sample is entered into the genebank collection (e.g. \"PI 113869\").",
            "nullable" : true,
            "example" : "A0000003"
          },
          "acquisitionDate" : {
            "type" : "string",
            "description" : "The date a material or germplasm was acquired by the genebank \n\nMCPD (v2.1) (ACQDATE) 12. Date on which the accession entered the collection [YYYYMMDD] where YYYY is the year, MM is the month and DD is the day. Missing data (MM or DD) should be indicated with hyphens or \"00\" [double zero].",
            "format" : "date",
            "nullable" : true
          },
          "acquisitionSourceCode" : {
            "type" : "string",
            "description" : "MCPD (v2.1) (COLLSRC) 21. The coding scheme proposed can be used at 2 different levels of detail: either by using the general codes (in bold-face) such as 10, 20, 30, 40, etc., or by using the more specific codes, such as 11, 12, etc. \n\n10) Wild habitat \n11) Forest or woodland \n12) Shrubland \n13) Grassland \n14) Desert or tundra \n15) Aquatic habitat \n20) Farm or cultivated habitat \n21) Field \n22) Orchard \n23) Backyard, kitchen or home garden (urban, peri-urban or rural) \n24) Fallow land \n25) Pasture \n26) Farm store \n27) Threshing floor \n28) Park \n30) Market or shop \n40) Institute, Experimental station, Research organization, Genebank \n50) Seed company \n60) Weedy, disturbed or ruderal habitat \n61) Roadside \n62) Field margin \n99) Other (Elaborate in REMARKS field)",
            "nullable" : true,
            "example" : "26",
            "enum" : [ "10", "11", "12", "13", "14", "15", "20", "21", "22", "23", "24", "25", "26", "27", "28", "30", "40", "50", "60", "61", "62", "99" ]
          },
          "alternateIDs" : {
            "type" : "array",
            "description" : "MCPD (v2.1) (OTHERNUMB) 24. Any other identifiers known to exist in other collections for this accession. Use the following format: INSTCODE:ACCENUMB;INSTCODE:identifier;INSTCODE and identifier are separated by a colon without space. Pairs of INSTCODE and identifier are separated by a semicolon without space. When the institute is not known, the identifier should be preceded by a colon. ",
            "nullable" : true,
            "example" : [ "PER001:3", "PER001:http://pui.per/accession/A0000003", "USA001:A0000003" ],
            "items" : {
              "type" : "string"
            }
          },
          "ancestralData" : {
            "type" : "string",
            "description" : "MCPD (v2.1) (ANCEST) 20. Information about either pedigree or other description of ancestral information (e.g. parent variety in case of mutant or selection). For example a pedigree 'Hanna/7*Atlas//Turk/8*Atlas' or a description 'mutation found in Hanna', 'selection from Irene' or 'cross involving amongst others Hanna and Irene'.",
            "nullable" : true,
            "example" : "A0000001/A0000002"
          },
          "biologicalStatusOfAccessionCode" : {
            "type" : "string",
            "description" : "MCPD (v2.1) (SAMPSTAT) 19. The coding scheme proposed can be used at 3 different levels of detail: either by using the general codes such as 100, 200, 300, 400, or by using the more specific codes such as 110, 120, etc. \n\n100) Wild \n110) Natural \n120) Semi-natural/wild \n130) Semi-natural/sown \n200) Weedy \n300) Traditional cultivar/landrace \n400) Breeding/research material \n410) Breeders line \n411) Synthetic population \n412) Hybrid \n413) Founder stock/base population \n414) Inbred line (parent of hybrid cultivar) \n415) Segregating population \n416) Clonal selection \n420) Genetic stock \n421) Mutant (e.g. induced/insertion mutants, tilling populations) \n422) Cytogenetic stocks (e.g. chromosome addition/substitution, aneuploids,  amphiploids) \n423) Other genetic stocks (e.g. mapping populations) \n500) Advanced or improved cultivar (conventional breeding methods) \n600) GMO (by genetic engineering) \n999) Other (Elaborate in REMARKS field)",
            "nullable" : true,
            "example" : "421",
            "enum" : [ "100", "110", "120", "130", "200", "300", "400", "410", "411", "412", "413", "414", "415", "416", "420", "421", "422", "423", "500", "600", "999" ]
          },
          "breedingInstitutes" : {
            "type" : "array",
            "description" : "A list of institutes that were involved with breeding a material/germplasm\n<br> MCPD (v2.1) (BREDCODE) 18. FAO WIEWS code of the institute that has bred the material. If the holding institute has bred the material, the breeding institute code (BREDCODE) should be the same as the holding institute code (INSTCODE). Follows INSTCODE standard.\n<br> MCPD (v2.1) (BREDNAME) 18.1  Name of the institute (or person) that bred the material. This descriptor should be used only if BREDCODE can not be filled because the FAO WIEWS code for this institute is not available.",
            "nullable" : true,
            "items" : {
              "type" : "object",
              "properties" : {
                "instituteCode" : {
                  "type" : "string",
                  "description" : "MCPD (v2.1) (BREDCODE) 18. FAO WIEWS code of the institute that has bred the material. If the holding institute has bred the material, the breeding institute code (BREDCODE) should be the same as the holding institute code (INSTCODE). Follows INSTCODE standard.",
                  "nullable" : true,
                  "example" : "PER001"
                },
                "instituteName" : {
                  "type" : "string",
                  "description" : "MCPD (v2.1) (BREDNAME) 18.1  Name of the institute (or person) that bred the material. This descriptor should be used only if BREDCODE can not be filled because the FAO WIEWS code for this institute is not available.",
                  "nullable" : true,
                  "example" : "The BrAPI Institute"
                }
              }
            }
          },
          "collectingInfo" : {
            "type" : "object",
            "properties" : {
              "collectingDate" : {
                "type" : "string",
                "description" : "MCPD (v2.1) (COLLDATE) 17. Collecting date of the sample [YYYYMMDD] where YYYY is the year, MM is the month and DD is the day. Missing data (MM or DD) should be indicated with hyphens or \"00\" [double zero].",
                "format" : "date",
                "nullable" : true
              },
              "collectingInstitutes" : {
                "type" : "array",
                "description" : "Institutes which collected the sample",
                "nullable" : true,
                "items" : {
                  "type" : "object",
                  "properties" : {
                    "instituteAddress" : {
                      "type" : "string",
                      "description" : "MCPD (v2.1) (COLLINSTADDRESS) 4.1.1  Address of the institute collecting the sample. This descriptor should be used only if COLLCODE can not be filled since the FAO WIEWS code for this institute is not available. Multiple values are separated by a semicolon without space.",
                      "nullable" : true,
                      "example" : "123 Main Street, Lima, Peru, 5555"
                    },
                    "instituteCode" : {
                      "type" : "string",
                      "description" : "MCPD (v2.1) (COLLCODE) 4.  FAO WIEWS code of the institute collecting the sample. If the holding institute has collected the material, the collecting institute code (COLLCODE) should be the same as the holding institute code (INSTCODE). Follows INSTCODE standard. Multiple values are separated by a semicolon without space.",
                      "nullable" : true,
                      "example" : "PER001"
                    },
                    "instituteName" : {
                      "type" : "string",
                      "description" : "MCPD (v2.1) (COLLNAME) 4.1  Name of the institute collecting the sample. This descriptor should be used only if COLLCODE can not be filled because the FAO WIEWS code for this institute is not available. Multiple values are separated by a semicolon without space.",
                      "nullable" : true,
                      "example" : "The BrAPI Institute"
                    }
                  }
                }
              },
              "collectingMissionIdentifier" : {
                "type" : "string",
                "description" : "MCPD (v2.1) (COLLMISSID) 4.2 Identifier of the collecting mission used by the Collecting Institute (4 or 4.1) (e.g. \"CIATFOR_052\", \"CN_426\").",
                "nullable" : true,
                "example" : "CIATFOR_052"
              },
              "collectingNumber" : {
                "type" : "string",
                "description" : "MCPD (v2.1) (COLLNUMB) 3. Original identifier assigned by the collector(s) of the sample, normally composed of the name or initials of the collector(s) followed by a number (e.g. \"ab109909\"). This identifier is essential for identifying duplicates held in different collections.",
                "nullable" : true,
                "example" : "ab109909"
              },
              "collectingSite" : {
                "type" : "object",
                "properties" : {
                  "coordinateUncertainty" : {
                    "type" : "string",
                    "description" : "MCPD (v2.1) (COORDUNCERT) 15.5 Uncertainty associated with the coordinates in metres. Leave the value empty if the uncertainty is unknown.",
                    "nullable" : true,
                    "example" : "20"
                  },
                  "elevation" : {
                    "type" : "string",
                    "description" : "MCPD (v2.1) (ELEVATION) 16. Elevation of collecting site expressed in metres above sea level. Negative values are allowed.",
                    "nullable" : true,
                    "example" : "35"
                  },
                  "georeferencingMethod" : {
                    "type" : "string",
                    "description" : "MCPD (v2.1) (GEOREFMETH) 15.7  The georeferencing method used (GPS, determined from map, gazetteer, or estimated using software). Leave the value empty if georeferencing method is not known.",
                    "nullable" : true,
                    "example" : "WGS84"
                  },
                  "latitudeDecimal" : {
                    "type" : "string",
                    "description" : "MCPD (v2.1) (DECLATITUDE) 15.1 Latitude expressed in decimal degrees. Positive values are North of the Equator; negative values are South of the Equator (e.g. -44.6975).",
                    "nullable" : true,
                    "example" : "+42.445295"
                  },
                  "latitudeDegrees" : {
                    "type" : "string",
                    "description" : "MCPD (v2.1) (LATITUDE) 15.2 Degrees (2 digits) minutes (2 digits), and seconds (2 digits) followed by N (North) or S (South) (e.g. 103020S). Every missing digit (minutes or seconds) should be indicated with a hyphen. Leading zeros are required (e.g. 10",
                    "nullable" : true,
                    "example" : "42 26 43.1 N"
                  },
                  "locationDescription" : {
                    "type" : "string",
                    "description" : "MCPD (v2.1) (COLLSITE) 14. Location information below the country level that describes where the accession was collected, preferable in English. This might include the distance in kilometres and direction from the nearest town, village or map grid reference point, (e.g. 7 km south of Townsville).",
                    "nullable" : true,
                    "example" : "South east hill near institute buildings"
                  },
                  "longitudeDecimal" : {
                    "type" : "string",
                    "description" : "MCPD (v2.1) (DECLONGITUDE) 15.3 Longitude expressed in decimal degrees. Positive values are East of the Greenwich Meridian; negative values are West of the Greenwich Meridian (e.g. +120.9123).",
                    "nullable" : true,
                    "example" : "-076.471934"
                  },
                  "longitudeDegrees" : {
                    "type" : "string",
                    "description" : "MCPD (v2.1) (LONGITUDE) 15.4 Degrees (3 digits), minutes (2 digits), and seconds (2 digits) followed by E (East) or W (West) (e.g. 0762510W). Every missing digit (minutes or seconds) should be indicated with a hyphen. Leading zeros are required (e.g. 076",
                    "nullable" : true,
                    "example" : "76 28 19.0 W"
                  },
                  "spatialReferenceSystem" : {
                    "type" : "string",
                    "description" : "MCPD (v2.1) (COORDDATUM) 15.6 The geodetic datum or spatial reference system upon which the coordinates given in decimal latitude and decimal longitude are based (e.g. WGS84). The GPS uses the WGS84 datum.",
                    "nullable" : true,
                    "example" : "WGS84"
                  }
                },
                "description" : "Information about the location where the sample was collected",
                "nullable" : true
              }
            },
            "description" : "Information about the collection of a germplasm"
          },
          "commonCropName" : {
            "type" : "string",
            "description" : "MCPD (v2.1) (CROPNAME) 10. Common name of the crop. Example: \"malting barley\", \"mas\". ",
            "nullable" : true,
            "example" : "malting barley"
          },
          "countryOfOrigin" : {
            "type" : "string",
            "description" : "MCPD (v2.1) (ORIGCTY) 13. 3-letter ISO 3166-1 code of the country in which the sample was originally collected (e.g. landrace, crop wild relative, farmers\" variety), bred or selected (breeding lines, GMOs, segregating populations, hybrids, modern cultivars, etc.). Note: Descriptors 14 to 16 below should be completed accordingly only if it was \"collected\".",
            "nullable" : true,
            "example" : "Peru"
          },
          "donorInfo" : {
            "type" : "object",
            "properties" : {
              "donorAccessionNumber" : {
                "type" : "string",
                "description" : "MCPD (v2.1) (DONORNUMB) 23. Identifier assigned to an accession by the donor. Follows ACCENUMB standard.",
                "nullable" : true,
                "example" : "A0090204"
              },
              "donorAccessionPui" : {
                "type" : "string",
                "description" : "PUI (DOI mostly) of the accession in the donor system.",
                "nullable" : true,
                "example" : "http://pui.per/accession/A0010025"
              },
              "donorInstitute" : {
                "type" : "object",
                "properties" : {
                  "instituteCode" : {
                    "type" : "string",
                    "description" : "MCPD (v2.1) (DONORCODE) 22. FAO WIEWS code of the donor institute. Follows INSTCODE standard.",
                    "nullable" : true,
                    "example" : "PER001"
                  },
                  "instituteName" : {
                    "type" : "string",
                    "description" : "MCPD (v2.1) (DONORNAME) 22.1  Name of the donor institute (or person). This descriptor should be used only if DONORCODE can not be filled because the FAO WIEWS code for this institute is not available.",
                    "nullable" : true,
                    "example" : "The BrAPI Institute"
                  }
                },
                "description" : "The identifying information for the entity acting as an accession donor\n<br> MCPD (v2.1) (DONORCODE) 22. FAO WIEWS code of the donor institute. Follows INSTCODE standard.\n<br> MCPD (v2.1) (DONORNAME) 22.1  Name of the donor institute (or person). This descriptor should be used only if DONORCODE can not be filled because the FAO WIEWS code for this institute is not available."
              }
            },
            "description" : "Information about an accession donor"
          },
          "genus" : {
            "type" : "string",
            "description" : "MCPD (v2.1) (GENUS) 5. Genus name for taxon. Initial uppercase letter required.",
            "nullable" : true,
            "example" : "Aspergillus"
          },
          "germplasmDbId" : {
            "type" : "string",
            "description" : "A unique identifier which identifies a germplasm in this database",
            "example" : "31c4efbc"
          },
          "germplasmPUI" : {
            "type" : "string",
            "description" : "MCPD (v2.1) (PUID) 0. Any persistent, unique identifier assigned to the accession so it can be unambiguously referenced at the global level and the information associated with it harvested through automated means. Report one PUID for each accession. The Secretariat of the International Treaty on Plant Genetic Resources for Food and Agriculture (PGRFA) is facilitating the assignment of a persistent unique identifier (PUID), in the form of a DOI, to PGRFA at the accession level. Genebanks not applying a true PUID to their accessions should use, and request recipients to use, the concatenation of INSTCODE, ACCENUMB, and GENUS as a globally unique identifier similar in most respects to the PUID whenever they exchange information on accessions with third parties.",
            "nullable" : true,
            "example" : "http://pui.per/accession/A0403652"
          },
          "instituteCode" : {
            "type" : "string",
            "description" : "MCPD (v2.1) (INSTCODE) 1. FAO WIEWS code of the institute where the accession is maintained. The codes consist of the 3-letter ISO 3166 country code of the country where the institute is located plus a number (e.g. PER001). The current set of institute codes is available from http://www.fao.org/wiews. For those institutes not yet having an FAO Code, or for those with \"obsolete\" codes, see \"Common formatting rules (v)\".",
            "nullable" : true,
            "example" : "PER001"
          },
          "mlsStatus" : {
            "type" : "string",
            "description" : "MCPD (v2.1) (MLSSTAT) 27. The status of an accession with regards to the Multilateral System (MLS) of the International Treaty on Plant Genetic Resources for Food and Agriculture. Leave the value empty if the status is not known 0 No (not included) 1 Yes (included) 99 Other (elaborate in REMARKS field, e.g. \"under development\")",
            "nullable" : true,
            "example" : "0",
            "enum" : [ "", "0", "1", "99" ]
          },
          "remarks" : {
            "type" : "string",
            "description" : "MCPD (v2.1) (REMARKS) 28. The remarks field is used to add notes or to elaborate on descriptors with value 99 or 999 (= Other). Prefix remarks with the field name they refer to and a colon (:) without space (e.g. COLLSRC:riverside). Distinct remarks referring to different fields are separated by semi-colons without space.",
            "nullable" : true,
            "example" : "This is an example remark to demonstrate that any notable information can be put here"
          },
          "safetyDuplicateInstitutes" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "type" : "object",
              "properties" : {
                "instituteCode" : {
                  "type" : "string",
                  "description" : "MCPD (v2.1) (DUPLSITE) 25. FAO WIEWS code of the institute(s) where a safety duplicate of the accession is maintained. Follows INSTCODE standard.",
                  "nullable" : true,
                  "example" : "PER001"
                },
                "instituteName" : {
                  "type" : "string",
                  "description" : "MCPD (v2.1) (DUPLINSTNAME) 25.1  Name of the institute where a safety duplicate of the accession is maintained.",
                  "nullable" : true,
                  "example" : "The BrAPI Institute"
                }
              }
            }
          },
          "species" : {
            "type" : "string",
            "description" : "MCPD (v2.1) (SPECIES) 6. Specific epithet portion of the scientific name in lowercase letters. Only the following abbreviation is allowed: \"sp.\" ",
            "nullable" : true,
            "example" : "fructus"
          },
          "speciesAuthority" : {
            "type" : "string",
            "description" : "MCPD (v2.1) (SPAUTHOR) 7. Provide the authority for the species name.",
            "nullable" : true,
            "example" : "Smith, 1822"
          },
          "storageTypeCodes" : {
            "type" : "array",
            "description" : "MCPD (v2.1) (STORAGE) 26. If germplasm is maintained under different types of storage, multiple choices are allowed, separated by a semicolon (e.g. 20;30). (Refer to FAO/IPGRI Genebank Standards 1994 for details on storage type.) 10) Seed collection 11) Short term 12) Medium term 13) Long term 20) Field collection 30) In vitro collection 40) Cryo-preserved collection 50) DNA collection 99) Other (elaborate in REMARKS field)",
            "nullable" : true,
            "example" : [ "11", "13" ],
            "items" : {
              "type" : "string",
              "enum" : [ "10", "11", "12", "13", "20", "30", "40", "50", "99" ]
            }
          },
          "subtaxon" : {
            "type" : "string",
            "description" : "MCPD (v2.1) (SUBTAXA) 8. Subtaxon can be used to store any additional taxonomic identifier. The following abbreviations are allowed: \"subsp.\" (for subspecies); \"convar.\" (for convariety); \"var.\" (for variety); \"f.\" (for form); \"Group\" (for \"cultivar group\").",
            "nullable" : true,
            "example" : "Aspergillus fructus A"
          },
          "subtaxonAuthority" : {
            "type" : "string",
            "description" : "MCPD (v2.1) (SUBTAUTHOR) 9. Provide the subtaxon authority at the most detailed taxonomic level.",
            "nullable" : true,
            "example" : "Smith, 1822"
          }
        }
      },
      "GermplasmNewRequest" : {
        "required" : [ "commonCropName", "germplasmName", "germplasmPUI" ],
        "type" : "object",
        "properties" : {
          "accessionNumber" : {
            "type" : "string",
            "description" : "The unique identifier for a material or germplasm within a genebank\n\nMCPD (v2.1) (ACCENUMB) 2. This is the unique identifier for accessions within a genebank, and is assigned when a sample is entered into the genebank collection (e.g. \"PI 113869\").",
            "nullable" : true,
            "example" : "A0000003"
          },
          "acquisitionDate" : {
            "type" : "string",
            "description" : "The date a material or germplasm was acquired by the genebank \n\nMCPD (v2.1) (ACQDATE) 12. Date on which the accession entered the collection [YYYYMMDD] where YYYY is the year, MM is the month and DD is the day. Missing data (MM or DD) should be indicated with hyphens or \"00\" [double zero].",
            "format" : "date",
            "nullable" : true
          },
          "additionalInfo" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.",
            "nullable" : true
          },
          "biologicalStatusOfAccessionCode" : {
            "type" : "string",
            "description" : "MCPD (v2.1) (SAMPSTAT) 19. The coding scheme proposed can be used at 3 different levels of detail: either by using the general codes such as 100, 200, 300, 400, or by using the more specific codes such as 110, 120, etc. \n\n100) Wild \n110) Natural \n120) Semi-natural/wild \n130) Semi-natural/sown \n200) Weedy \n300) Traditional cultivar/landrace \n400) Breeding/research material \n410) Breeders line \n411) Synthetic population \n412) Hybrid \n413) Founder stock/base population \n414) Inbred line (parent of hybrid cultivar) \n415) Segregating population \n416) Clonal selection \n420) Genetic stock \n421) Mutant (e.g. induced/insertion mutants, tilling populations) \n422) Cytogenetic stocks (e.g. chromosome addition/substitution, aneuploids,  amphiploids) \n423) Other genetic stocks (e.g. mapping populations) \n500) Advanced or improved cultivar (conventional breeding methods) \n600) GMO (by genetic engineering) \n999) Other (Elaborate in REMARKS field)",
            "nullable" : true,
            "example" : "420",
            "enum" : [ "100", "110", "120", "130", "200", "300", "400", "410", "411", "412", "413", "414", "415", "416", "420", "421", "422", "423", "500", "600", "999" ]
          },
          "biologicalStatusOfAccessionDescription" : {
            "type" : "string",
            "description" : "Supplemental text description for 'biologicalStatusOfAccessionCode'",
            "nullable" : true,
            "example" : "Genetic stock"
          },
          "breedingMethodDbId" : {
            "type" : "string",
            "description" : "The unique identifier for the breeding method used to create this germplasm",
            "nullable" : true,
            "example" : "ffcce7ef"
          },
          "breedingMethodName" : {
            "type" : "string",
            "description" : "human readable name of the breeding method",
            "nullable" : true,
            "example" : "Male Backcross"
          },
          "collection" : {
            "type" : "string",
            "description" : "A specific panel/collection/population name this germplasm belongs to.",
            "nullable" : true,
            "example" : "Rice Diversity Panel 1 (RDP1)"
          },
          "commonCropName" : {
            "type" : "string",
            "description" : "Common name for the crop \n\nMCPD (v2.1) (CROPNAME) 10. Common name of the crop. Example: \"malting barley\", \"mas\".",
            "example" : "Maize"
          },
          "countryOfOriginCode" : {
            "type" : "string",
            "description" : "3-letter ISO 3166-1 code of the country in which the sample was originally collected \n\nMCPD (v2.1) (ORIGCTY) 13. 3-letter ISO 3166-1 code of the country in which the sample was originally collected (e.g. landrace, crop wild relative, farmers variety), bred or selected (breeding lines, GMOs, segregating populations, hybrids, modern cultivars, etc.). Note- Descriptors 14 to 16 below should be completed accordingly only if it was \"collected\".",
            "nullable" : true,
            "example" : "BES"
          },
          "defaultDisplayName" : {
            "type" : "string",
            "description" : "Human readable name used for display purposes",
            "nullable" : true,
            "example" : "A0000003"
          },
          "documentationURL" : {
            "type" : "string",
            "description" : "A URL to the human readable documentation of an object",
            "format" : "uri",
            "nullable" : true,
            "example" : "https://wiki.brapi.org"
          },
          "donors" : {
            "type" : "array",
            "description" : "List of donor institutes",
            "nullable" : true,
            "items" : {
              "type" : "object",
              "properties" : {
                "donorAccessionNumber" : {
                  "type" : "string",
                  "description" : "The accession number assigned by the donor\n                              \nMCPD (v2.1) (DONORNUMB) 23. Identifier assigned to an accession by the donor. Follows ACCENUMB standard.",
                  "nullable" : true,
                  "example" : "A0000123"
                },
                "donorInstituteCode" : {
                  "type" : "string",
                  "description" : "The institute code for the donor institute\n<br/>MCPD (v2.1) (DONORCODE) 22. FAO WIEWS code of the donor institute. Follows INSTCODE standard.",
                  "nullable" : true,
                  "example" : "PER001"
                }
              }
            }
          },
          "externalReferences" : {
            "title" : "ExternalReferences",
            "type" : "array",
            "description" : "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.",
            "nullable" : true,
            "example" : [ {
              "referenceId" : "doi:10.155454/12341234",
              "referenceSource" : "DOI"
            }, {
              "referenceId" : "75a50e76",
              "referenceSource" : "Remote Data Collection Upload Tool"
            } ],
            "items" : {
              "type" : "object",
              "properties" : {
                "referenceID" : {
                  "type" : "string",
                  "description" : "**Deprecated in v2.1** Please use `referenceId`. Github issue number #460 \n<br>The external reference ID. Could be a simple string or a URI.",
                  "nullable" : true,
                  "deprecated" : true
                },
                "referenceId" : {
                  "type" : "string",
                  "description" : "The external reference ID. Could be a simple string or a URI."
                },
                "referenceSource" : {
                  "type" : "string",
                  "description" : "An identifier for the source system or database of this reference"
                }
              }
            }
          },
          "genus" : {
            "type" : "string",
            "description" : "Genus name for taxon. Initial uppercase letter required.\n\nMCPD (v2.1) (GENUS) 5. Genus name for taxon. Initial uppercase letter required.\n\nMIAPPE V1.1 (DM-43) Genus - Genus name for the organism under study, according to standard scientific nomenclature.",
            "nullable" : true,
            "example" : "Aspergillus"
          },
          "germplasmName" : {
            "type" : "string",
            "description" : "Name of the germplasm. It can be the preferred name and does not have to be unique.\n\nMCPD (v2.1) (ACCENAME) 11. Either a registered or other designation given to the material received, other than the donors accession number (23) or collecting number (3). First letter uppercase. Multiple names are separated by a semicolon without space.",
            "example" : "A0000003"
          },
          "germplasmOrigin" : {
            "type" : "array",
            "description" : "Information for material (orchard, natural sites, ...). Geographic identification of the plants from which seeds or cutting have been taken to produce that germplasm.",
            "nullable" : true,
            "items" : {
              "type" : "object",
              "properties" : {
                "coordinateUncertainty" : {
                  "type" : "string",
                  "description" : "Uncertainty associated with the coordinates in meters. Leave the value empty if the uncertainty is unknown.",
                  "nullable" : true,
                  "example" : "20"
                },
                "coordinates" : {
                  "title" : "GeoJSON",
                  "type" : "object",
                  "properties" : {
                    "geometry" : {
                      "title" : "GeoJSON Geometry",
                      "type" : "object",
                      "description" : "A geometry as defined by GeoJSON (RFC 7946). In this context, only Point or Polygon geometry are allowed.",
                      "example" : {
                        "coordinates" : [ -76.506042, 42.417373, 123 ],
                        "type" : "Point"
                      },
                      "discriminator" : {
                        "propertyName" : "type",
                        "mapping" : {
                          "Point" : "#/components/schemas/pointGeometry",
                          "Polygon" : "#/components/schemas/polygonGeometry"
                        }
                      },
                      "oneOf" : [ {
                        "required" : [ "coordinates", "type" ],
                        "type" : "object",
                        "properties" : {
                          "coordinates" : {
                            "minItems" : 2,
                            "type" : "array",
                            "description" : "A single position",
                            "example" : [ -76.506042, 42.417373, 123 ],
                            "items" : {
                              "type" : "number"
                            }
                          },
                          "type" : {
                            "type" : "string",
                            "description" : "The literal string \"Point\"",
                            "example" : "Point",
                            "default" : "Point"
                          }
                        },
                        "description" : "Copied from RFC 7946 Section 3.1.1\n\nA position is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or\neasting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element."
                      }, {
                        "required" : [ "coordinates", "type" ],
                        "type" : "object",
                        "properties" : {
                          "coordinates" : {
                            "type" : "array",
                            "description" : "An array of linear rings",
                            "example" : [ [ [ -77.456654, 42.241133, 494 ], [ -75.414133, 41.508282, 571 ], [ -76.506042, 42.417373, 123 ], [ -77.456654, 42.241133, 346 ] ] ],
                            "items" : {
                              "minItems" : 4,
                              "type" : "array",
                              "description" : "An array of at least four positions where the first equals the last",
                              "example" : [ [ -77.456654, 42.241133, 494 ], [ -75.414133, 41.508282, 571 ], [ -76.506042, 42.417373, 123 ], [ -77.456654, 42.241133, 346 ] ],
                              "items" : {
                                "minItems" : 2,
                                "type" : "array",
                                "description" : "A single position",
                                "example" : [ -76.506042, 42.417373, 123 ],
                                "items" : {
                                  "type" : "number"
                                }
                              }
                            }
                          },
                          "type" : {
                            "type" : "string",
                            "description" : "The literal string \"Polygon\"",
                            "example" : "Polygon",
                            "default" : "Polygon"
                          }
                        },
                        "description" : "An array of Linear Rings. Each Linear Ring is an array of Points. \n\nA Point is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or\neasting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element."
                      } ]
                    },
                    "type" : {
                      "type" : "string",
                      "description" : "The literal string \"Feature\"",
                      "example" : "Feature",
                      "default" : "Feature"
                    }
                  },
                  "description" : "One geometry as defined by GeoJSON (RFC 7946). All coordinates are decimal values on the WGS84 geographic coordinate reference system.\n\nCopied from RFC 7946 Section 3.1.1\n\nA position is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or\neasting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element.",
                  "nullable" : true
                }
              },
              "description" : "MIAPPE V1.1 (DM-52) \n\nMIAPPE V1.1 (DM-53) \n\nMIAPPE V1.1 (DM-54) \n\nMIAPPE V1.1 (DM-55)\n\nMCPD (v2.1) (COORDUNCERT) 15.5 \n\nMCPD (v2.1) (ELEVATION) 16. \n\nMCPD (v2.1) (GEOREFMETH) 15.7 \n\nMCPD (v2.1) (DECLATITUDE) 15.1 \n\nMCPD (v2.1) (DECLONGITUDE) 15.3 "
            }
          },
          "germplasmPUI" : {
            "type" : "string",
            "description" : "The Permanent Unique Identifier which represents a germplasm\n\nMIAPPE V1.1 (DM-41) Biological material ID - Code used to identify the biological material in the data file. Should be unique within the Investigation. Can correspond to experimental plant ID, seed lot ID, etc This material identification is different from a BiosampleID which corresponds to Observation Unit or Samples sections below.\n\nMIAPPE V1.1 (DM-51) Material source DOI - Digital Object Identifier (DOI) of the material source\n\nMCPD (v2.1) (PUID) 0. Any persistent, unique identifier assigned to the accession so it can be unambiguously referenced at the global level and the information associated with it harvested through automated means. Report one PUID for each accession. The Secretariat of the International Treaty on Plant Genetic Resources for Food and Agriculture (PGRFA) is facilitating the assignment of a persistent unique identifier (PUID), in the form of a DOI, to PGRFA at the accession level. Genebanks not applying a true PUID to their accessions should use, and request recipients to use, the concatenation of INSTCODE, ACCENUMB, and GENUS as a globally unique identifier similar in most respects to the PUID whenever they exchange information on accessions with third parties.",
            "example" : "http://pui.per/accession/A0000003"
          },
          "germplasmPreprocessing" : {
            "type" : "string",
            "description" : "Description of any process or treatment applied uniformly to the germplasm, prior to the study itself. Can be provided as free text or as an accession number from a suitable controlled vocabulary.",
            "nullable" : true,
            "example" : "EO:0007210; transplanted from study 2351 observation unit ID: pot:894"
          },
          "instituteCode" : {
            "type" : "string",
            "description" : "The code for the institute that maintains the material. \n\nMCPD (v2.1) (INSTCODE) 1. FAO WIEWS code of the institute where the accession is maintained. The codes consist of the 3-letter ISO 3166 country code of the country where the institute is located plus a number (e.g. PER001). The current set of institute codes is available from http://www.fao.org/wiews. For those institutes not yet having an FAO Code, or for those with \"obsolete\" codes, see \"Common formatting rules (v)\".",
            "nullable" : true,
            "example" : "PER001"
          },
          "instituteName" : {
            "type" : "string",
            "description" : "The name of the institute that maintains the material",
            "nullable" : true,
            "example" : "The BrAPI Institute"
          },
          "pedigree" : {
            "type" : "string",
            "description" : "The cross name and optional selection history.\n\nMCPD (v2.1) (ANCEST) 20. Information about either pedigree or other description of ancestral information (e.g. parent variety in case of mutant or selection). For example a pedigree 'Hanna/7*Atlas//Turk/8*Atlas' or a description 'mutation found in Hanna', 'selection from Irene' or 'cross involving amongst others Hanna and Irene'.",
            "nullable" : true,
            "example" : "A0000001/A0000002"
          },
          "seedSource" : {
            "type" : "string",
            "description" : "An identifier for the source of the biological material\n<br/>MIAPPE V1.1 (DM-50) Material source ID (Holding institute/stock centre, accession) - An identifier for the source of the biological material, in the form of a key-value pair comprising the name/identifier of the repository from which the material was sourced plus the accession number of the repository for that material. Where an accession number has not been assigned, but the material has been derived from the crossing of known accessions, the material can be defined as follows: \"mother_accession X father_accession\", or, if father is unknown, as \"mother_accession X UNKNOWN\". For in situ material, the region of provenance may be used when an accession is not available.",
            "nullable" : true,
            "example" : "INRA:095115_inra"
          },
          "seedSourceDescription" : {
            "type" : "string",
            "description" : "Description of the material source\n\nMIAPPE V1.1 (DM-56) Material source description - Description of the material source",
            "nullable" : true,
            "example" : "Branches were collected from a 10-year-old tree growing in a progeny trial established in a loamy brown earth soil."
          },
          "species" : {
            "type" : "string",
            "description" : "Specific epithet portion of the scientific name in lowercase letters.\n\nMCPD (v2.1) (SPECIES) 6. Specific epithet portion of the scientific name in lowercase letters. Only the following abbreviation is allowed: \"sp.\" \n\nMIAPPE V1.1 (DM-44) Species - Species name (formally: specific epithet) for the organism under study, according to standard scientific nomenclature.",
            "nullable" : true,
            "example" : "fructus"
          },
          "speciesAuthority" : {
            "type" : "string",
            "description" : "The authority organization responsible for tracking and maintaining the species name \n\nMCPD (v2.1) (SPAUTHOR) 7. Provide the authority for the species name.",
            "nullable" : true,
            "example" : "Smith, 1822"
          },
          "storageTypes" : {
            "type" : "array",
            "description" : "The type of storage this germplasm is kept in at a genebank.",
            "nullable" : true,
            "example" : [ {
              "code" : "20",
              "description" : "Field collection"
            }, {
              "code" : "11",
              "description" : "Short term"
            } ],
            "items" : {
              "type" : "object",
              "properties" : {
                "code" : {
                  "type" : "string",
                  "description" : "The 2 digit code representing the type of storage this germplasm is kept in at a genebank. \n\nMCPD (v2.1) (STORAGE) 26. If germplasm is maintained under different types of storage, multiple choices are allowed, separated by a semicolon (e.g. 20;30). (Refer to FAO/IPGRI Genebank Standards 1994 for details on storage type.) \n\n10) Seed collection \n11) Short term \n12) Medium term \n13) Long term \n20) Field collection \n30) In vitro collection \n40) Cryo-preserved collection \n50) DNA collection \n99) Other (elaborate in REMARKS field)",
                  "nullable" : true,
                  "example" : "11",
                  "enum" : [ "10", "11", "12", "13", "20", "30", "40", "50", "99" ]
                },
                "description" : {
                  "type" : "string",
                  "description" : "A supplemental text description of the storage type",
                  "nullable" : true,
                  "example" : "Short term"
                }
              }
            }
          },
          "subtaxa" : {
            "type" : "string",
            "description" : "Subtaxon can be used to store any additional taxonomic identifier.\n\nMCPD (v2.1) (SUBTAXA) 8. Subtaxon can be used to store any additional taxonomic identifier. The following abbreviations are allowed: \"subsp.\" (for subspecies); \"convar.\" (for convariety); \"var.\" (for variety); \"f.\" (for form); \"Group\" (for \"cultivar group\").\n\nMIAPPE V1.1 (DM-44) Infraspecific name - Name of any subtaxa level, including variety, crossing name, etc. It can be used to store any additional taxonomic identifier. Either free text description or key-value pair list format (the key is the name of the rank and the value is the value of  the rank). Ranks can be among the following terms: subspecies, cultivar, variety, subvariety, convariety, group, subgroup, hybrid, line, form, subform. For MCPD compliance, the following abbreviations are allowed: subsp. (subspecies); convar. (convariety); var. (variety); f. (form); Group (cultivar group).",
            "nullable" : true,
            "example" : "Aspergillus fructus A"
          },
          "subtaxaAuthority" : {
            "type" : "string",
            "description" : "The authority organization responsible for tracking and maintaining the subtaxon information\n\nMCPD (v2.1) (SUBTAUTHOR) 9. Provide the subtaxon authority at the most detailed taxonomic level.",
            "nullable" : true,
            "example" : "Smith, 1822"
          },
          "synonyms" : {
            "type" : "array",
            "description" : "List of alternative names or IDs used to reference this germplasm\n\nMCPD (v2.1) (OTHERNUMB) 24. Any other identifiers known to exist in other collections for this accession. Use the following format: INSTCODE:ACCENUMB;INSTCODE:identifier;INSTCODE and identifier are separated by a colon without space. Pairs of INSTCODE and identifier are separated by a semicolon without space. When the institute is not known, the identifier should be preceded by a colon.",
            "nullable" : true,
            "items" : {
              "type" : "object",
              "properties" : {
                "synonym" : {
                  "type" : "string",
                  "description" : "Alternative name or ID used to reference this germplasm",
                  "nullable" : true,
                  "example" : "variety_1"
                },
                "type" : {
                  "type" : "string",
                  "description" : "A descriptive classification for this synonym",
                  "nullable" : true,
                  "example" : "Pre-Code"
                }
              }
            }
          },
          "taxonIds" : {
            "type" : "array",
            "description" : "The list of IDs for this SPECIES from different sources. If present, NCBI Taxon should be always listed as \"ncbiTaxon\" preferably with a purl. The rank of this ID should be species.\n\nMIAPPE V1.1 (DM-42) Organism - An identifier for the organism at the species level. Use of the NCBI taxon ID is recommended.",
            "nullable" : true,
            "items" : {
              "required" : [ "sourceName", "taxonId" ],
              "type" : "object",
              "properties" : {
                "sourceName" : {
                  "type" : "string",
                  "description" : "The human readable name of the taxonomy provider",
                  "example" : "NCBI"
                },
                "taxonId" : {
                  "type" : "string",
                  "description" : "The identifier (name, ID, URI) of a particular taxonomy within the source provider",
                  "example" : "2026747"
                }
              }
            }
          }
        }
      },
      "GermplasmOrigin" : {
        "type" : "object",
        "properties" : {
          "coordinateUncertainty" : {
            "type" : "string",
            "description" : "Uncertainty associated with the coordinates in meters. Leave the value empty if the uncertainty is unknown.",
            "nullable" : true,
            "example" : "20"
          },
          "coordinates" : {
            "title" : "GeoJSON",
            "type" : "object",
            "properties" : {
              "geometry" : {
                "title" : "GeoJSON Geometry",
                "type" : "object",
                "description" : "A geometry as defined by GeoJSON (RFC 7946). In this context, only Point or Polygon geometry are allowed.",
                "example" : {
                  "coordinates" : [ -76.506042, 42.417373, 123 ],
                  "type" : "Point"
                },
                "discriminator" : {
                  "propertyName" : "type",
                  "mapping" : {
                    "Point" : "#/components/schemas/pointGeometry",
                    "Polygon" : "#/components/schemas/polygonGeometry"
                  }
                },
                "oneOf" : [ {
                  "required" : [ "coordinates", "type" ],
                  "type" : "object",
                  "properties" : {
                    "coordinates" : {
                      "minItems" : 2,
                      "type" : "array",
                      "description" : "A single position",
                      "example" : [ -76.506042, 42.417373, 123 ],
                      "items" : {
                        "type" : "number"
                      }
                    },
                    "type" : {
                      "type" : "string",
                      "description" : "The literal string \"Point\"",
                      "example" : "Point",
                      "default" : "Point"
                    }
                  },
                  "description" : "Copied from RFC 7946 Section 3.1.1\n\nA position is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or\neasting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element."
                }, {
                  "required" : [ "coordinates", "type" ],
                  "type" : "object",
                  "properties" : {
                    "coordinates" : {
                      "type" : "array",
                      "description" : "An array of linear rings",
                      "example" : [ [ [ -77.456654, 42.241133, 494 ], [ -75.414133, 41.508282, 571 ], [ -76.506042, 42.417373, 123 ], [ -77.456654, 42.241133, 346 ] ] ],
                      "items" : {
                        "minItems" : 4,
                        "type" : "array",
                        "description" : "An array of at least four positions where the first equals the last",
                        "example" : [ [ -77.456654, 42.241133, 494 ], [ -75.414133, 41.508282, 571 ], [ -76.506042, 42.417373, 123 ], [ -77.456654, 42.241133, 346 ] ],
                        "items" : {
                          "minItems" : 2,
                          "type" : "array",
                          "description" : "A single position",
                          "example" : [ -76.506042, 42.417373, 123 ],
                          "items" : {
                            "type" : "number"
                          }
                        }
                      }
                    },
                    "type" : {
                      "type" : "string",
                      "description" : "The literal string \"Polygon\"",
                      "example" : "Polygon",
                      "default" : "Polygon"
                    }
                  },
                  "description" : "An array of Linear Rings. Each Linear Ring is an array of Points. \n\nA Point is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or\neasting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element."
                } ]
              },
              "type" : {
                "type" : "string",
                "description" : "The literal string \"Feature\"",
                "example" : "Feature",
                "default" : "Feature"
              }
            },
            "description" : "One geometry as defined by GeoJSON (RFC 7946). All coordinates are decimal values on the WGS84 geographic coordinate reference system.\n\nCopied from RFC 7946 Section 3.1.1\n\nA position is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or\neasting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element.",
            "nullable" : true
          }
        },
        "description" : "MIAPPE V1.1 (DM-52) \n\nMIAPPE V1.1 (DM-53) \n\nMIAPPE V1.1 (DM-54) \n\nMIAPPE V1.1 (DM-55)\n\nMCPD (v2.1) (COORDUNCERT) 15.5 \n\nMCPD (v2.1) (ELEVATION) 16. \n\nMCPD (v2.1) (GEOREFMETH) 15.7 \n\nMCPD (v2.1) (DECLATITUDE) 15.1 \n\nMCPD (v2.1) (DECLONGITUDE) 15.3 "
      },
      "GermplasmSearchRequest" : {
        "type" : "object",
        "properties" : {
          "accessionNumbers" : {
            "type" : "array",
            "description" : "A collection of unique identifiers for materials or germplasm within a genebank\n\nMCPD (v2.1) (ACCENUMB) 2. This is the unique identifier for accessions within a genebank, and is assigned when a sample is entered into the genebank collection (e.g. \"PI 113869\").",
            "nullable" : true,
            "example" : [ "A0000003", "A0000477" ],
            "items" : {
              "type" : "string"
            }
          },
          "binomialNames" : {
            "type" : "array",
            "description" : "List of the full binomial name (scientific name) to identify a germplasm",
            "nullable" : true,
            "example" : [ "Aspergillus fructus", "Zea mays" ],
            "items" : {
              "type" : "string"
            }
          },
          "collections" : {
            "type" : "array",
            "description" : "A specific panel/collection/population name this germplasm belongs to.",
            "nullable" : true,
            "example" : [ "RDP1", "MDP1" ],
            "items" : {
              "type" : "string"
            }
          },
          "commonCropNames" : {
            "type" : "array",
            "description" : "The BrAPI Common Crop Name is the simple, generalized, widely accepted name of the organism being researched. It is most often used in multi-crop systems where digital resources need to be divided at a high level. Things like 'Maize', 'Wheat', and 'Rice' are examples of common crop names.\n\nUse this parameter to only return results associated with the given crops. \n\nUse `GET /commoncropnames` to find the list of available crops on a server.",
            "example" : [ "Tomatillo", "Paw Paw" ],
            "items" : {
              "type" : "string"
            }
          },
          "externalReferenceIDs" : {
            "type" : "array",
            "description" : "**Deprecated in v2.1** Please use `externalReferenceIds`. Github issue number #460 \n<br>List of external reference IDs. Could be a simple strings or a URIs. (use with `externalReferenceSources` parameter)",
            "example" : [ "doi:10.155454/12341234", "14a19841" ],
            "deprecated" : true,
            "items" : {
              "type" : "string"
            }
          },
          "externalReferenceIds" : {
            "type" : "array",
            "description" : "List of external reference IDs. Could be a simple strings or a URIs. (use with `externalReferenceSources` parameter)",
            "example" : [ "doi:10.155454/12341234", "14a19841" ],
            "items" : {
              "type" : "string"
            }
          },
          "externalReferenceSources" : {
            "type" : "array",
            "description" : "List of identifiers for the source system or database of an external reference (use with `externalReferenceIDs` parameter)",
            "example" : [ "DOI", "Field App Name" ],
            "items" : {
              "type" : "string"
            }
          },
          "familyCodes" : {
            "type" : "array",
            "description" : "A familyCode representing the family this germplasm belongs to.",
            "nullable" : true,
            "example" : [ "fa000203", "fa009965" ],
            "items" : {
              "type" : "string"
            }
          },
          "genus" : {
            "type" : "array",
            "description" : "List of Genus names to identify germplasm",
            "nullable" : true,
            "example" : [ "Aspergillus", "Zea" ],
            "items" : {
              "type" : "string"
            }
          },
          "germplasmDbIds" : {
            "type" : "array",
            "description" : "List of IDs which uniquely identify germplasm to search for",
            "example" : [ "e9c6edd7", "1b1df4a6" ],
            "items" : {
              "type" : "string"
            }
          },
          "germplasmNames" : {
            "type" : "array",
            "description" : "List of human readable names to identify germplasm to search for",
            "example" : [ "A0000003", "A0000477" ],
            "items" : {
              "type" : "string"
            }
          },
          "germplasmPUIs" : {
            "type" : "array",
            "description" : "List of Permanent Unique Identifiers to identify germplasm",
            "nullable" : true,
            "example" : [ "http://pui.per/accession/A0000003", "http://pui.per/accession/A0000477" ],
            "items" : {
              "type" : "string"
            }
          },
          "instituteCodes" : {
            "type" : "array",
            "description" : "The code for the institute that maintains the material. \n<br/> MCPD (v2.1) (INSTCODE) 1. FAO WIEWS code of the institute where the accession is maintained. The codes consist of the 3-letter ISO 3166 country code of the country where the institute is located plus a number (e.g. PER001). The current set of institute codes is available from http://www.fao.org/wiews. For those institutes not yet having an FAO Code, or for those with \"obsolete\" codes, see \"Common formatting rules (v)\".",
            "nullable" : true,
            "example" : [ "PER001", "NOR001" ],
            "items" : {
              "type" : "string"
            }
          },
          "page" : {
            "type" : "integer",
            "description" : "Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.",
            "example" : 0
          },
          "pageSize" : {
            "type" : "integer",
            "description" : "The size of the pages to be returned. Default is `1000`.",
            "example" : 1000
          },
          "parentDbIds" : {
            "type" : "array",
            "description" : "Search for Germplasm with these parents",
            "nullable" : true,
            "example" : [ "72c1001f", "7346c553" ],
            "items" : {
              "type" : "string"
            }
          },
          "progenyDbIds" : {
            "type" : "array",
            "description" : "Search for Germplasm with these children",
            "nullable" : true,
            "example" : [ "16e16a7e", "ce06cf9e" ],
            "items" : {
              "type" : "string"
            }
          },
          "programDbIds" : {
            "type" : "array",
            "description" : "A BrAPI Program represents the high level organization or group who is responsible for conducting trials and studies. Things like Breeding Programs and Funded Projects are considered BrAPI Programs. \n\nUse this parameter to only return results associated with the given programs. \n\nUse `GET /programs` to find the list of available programs on a server.",
            "example" : [ "8f5de35b", "0e2d4a13" ],
            "items" : {
              "type" : "string"
            }
          },
          "programNames" : {
            "type" : "array",
            "description" : "Use this parameter to only return results associated with the given program names. Program names are not required to be unique.\n\nUse `GET /programs` to find the list of available programs on a server.",
            "example" : [ "Better Breeding Program", "Best Breeding Program" ],
            "items" : {
              "type" : "string"
            }
          },
          "species" : {
            "type" : "array",
            "description" : "List of Species names to identify germplasm",
            "nullable" : true,
            "example" : [ "fructus", "mays" ],
            "items" : {
              "type" : "string"
            }
          },
          "studyDbIds" : {
            "type" : "array",
            "description" : "List of study identifiers to search for",
            "example" : [ "cf6c4bd4", "691e69d6" ],
            "items" : {
              "type" : "string"
            }
          },
          "studyNames" : {
            "type" : "array",
            "description" : "List of study names to filter search results",
            "example" : [ "The First Bob Study 2017", "Wheat Yield Trial 246" ],
            "items" : {
              "type" : "string"
            }
          },
          "synonyms" : {
            "type" : "array",
            "description" : "List of alternative names or IDs used to reference this germplasm",
            "nullable" : true,
            "example" : [ "variety_1", "2c38f9b6" ],
            "items" : {
              "type" : "string"
            }
          },
          "trialDbIds" : {
            "type" : "array",
            "description" : "The ID which uniquely identifies a trial to search for",
            "example" : [ "d2593dc2", "9431a731" ],
            "items" : {
              "type" : "string"
            }
          },
          "trialNames" : {
            "type" : "array",
            "description" : "The human readable name of a trial to search for",
            "example" : [ "All Yield Trials 2016", "Disease Resistance Study Comparison Group" ],
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "Image" : {
        "required" : [ "imageDbId" ],
        "type" : "object",
        "properties" : {
          "additionalInfo" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.",
            "nullable" : true
          },
          "copyright" : {
            "type" : "string",
            "description" : "The copyright information of this image. Example 'Copyright 2018 Bob Robertson'",
            "nullable" : true,
            "example" : "Copyright 2018 Bob Robertson"
          },
          "description" : {
            "type" : "string",
            "description" : "The human readable description of an image.",
            "nullable" : true,
            "example" : "This is a picture of a tomato"
          },
          "descriptiveOntologyTerms" : {
            "type" : "array",
            "description" : "A list of terms to formally describe the image. Each item could be a simple Tag, an Ontology reference Id, or a full ontology URL.",
            "nullable" : true,
            "example" : [ "doi:10.1002/0470841559", "Red", "ncbi:0300294" ],
            "items" : {
              "type" : "string"
            }
          },
          "externalReferences" : {
            "title" : "ExternalReferences",
            "type" : "array",
            "description" : "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.",
            "example" : [ {
              "referenceId" : "doi:10.155454/12341234",
              "referenceSource" : "DOI"
            }, {
              "referenceId" : "75a50e76",
              "referenceSource" : "Remote Data Collection Upload Tool"
            } ],
            "items" : {
              "type" : "object",
              "properties" : {
                "referenceID" : {
                  "type" : "string",
                  "description" : "**Deprecated in v2.1** Please use `referenceId`. Github issue number #460 \n<br>The external reference ID. Could be a simple string or a URI.",
                  "nullable" : true,
                  "deprecated" : true
                },
                "referenceId" : {
                  "type" : "string",
                  "description" : "The external reference ID. Could be a simple string or a URI."
                },
                "referenceSource" : {
                  "type" : "string",
                  "description" : "An identifier for the source system or database of this reference"
                }
              }
            }
          },
          "imageDbId" : {
            "type" : "string",
            "description" : "The unique identifier of an image",
            "example" : "a55efb9c"
          },
          "imageFileName" : {
            "type" : "string",
            "description" : "The name of the image file. Might be the same as 'imageName', but could be different.",
            "nullable" : true,
            "example" : "image_0000231.jpg"
          },
          "imageFileSize" : {
            "type" : "integer",
            "description" : "The size of the image in Bytes.",
            "nullable" : true,
            "example" : 50000
          },
          "imageHeight" : {
            "type" : "integer",
            "description" : "The height of the image in Pixels.",
            "nullable" : true,
            "example" : 550
          },
          "imageLocation" : {
            "title" : "GeoJSON",
            "type" : "object",
            "properties" : {
              "geometry" : {
                "title" : "GeoJSON Geometry",
                "type" : "object",
                "description" : "A geometry as defined by GeoJSON (RFC 7946). In this context, only Point or Polygon geometry are allowed.",
                "example" : {
                  "coordinates" : [ -76.506042, 42.417373, 123 ],
                  "type" : "Point"
                },
                "discriminator" : {
                  "propertyName" : "type",
                  "mapping" : {
                    "Point" : "#/components/schemas/pointGeometry",
                    "Polygon" : "#/components/schemas/polygonGeometry"
                  }
                },
                "oneOf" : [ {
                  "required" : [ "coordinates", "type" ],
                  "type" : "object",
                  "properties" : {
                    "coordinates" : {
                      "minItems" : 2,
                      "type" : "array",
                      "description" : "A single position",
                      "example" : [ -76.506042, 42.417373, 123 ],
                      "items" : {
                        "type" : "number"
                      }
                    },
                    "type" : {
                      "type" : "string",
                      "description" : "The literal string \"Point\"",
                      "example" : "Point",
                      "default" : "Point"
                    }
                  },
                  "description" : "Copied from RFC 7946 Section 3.1.1\n\nA position is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or\neasting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element."
                }, {
                  "required" : [ "coordinates", "type" ],
                  "type" : "object",
                  "properties" : {
                    "coordinates" : {
                      "type" : "array",
                      "description" : "An array of linear rings",
                      "example" : [ [ [ -77.456654, 42.241133, 494 ], [ -75.414133, 41.508282, 571 ], [ -76.506042, 42.417373, 123 ], [ -77.456654, 42.241133, 346 ] ] ],
                      "items" : {
                        "minItems" : 4,
                        "type" : "array",
                        "description" : "An array of at least four positions where the first equals the last",
                        "example" : [ [ -77.456654, 42.241133, 494 ], [ -75.414133, 41.508282, 571 ], [ -76.506042, 42.417373, 123 ], [ -77.456654, 42.241133, 346 ] ],
                        "items" : {
                          "minItems" : 2,
                          "type" : "array",
                          "description" : "A single position",
                          "example" : [ -76.506042, 42.417373, 123 ],
                          "items" : {
                            "type" : "number"
                          }
                        }
                      }
                    },
                    "type" : {
                      "type" : "string",
                      "description" : "The literal string \"Polygon\"",
                      "example" : "Polygon",
                      "default" : "Polygon"
                    }
                  },
                  "description" : "An array of Linear Rings. Each Linear Ring is an array of Points. \n\nA Point is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or\neasting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element."
                } ]
              },
              "type" : {
                "type" : "string",
                "description" : "The literal string \"Feature\"",
                "example" : "Feature",
                "default" : "Feature"
              }
            },
            "description" : "One geometry as defined by GeoJSON (RFC 7946). All coordinates are decimal values on the WGS84 geographic coordinate reference system.\n\nCopied from RFC 7946 Section 3.1.1\n\nA position is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or\neasting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element.",
            "nullable" : true
          },
          "imageName" : {
            "type" : "string",
            "description" : "The human readable name of an image. Might be the same as 'imageFileName', but could be different.",
            "nullable" : true,
            "example" : "Tomato Image 1"
          },
          "imageTimeStamp" : {
            "type" : "string",
            "description" : "The date and time the image was taken",
            "format" : "date-time",
            "nullable" : true
          },
          "imageURL" : {
            "type" : "string",
            "description" : "The complete, absolute URI path to the image file. Images might be stored on a different host or path than the BrAPI web server.",
            "nullable" : true,
            "example" : "https://wiki.brapi.org/images/tomato"
          },
          "imageWidth" : {
            "type" : "integer",
            "description" : "The width of the image in Pixels.",
            "nullable" : true,
            "example" : 700
          },
          "mimeType" : {
            "pattern" : "image/.*",
            "type" : "string",
            "description" : "The file type of the image. Examples 'image/jpeg', 'image/png', 'image/svg', etc",
            "nullable" : true,
            "example" : "image/jpeg"
          },
          "observationDbIds" : {
            "type" : "array",
            "description" : "A list of observation Ids this image is associated with, if applicable.",
            "nullable" : true,
            "example" : [ "d05dd235", "8875177d", "c08e81b6" ],
            "items" : {
              "type" : "string"
            }
          },
          "observationUnitDbId" : {
            "type" : "string",
            "description" : "The related observation unit identifier, if relevant.",
            "nullable" : true,
            "example" : "b7e690b6"
          }
        },
        "x-brapi-metadata" : {
          "description" : "The metadata for an image file that is connected to some phenotypic observation data.",
          "module" : "BrAPI-Phenotyping",
          "primaryModel" : true,
          "title" : "Image"
        }
      },
      "ImageNewRequest" : {
        "type" : "object",
        "properties" : {
          "additionalInfo" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.",
            "nullable" : true
          },
          "copyright" : {
            "type" : "string",
            "description" : "The copyright information of this image. Example 'Copyright 2018 Bob Robertson'",
            "nullable" : true,
            "example" : "Copyright 2018 Bob Robertson"
          },
          "description" : {
            "type" : "string",
            "description" : "The human readable description of an image.",
            "nullable" : true,
            "example" : "This is a picture of a tomato"
          },
          "descriptiveOntologyTerms" : {
            "type" : "array",
            "description" : "A list of terms to formally describe the image. Each item could be a simple Tag, an Ontology reference Id, or a full ontology URL.",
            "nullable" : true,
            "example" : [ "doi:10.1002/0470841559", "Red", "ncbi:0300294" ],
            "items" : {
              "type" : "string"
            }
          },
          "externalReferences" : {
            "title" : "ExternalReferences",
            "type" : "array",
            "description" : "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.",
            "example" : [ {
              "referenceId" : "doi:10.155454/12341234",
              "referenceSource" : "DOI"
            }, {
              "referenceId" : "75a50e76",
              "referenceSource" : "Remote Data Collection Upload Tool"
            } ],
            "items" : {
              "type" : "object",
              "properties" : {
                "referenceID" : {
                  "type" : "string",
                  "description" : "**Deprecated in v2.1** Please use `referenceId`. Github issue number #460 \n<br>The external reference ID. Could be a simple string or a URI.",
                  "nullable" : true,
                  "deprecated" : true
                },
                "referenceId" : {
                  "type" : "string",
                  "description" : "The external reference ID. Could be a simple string or a URI."
                },
                "referenceSource" : {
                  "type" : "string",
                  "description" : "An identifier for the source system or database of this reference"
                }
              }
            }
          },
          "imageFileName" : {
            "type" : "string",
            "description" : "The name of the image file. Might be the same as 'imageName', but could be different.",
            "nullable" : true,
            "example" : "image_0000231.jpg"
          },
          "imageFileSize" : {
            "type" : "integer",
            "description" : "The size of the image in Bytes.",
            "nullable" : true,
            "example" : 50000
          },
          "imageHeight" : {
            "type" : "integer",
            "description" : "The height of the image in Pixels.",
            "nullable" : true,
            "example" : 550
          },
          "imageLocation" : {
            "title" : "GeoJSON",
            "type" : "object",
            "properties" : {
              "geometry" : {
                "title" : "GeoJSON Geometry",
                "type" : "object",
                "description" : "A geometry as defined by GeoJSON (RFC 7946). In this context, only Point or Polygon geometry are allowed.",
                "example" : {
                  "coordinates" : [ -76.506042, 42.417373, 123 ],
                  "type" : "Point"
                },
                "discriminator" : {
                  "propertyName" : "type",
                  "mapping" : {
                    "Point" : "#/components/schemas/pointGeometry",
                    "Polygon" : "#/components/schemas/polygonGeometry"
                  }
                },
                "oneOf" : [ {
                  "required" : [ "coordinates", "type" ],
                  "type" : "object",
                  "properties" : {
                    "coordinates" : {
                      "minItems" : 2,
                      "type" : "array",
                      "description" : "A single position",
                      "example" : [ -76.506042, 42.417373, 123 ],
                      "items" : {
                        "type" : "number"
                      }
                    },
                    "type" : {
                      "type" : "string",
                      "description" : "The literal string \"Point\"",
                      "example" : "Point",
                      "default" : "Point"
                    }
                  },
                  "description" : "Copied from RFC 7946 Section 3.1.1\n\nA position is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or\neasting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element."
                }, {
                  "required" : [ "coordinates", "type" ],
                  "type" : "object",
                  "properties" : {
                    "coordinates" : {
                      "type" : "array",
                      "description" : "An array of linear rings",
                      "example" : [ [ [ -77.456654, 42.241133, 494 ], [ -75.414133, 41.508282, 571 ], [ -76.506042, 42.417373, 123 ], [ -77.456654, 42.241133, 346 ] ] ],
                      "items" : {
                        "minItems" : 4,
                        "type" : "array",
                        "description" : "An array of at least four positions where the first equals the last",
                        "example" : [ [ -77.456654, 42.241133, 494 ], [ -75.414133, 41.508282, 571 ], [ -76.506042, 42.417373, 123 ], [ -77.456654, 42.241133, 346 ] ],
                        "items" : {
                          "minItems" : 2,
                          "type" : "array",
                          "description" : "A single position",
                          "example" : [ -76.506042, 42.417373, 123 ],
                          "items" : {
                            "type" : "number"
                          }
                        }
                      }
                    },
                    "type" : {
                      "type" : "string",
                      "description" : "The literal string \"Polygon\"",
                      "example" : "Polygon",
                      "default" : "Polygon"
                    }
                  },
                  "description" : "An array of Linear Rings. Each Linear Ring is an array of Points. \n\nA Point is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or\neasting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element."
                } ]
              },
              "type" : {
                "type" : "string",
                "description" : "The literal string \"Feature\"",
                "example" : "Feature",
                "default" : "Feature"
              }
            },
            "description" : "One geometry as defined by GeoJSON (RFC 7946). All coordinates are decimal values on the WGS84 geographic coordinate reference system.\n\nCopied from RFC 7946 Section 3.1.1\n\nA position is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or\neasting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element.",
            "nullable" : true
          },
          "imageName" : {
            "type" : "string",
            "description" : "The human readable name of an image. Might be the same as 'imageFileName', but could be different.",
            "nullable" : true,
            "example" : "Tomato Image 1"
          },
          "imageTimeStamp" : {
            "type" : "string",
            "description" : "The date and time the image was taken",
            "format" : "date-time",
            "nullable" : true
          },
          "imageURL" : {
            "type" : "string",
            "description" : "The complete, absolute URI path to the image file. Images might be stored on a different host or path than the BrAPI web server.",
            "nullable" : true,
            "example" : "https://wiki.brapi.org/images/tomato"
          },
          "imageWidth" : {
            "type" : "integer",
            "description" : "The width of the image in Pixels.",
            "nullable" : true,
            "example" : 700
          },
          "mimeType" : {
            "pattern" : "image/.*",
            "type" : "string",
            "description" : "The file type of the image. Examples 'image/jpeg', 'image/png', 'image/svg', etc",
            "nullable" : true,
            "example" : "image/jpeg"
          },
          "observationDbIds" : {
            "type" : "array",
            "description" : "A list of observation Ids this image is associated with, if applicable.",
            "nullable" : true,
            "example" : [ "d05dd235", "8875177d", "c08e81b6" ],
            "items" : {
              "type" : "string"
            }
          },
          "observationUnitDbId" : {
            "type" : "string",
            "description" : "The related observation unit identifier, if relevant.",
            "nullable" : true,
            "example" : "b7e690b6"
          }
        }
      },
      "ImageSearchRequest" : {
        "type" : "object",
        "properties" : {
          "commonCropNames" : {
            "type" : "array",
            "description" : "The BrAPI Common Crop Name is the simple, generalized, widely accepted name of the organism being researched. It is most often used in multi-crop systems where digital resources need to be divided at a high level. Things like 'Maize', 'Wheat', and 'Rice' are examples of common crop names.\n\nUse this parameter to only return results associated with the given crops. \n\nUse `GET /commoncropnames` to find the list of available crops on a server.",
            "example" : [ "Tomatillo", "Paw Paw" ],
            "items" : {
              "type" : "string"
            }
          },
          "descriptiveOntologyTerms" : {
            "type" : "array",
            "description" : "A list of terms to formally describe the image to search for. Each item could be a simple Tag, an Ontology reference Id, or a full ontology URL.",
            "example" : [ "doi:10.1002/0470841559", "Red", "ncbi:0300294" ],
            "items" : {
              "type" : "string"
            }
          },
          "externalReferenceIDs" : {
            "type" : "array",
            "description" : "**Deprecated in v2.1** Please use `externalReferenceIds`. Github issue number #460 \n<br>List of external reference IDs. Could be a simple strings or a URIs. (use with `externalReferenceSources` parameter)",
            "example" : [ "doi:10.155454/12341234", "14a19841" ],
            "deprecated" : true,
            "items" : {
              "type" : "string"
            }
          },
          "externalReferenceIds" : {
            "type" : "array",
            "description" : "List of external reference IDs. Could be a simple strings or a URIs. (use with `externalReferenceSources` parameter)",
            "example" : [ "doi:10.155454/12341234", "14a19841" ],
            "items" : {
              "type" : "string"
            }
          },
          "externalReferenceSources" : {
            "type" : "array",
            "description" : "List of identifiers for the source system or database of an external reference (use with `externalReferenceIDs` parameter)",
            "example" : [ "DOI", "Field App Name" ],
            "items" : {
              "type" : "string"
            }
          },
          "imageDbIds" : {
            "type" : "array",
            "description" : "A list of image Ids to search for",
            "example" : [ "564b64a6", "0d122d1d" ],
            "items" : {
              "type" : "string"
            }
          },
          "imageFileNames" : {
            "type" : "array",
            "description" : "Image file names to search for.",
            "example" : [ "image_01032019.jpg", "picture_field_1234.jpg" ],
            "items" : {
              "type" : "string"
            }
          },
          "imageFileSizeMax" : {
            "type" : "integer",
            "description" : "A maximum image file size to search for.",
            "example" : 20000000
          },
          "imageFileSizeMin" : {
            "type" : "integer",
            "description" : "A minimum image file size to search for.",
            "example" : 1000
          },
          "imageHeightMax" : {
            "type" : "integer",
            "description" : "A maximum image height to search for.",
            "example" : 1080
          },
          "imageHeightMin" : {
            "type" : "integer",
            "description" : "A minimum image height to search for.",
            "example" : 720
          },
          "imageLocation" : {
            "title" : "GeoJSONSearchArea",
            "type" : "object",
            "properties" : {
              "geometry" : {
                "title" : "GeoJSON Geometry",
                "type" : "object",
                "description" : "A geometry as defined by GeoJSON (RFC 7946). In this context, only Point or Polygon geometry are allowed.",
                "example" : {
                  "coordinates" : [ -76.506042, 42.417373, 123 ],
                  "type" : "Point"
                },
                "discriminator" : {
                  "propertyName" : "type",
                  "mapping" : {
                    "Point" : "#/components/schemas/pointGeometry",
                    "Polygon" : "#/components/schemas/polygonGeometry"
                  }
                },
                "oneOf" : [ {
                  "required" : [ "coordinates", "type" ],
                  "type" : "object",
                  "properties" : {
                    "coordinates" : {
                      "minItems" : 2,
                      "type" : "array",
                      "description" : "A single position",
                      "example" : [ -76.506042, 42.417373, 123 ],
                      "items" : {
                        "type" : "number"
                      }
                    },
                    "type" : {
                      "type" : "string",
                      "description" : "The literal string \"Point\"",
                      "example" : "Point",
                      "default" : "Point"
                    }
                  },
                  "description" : "Copied from RFC 7946 Section 3.1.1\n\nA position is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or\neasting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element."
                }, {
                  "required" : [ "coordinates", "type" ],
                  "type" : "object",
                  "properties" : {
                    "coordinates" : {
                      "type" : "array",
                      "description" : "An array of linear rings",
                      "example" : [ [ [ -77.456654, 42.241133, 494 ], [ -75.414133, 41.508282, 571 ], [ -76.506042, 42.417373, 123 ], [ -77.456654, 42.241133, 346 ] ] ],
                      "items" : {
                        "minItems" : 4,
                        "type" : "array",
                        "description" : "An array of at least four positions where the first equals the last",
                        "example" : [ [ -77.456654, 42.241133, 494 ], [ -75.414133, 41.508282, 571 ], [ -76.506042, 42.417373, 123 ], [ -77.456654, 42.241133, 346 ] ],
                        "items" : {
                          "minItems" : 2,
                          "type" : "array",
                          "description" : "A single position",
                          "example" : [ -76.506042, 42.417373, 123 ],
                          "items" : {
                            "type" : "number"
                          }
                        }
                      }
                    },
                    "type" : {
                      "type" : "string",
                      "description" : "The literal string \"Polygon\"",
                      "example" : "Polygon",
                      "default" : "Polygon"
                    }
                  },
                  "description" : "An array of Linear Rings. Each Linear Ring is an array of Points. \n\nA Point is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or\neasting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element."
                } ]
              },
              "type" : {
                "type" : "string",
                "description" : "The literal string \"Feature\"",
                "example" : "Feature",
                "default" : "Feature"
              }
            },
            "description" : "A GeoJSON Polygon which describes an area to search for other GeoJSON objects. All contained Points and intersecting Polygons should be returned as search results. \n\nAll coordinates are decimal values on the WGS84 geographic coordinate reference system.",
            "example" : {
              "geometry" : {
                "coordinates" : [ [ [ -77.456654, 42.241133 ], [ -75.414133, 41.508282 ], [ -76.506042, 42.417373 ], [ -77.456654, 42.241133 ] ] ],
                "type" : "Polygon"
              },
              "type" : "Feature"
            }
          },
          "imageNames" : {
            "type" : "array",
            "description" : "Human readable names to search for.",
            "example" : [ "Image 43", "Tractor in field" ],
            "items" : {
              "type" : "string"
            }
          },
          "imageTimeStampRangeEnd" : {
            "type" : "string",
            "description" : "The latest timestamp to search for.",
            "format" : "date-time"
          },
          "imageTimeStampRangeStart" : {
            "type" : "string",
            "description" : "The earliest timestamp to search for.",
            "format" : "date-time"
          },
          "imageWidthMax" : {
            "type" : "integer",
            "description" : "A maximum image width to search for.",
            "example" : 1920
          },
          "imageWidthMin" : {
            "type" : "integer",
            "description" : "A minimum image width to search for.",
            "example" : 1280
          },
          "mimeTypes" : {
            "type" : "array",
            "description" : "A set of image file types to search for.",
            "example" : [ "image/jpg", "image/jpeg", "image/gif" ],
            "items" : {
              "pattern" : "image/.*",
              "type" : "string"
            }
          },
          "observationDbIds" : {
            "type" : "array",
            "description" : "A list of observation Ids this image is associated with to search for",
            "example" : [ "47326456", "fc9823ac" ],
            "items" : {
              "type" : "string"
            }
          },
          "observationUnitDbIds" : {
            "type" : "array",
            "description" : "A set of observation unit identifiers to search for.",
            "example" : [ "f5e4b273", "328c9424" ],
            "items" : {
              "type" : "string"
            }
          },
          "page" : {
            "type" : "integer",
            "description" : "Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.",
            "example" : 0
          },
          "pageSize" : {
            "type" : "integer",
            "description" : "The size of the pages to be returned. Default is `1000`.",
            "example" : 1000
          },
          "programDbIds" : {
            "type" : "array",
            "description" : "A BrAPI Program represents the high level organization or group who is responsible for conducting trials and studies. Things like Breeding Programs and Funded Projects are considered BrAPI Programs. \n\nUse this parameter to only return results associated with the given programs. \n\nUse `GET /programs` to find the list of available programs on a server.",
            "example" : [ "8f5de35b", "0e2d4a13" ],
            "items" : {
              "type" : "string"
            }
          },
          "programNames" : {
            "type" : "array",
            "description" : "Use this parameter to only return results associated with the given program names. Program names are not required to be unique.\n\nUse `GET /programs` to find the list of available programs on a server.",
            "example" : [ "Better Breeding Program", "Best Breeding Program" ],
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "LinkageGroup" : {
        "type" : "object",
        "properties" : {
          "additionalInfo" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.",
            "nullable" : true
          },
          "linkageGroupName" : {
            "type" : "string",
            "description" : "The Uniquely Identifiable name of a `LinkageGroup`\n<br> This might be a chromosome identifier or the generic linkage group identifier if the chromosome is not applicable.",
            "nullable" : true,
            "example" : "Chromosome 3"
          },
          "markerCount" : {
            "type" : "integer",
            "description" : "The number of markers associated with a `LinkageGroup`",
            "nullable" : true,
            "example" : 150
          },
          "maxPosition" : {
            "type" : "integer",
            "description" : "The maximum position of a marker within a `LinkageGroup`",
            "nullable" : true,
            "example" : 2500
          }
        },
        "description" : "a `LinkageGroup` is the generic term for a named section of a `GenomeMap`. A `LinkageGroup` can represent a Chromosome, Scaffold, or Linkage Group."
      },
      "ListBaseFields" : {
        "required" : [ "listName", "listType" ],
        "type" : "object",
        "properties" : {
          "additionalInfo" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.",
            "nullable" : true,
            "example" : { }
          },
          "dateCreated" : {
            "type" : "string",
            "description" : "Timestamp when the entity was first created",
            "format" : "date-time",
            "nullable" : true
          },
          "dateModified" : {
            "type" : "string",
            "description" : "Timestamp when the entity was last updated",
            "format" : "date-time",
            "nullable" : true
          },
          "externalReferences" : {
            "title" : "ExternalReferences",
            "type" : "array",
            "description" : "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.",
            "nullable" : true,
            "example" : [ {
              "referenceId" : "doi:10.155454/12341234",
              "referenceSource" : "DOI"
            }, {
              "referenceId" : "75a50e76",
              "referenceSource" : "Remote Data Collection Upload Tool"
            } ],
            "items" : {
              "type" : "object",
              "properties" : {
                "referenceID" : {
                  "type" : "string",
                  "description" : "**Deprecated in v2.1** Please use `referenceId`. Github issue number #460 \n<br>The external reference ID. Could be a simple string or a URI.",
                  "nullable" : true,
                  "deprecated" : true
                },
                "referenceId" : {
                  "type" : "string",
                  "description" : "The external reference ID. Could be a simple string or a URI."
                },
                "referenceSource" : {
                  "type" : "string",
                  "description" : "An identifier for the source system or database of this reference"
                }
              }
            }
          },
          "listDescription" : {
            "type" : "string",
            "description" : "Description of a List",
            "nullable" : true,
            "example" : "This is a list of germplasm I would like to investigate next season"
          },
          "listName" : {
            "type" : "string",
            "description" : "Human readable name of a List",
            "example" : "MyGermplasm_Sept_2020"
          },
          "listOwnerName" : {
            "type" : "string",
            "description" : "Human readable name of a List Owner. (usually a user or person)",
            "nullable" : true,
            "example" : "Bob Robertson"
          },
          "listOwnerPersonDbId" : {
            "type" : "string",
            "description" : "The unique identifier for a List Owner. (usually a user or person)",
            "example" : "58db0628"
          },
          "listSize" : {
            "type" : "integer",
            "description" : "The number of elements in a List",
            "nullable" : true,
            "example" : 53
          },
          "listSource" : {
            "type" : "string",
            "description" : "The description of where a List originated from",
            "nullable" : true,
            "example" : "GeneBank Repository 1.3"
          },
          "listType" : {
            "type" : "string",
            "description" : "A flag to indicate the type of objects that are referenced in a List",
            "example" : "germplasm",
            "enum" : [ "germplasm", "markers", "variants", "programs", "trials", "studies", "observationUnits", "observations", "observationVariables", "samples" ]
          }
        }
      },
      "ListDetails" : {
        "required" : [ "listDbId", "listName", "listType" ],
        "type" : "object",
        "properties" : {
          "additionalInfo" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.",
            "nullable" : true,
            "example" : { }
          },
          "data" : {
            "type" : "array",
            "description" : "The array of DbIds of the BrAPI objects contained in a List",
            "nullable" : true,
            "example" : [ "758a78c0", "2c78f9ee" ],
            "items" : {
              "type" : "string"
            }
          },
          "dateCreated" : {
            "type" : "string",
            "description" : "Timestamp when the entity was first created",
            "format" : "date-time",
            "nullable" : true
          },
          "dateModified" : {
            "type" : "string",
            "description" : "Timestamp when the entity was last updated",
            "format" : "date-time",
            "nullable" : true
          },
          "externalReferences" : {
            "title" : "ExternalReferences",
            "type" : "array",
            "description" : "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.",
            "nullable" : true,
            "example" : [ {
              "referenceId" : "doi:10.155454/12341234",
              "referenceSource" : "DOI"
            }, {
              "referenceId" : "75a50e76",
              "referenceSource" : "Remote Data Collection Upload Tool"
            } ],
            "items" : {
              "type" : "object",
              "properties" : {
                "referenceID" : {
                  "type" : "string",
                  "description" : "**Deprecated in v2.1** Please use `referenceId`. Github issue number #460 \n<br>The external reference ID. Could be a simple string or a URI.",
                  "nullable" : true,
                  "deprecated" : true
                },
                "referenceId" : {
                  "type" : "string",
                  "description" : "The external reference ID. Could be a simple string or a URI."
                },
                "referenceSource" : {
                  "type" : "string",
                  "description" : "An identifier for the source system or database of this reference"
                }
              }
            }
          },
          "listDbId" : {
            "type" : "string",
            "description" : "The unique identifier for a List",
            "example" : "6f621cfa"
          },
          "listDescription" : {
            "type" : "string",
            "description" : "Description of a List",
            "nullable" : true,
            "example" : "This is a list of germplasm I would like to investigate next season"
          },
          "listName" : {
            "type" : "string",
            "description" : "Human readable name of a List",
            "example" : "MyGermplasm_Sept_2020"
          },
          "listOwnerName" : {
            "type" : "string",
            "description" : "Human readable name of a List Owner. (usually a user or person)",
            "nullable" : true,
            "example" : "Bob Robertson"
          },
          "listOwnerPersonDbId" : {
            "type" : "string",
            "description" : "The unique identifier for a List Owner. (usually a user or person)",
            "example" : "58db0628"
          },
          "listSize" : {
            "type" : "integer",
            "description" : "The number of elements in a List",
            "nullable" : true,
            "example" : 53
          },
          "listSource" : {
            "type" : "string",
            "description" : "The description of where a List originated from",
            "nullable" : true,
            "example" : "GeneBank Repository 1.3"
          },
          "listType" : {
            "type" : "string",
            "description" : "A flag to indicate the type of objects that are referenced in a List",
            "example" : "germplasm",
            "enum" : [ "germplasm", "markers", "variants", "programs", "trials", "studies", "observationUnits", "observations", "observationVariables", "samples" ]
          }
        },
        "x-brapi-metadata" : {
          "description" : "A List represents a collection of other BrAPI data objects. Typically these are custom lists generated by a user to keep track of interesting data. For example, a user might build a List of Germplasm that they have manually marked for further study.",
          "module" : "BrAPI-Core",
          "primaryModel" : true,
          "title" : "List"
        }
      },
      "ListNewRequest" : {
        "required" : [ "listName", "listType" ],
        "type" : "object",
        "properties" : {
          "additionalInfo" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.",
            "nullable" : true,
            "example" : { }
          },
          "data" : {
            "type" : "array",
            "description" : "The array of DbIds of the BrAPI objects contained in a List",
            "nullable" : true,
            "example" : [ "758a78c0", "2c78f9ee" ],
            "items" : {
              "type" : "string"
            }
          },
          "dateCreated" : {
            "type" : "string",
            "description" : "Timestamp when the entity was first created",
            "format" : "date-time",
            "nullable" : true
          },
          "dateModified" : {
            "type" : "string",
            "description" : "Timestamp when the entity was last updated",
            "format" : "date-time",
            "nullable" : true
          },
          "externalReferences" : {
            "title" : "ExternalReferences",
            "type" : "array",
            "description" : "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.",
            "nullable" : true,
            "example" : [ {
              "referenceId" : "doi:10.155454/12341234",
              "referenceSource" : "DOI"
            }, {
              "referenceId" : "75a50e76",
              "referenceSource" : "Remote Data Collection Upload Tool"
            } ],
            "items" : {
              "type" : "object",
              "properties" : {
                "referenceID" : {
                  "type" : "string",
                  "description" : "**Deprecated in v2.1** Please use `referenceId`. Github issue number #460 \n<br>The external reference ID. Could be a simple string or a URI.",
                  "nullable" : true,
                  "deprecated" : true
                },
                "referenceId" : {
                  "type" : "string",
                  "description" : "The external reference ID. Could be a simple string or a URI."
                },
                "referenceSource" : {
                  "type" : "string",
                  "description" : "An identifier for the source system or database of this reference"
                }
              }
            }
          },
          "listDescription" : {
            "type" : "string",
            "description" : "Description of a List",
            "nullable" : true,
            "example" : "This is a list of germplasm I would like to investigate next season"
          },
          "listName" : {
            "type" : "string",
            "description" : "Human readable name of a List",
            "example" : "MyGermplasm_Sept_2020"
          },
          "listOwnerName" : {
            "type" : "string",
            "description" : "Human readable name of a List Owner. (usually a user or person)",
            "nullable" : true,
            "example" : "Bob Robertson"
          },
          "listOwnerPersonDbId" : {
            "type" : "string",
            "description" : "The unique identifier for a List Owner. (usually a user or person)",
            "example" : "58db0628"
          },
          "listSize" : {
            "type" : "integer",
            "description" : "The number of elements in a List",
            "nullable" : true,
            "example" : 53
          },
          "listSource" : {
            "type" : "string",
            "description" : "The description of where a List originated from",
            "nullable" : true,
            "example" : "GeneBank Repository 1.3"
          },
          "listType" : {
            "type" : "string",
            "description" : "A flag to indicate the type of objects that are referenced in a List",
            "example" : "germplasm",
            "enum" : [ "germplasm", "markers", "variants", "programs", "trials", "studies", "observationUnits", "observations", "observationVariables", "samples" ]
          }
        }
      },
      "ListSearchRequest" : {
        "type" : "object",
        "properties" : {
          "commonCropNames" : {
            "type" : "array",
            "description" : "The BrAPI Common Crop Name is the simple, generalized, widely accepted name of the organism being researched. It is most often used in multi-crop systems where digital resources need to be divided at a high level. Things like 'Maize', 'Wheat', and 'Rice' are examples of common crop names.\n\nUse this parameter to only return results associated with the given crops. \n\nUse `GET /commoncropnames` to find the list of available crops on a server.",
            "example" : [ "Tomatillo", "Paw Paw" ],
            "items" : {
              "type" : "string"
            }
          },
          "dateCreatedRangeEnd" : {
            "type" : "string",
            "description" : "Define the end for an interval of time and only include Lists that are created within this interval.",
            "format" : "date-time",
            "nullable" : true
          },
          "dateCreatedRangeStart" : {
            "type" : "string",
            "description" : "Define the beginning for an interval of time and only include Lists that are created within this interval.",
            "format" : "date-time",
            "nullable" : true
          },
          "dateModifiedRangeEnd" : {
            "type" : "string",
            "description" : "Define the end for an interval of time and only include Lists that are modified within this interval.",
            "format" : "date-time",
            "nullable" : true
          },
          "dateModifiedRangeStart" : {
            "type" : "string",
            "description" : "Define the beginning for an interval of time and only include Lists that are modified within this interval.",
            "format" : "date-time",
            "nullable" : true
          },
          "externalReferenceIDs" : {
            "type" : "array",
            "description" : "**Deprecated in v2.1** Please use `externalReferenceIds`. Github issue number #460 \n<br>List of external reference IDs. Could be a simple strings or a URIs. (use with `externalReferenceSources` parameter)",
            "example" : [ "doi:10.155454/12341234", "14a19841" ],
            "deprecated" : true,
            "items" : {
              "type" : "string"
            }
          },
          "externalReferenceIds" : {
            "type" : "array",
            "description" : "List of external reference IDs. Could be a simple strings or a URIs. (use with `externalReferenceSources` parameter)",
            "example" : [ "doi:10.155454/12341234", "14a19841" ],
            "items" : {
              "type" : "string"
            }
          },
          "externalReferenceSources" : {
            "type" : "array",
            "description" : "List of identifiers for the source system or database of an external reference (use with `externalReferenceIDs` parameter)",
            "example" : [ "DOI", "Field App Name" ],
            "items" : {
              "type" : "string"
            }
          },
          "listDbIds" : {
            "type" : "array",
            "description" : "An array of primary database identifiers to identify a set of Lists",
            "nullable" : true,
            "example" : [ "55f20cf6", "3193ca3d" ],
            "items" : {
              "type" : "string"
            }
          },
          "listNames" : {
            "type" : "array",
            "description" : "An array of human readable names to identify a set of Lists",
            "nullable" : true,
            "example" : [ "Planing List 1", "Bobs List" ],
            "items" : {
              "type" : "string"
            }
          },
          "listOwnerNames" : {
            "type" : "array",
            "description" : "An array of names for the people or entities who are responsible for a set of Lists",
            "nullable" : true,
            "example" : [ "Bob Robertson", "Rob Robertson" ],
            "items" : {
              "type" : "string"
            }
          },
          "listOwnerPersonDbIds" : {
            "type" : "array",
            "description" : "An array of primary database identifiers to identify people or entities who are responsible for a set of Lists",
            "nullable" : true,
            "example" : [ "bob@bob.com", "rob@bob.com" ],
            "items" : {
              "type" : "string"
            }
          },
          "listSources" : {
            "type" : "array",
            "description" : "An array of terms identifying lists from different sources (ie 'USER', 'SYSTEM', etc)",
            "nullable" : true,
            "example" : [ "USER", "SYSTEM", "EXTERNAL" ],
            "items" : {
              "type" : "string"
            }
          },
          "listType" : {
            "type" : "string",
            "description" : "A flag to indicate the type of objects that are referenced in a List",
            "nullable" : true,
            "example" : "germplasm",
            "enum" : [ "germplasm", "markers", "variants", "programs", "trials", "studies", "observationUnits", "observations", "observationVariables", "samples" ]
          },
          "page" : {
            "type" : "integer",
            "description" : "Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.",
            "example" : 0
          },
          "pageSize" : {
            "type" : "integer",
            "description" : "The size of the pages to be returned. Default is `1000`.",
            "example" : 1000
          },
          "programDbIds" : {
            "type" : "array",
            "description" : "A BrAPI Program represents the high level organization or group who is responsible for conducting trials and studies. Things like Breeding Programs and Funded Projects are considered BrAPI Programs. \n\nUse this parameter to only return results associated with the given programs. \n\nUse `GET /programs` to find the list of available programs on a server.",
            "example" : [ "8f5de35b", "0e2d4a13" ],
            "items" : {
              "type" : "string"
            }
          },
          "programNames" : {
            "type" : "array",
            "description" : "Use this parameter to only return results associated with the given program names. Program names are not required to be unique.\n\nUse `GET /programs` to find the list of available programs on a server.",
            "example" : [ "Better Breeding Program", "Best Breeding Program" ],
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "ListSummary" : {
        "required" : [ "listDbId", "listName", "listType" ],
        "type" : "object",
        "properties" : {
          "additionalInfo" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.",
            "nullable" : true,
            "example" : { }
          },
          "dateCreated" : {
            "type" : "string",
            "description" : "Timestamp when the entity was first created",
            "format" : "date-time",
            "nullable" : true
          },
          "dateModified" : {
            "type" : "string",
            "description" : "Timestamp when the entity was last updated",
            "format" : "date-time",
            "nullable" : true
          },
          "externalReferences" : {
            "title" : "ExternalReferences",
            "type" : "array",
            "description" : "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.",
            "nullable" : true,
            "example" : [ {
              "referenceId" : "doi:10.155454/12341234",
              "referenceSource" : "DOI"
            }, {
              "referenceId" : "75a50e76",
              "referenceSource" : "Remote Data Collection Upload Tool"
            } ],
            "items" : {
              "type" : "object",
              "properties" : {
                "referenceID" : {
                  "type" : "string",
                  "description" : "**Deprecated in v2.1** Please use `referenceId`. Github issue number #460 \n<br>The external reference ID. Could be a simple string or a URI.",
                  "nullable" : true,
                  "deprecated" : true
                },
                "referenceId" : {
                  "type" : "string",
                  "description" : "The external reference ID. Could be a simple string or a URI."
                },
                "referenceSource" : {
                  "type" : "string",
                  "description" : "An identifier for the source system or database of this reference"
                }
              }
            }
          },
          "listDbId" : {
            "type" : "string",
            "description" : "The unique identifier for a List",
            "example" : "6f621cfa"
          },
          "listDescription" : {
            "type" : "string",
            "description" : "Description of a List",
            "nullable" : true,
            "example" : "This is a list of germplasm I would like to investigate next season"
          },
          "listName" : {
            "type" : "string",
            "description" : "Human readable name of a List",
            "example" : "MyGermplasm_Sept_2020"
          },
          "listOwnerName" : {
            "type" : "string",
            "description" : "Human readable name of a List Owner. (usually a user or person)",
            "nullable" : true,
            "example" : "Bob Robertson"
          },
          "listOwnerPersonDbId" : {
            "type" : "string",
            "description" : "The unique identifier for a List Owner. (usually a user or person)",
            "example" : "58db0628"
          },
          "listSize" : {
            "type" : "integer",
            "description" : "The number of elements in a List",
            "nullable" : true,
            "example" : 53
          },
          "listSource" : {
            "type" : "string",
            "description" : "The description of where a List originated from",
            "nullable" : true,
            "example" : "GeneBank Repository 1.3"
          },
          "listType" : {
            "type" : "string",
            "description" : "A flag to indicate the type of objects that are referenced in a List",
            "example" : "germplasm",
            "enum" : [ "germplasm", "markers", "variants", "programs", "trials", "studies", "observationUnits", "observations", "observationVariables", "samples" ]
          }
        }
      },
      "ListTypes" : {
        "type" : "string",
        "description" : "A flag to indicate the type of objects that are referenced in a List",
        "example" : "germplasm",
        "enum" : [ "germplasm", "markers", "variants", "programs", "trials", "studies", "observationUnits", "observations", "observationVariables", "samples" ]
      },
      "ListValue" : {
        "type" : "object",
        "properties" : {
          "values" : {
            "type" : "array",
            "description" : "**Deprecated in v2.1** Please use `genotypeValue` or `genotypeMetadata`. Github issue number #491             \n<br>Repeated field of dynamically typed values.",
            "example" : [ "AA" ],
            "deprecated" : true,
            "items" : {
              "oneOf" : [ {
                "type" : "boolean",
                "description" : "Represents a boolean value.",
                "format" : "boolean"
              }, {
                "type" : "number",
                "description" : "Represents a double value.",
                "format" : "double"
              }, {
                "type" : "string",
                "description" : "Represents a string value."
              } ]
            }
          }
        },
        "description" : "**Deprecated in v2.1** Please use `genotypeValue` or `genotypeMetadata`. Github issue number #491             \n<br>`ListValue` is a wrapper around a repeated field of values.\n<br>The JSON representation for `ListValue` is JSON array.",
        "deprecated" : true
      },
      "Location" : {
        "required" : [ "locationDbId", "locationName" ],
        "type" : "object",
        "properties" : {
          "abbreviation" : {
            "type" : "string",
            "description" : "A shortened version of the human readable name for a Location",
            "nullable" : true,
            "example" : "L1"
          },
          "additionalInfo" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.",
            "nullable" : true,
            "example" : { }
          },
          "coordinateDescription" : {
            "type" : "string",
            "description" : "Describes the precision and landmarks of the coordinate values used for a Location. (ex. the site, the nearest town, a 10 kilometers radius circle, +/- 20 meters, etc)",
            "nullable" : true,
            "example" : "North East corner of greenhouse"
          },
          "coordinateUncertainty" : {
            "type" : "string",
            "description" : "Uncertainty associated with the coordinates in meters. Leave the value empty if the uncertainty is unknown.",
            "nullable" : true,
            "example" : "20"
          },
          "coordinates" : {
            "title" : "GeoJSON",
            "type" : "object",
            "properties" : {
              "geometry" : {
                "title" : "GeoJSON Geometry",
                "type" : "object",
                "description" : "A geometry as defined by GeoJSON (RFC 7946). In this context, only Point or Polygon geometry are allowed.",
                "example" : {
                  "coordinates" : [ -76.506042, 42.417373, 123 ],
                  "type" : "Point"
                },
                "discriminator" : {
                  "propertyName" : "type",
                  "mapping" : {
                    "Point" : "#/components/schemas/pointGeometry",
                    "Polygon" : "#/components/schemas/polygonGeometry"
                  }
                },
                "oneOf" : [ {
                  "required" : [ "coordinates", "type" ],
                  "type" : "object",
                  "properties" : {
                    "coordinates" : {
                      "minItems" : 2,
                      "type" : "array",
                      "description" : "A single position",
                      "example" : [ -76.506042, 42.417373, 123 ],
                      "items" : {
                        "type" : "number"
                      }
                    },
                    "type" : {
                      "type" : "string",
                      "description" : "The literal string \"Point\"",
                      "example" : "Point",
                      "default" : "Point"
                    }
                  },
                  "description" : "Copied from RFC 7946 Section 3.1.1\n\nA position is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or\neasting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element."
                }, {
                  "required" : [ "coordinates", "type" ],
                  "type" : "object",
                  "properties" : {
                    "coordinates" : {
                      "type" : "array",
                      "description" : "An array of linear rings",
                      "example" : [ [ [ -77.456654, 42.241133, 494 ], [ -75.414133, 41.508282, 571 ], [ -76.506042, 42.417373, 123 ], [ -77.456654, 42.241133, 346 ] ] ],
                      "items" : {
                        "minItems" : 4,
                        "type" : "array",
                        "description" : "An array of at least four positions where the first equals the last",
                        "example" : [ [ -77.456654, 42.241133, 494 ], [ -75.414133, 41.508282, 571 ], [ -76.506042, 42.417373, 123 ], [ -77.456654, 42.241133, 346 ] ],
                        "items" : {
                          "minItems" : 2,
                          "type" : "array",
                          "description" : "A single position",
                          "example" : [ -76.506042, 42.417373, 123 ],
                          "items" : {
                            "type" : "number"
                          }
                        }
                      }
                    },
                    "type" : {
                      "type" : "string",
                      "description" : "The literal string \"Polygon\"",
                      "example" : "Polygon",
                      "default" : "Polygon"
                    }
                  },
                  "description" : "An array of Linear Rings. Each Linear Ring is an array of Points. \n\nA Point is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or\neasting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element."
                } ]
              },
              "type" : {
                "type" : "string",
                "description" : "The literal string \"Feature\"",
                "example" : "Feature",
                "default" : "Feature"
              }
            },
            "description" : "One geometry as defined by GeoJSON (RFC 7946). All coordinates are decimal values on the WGS84 geographic coordinate reference system.\n\nCopied from RFC 7946 Section 3.1.1\n\nA position is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or\neasting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element.",
            "nullable" : true
          },
          "countryCode" : {
            "type" : "string",
            "description" : "[ISO_3166-1_alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) spec\n<br/> MIAPPE V1.1 (DM-17) Geographic location (country) - The country where the experiment took place, either as a full name or preferably as a 2-letter code.'",
            "nullable" : true,
            "example" : "PER"
          },
          "countryName" : {
            "type" : "string",
            "description" : "The full name of the country where a Location is located\n<br/> MIAPPE V1.1 (DM-17) Geographic location (country) - The country where the experiment took place, either as a full name or preferably as a 2-letter code.",
            "nullable" : true,
            "example" : "Peru"
          },
          "documentationURL" : {
            "type" : "string",
            "description" : "A URL to the human readable documentation of an object",
            "format" : "uri",
            "nullable" : true,
            "example" : "https://brapi.org"
          },
          "environmentType" : {
            "type" : "string",
            "description" : "Describes the general type of environment of a Location. (ex. forest, field, nursery, etc)",
            "nullable" : true,
            "example" : "Nursery"
          },
          "exposure" : {
            "type" : "string",
            "description" : "Describes the level of protection/exposure for things like sun light and wind at a particular Location",
            "nullable" : true,
            "example" : "Structure, no exposure"
          },
          "externalReferences" : {
            "title" : "ExternalReferences",
            "type" : "array",
            "description" : "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.",
            "nullable" : true,
            "example" : [ {
              "referenceId" : "doi:10.155454/12341234",
              "referenceSource" : "DOI"
            }, {
              "referenceId" : "75a50e76",
              "referenceSource" : "Remote Data Collection Upload Tool"
            } ],
            "items" : {
              "type" : "object",
              "properties" : {
                "referenceID" : {
                  "type" : "string",
                  "description" : "**Deprecated in v2.1** Please use `referenceId`. Github issue number #460 \n<br>The external reference ID. Could be a simple string or a URI.",
                  "nullable" : true,
                  "deprecated" : true
                },
                "referenceId" : {
                  "type" : "string",
                  "description" : "The external reference ID. Could be a simple string or a URI."
                },
                "referenceSource" : {
                  "type" : "string",
                  "description" : "An identifier for the source system or database of this reference"
                }
              }
            }
          },
          "instituteAddress" : {
            "type" : "string",
            "description" : "The street address of the institute at a particular Location\n<br/> MIAPPE V1.1 (DM-16) Contact institution - Name and address of the institution responsible for the study.",
            "nullable" : true,
            "example" : "71 Pilgrim Avenue Chevy Chase MD 20815"
          },
          "instituteName" : {
            "type" : "string",
            "description" : "The full name of the institute at a particular Location\n<br/> MIAPPE V1.1 (DM-16) Contact institution - Name and address of the institution responsible for the study.",
            "nullable" : true,
            "example" : "Plant Science Institute"
          },
          "locationDbId" : {
            "type" : "string",
            "description" : "The unique identifier for a Location",
            "example" : "3cfdd67d"
          },
          "locationName" : {
            "type" : "string",
            "description" : "A human readable name for a Location\n<br/> MIAPPE V1.1 (DM-18) Experimental site name - The name of the natural site, experimental field, greenhouse, phenotyping facility, etc. where the experiment took place.",
            "example" : "Location 1"
          },
          "locationType" : {
            "type" : "string",
            "description" : "A short description of a type of Location (ex. Field Station, Breeding Location, Storage Location, etc)",
            "nullable" : true,
            "example" : "Field Station"
          },
          "parentLocationDbId" : {
            "type" : "string",
            "description" : "The unique identifier for a Location\n<br/> The Parent Location defines the encompassing Location that a smaller Location belongs to. \nFor example, an Institution might have multiple Field Stations inside it and each Field Station might have multiple Fields.",
            "nullable" : true,
            "example" : "0a93f7d8"
          },
          "parentLocationName" : {
            "type" : "string",
            "description" : "A human readable name for a location\n<br/> The Parent Location defines the encompassing Location that a smaller Location belongs to.  \nFor example, an Institution might have multiple Field Stations inside it and each Field Station might have multiple Fields.",
            "nullable" : true,
            "example" : "Field Station Alpha"
          },
          "siteStatus" : {
            "type" : "string",
            "description" : "Description of the accessibility of the location (ex. Public, Private)",
            "nullable" : true,
            "example" : "Private"
          },
          "slope" : {
            "type" : "string",
            "description" : "Describes the approximate slope (height/distance) of a Location.",
            "nullable" : true,
            "example" : "0"
          },
          "topography" : {
            "type" : "string",
            "description" : "Describes the topography of the land at a Location. (ex. Plateau, Cirque, Hill, Valley, etc)",
            "nullable" : true,
            "example" : "Valley"
          }
        },
        "x-brapi-metadata" : {
          "description" : "A geographic Location on earth. This is usually used to describe the general area where an experiment took place. For example, a natural site, an experimental field, a greenhouse, a phenotyping facility, etc.",
          "module" : "BrAPI-Core",
          "primaryModel" : true,
          "title" : "Location"
        }
      },
      "LocationNewRequest" : {
        "required" : [ "locationName" ],
        "type" : "object",
        "properties" : {
          "abbreviation" : {
            "type" : "string",
            "description" : "A shortened version of the human readable name for a Location",
            "nullable" : true,
            "example" : "L1"
          },
          "additionalInfo" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.",
            "nullable" : true,
            "example" : { }
          },
          "coordinateDescription" : {
            "type" : "string",
            "description" : "Describes the precision and landmarks of the coordinate values used for a Location. (ex. the site, the nearest town, a 10 kilometers radius circle, +/- 20 meters, etc)",
            "nullable" : true,
            "example" : "North East corner of greenhouse"
          },
          "coordinateUncertainty" : {
            "type" : "string",
            "description" : "Uncertainty associated with the coordinates in meters. Leave the value empty if the uncertainty is unknown.",
            "nullable" : true,
            "example" : "20"
          },
          "coordinates" : {
            "title" : "GeoJSON",
            "type" : "object",
            "properties" : {
              "geometry" : {
                "title" : "GeoJSON Geometry",
                "type" : "object",
                "description" : "A geometry as defined by GeoJSON (RFC 7946). In this context, only Point or Polygon geometry are allowed.",
                "example" : {
                  "coordinates" : [ -76.506042, 42.417373, 123 ],
                  "type" : "Point"
                },
                "discriminator" : {
                  "propertyName" : "type",
                  "mapping" : {
                    "Point" : "#/components/schemas/pointGeometry",
                    "Polygon" : "#/components/schemas/polygonGeometry"
                  }
                },
                "oneOf" : [ {
                  "required" : [ "coordinates", "type" ],
                  "type" : "object",
                  "properties" : {
                    "coordinates" : {
                      "minItems" : 2,
                      "type" : "array",
                      "description" : "A single position",
                      "example" : [ -76.506042, 42.417373, 123 ],
                      "items" : {
                        "type" : "number"
                      }
                    },
                    "type" : {
                      "type" : "string",
                      "description" : "The literal string \"Point\"",
                      "example" : "Point",
                      "default" : "Point"
                    }
                  },
                  "description" : "Copied from RFC 7946 Section 3.1.1\n\nA position is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or\neasting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element."
                }, {
                  "required" : [ "coordinates", "type" ],
                  "type" : "object",
                  "properties" : {
                    "coordinates" : {
                      "type" : "array",
                      "description" : "An array of linear rings",
                      "example" : [ [ [ -77.456654, 42.241133, 494 ], [ -75.414133, 41.508282, 571 ], [ -76.506042, 42.417373, 123 ], [ -77.456654, 42.241133, 346 ] ] ],
                      "items" : {
                        "minItems" : 4,
                        "type" : "array",
                        "description" : "An array of at least four positions where the first equals the last",
                        "example" : [ [ -77.456654, 42.241133, 494 ], [ -75.414133, 41.508282, 571 ], [ -76.506042, 42.417373, 123 ], [ -77.456654, 42.241133, 346 ] ],
                        "items" : {
                          "minItems" : 2,
                          "type" : "array",
                          "description" : "A single position",
                          "example" : [ -76.506042, 42.417373, 123 ],
                          "items" : {
                            "type" : "number"
                          }
                        }
                      }
                    },
                    "type" : {
                      "type" : "string",
                      "description" : "The literal string \"Polygon\"",
                      "example" : "Polygon",
                      "default" : "Polygon"
                    }
                  },
                  "description" : "An array of Linear Rings. Each Linear Ring is an array of Points. \n\nA Point is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or\neasting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element."
                } ]
              },
              "type" : {
                "type" : "string",
                "description" : "The literal string \"Feature\"",
                "example" : "Feature",
                "default" : "Feature"
              }
            },
            "description" : "One geometry as defined by GeoJSON (RFC 7946). All coordinates are decimal values on the WGS84 geographic coordinate reference system.\n\nCopied from RFC 7946 Section 3.1.1\n\nA position is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or\neasting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element.",
            "nullable" : true
          },
          "countryCode" : {
            "type" : "string",
            "description" : "[ISO_3166-1_alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) spec\n<br/> MIAPPE V1.1 (DM-17) Geographic location (country) - The country where the experiment took place, either as a full name or preferably as a 2-letter code.'",
            "nullable" : true,
            "example" : "PER"
          },
          "countryName" : {
            "type" : "string",
            "description" : "The full name of the country where a Location is located\n<br/> MIAPPE V1.1 (DM-17) Geographic location (country) - The country where the experiment took place, either as a full name or preferably as a 2-letter code.",
            "nullable" : true,
            "example" : "Peru"
          },
          "documentationURL" : {
            "type" : "string",
            "description" : "A URL to the human readable documentation of an object",
            "format" : "uri",
            "nullable" : true,
            "example" : "https://brapi.org"
          },
          "environmentType" : {
            "type" : "string",
            "description" : "Describes the general type of environment of a Location. (ex. forest, field, nursery, etc)",
            "nullable" : true,
            "example" : "Nursery"
          },
          "exposure" : {
            "type" : "string",
            "description" : "Describes the level of protection/exposure for things like sun light and wind at a particular Location",
            "nullable" : true,
            "example" : "Structure, no exposure"
          },
          "externalReferences" : {
            "title" : "ExternalReferences",
            "type" : "array",
            "description" : "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.",
            "nullable" : true,
            "example" : [ {
              "referenceId" : "doi:10.155454/12341234",
              "referenceSource" : "DOI"
            }, {
              "referenceId" : "75a50e76",
              "referenceSource" : "Remote Data Collection Upload Tool"
            } ],
            "items" : {
              "type" : "object",
              "properties" : {
                "referenceID" : {
                  "type" : "string",
                  "description" : "**Deprecated in v2.1** Please use `referenceId`. Github issue number #460 \n<br>The external reference ID. Could be a simple string or a URI.",
                  "nullable" : true,
                  "deprecated" : true
                },
                "referenceId" : {
                  "type" : "string",
                  "description" : "The external reference ID. Could be a simple string or a URI."
                },
                "referenceSource" : {
                  "type" : "string",
                  "description" : "An identifier for the source system or database of this reference"
                }
              }
            }
          },
          "instituteAddress" : {
            "type" : "string",
            "description" : "The street address of the institute at a particular Location\n<br/> MIAPPE V1.1 (DM-16) Contact institution - Name and address of the institution responsible for the study.",
            "nullable" : true,
            "example" : "71 Pilgrim Avenue Chevy Chase MD 20815"
          },
          "instituteName" : {
            "type" : "string",
            "description" : "The full name of the institute at a particular Location\n<br/> MIAPPE V1.1 (DM-16) Contact institution - Name and address of the institution responsible for the study.",
            "nullable" : true,
            "example" : "Plant Science Institute"
          },
          "locationName" : {
            "type" : "string",
            "description" : "A human readable name for a Location\n<br/> MIAPPE V1.1 (DM-18) Experimental site name - The name of the natural site, experimental field, greenhouse, phenotyping facility, etc. where the experiment took place.",
            "example" : "Location 1"
          },
          "locationType" : {
            "type" : "string",
            "description" : "A short description of a type of Location (ex. Field Station, Breeding Location, Storage Location, etc)",
            "nullable" : true,
            "example" : "Field Station"
          },
          "parentLocationDbId" : {
            "type" : "string",
            "description" : "The unique identifier for a Location\n<br/> The Parent Location defines the encompassing Location that a smaller Location belongs to. \nFor example, an Institution might have multiple Field Stations inside it and each Field Station might have multiple Fields.",
            "nullable" : true,
            "example" : "0a93f7d8"
          },
          "parentLocationName" : {
            "type" : "string",
            "description" : "A human readable name for a location\n<br/> The Parent Location defines the encompassing Location that a smaller Location belongs to.  \nFor example, an Institution might have multiple Field Stations inside it and each Field Station might have multiple Fields.",
            "nullable" : true,
            "example" : "Field Station Alpha"
          },
          "siteStatus" : {
            "type" : "string",
            "description" : "Description of the accessibility of the location (ex. Public, Private)",
            "nullable" : true,
            "example" : "Private"
          },
          "slope" : {
            "type" : "string",
            "description" : "Describes the approximate slope (height/distance) of a Location.",
            "nullable" : true,
            "example" : "0"
          },
          "topography" : {
            "type" : "string",
            "description" : "Describes the topography of the land at a Location. (ex. Plateau, Cirque, Hill, Valley, etc)",
            "nullable" : true,
            "example" : "Valley"
          }
        }
      },
      "LocationSearchRequest" : {
        "type" : "object",
        "properties" : {
          "abbreviations" : {
            "type" : "array",
            "description" : "A list of shortened human readable names for a set of Locations",
            "nullable" : true,
            "example" : [ "L1", "LHC" ],
            "items" : {
              "type" : "string"
            }
          },
          "altitudeMax" : {
            "type" : "number",
            "description" : "The maximum altitude to search for",
            "nullable" : true,
            "example" : 200
          },
          "altitudeMin" : {
            "type" : "number",
            "description" : "The minimum altitude to search for",
            "nullable" : true,
            "example" : 20
          },
          "commonCropNames" : {
            "type" : "array",
            "description" : "The BrAPI Common Crop Name is the simple, generalized, widely accepted name of the organism being researched. It is most often used in multi-crop systems where digital resources need to be divided at a high level. Things like 'Maize', 'Wheat', and 'Rice' are examples of common crop names.\n\nUse this parameter to only return results associated with the given crops. \n\nUse `GET /commoncropnames` to find the list of available crops on a server.",
            "example" : [ "Tomatillo", "Paw Paw" ],
            "items" : {
              "type" : "string"
            }
          },
          "coordinates" : {
            "title" : "GeoJSONSearchArea",
            "type" : "object",
            "properties" : {
              "geometry" : {
                "title" : "GeoJSON Geometry",
                "type" : "object",
                "description" : "A geometry as defined by GeoJSON (RFC 7946). In this context, only Point or Polygon geometry are allowed.",
                "example" : {
                  "coordinates" : [ -76.506042, 42.417373, 123 ],
                  "type" : "Point"
                },
                "discriminator" : {
                  "propertyName" : "type",
                  "mapping" : {
                    "Point" : "#/components/schemas/pointGeometry",
                    "Polygon" : "#/components/schemas/polygonGeometry"
                  }
                },
                "oneOf" : [ {
                  "required" : [ "coordinates", "type" ],
                  "type" : "object",
                  "properties" : {
                    "coordinates" : {
                      "minItems" : 2,
                      "type" : "array",
                      "description" : "A single position",
                      "example" : [ -76.506042, 42.417373, 123 ],
                      "items" : {
                        "type" : "number"
                      }
                    },
                    "type" : {
                      "type" : "string",
                      "description" : "The literal string \"Point\"",
                      "example" : "Point",
                      "default" : "Point"
                    }
                  },
                  "description" : "Copied from RFC 7946 Section 3.1.1\n\nA position is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or\neasting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element."
                }, {
                  "required" : [ "coordinates", "type" ],
                  "type" : "object",
                  "properties" : {
                    "coordinates" : {
                      "type" : "array",
                      "description" : "An array of linear rings",
                      "example" : [ [ [ -77.456654, 42.241133, 494 ], [ -75.414133, 41.508282, 571 ], [ -76.506042, 42.417373, 123 ], [ -77.456654, 42.241133, 346 ] ] ],
                      "items" : {
                        "minItems" : 4,
                        "type" : "array",
                        "description" : "An array of at least four positions where the first equals the last",
                        "example" : [ [ -77.456654, 42.241133, 494 ], [ -75.414133, 41.508282, 571 ], [ -76.506042, 42.417373, 123 ], [ -77.456654, 42.241133, 346 ] ],
                        "items" : {
                          "minItems" : 2,
                          "type" : "array",
                          "description" : "A single position",
                          "example" : [ -76.506042, 42.417373, 123 ],
                          "items" : {
                            "type" : "number"
                          }
                        }
                      }
                    },
                    "type" : {
                      "type" : "string",
                      "description" : "The literal string \"Polygon\"",
                      "example" : "Polygon",
                      "default" : "Polygon"
                    }
                  },
                  "description" : "An array of Linear Rings. Each Linear Ring is an array of Points. \n\nA Point is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or\neasting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element."
                } ]
              },
              "type" : {
                "type" : "string",
                "description" : "The literal string \"Feature\"",
                "example" : "Feature",
                "default" : "Feature"
              }
            },
            "description" : "A GeoJSON Polygon which describes an area to search for other GeoJSON objects. All contained Points and intersecting Polygons should be returned as search results. \n\nAll coordinates are decimal values on the WGS84 geographic coordinate reference system.",
            "nullable" : true,
            "example" : {
              "geometry" : {
                "coordinates" : [ [ [ -77.456654, 42.241133 ], [ -75.414133, 41.508282 ], [ -76.506042, 42.417373 ], [ -77.456654, 42.241133 ] ] ],
                "type" : "Polygon"
              },
              "type" : "Feature"
            }
          },
          "countryCodes" : {
            "type" : "array",
            "description" : "[ISO_3166-1_alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) spec",
            "nullable" : true,
            "example" : [ "USA", "PER" ],
            "items" : {
              "type" : "string"
            }
          },
          "countryNames" : {
            "type" : "array",
            "description" : "The full name of the country to search for",
            "nullable" : true,
            "example" : [ "United States of America", "Peru" ],
            "items" : {
              "type" : "string"
            }
          },
          "externalReferenceIDs" : {
            "type" : "array",
            "description" : "**Deprecated in v2.1** Please use `externalReferenceIds`. Github issue number #460 \n<br>List of external reference IDs. Could be a simple strings or a URIs. (use with `externalReferenceSources` parameter)",
            "example" : [ "doi:10.155454/12341234", "14a19841" ],
            "deprecated" : true,
            "items" : {
              "type" : "string"
            }
          },
          "externalReferenceIds" : {
            "type" : "array",
            "description" : "List of external reference IDs. Could be a simple strings or a URIs. (use with `externalReferenceSources` parameter)",
            "example" : [ "doi:10.155454/12341234", "14a19841" ],
            "items" : {
              "type" : "string"
            }
          },
          "externalReferenceSources" : {
            "type" : "array",
            "description" : "List of identifiers for the source system or database of an external reference (use with `externalReferenceIDs` parameter)",
            "example" : [ "DOI", "Field App Name" ],
            "items" : {
              "type" : "string"
            }
          },
          "instituteAddresses" : {
            "type" : "array",
            "description" : "The street address of the institute to search for",
            "nullable" : true,
            "example" : [ "123 Main Street", "456 Side Street" ],
            "items" : {
              "type" : "string"
            }
          },
          "instituteNames" : {
            "type" : "array",
            "description" : "The name of the institute to search for",
            "nullable" : true,
            "example" : [ "The Institute", "The Other Institute" ],
            "items" : {
              "type" : "string"
            }
          },
          "locationDbIds" : {
            "type" : "array",
            "description" : "The location ids to search for",
            "example" : [ "b28911cf", "5071d1e4" ],
            "items" : {
              "type" : "string"
            }
          },
          "locationNames" : {
            "type" : "array",
            "description" : "A human readable names to search for",
            "example" : [ "Location Alpha", "The Large Hadron Collider" ],
            "items" : {
              "type" : "string"
            }
          },
          "locationTypes" : {
            "type" : "array",
            "description" : "The type of location this represents (ex. Breeding Location, Storage Location, etc)",
            "nullable" : true,
            "example" : [ "Nursery", "Storage Location" ],
            "items" : {
              "type" : "string"
            }
          },
          "page" : {
            "type" : "integer",
            "description" : "Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.",
            "example" : 0
          },
          "pageSize" : {
            "type" : "integer",
            "description" : "The size of the pages to be returned. Default is `1000`.",
            "example" : 1000
          },
          "parentLocationDbIds" : {
            "type" : "array",
            "description" : "The unique identifier for a Location\n<br/> The Parent Location defines the encompassing location that this location belongs to. \nFor example, an Institution might have multiple Field Stations inside it and each Field Station might have multiple Fields.",
            "nullable" : true,
            "example" : [ "b28911cf", "5071d1e4" ],
            "items" : {
              "type" : "string"
            }
          },
          "parentLocationNames" : {
            "type" : "array",
            "description" : "A human readable name for a location\n<br/> The Parent Location defines the encompassing location that this location belongs to. \nFor example, an Institution might have multiple Field Stations inside it and each Field Station might have multiple Fields.",
            "nullable" : true,
            "example" : [ "Location Alpha", "The Large Hadron Collider" ],
            "items" : {
              "type" : "string"
            }
          },
          "programDbIds" : {
            "type" : "array",
            "description" : "A BrAPI Program represents the high level organization or group who is responsible for conducting trials and studies. Things like Breeding Programs and Funded Projects are considered BrAPI Programs. \n\nUse this parameter to only return results associated with the given programs. \n\nUse `GET /programs` to find the list of available programs on a server.",
            "example" : [ "8f5de35b", "0e2d4a13" ],
            "items" : {
              "type" : "string"
            }
          },
          "programNames" : {
            "type" : "array",
            "description" : "Use this parameter to only return results associated with the given program names. Program names are not required to be unique.\n\nUse `GET /programs` to find the list of available programs on a server.",
            "example" : [ "Better Breeding Program", "Best Breeding Program" ],
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "MarkerPosition" : {
        "type" : "object",
        "properties" : {
          "additionalInfo" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.",
            "nullable" : true
          },
          "linkageGroupName" : {
            "type" : "string",
            "description" : "The Uniquely Identifiable name of a `LinkageGroup`\n<br> This might be a chromosome identifier or the generic linkage group identifier if the chromosome is not applicable.",
            "nullable" : true,
            "example" : "Chromosome 3"
          },
          "mapDbId" : {
            "type" : "string",
            "description" : "The ID which uniquely identifies a `GenomeMap`",
            "nullable" : true,
            "example" : "3d52bdf3"
          },
          "mapName" : {
            "type" : "string",
            "description" : "A human readable name for a `GenomeMap`",
            "nullable" : true,
            "example" : "Genome Map 1"
          },
          "position" : {
            "type" : "integer",
            "description" : "The position of a marker or variant within a `LinkageGroup`",
            "nullable" : true,
            "example" : 2390
          },
          "variantDbId" : {
            "type" : "string",
            "description" : "The ID which uniquely identifies a `Variant` within the given database server\n<br> A `Variant` can also represent a Marker ",
            "nullable" : true,
            "example" : "a1eb250a"
          },
          "variantName" : {
            "type" : "string",
            "description" : "The human readable name for a `Variant`\n<br> A `Variant` can also represent a Marker ",
            "nullable" : true,
            "example" : "Marker_2390"
          }
        },
        "x-brapi-metadata" : {
          "description" : "A MarkerPosition describes a particular genetic marker at a specific position on a GenomeMap. A collection of MarkerPositions make up the data to represent a full GenomeMap.",
          "module" : "BrAPI-Genotyping",
          "primaryModel" : true,
          "title" : "MarkerPosition"
        }
      },
      "MarkerPositionSearchRequest" : {
        "type" : "object",
        "properties" : {
          "linkageGroupNames" : {
            "type" : "array",
            "description" : "A list of Uniquely Identifiable linkage group names",
            "nullable" : true,
            "example" : [ "Chromosome 2", "Chromosome 3" ],
            "items" : {
              "type" : "string"
            }
          },
          "mapDbIds" : {
            "type" : "array",
            "description" : "A list of IDs which uniquely identify `GenomeMaps` within the given database server",
            "nullable" : true,
            "example" : [ "7e6fa8aa", "bedc418c" ],
            "items" : {
              "type" : "string"
            }
          },
          "maxPosition" : {
            "type" : "integer",
            "description" : "The maximum position of markers in a given map",
            "nullable" : true,
            "example" : 4000
          },
          "minPosition" : {
            "type" : "integer",
            "description" : "The minimum position of markers in a given map",
            "nullable" : true,
            "example" : 250
          },
          "page" : {
            "type" : "integer",
            "description" : "Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.",
            "example" : 0
          },
          "pageSize" : {
            "type" : "integer",
            "description" : "The size of the pages to be returned. Default is `1000`.",
            "example" : 1000
          },
          "variantDbIds" : {
            "type" : "array",
            "description" : "A list of IDs which uniquely identify `Variants` within the given database server",
            "nullable" : true,
            "example" : [ "a0caa928", "f8894a26" ],
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "Measurement" : {
        "type" : "object",
        "properties" : {
          "units" : {
            "type" : "string",
            "description" : "Units (example: \"ng/ul\")",
            "example" : "ng/ul"
          },
          "value" : {
            "type" : "number",
            "description" : "Value (example: \"2.3\")",
            "example" : 2.3
          }
        },
        "description" : "A value with units"
      },
      "Method" : {
        "required" : [ "methodDbId", "methodName" ],
        "type" : "object",
        "properties" : {
          "additionalInfo" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.",
            "nullable" : true
          },
          "bibliographicalReference" : {
            "type" : "string",
            "description" : "Bibliographical reference describing the method.\n<br/>MIAPPE V1.1 (DM-91) Reference associated to the method - URI/DOI of reference describing the method.",
            "nullable" : true,
            "example" : "Smith, 1893, Really Cool Paper, Popular Journal"
          },
          "description" : {
            "type" : "string",
            "description" : "Method description\n<br/>MIAPPE V1.1 (DM-90) Method description - Textual description of the method, which may extend a method defined in an external reference with specific parameters, e.g. growth stage, inoculation precise organ (leaf number)",
            "nullable" : true,
            "example" : "A measuring tape was used"
          },
          "externalReferences" : {
            "title" : "ExternalReferences",
            "type" : "array",
            "description" : "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.",
            "nullable" : true,
            "example" : [ {
              "referenceId" : "doi:10.155454/12341234",
              "referenceSource" : "DOI"
            }, {
              "referenceId" : "75a50e76",
              "referenceSource" : "Remote Data Collection Upload Tool"
            } ],
            "items" : {
              "type" : "object",
              "properties" : {
                "referenceID" : {
                  "type" : "string",
                  "description" : "**Deprecated in v2.1** Please use `referenceId`. Github issue number #460 \n<br>The external reference ID. Could be a simple string or a URI.",
                  "nullable" : true,
                  "deprecated" : true
                },
                "referenceId" : {
                  "type" : "string",
                  "description" : "The external reference ID. Could be a simple string or a URI."
                },
                "referenceSource" : {
                  "type" : "string",
                  "description" : "An identifier for the source system or database of this reference"
                }
              }
            }
          },
          "formula" : {
            "type" : "string",
            "description" : "For computational methods i.e., when the method consists in assessing the trait by computing measurements, write the generic formula used for the calculation",
            "nullable" : true,
            "example" : "a^2 + b^2 = c^2"
          },
          "methodClass" : {
            "type" : "string",
            "description" : "Method class (examples: \"Measurement\", \"Counting\", \"Estimation\", \"Computation\", etc.)",
            "nullable" : true,
            "example" : "Measurement"
          },
          "methodDbId" : {
            "type" : "string",
            "description" : "Method unique identifier",
            "example" : "0adb2764"
          },
          "methodName" : {
            "type" : "string",
            "description" : "Human readable name for the method\n<br/>MIAPPE V1.1 (DM-88) Method  Name of the method of observation",
            "example" : "Measuring Tape"
          },
          "methodPUI" : {
            "type" : "string",
            "description" : "The Permanent Unique Identifier of a Method, usually in the form of a URI",
            "nullable" : true,
            "example" : "http://my-traits.com/trait/CO_123:0000212"
          },
          "ontologyReference" : {
            "required" : [ "ontologyDbId", "ontologyName" ],
            "type" : "object",
            "properties" : {
              "documentationLinks" : {
                "type" : "array",
                "description" : "links to various ontology documentation",
                "nullable" : true,
                "items" : {
                  "type" : "object",
                  "properties" : {
                    "URL" : {
                      "type" : "string",
                      "format" : "uri",
                      "example" : "http://purl.obolibrary.org/obo/ro.owl"
                    },
                    "type" : {
                      "type" : "string",
                      "example" : "OBO",
                      "enum" : [ "OBO", "RDF", "WEBPAGE" ]
                    }
                  }
                }
              },
              "ontologyDbId" : {
                "type" : "string",
                "description" : "Ontology database unique identifier",
                "example" : "6b071868"
              },
              "ontologyName" : {
                "type" : "string",
                "description" : "Ontology name",
                "example" : "The Crop Ontology"
              },
              "version" : {
                "type" : "string",
                "description" : "Ontology version (no specific format)",
                "nullable" : true,
                "example" : "7.2.3"
              }
            },
            "description" : "MIAPPE V1.1\n\n(DM-85) Variable accession number - Accession number of the variable in the Crop Ontology\n\n(DM-87) Trait accession number - Accession number of the trait in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).\n\n(DM-89) Method accession number - Accession number of the method in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).\n\n(DM-93) Scale accession number - Accession number of the scale in a suitable controlled vocabulary (Crop Ontology)."
          }
        },
        "description" : "A description of the way an Observation should be collected. \n<br>For example, an ObservationVariable might be defined with a Trait of \"plant height\", a Scale of \"meters\", and a Method of \"tape measure\". This variable would be distinct from a variable with the Method \"estimation\" or \"drone image processing\". ",
        "x-brapi-metadata" : {
          "module" : "BrAPI-Phenotyping",
          "primaryModel" : true,
          "title" : "Method"
        }
      },
      "MethodBaseClass" : {
        "required" : [ "methodName" ],
        "type" : "object",
        "properties" : {
          "additionalInfo" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.",
            "nullable" : true
          },
          "bibliographicalReference" : {
            "type" : "string",
            "description" : "Bibliographical reference describing the method.\n<br/>MIAPPE V1.1 (DM-91) Reference associated to the method - URI/DOI of reference describing the method.",
            "nullable" : true,
            "example" : "Smith, 1893, Really Cool Paper, Popular Journal"
          },
          "description" : {
            "type" : "string",
            "description" : "Method description\n<br/>MIAPPE V1.1 (DM-90) Method description - Textual description of the method, which may extend a method defined in an external reference with specific parameters, e.g. growth stage, inoculation precise organ (leaf number)",
            "nullable" : true,
            "example" : "A measuring tape was used"
          },
          "externalReferences" : {
            "title" : "ExternalReferences",
            "type" : "array",
            "description" : "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.",
            "nullable" : true,
            "example" : [ {
              "referenceId" : "doi:10.155454/12341234",
              "referenceSource" : "DOI"
            }, {
              "referenceId" : "75a50e76",
              "referenceSource" : "Remote Data Collection Upload Tool"
            } ],
            "items" : {
              "type" : "object",
              "properties" : {
                "referenceID" : {
                  "type" : "string",
                  "description" : "**Deprecated in v2.1** Please use `referenceId`. Github issue number #460 \n<br>The external reference ID. Could be a simple string or a URI.",
                  "nullable" : true,
                  "deprecated" : true
                },
                "referenceId" : {
                  "type" : "string",
                  "description" : "The external reference ID. Could be a simple string or a URI."
                },
                "referenceSource" : {
                  "type" : "string",
                  "description" : "An identifier for the source system or database of this reference"
                }
              }
            }
          },
          "formula" : {
            "type" : "string",
            "description" : "For computational methods i.e., when the method consists in assessing the trait by computing measurements, write the generic formula used for the calculation",
            "nullable" : true,
            "example" : "a^2 + b^2 = c^2"
          },
          "methodClass" : {
            "type" : "string",
            "description" : "Method class (examples: \"Measurement\", \"Counting\", \"Estimation\", \"Computation\", etc.)",
            "nullable" : true,
            "example" : "Measurement"
          },
          "methodName" : {
            "type" : "string",
            "description" : "Human readable name for the method\n<br/>MIAPPE V1.1 (DM-88) Method  Name of the method of observation",
            "example" : "Measuring Tape"
          },
          "methodPUI" : {
            "type" : "string",
            "description" : "The Permanent Unique Identifier of a Method, usually in the form of a URI",
            "nullable" : true,
            "example" : "http://my-traits.com/trait/CO_123:0000212"
          },
          "ontologyReference" : {
            "required" : [ "ontologyDbId", "ontologyName" ],
            "type" : "object",
            "properties" : {
              "documentationLinks" : {
                "type" : "array",
                "description" : "links to various ontology documentation",
                "nullable" : true,
                "items" : {
                  "type" : "object",
                  "properties" : {
                    "URL" : {
                      "type" : "string",
                      "format" : "uri",
                      "example" : "http://purl.obolibrary.org/obo/ro.owl"
                    },
                    "type" : {
                      "type" : "string",
                      "example" : "OBO",
                      "enum" : [ "OBO", "RDF", "WEBPAGE" ]
                    }
                  }
                }
              },
              "ontologyDbId" : {
                "type" : "string",
                "description" : "Ontology database unique identifier",
                "example" : "6b071868"
              },
              "ontologyName" : {
                "type" : "string",
                "description" : "Ontology name",
                "example" : "The Crop Ontology"
              },
              "version" : {
                "type" : "string",
                "description" : "Ontology version (no specific format)",
                "nullable" : true,
                "example" : "7.2.3"
              }
            },
            "description" : "MIAPPE V1.1\n\n(DM-85) Variable accession number - Accession number of the variable in the Crop Ontology\n\n(DM-87) Trait accession number - Accession number of the trait in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).\n\n(DM-89) Method accession number - Accession number of the method in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).\n\n(DM-93) Scale accession number - Accession number of the scale in a suitable controlled vocabulary (Crop Ontology)."
          }
        },
        "description" : "A description of the way an Observation should be collected. \n<br>For example, an ObservationVariable might be defined with a Trait of \"plant height\", a Scale of \"meters\", and a Method of \"tape measure\". This variable would be distinct from a variable with the Method \"estimation\" or \"drone image processing\". "
      },
      "MethodNewRequest" : {
        "$ref" : "#/components/schemas/MethodBaseClass"
      },
      "Observation" : {
        "required" : [ "observationDbId" ],
        "type" : "object",
        "properties" : {
          "additionalInfo" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.",
            "nullable" : true
          },
          "collector" : {
            "type" : "string",
            "description" : "The name or identifier of the entity which collected the observation",
            "nullable" : true,
            "example" : "917d3ae0"
          },
          "externalReferences" : {
            "title" : "ExternalReferences",
            "type" : "array",
            "description" : "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.",
            "nullable" : true,
            "example" : [ {
              "referenceId" : "doi:10.155454/12341234",
              "referenceSource" : "DOI"
            }, {
              "referenceId" : "75a50e76",
              "referenceSource" : "Remote Data Collection Upload Tool"
            } ],
            "items" : {
              "type" : "object",
              "properties" : {
                "referenceID" : {
                  "type" : "string",
                  "description" : "**Deprecated in v2.1** Please use `referenceId`. Github issue number #460 \n<br>The external reference ID. Could be a simple string or a URI.",
                  "nullable" : true,
                  "deprecated" : true
                },
                "referenceId" : {
                  "type" : "string",
                  "description" : "The external reference ID. Could be a simple string or a URI."
                },
                "referenceSource" : {
                  "type" : "string",
                  "description" : "An identifier for the source system or database of this reference"
                }
              }
            }
          },
          "geoCoordinates" : {
            "title" : "GeoJSON",
            "type" : "object",
            "properties" : {
              "geometry" : {
                "title" : "GeoJSON Geometry",
                "type" : "object",
                "description" : "A geometry as defined by GeoJSON (RFC 7946). In this context, only Point or Polygon geometry are allowed.",
                "example" : {
                  "coordinates" : [ -76.506042, 42.417373, 123 ],
                  "type" : "Point"
                },
                "discriminator" : {
                  "propertyName" : "type",
                  "mapping" : {
                    "Point" : "#/components/schemas/pointGeometry",
                    "Polygon" : "#/components/schemas/polygonGeometry"
                  }
                },
                "oneOf" : [ {
                  "required" : [ "coordinates", "type" ],
                  "type" : "object",
                  "properties" : {
                    "coordinates" : {
                      "minItems" : 2,
                      "type" : "array",
                      "description" : "A single position",
                      "example" : [ -76.506042, 42.417373, 123 ],
                      "items" : {
                        "type" : "number"
                      }
                    },
                    "type" : {
                      "type" : "string",
                      "description" : "The literal string \"Point\"",
                      "example" : "Point",
                      "default" : "Point"
                    }
                  },
                  "description" : "Copied from RFC 7946 Section 3.1.1\n\nA position is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or\neasting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element."
                }, {
                  "required" : [ "coordinates", "type" ],
                  "type" : "object",
                  "properties" : {
                    "coordinates" : {
                      "type" : "array",
                      "description" : "An array of linear rings",
                      "example" : [ [ [ -77.456654, 42.241133, 494 ], [ -75.414133, 41.508282, 571 ], [ -76.506042, 42.417373, 123 ], [ -77.456654, 42.241133, 346 ] ] ],
                      "items" : {
                        "minItems" : 4,
                        "type" : "array",
                        "description" : "An array of at least four positions where the first equals the last",
                        "example" : [ [ -77.456654, 42.241133, 494 ], [ -75.414133, 41.508282, 571 ], [ -76.506042, 42.417373, 123 ], [ -77.456654, 42.241133, 346 ] ],
                        "items" : {
                          "minItems" : 2,
                          "type" : "array",
                          "description" : "A single position",
                          "example" : [ -76.506042, 42.417373, 123 ],
                          "items" : {
                            "type" : "number"
                          }
                        }
                      }
                    },
                    "type" : {
                      "type" : "string",
                      "description" : "The literal string \"Polygon\"",
                      "example" : "Polygon",
                      "default" : "Polygon"
                    }
                  },
                  "description" : "An array of Linear Rings. Each Linear Ring is an array of Points. \n\nA Point is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or\neasting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element."
                } ]
              },
              "type" : {
                "type" : "string",
                "description" : "The literal string \"Feature\"",
                "example" : "Feature",
                "default" : "Feature"
              }
            },
            "description" : "One geometry as defined by GeoJSON (RFC 7946). All coordinates are decimal values on the WGS84 geographic coordinate reference system.\n\nCopied from RFC 7946 Section 3.1.1\n\nA position is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or\neasting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element.",
            "nullable" : true
          },
          "germplasmDbId" : {
            "type" : "string",
            "description" : "The ID which uniquely identifies a germplasm",
            "nullable" : true,
            "example" : "2408ab11"
          },
          "germplasmName" : {
            "type" : "string",
            "description" : "Name of the germplasm. It can be the preferred name and does not have to be unique.",
            "nullable" : true,
            "example" : "A0000003"
          },
          "observationDbId" : {
            "type" : "string",
            "description" : "The ID which uniquely identifies an observation",
            "example" : "ef24b615"
          },
          "observationTimeStamp" : {
            "type" : "string",
            "description" : "The date and time when this observation was made",
            "format" : "date-time",
            "nullable" : true
          },
          "observationUnitDbId" : {
            "type" : "string",
            "description" : "The ID which uniquely identifies an observation unit",
            "nullable" : true,
            "example" : "598111d4"
          },
          "observationUnitName" : {
            "type" : "string",
            "description" : "A human readable name for an observation unit",
            "nullable" : true,
            "example" : "Plot 1"
          },
          "observationVariableDbId" : {
            "type" : "string",
            "description" : "The ID which uniquely identifies an observation variable",
            "nullable" : true,
            "example" : "c403d107"
          },
          "observationVariableName" : {
            "type" : "string",
            "description" : "A human readable name for an observation variable",
            "nullable" : true,
            "example" : "Plant Height in meters"
          },
          "season" : {
            "required" : [ "seasonDbId" ],
            "type" : "object",
            "properties" : {
              "season" : {
                "type" : "string",
                "description" : "**Deprecated in v2.1** Please use `seasonName`. Github issue number #456 \n<br>Name of the season. ex. 'Spring', 'Q2', 'Season A', etc.",
                "nullable" : true,
                "example" : "Spring",
                "deprecated" : true
              },
              "seasonDbId" : {
                "type" : "string",
                "description" : "The ID which uniquely identifies a season. For backward compatibility it can be a string like '2012', '1957-2004'",
                "nullable" : true,
                "example" : "Spring_2018"
              },
              "seasonName" : {
                "type" : "string",
                "description" : "Name of the season. ex. 'Spring', 'Q2', 'Season A', etc.",
                "nullable" : true,
                "example" : "Spring"
              },
              "year" : {
                "type" : "integer",
                "description" : "The 4 digit year of the season.",
                "nullable" : true,
                "example" : 2018
              }
            },
            "nullable" : true
          },
          "studyDbId" : {
            "type" : "string",
            "description" : "The ID which uniquely identifies a study within the given database server",
            "nullable" : true,
            "example" : "ef2829db"
          },
          "uploadedBy" : {
            "type" : "string",
            "description" : "The name or id of the user who uploaded the observation to the database system",
            "nullable" : true,
            "example" : "a2f7f60b"
          },
          "value" : {
            "type" : "string",
            "description" : "The value of the data collected as an observation",
            "nullable" : true,
            "example" : "2.3"
          }
        },
        "x-brapi-metadata" : {
          "description" : "A value assigned for a specific ObservationVariable when observing a specific ObservationUnit.",
          "module" : "BrAPI-Phenotyping",
          "primaryModel" : true,
          "title" : "Observation"
        }
      },
      "ObservationNewRequest" : {
        "type" : "object",
        "properties" : {
          "additionalInfo" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.",
            "nullable" : true
          },
          "collector" : {
            "type" : "string",
            "description" : "The name or identifier of the entity which collected the observation",
            "nullable" : true,
            "example" : "917d3ae0"
          },
          "externalReferences" : {
            "title" : "ExternalReferences",
            "type" : "array",
            "description" : "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.",
            "nullable" : true,
            "example" : [ {
              "referenceId" : "doi:10.155454/12341234",
              "referenceSource" : "DOI"
            }, {
              "referenceId" : "75a50e76",
              "referenceSource" : "Remote Data Collection Upload Tool"
            } ],
            "items" : {
              "type" : "object",
              "properties" : {
                "referenceID" : {
                  "type" : "string",
                  "description" : "**Deprecated in v2.1** Please use `referenceId`. Github issue number #460 \n<br>The external reference ID. Could be a simple string or a URI.",
                  "nullable" : true,
                  "deprecated" : true
                },
                "referenceId" : {
                  "type" : "string",
                  "description" : "The external reference ID. Could be a simple string or a URI."
                },
                "referenceSource" : {
                  "type" : "string",
                  "description" : "An identifier for the source system or database of this reference"
                }
              }
            }
          },
          "geoCoordinates" : {
            "title" : "GeoJSON",
            "type" : "object",
            "properties" : {
              "geometry" : {
                "title" : "GeoJSON Geometry",
                "type" : "object",
                "description" : "A geometry as defined by GeoJSON (RFC 7946). In this context, only Point or Polygon geometry are allowed.",
                "example" : {
                  "coordinates" : [ -76.506042, 42.417373, 123 ],
                  "type" : "Point"
                },
                "discriminator" : {
                  "propertyName" : "type",
                  "mapping" : {
                    "Point" : "#/components/schemas/pointGeometry",
                    "Polygon" : "#/components/schemas/polygonGeometry"
                  }
                },
                "oneOf" : [ {
                  "required" : [ "coordinates", "type" ],
                  "type" : "object",
                  "properties" : {
                    "coordinates" : {
                      "minItems" : 2,
                      "type" : "array",
                      "description" : "A single position",
                      "example" : [ -76.506042, 42.417373, 123 ],
                      "items" : {
                        "type" : "number"
                      }
                    },
                    "type" : {
                      "type" : "string",
                      "description" : "The literal string \"Point\"",
                      "example" : "Point",
                      "default" : "Point"
                    }
                  },
                  "description" : "Copied from RFC 7946 Section 3.1.1\n\nA position is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or\neasting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element."
                }, {
                  "required" : [ "coordinates", "type" ],
                  "type" : "object",
                  "properties" : {
                    "coordinates" : {
                      "type" : "array",
                      "description" : "An array of linear rings",
                      "example" : [ [ [ -77.456654, 42.241133, 494 ], [ -75.414133, 41.508282, 571 ], [ -76.506042, 42.417373, 123 ], [ -77.456654, 42.241133, 346 ] ] ],
                      "items" : {
                        "minItems" : 4,
                        "type" : "array",
                        "description" : "An array of at least four positions where the first equals the last",
                        "example" : [ [ -77.456654, 42.241133, 494 ], [ -75.414133, 41.508282, 571 ], [ -76.506042, 42.417373, 123 ], [ -77.456654, 42.241133, 346 ] ],
                        "items" : {
                          "minItems" : 2,
                          "type" : "array",
                          "description" : "A single position",
                          "example" : [ -76.506042, 42.417373, 123 ],
                          "items" : {
                            "type" : "number"
                          }
                        }
                      }
                    },
                    "type" : {
                      "type" : "string",
                      "description" : "The literal string \"Polygon\"",
                      "example" : "Polygon",
                      "default" : "Polygon"
                    }
                  },
                  "description" : "An array of Linear Rings. Each Linear Ring is an array of Points. \n\nA Point is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or\neasting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element."
                } ]
              },
              "type" : {
                "type" : "string",
                "description" : "The literal string \"Feature\"",
                "example" : "Feature",
                "default" : "Feature"
              }
            },
            "description" : "One geometry as defined by GeoJSON (RFC 7946). All coordinates are decimal values on the WGS84 geographic coordinate reference system.\n\nCopied from RFC 7946 Section 3.1.1\n\nA position is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or\neasting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element.",
            "nullable" : true
          },
          "germplasmDbId" : {
            "type" : "string",
            "description" : "The ID which uniquely identifies a germplasm",
            "nullable" : true,
            "example" : "2408ab11"
          },
          "germplasmName" : {
            "type" : "string",
            "description" : "Name of the germplasm. It can be the preferred name and does not have to be unique.",
            "nullable" : true,
            "example" : "A0000003"
          },
          "observationTimeStamp" : {
            "type" : "string",
            "description" : "The date and time when this observation was made",
            "format" : "date-time",
            "nullable" : true
          },
          "observationUnitDbId" : {
            "type" : "string",
            "description" : "The ID which uniquely identifies an observation unit",
            "nullable" : true,
            "example" : "598111d4"
          },
          "observationUnitName" : {
            "type" : "string",
            "description" : "A human readable name for an observation unit",
            "nullable" : true,
            "example" : "Plot 1"
          },
          "observationVariableDbId" : {
            "type" : "string",
            "description" : "The ID which uniquely identifies an observation variable",
            "nullable" : true,
            "example" : "c403d107"
          },
          "observationVariableName" : {
            "type" : "string",
            "description" : "A human readable name for an observation variable",
            "nullable" : true,
            "example" : "Plant Height in meters"
          },
          "season" : {
            "required" : [ "seasonDbId" ],
            "type" : "object",
            "properties" : {
              "season" : {
                "type" : "string",
                "description" : "**Deprecated in v2.1** Please use `seasonName`. Github issue number #456 \n<br>Name of the season. ex. 'Spring', 'Q2', 'Season A', etc.",
                "nullable" : true,
                "example" : "Spring",
                "deprecated" : true
              },
              "seasonDbId" : {
                "type" : "string",
                "description" : "The ID which uniquely identifies a season. For backward compatibility it can be a string like '2012', '1957-2004'",
                "nullable" : true,
                "example" : "Spring_2018"
              },
              "seasonName" : {
                "type" : "string",
                "description" : "Name of the season. ex. 'Spring', 'Q2', 'Season A', etc.",
                "nullable" : true,
                "example" : "Spring"
              },
              "year" : {
                "type" : "integer",
                "description" : "The 4 digit year of the season.",
                "nullable" : true,
                "example" : 2018
              }
            },
            "nullable" : true
          },
          "studyDbId" : {
            "type" : "string",
            "description" : "The ID which uniquely identifies a study within the given database server",
            "nullable" : true,
            "example" : "ef2829db"
          },
          "uploadedBy" : {
            "type" : "string",
            "description" : "The name or id of the user who uploaded the observation to the database system",
            "nullable" : true,
            "example" : "a2f7f60b"
          },
          "value" : {
            "type" : "string",
            "description" : "The value of the data collected as an observation",
            "nullable" : true,
            "example" : "2.3"
          }
        }
      },
      "ObservationSearchRequest" : {
        "type" : "object",
        "properties" : {
          "commonCropNames" : {
            "type" : "array",
            "description" : "The BrAPI Common Crop Name is the simple, generalized, widely accepted name of the organism being researched. It is most often used in multi-crop systems where digital resources need to be divided at a high level. Things like 'Maize', 'Wheat', and 'Rice' are examples of common crop names.\n\nUse this parameter to only return results associated with the given crops. \n\nUse `GET /commoncropnames` to find the list of available crops on a server.",
            "example" : [ "Tomatillo", "Paw Paw" ],
            "items" : {
              "type" : "string"
            }
          },
          "externalReferenceIDs" : {
            "type" : "array",
            "description" : "**Deprecated in v2.1** Please use `externalReferenceIds`. Github issue number #460 \n<br>List of external reference IDs. Could be a simple strings or a URIs. (use with `externalReferenceSources` parameter)",
            "example" : [ "doi:10.155454/12341234", "14a19841" ],
            "deprecated" : true,
            "items" : {
              "type" : "string"
            }
          },
          "externalReferenceIds" : {
            "type" : "array",
            "description" : "List of external reference IDs. Could be a simple strings or a URIs. (use with `externalReferenceSources` parameter)",
            "example" : [ "doi:10.155454/12341234", "14a19841" ],
            "items" : {
              "type" : "string"
            }
          },
          "externalReferenceSources" : {
            "type" : "array",
            "description" : "List of identifiers for the source system or database of an external reference (use with `externalReferenceIDs` parameter)",
            "example" : [ "DOI", "Field App Name" ],
            "items" : {
              "type" : "string"
            }
          },
          "germplasmDbIds" : {
            "type" : "array",
            "description" : "List of IDs which uniquely identify germplasm to search for",
            "example" : [ "e9c6edd7", "1b1df4a6" ],
            "items" : {
              "type" : "string"
            }
          },
          "germplasmNames" : {
            "type" : "array",
            "description" : "List of human readable names to identify germplasm to search for",
            "example" : [ "A0000003", "A0000477" ],
            "items" : {
              "type" : "string"
            }
          },
          "locationDbIds" : {
            "type" : "array",
            "description" : "The location ids to search for",
            "example" : [ "b28911cf", "5071d1e4" ],
            "items" : {
              "type" : "string"
            }
          },
          "locationNames" : {
            "type" : "array",
            "description" : "A human readable names to search for",
            "example" : [ "Location Alpha", "The Large Hadron Collider" ],
            "items" : {
              "type" : "string"
            }
          },
          "observationDbIds" : {
            "type" : "array",
            "description" : "The unique id of an Observation",
            "nullable" : true,
            "example" : [ "6a4a59d8", "3ff067e0" ],
            "items" : {
              "type" : "string"
            }
          },
          "observationLevelRelationships" : {
            "type" : "array",
            "description" : "Searches for values in ObservationUnit->observationUnitPosition->observationLevelRelationships",
            "nullable" : true,
            "example" : [ {
              "levelCode" : "Field_1",
              "levelName" : "field"
            } ],
            "items" : {
              "title" : "ObservationUnitLevelRelationship",
              "type" : "object",
              "properties" : {
                "levelCode" : {
                  "type" : "string",
                  "description" : "An ID code or number to represent a real thing that may or may not be an an observation unit.\n<br/>For example, if the 'levelName' is 'plot', then the 'levelCode' would be the plot number or plot barcode. If this plot is also considered an ObservationUnit, then the appropriate observationUnitDbId should also be recorded.\n<br/>If the 'levelName' is 'field', then the 'levelCode' might be something like '3' or 'F3' to indicate the third field at a research station. ",
                  "nullable" : true,
                  "example" : "Plot_123"
                },
                "levelName" : {
                  "type" : "string",
                  "description" : "A name for this level \n\n**Standard Level Names: study, field, entry, rep, block, sub-block, plot, sub-plot, plant, pot, sample** \n\nFor more information on Observation Levels, please review the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Observation_Levels\">Observation Levels documentation</a>. ",
                  "nullable" : true,
                  "example" : "plot"
                },
                "levelOrder" : {
                  "type" : "integer",
                  "description" : "`levelOrder` defines where that level exists in the hierarchy of levels. `levelOrder`'s lower numbers \nare at the top of the hierarchy (ie field -> 1) and higher numbers are at the bottom of the hierarchy (ie plant -> 9). \n\nFor more information on Observation Levels, please review the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Observation_Levels\">Observation Levels documentation</a>. ",
                  "nullable" : true,
                  "example" : 2
                },
                "observationUnitDbId" : {
                  "type" : "string",
                  "description" : "The ID which uniquely identifies an observation unit\n<br/>If this level has on ObservationUnit associated with it, record the observationUnitDbId here. This is intended to construct a strict hierarchy of observationUnits. \n<br/>If there is no ObservationUnit associated with this level, this field can set to NULL or omitted from the response.",
                  "nullable" : true,
                  "example" : "5ab883e9"
                }
              },
              "description" : "Observation levels indicate the granularity level at which the measurements are taken. `levelName` \ndefines the level, `levelOrder` defines where that level exists in the hierarchy of levels. \n`levelOrder`s lower numbers are at the top of the hierarchy (ie field > 0) and higher numbers are \nat the bottom of the hierarchy (ie plant > 6). `levelCode` is an ID code for this level tag. Identify \nthis observation unit by each level of the hierarchy where it exists. \n\nFor more information on Observation Levels, please review the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Observation_Levels\">Observation Levels documentation</a>. \n\n**Standard Level Names: study, field, entry, rep, block, sub-block, plot, sub-plot, plant, pot, sample** "
            }
          },
          "observationLevels" : {
            "type" : "array",
            "description" : "Searches for values in ObservationUnit->observationUnitPosition->observationLevel",
            "nullable" : true,
            "example" : [ {
              "levelCode" : "Plot_123",
              "levelName" : "plot"
            }, {
              "levelCode" : "Plot_456",
              "levelName" : "plot"
            }, {
              "levelCode" : "Plot_789",
              "levelName" : "plot"
            } ],
            "items" : {
              "title" : "ObservationUnitLevel",
              "type" : "object",
              "properties" : {
                "levelCode" : {
                  "type" : "string",
                  "description" : "An ID code or number to represent a real thing that may or may not be an an observation unit.\n<br/>For example, if the 'levelName' is 'plot', then the 'levelCode' would be the plot number or plot barcode. If this plot is also considered an ObservationUnit, then the appropriate observationUnitDbId should also be recorded.\n<br/>If the 'levelName' is 'field', then the 'levelCode' might be something like '3' or 'F3' to indicate the third field at a research station. ",
                  "nullable" : true,
                  "example" : "Plot_123"
                },
                "levelName" : {
                  "type" : "string",
                  "description" : "A name for this level \n\n**Standard Level Names: study, field, entry, rep, block, sub-block, plot, sub-plot, plant, pot, sample** \n\nFor more information on Observation Levels, please review the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Observation_Levels\">Observation Levels documentation</a>. ",
                  "nullable" : true,
                  "example" : "plot"
                },
                "levelOrder" : {
                  "type" : "integer",
                  "description" : "`levelOrder` defines where that level exists in the hierarchy of levels. `levelOrder`'s lower numbers \nare at the top of the hierarchy (ie field -> 1) and higher numbers are at the bottom of the hierarchy (ie plant -> 9). \n\nFor more information on Observation Levels, please review the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Observation_Levels\">Observation Levels documentation</a>. ",
                  "nullable" : true,
                  "example" : 2
                }
              },
              "description" : "Observation levels indicate the granularity level at which the measurements are taken. `levelName` \ndefines the level, `levelOrder` defines where that level exists in the hierarchy of levels. \n`levelOrder`s lower numbers are at the top of the hierarchy (ie field > 0) and higher numbers are \nat the bottom of the hierarchy (ie plant > 6). `levelCode` is an ID code for this level tag. Identify \nthis observation unit by each level of the hierarchy where it exists. \n\nFor more information on Observation Levels, please review the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Observation_Levels\">Observation Levels documentation</a>. \n\n**Standard Level Names: study, field, entry, rep, block, sub-block, plot, sub-plot, plant, pot, sample** "
            }
          },
          "observationTimeStampRangeEnd" : {
            "type" : "string",
            "description" : "Timestamp range end",
            "format" : "date-time",
            "nullable" : true
          },
          "observationTimeStampRangeStart" : {
            "type" : "string",
            "description" : "Timestamp range start",
            "format" : "date-time",
            "nullable" : true
          },
          "observationUnitDbIds" : {
            "type" : "array",
            "description" : "The unique id of an Observation Unit",
            "nullable" : true,
            "example" : [ "76f559b5", "066bc5d3" ],
            "items" : {
              "type" : "string"
            }
          },
          "observationVariableDbIds" : {
            "type" : "array",
            "description" : "The DbIds of Variables to search for",
            "example" : [ "a646187d", "6d23513b" ],
            "items" : {
              "type" : "string"
            }
          },
          "observationVariableNames" : {
            "type" : "array",
            "description" : "The names of Variables to search for",
            "example" : [ "Plant Height in meters", "Wheat rust score 1-5" ],
            "items" : {
              "type" : "string"
            }
          },
          "observationVariablePUIs" : {
            "type" : "array",
            "description" : "The Permanent Unique Identifier of an Observation Variable, usually in the form of a URI",
            "example" : [ "http://my-traits.com/trait/CO_123:0008012", "http://my-traits.com/trait/CO_123:0007261" ],
            "items" : {
              "type" : "string"
            }
          },
          "page" : {
            "type" : "integer",
            "description" : "Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.",
            "example" : 0
          },
          "pageSize" : {
            "type" : "integer",
            "description" : "The size of the pages to be returned. Default is `1000`.",
            "example" : 1000
          },
          "programDbIds" : {
            "type" : "array",
            "description" : "A BrAPI Program represents the high level organization or group who is responsible for conducting trials and studies. Things like Breeding Programs and Funded Projects are considered BrAPI Programs. \n\nUse this parameter to only return results associated with the given programs. \n\nUse `GET /programs` to find the list of available programs on a server.",
            "example" : [ "8f5de35b", "0e2d4a13" ],
            "items" : {
              "type" : "string"
            }
          },
          "programNames" : {
            "type" : "array",
            "description" : "Use this parameter to only return results associated with the given program names. Program names are not required to be unique.\n\nUse `GET /programs` to find the list of available programs on a server.",
            "example" : [ "Better Breeding Program", "Best Breeding Program" ],
            "items" : {
              "type" : "string"
            }
          },
          "seasonDbIds" : {
            "type" : "array",
            "description" : "The year or Phenotyping campaign of a multi-annual study (trees, grape, ...)",
            "nullable" : true,
            "example" : [ "Spring 2018", "Season A" ],
            "items" : {
              "type" : "string"
            }
          },
          "studyDbIds" : {
            "type" : "array",
            "description" : "List of study identifiers to search for",
            "example" : [ "cf6c4bd4", "691e69d6" ],
            "items" : {
              "type" : "string"
            }
          },
          "studyNames" : {
            "type" : "array",
            "description" : "List of study names to filter search results",
            "example" : [ "The First Bob Study 2017", "Wheat Yield Trial 246" ],
            "items" : {
              "type" : "string"
            }
          },
          "trialDbIds" : {
            "type" : "array",
            "description" : "The ID which uniquely identifies a trial to search for",
            "example" : [ "d2593dc2", "9431a731" ],
            "items" : {
              "type" : "string"
            }
          },
          "trialNames" : {
            "type" : "array",
            "description" : "The human readable name of a trial to search for",
            "example" : [ "All Yield Trials 2016", "Disease Resistance Study Comparison Group" ],
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "ObservationTable" : {
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "description" : "The 2D matrix of observation data. ObservationVariables and other metadata are the columns, ObservationUnits are the rows.",
            "example" : [ [ "2019-09-10T18:13:27.223Z", "f3a8a3db", "Plant Alpha", "0fe3e48b", "2017 Plant Study", "06307ec0", "A0043001", "76.50106681", "42.44409301", "2017", "Field_1", "Plot_11", "SubPlot_111", "Plant_1111", "Pot_1111", "Block_11", "Entry_11", "Rep_11", "25.3", "", "", "" ], [ "2019-09-10T18:14:27.223Z", "f3a8a3db", "Plant Alpha", "0fe3e48b", "2017 Plant Study", "06307ec0", "A0043001", "76.50106681", "42.44409301", "2017", "Field_1", "Plot_11", "SubPlot_111", "Plant_1111", "Pot_1111", "Block_11", "Entry_11", "Rep_11", "", "3", "", "" ], [ "2019-09-10T18:15:54.868Z", "05d1b011", "Plant Beta", "0fe3e48b", "2017 Plant Study", "59d435cd", "A0043002", "76.50106683", "42.44409301", "2017", "Field_1", "Plot_11", "SubPlot_112", "Plant_1122", "Pot_1122", "Block_11", "Entry_11", "Rep_12", "27.9", "", "", "" ], [ "2019-09-10T18:16:54.868Z", "05d1b011", "Plant Beta", "0fe3e48b", "2017 Plant Study", "59d435cd", "A0043002", "76.50106683", "42.44409301", "2017", "Field_1", "Plot_11", "SubPlot_112", "Plant_1122", "Pot_1122", "Block_11", "Entry_11", "Rep_12", "", "1", "", "" ], [ "2019-09-10T18:17:34.433Z", "67e2d87c", "Plant Gamma", "0fe3e48b", "2017 Plant Study", "06307ec0", "A0043001", "76.50106681", "42.44409356", "2017", "Field_1", "Plot_12", "SubPlot_123", "Plant_1233", "Pot_1233", "Block_12", "Entry_12", "Rep_11", "", "3", "", "" ], [ "2019-09-10T18:18:34.433Z", "67e2d87c", "Plant Gamma", "0fe3e48b", "2017 Plant Study", "06307ec0", "A0043001", "76.50106681", "42.44409356", "2017", "Field_1", "Plot_12", "SubPlot_123", "Plant_1233", "Pot_1233", "Block_12", "Entry_12", "Rep_11", "25.5", "", "", "" ], [ "2019-09-10T18:19:15.629Z", "d98d0d4c", "Plant Epsilon", "0fe3e48b", "2017 Plant Study", "59d435cd", "A0043002", "76.50106683", "42.44409356", "2017", "Field_1", "Plot_12", "SubPlot_124", "Plant_1244", "Pot_1244", "Block_12", "Entry_12", "Rep_12", "28.9", "", "", "" ], [ "2019-09-10T18:20:15.629Z", "d98d0d4c", "Plant Epsilon", "0fe3e48b", "2017 Plant Study", "59d435cd", "A0043002", "76.50106683", "42.44409356", "2017", "Field_1", "Plot_12", "SubPlot_124", "Plant_1244", "Pot_1244", "Block_12", "Entry_12", "Rep_12", "", "0", "", "" ] ],
            "items" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          },
          "headerRow" : {
            "type" : "array",
            "description" : "<p>The table is REQUIRED to have the following columns</p>\n<ul>\n  <li>observationUnitDbId - Each row is related to one Observation Unit</li>\n  <li>observationTimeStamp - Each row is has a time stamp for when the observation was taken</li>\n  <li>At least one column with an observationVariableDbId</li>\n</ul>\n<p>The table may have any or all of the following OPTIONAL columns. Included columns are decided by the server developer</p>\n<ul>\n  <li>observationUnitName</li>\n  <li>studyDbId</li>\n  <li>studyName</li>\n  <li>germplasmDbId</li>\n  <li>germplasmName</li>\n  <li>positionCoordinateX</li>\n  <li>positionCoordinateY</li>\n  <li>year</li>\n</ul>\n<p>The table also may have any number of Observation Unit Hierarchy Level columns. For example:</p>\n<ul>\n  <li>field</li>\n  <li>plot</li>\n  <li>sub-plot</li>\n  <li>plant</li>\n  <li>pot</li>\n  <li>block</li>\n  <li>entry</li>\n  <li>rep</li>\n</ul>\n<p>The JSON representation provides a pair of extra arrays for defining the headers of the table. \nThe first array \"headerRow\" will always contain \"observationUnitDbId\" and any or all of the OPTIONAL column header names. \nThe second array \"observationVariables\" contains the names and DbIds for the Observation Variables represented in the table. \nBy appending the two arrays, you can construct the complete header row of the table. </p>",
            "example" : [ "observationTimeStamp", "observationUnitDbId", "observationUnitName", "studyDbId", "studyName", "germplasmDbId", "germplasmName", "positionCoordinateX", "positionCoordinateY", "year", "field", "plot", "sub-plot", "plant", "pot", "block", "entry", "rep" ],
            "items" : {
              "type" : "string",
              "description" : "valid header fields",
              "enum" : [ "observationTimeStamp", "observationUnitDbId", "observationUnitName", "studyDbId", "studyName", "germplasmDbId", "germplasmName", "positionCoordinateX", "positionCoordinateY", "year", "field", "plot", "sub-plot", "plant", "pot", "block", "entry", "rep" ]
            }
          },
          "observationVariables" : {
            "type" : "array",
            "description" : "The list of observation variables which have values recorded for them in the data matrix. Append to the 'headerRow' for complete header row of the table.",
            "example" : [ {
              "observationVariableDbId" : "367aa1a9",
              "observationVariableName" : "Plant height"
            }, {
              "observationVariableDbId" : "2acb934c",
              "observationVariableName" : "Carotenoid"
            }, {
              "observationVariableDbId" : "85a21ce1",
              "observationVariableName" : "Root color"
            }, {
              "observationVariableDbId" : "46f590e5",
              "observationVariableName" : "Virus severity"
            } ],
            "items" : {
              "type" : "object",
              "properties" : {
                "observationVariableDbId" : {
                  "type" : "string",
                  "description" : "Variable unique identifier",
                  "example" : "367aa1a9"
                },
                "observationVariableName" : {
                  "type" : "string",
                  "description" : "Variable name (usually a short name)",
                  "example" : "Plant height"
                }
              }
            }
          }
        }
      },
      "ObservationTreatment" : {
        "type" : "object",
        "properties" : {
          "factor" : {
            "type" : "string",
            "description" : "The type of treatment/factor. ex. 'fertilizer', 'inoculation', 'irrigation', etc\n\nMIAPPE V1.1 (DM-61) Experimental Factor type - Name/Acronym of the experimental factor.",
            "nullable" : true,
            "example" : "fertilizer"
          },
          "modality" : {
            "type" : "string",
            "description" : "The treatment/factor description. ex. 'low fertilizer', 'yellow rust inoculation', 'high water', etc\n\nMIAPPE V1.1 (DM-62) Experimental Factor description - Free text description of the experimental factor. This includes all relevant treatments planned and protocol planned for all the plants targeted by a given experimental factor. ",
            "nullable" : true,
            "example" : "low fertilizer"
          }
        }
      },
      "ObservationUnit" : {
        "required" : [ "observationUnitDbId" ],
        "type" : "object",
        "properties" : {
          "additionalInfo" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.",
            "nullable" : true
          },
          "crossDbId" : {
            "type" : "string",
            "description" : "the unique identifier for a cross",
            "nullable" : true,
            "example" : "d105fd6f"
          },
          "crossName" : {
            "type" : "string",
            "description" : "the human readable name for a cross",
            "nullable" : true,
            "example" : "my_Crosses_2018_01"
          },
          "externalReferences" : {
            "title" : "ExternalReferences",
            "type" : "array",
            "description" : "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.",
            "nullable" : true,
            "example" : [ {
              "referenceId" : "doi:10.155454/12341234",
              "referenceSource" : "DOI"
            }, {
              "referenceId" : "75a50e76",
              "referenceSource" : "Remote Data Collection Upload Tool"
            } ],
            "items" : {
              "type" : "object",
              "properties" : {
                "referenceID" : {
                  "type" : "string",
                  "description" : "**Deprecated in v2.1** Please use `referenceId`. Github issue number #460 \n<br>The external reference ID. Could be a simple string or a URI.",
                  "nullable" : true,
                  "deprecated" : true
                },
                "referenceId" : {
                  "type" : "string",
                  "description" : "The external reference ID. Could be a simple string or a URI."
                },
                "referenceSource" : {
                  "type" : "string",
                  "description" : "An identifier for the source system or database of this reference"
                }
              }
            }
          },
          "germplasmDbId" : {
            "type" : "string",
            "description" : "The ID which uniquely identifies a germplasm",
            "nullable" : true,
            "example" : "e9d9ed57"
          },
          "germplasmName" : {
            "type" : "string",
            "description" : "Name of the germplasm. It can be the preferred name and does not have to be unique.",
            "nullable" : true,
            "example" : "A0000001"
          },
          "locationDbId" : {
            "type" : "string",
            "description" : "The ID which uniquely identifies a location, associated with this study",
            "nullable" : true,
            "example" : "0e208b20"
          },
          "locationName" : {
            "type" : "string",
            "description" : "The human readable name of a location associated with this study",
            "nullable" : true,
            "example" : "Field Station Alpha"
          },
          "observationUnitDbId" : {
            "type" : "string",
            "description" : "The ID which uniquely identifies an observation unit\n\nMIAPPE V1.1 (DM-70) Observation unit ID - Identifier used to identify the observation unit in data files containing the values observed or measured on that unit. Must be locally unique. ",
            "nullable" : true,
            "example" : "8c67503c"
          },
          "observationUnitName" : {
            "type" : "string",
            "description" : "A human readable name for an observation unit",
            "nullable" : true,
            "example" : "Plot 1"
          },
          "observationUnitPUI" : {
            "type" : "string",
            "description" : "A Permanent Unique Identifier for an observation unit\n\nMIAPPE V1.1 (DM-72) External ID - Identifier for the observation unit in a persistent repository, comprises the name of the repository and the identifier of the observation unit therein. The EBI Biosamples repository can be used. URI are recommended when possible.",
            "nullable" : true,
            "example" : "http://pui.per/plot/1a9afc14"
          },
          "observationUnitPosition" : {
            "type" : "object",
            "properties" : {
              "entryType" : {
                "type" : "string",
                "description" : "The type of entry for this observation unit. ex. \"CHECK\", \"TEST\", \"FILLER\"",
                "nullable" : true,
                "example" : "TEST",
                "enum" : [ "CHECK", "TEST", "FILLER" ]
              },
              "geoCoordinates" : {
                "title" : "GeoJSON",
                "type" : "object",
                "properties" : {
                  "geometry" : {
                    "title" : "GeoJSON Geometry",
                    "type" : "object",
                    "description" : "A geometry as defined by GeoJSON (RFC 7946). In this context, only Point or Polygon geometry are allowed.",
                    "example" : {
                      "coordinates" : [ -76.506042, 42.417373, 123 ],
                      "type" : "Point"
                    },
                    "discriminator" : {
                      "propertyName" : "type",
                      "mapping" : {
                        "Point" : "#/components/schemas/pointGeometry",
                        "Polygon" : "#/components/schemas/polygonGeometry"
                      }
                    },
                    "oneOf" : [ {
                      "required" : [ "coordinates", "type" ],
                      "type" : "object",
                      "properties" : {
                        "coordinates" : {
                          "minItems" : 2,
                          "type" : "array",
                          "description" : "A single position",
                          "example" : [ -76.506042, 42.417373, 123 ],
                          "items" : {
                            "type" : "number"
                          }
                        },
                        "type" : {
                          "type" : "string",
                          "description" : "The literal string \"Point\"",
                          "example" : "Point",
                          "default" : "Point"
                        }
                      },
                      "description" : "Copied from RFC 7946 Section 3.1.1\n\nA position is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or\neasting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element."
                    }, {
                      "required" : [ "coordinates", "type" ],
                      "type" : "object",
                      "properties" : {
                        "coordinates" : {
                          "type" : "array",
                          "description" : "An array of linear rings",
                          "example" : [ [ [ -77.456654, 42.241133, 494 ], [ -75.414133, 41.508282, 571 ], [ -76.506042, 42.417373, 123 ], [ -77.456654, 42.241133, 346 ] ] ],
                          "items" : {
                            "minItems" : 4,
                            "type" : "array",
                            "description" : "An array of at least four positions where the first equals the last",
                            "example" : [ [ -77.456654, 42.241133, 494 ], [ -75.414133, 41.508282, 571 ], [ -76.506042, 42.417373, 123 ], [ -77.456654, 42.241133, 346 ] ],
                            "items" : {
                              "minItems" : 2,
                              "type" : "array",
                              "description" : "A single position",
                              "example" : [ -76.506042, 42.417373, 123 ],
                              "items" : {
                                "type" : "number"
                              }
                            }
                          }
                        },
                        "type" : {
                          "type" : "string",
                          "description" : "The literal string \"Polygon\"",
                          "example" : "Polygon",
                          "default" : "Polygon"
                        }
                      },
                      "description" : "An array of Linear Rings. Each Linear Ring is an array of Points. \n\nA Point is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or\neasting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element."
                    } ]
                  },
                  "type" : {
                    "type" : "string",
                    "description" : "The literal string \"Feature\"",
                    "example" : "Feature",
                    "default" : "Feature"
                  }
                },
                "description" : "One geometry as defined by GeoJSON (RFC 7946). All coordinates are decimal values on the WGS84 geographic coordinate reference system.\n\nCopied from RFC 7946 Section 3.1.1\n\nA position is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or\neasting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element.",
                "nullable" : true
              },
              "observationLevel" : {
                "title" : "ObservationUnitLevel",
                "type" : "object",
                "properties" : {
                  "levelCode" : {
                    "type" : "string",
                    "description" : "An ID code or number to represent a real thing that may or may not be an an observation unit.\n<br/>For example, if the 'levelName' is 'plot', then the 'levelCode' would be the plot number or plot barcode. If this plot is also considered an ObservationUnit, then the appropriate observationUnitDbId should also be recorded.\n<br/>If the 'levelName' is 'field', then the 'levelCode' might be something like '3' or 'F3' to indicate the third field at a research station. ",
                    "nullable" : true,
                    "example" : "Plot_123"
                  },
                  "levelName" : {
                    "type" : "string",
                    "description" : "A name for this level \n\n**Standard Level Names: study, field, entry, rep, block, sub-block, plot, sub-plot, plant, pot, sample** \n\nFor more information on Observation Levels, please review the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Observation_Levels\">Observation Levels documentation</a>. ",
                    "nullable" : true,
                    "example" : "plot"
                  },
                  "levelOrder" : {
                    "type" : "integer",
                    "description" : "`levelOrder` defines where that level exists in the hierarchy of levels. `levelOrder`'s lower numbers \nare at the top of the hierarchy (ie field -> 1) and higher numbers are at the bottom of the hierarchy (ie plant -> 9). \n\nFor more information on Observation Levels, please review the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Observation_Levels\">Observation Levels documentation</a>. ",
                    "nullable" : true,
                    "example" : 2
                  }
                },
                "description" : "The exact level and level code of an observation unit. \n\nFor more information on Observation Levels, please review the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Observation_Levels\">Observation Levels documentation</a>. \n\nMIAPPE V1.1 DM-71 Observation unit type \"Type of observation unit in textual form, usually one of the following: study, block, sub-block, plot, sub-plot, pot, plant. Use of other observation unit types is possible but not recommended. \nThe observation unit type can not be used to indicate sub-plant levels. However, observations can still be made on the sub-plant level, as long as the details are indicated in the associated observed variable (see observed variables). \nAlternatively, it is possible to use samples for more detailed tracing of sub-plant units, attaching the observations to them instead.\" "
              },
              "observationLevelRelationships" : {
                "type" : "array",
                "description" : "Observation levels indicate the granularity level at which the measurements are taken. `levelName` \ndefines the level, `levelOrder` defines where that level exists in the hierarchy of levels. \n`levelOrder`s lower numbers are at the top of the hierarchy (ie field > 0) and higher numbers are \nat the bottom of the hierarchy (ie plant > 6). `levelCode` is an ID code for this level tag. Identify \nthis observation unit by each level of the hierarchy where it exists. \n\nFor more information on Observation Levels, please review the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Observation_Levels\">Observation Levels documentation</a>. \n\n**Standard Level Names: study, field, entry, rep, block, sub-block, plot, sub-plot, plant, pot, sample** ",
                "nullable" : true,
                "example" : [ {
                  "levelCode" : "Field_1",
                  "levelName" : "field",
                  "levelOrder" : 0
                }, {
                  "levelCode" : "Block_12",
                  "levelName" : "block",
                  "levelOrder" : 1
                }, {
                  "levelCode" : "Plot_123",
                  "levelName" : "plot",
                  "levelOrder" : 2
                } ],
                "items" : {
                  "title" : "ObservationUnitLevelRelationship",
                  "type" : "object",
                  "properties" : {
                    "levelCode" : {
                      "type" : "string",
                      "description" : "An ID code or number to represent a real thing that may or may not be an an observation unit.\n<br/>For example, if the 'levelName' is 'plot', then the 'levelCode' would be the plot number or plot barcode. If this plot is also considered an ObservationUnit, then the appropriate observationUnitDbId should also be recorded.\n<br/>If the 'levelName' is 'field', then the 'levelCode' might be something like '3' or 'F3' to indicate the third field at a research station. ",
                      "nullable" : true,
                      "example" : "Plot_123"
                    },
                    "levelName" : {
                      "type" : "string",
                      "description" : "A name for this level \n\n**Standard Level Names: study, field, entry, rep, block, sub-block, plot, sub-plot, plant, pot, sample** \n\nFor more information on Observation Levels, please review the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Observation_Levels\">Observation Levels documentation</a>. ",
                      "nullable" : true,
                      "example" : "plot"
                    },
                    "levelOrder" : {
                      "type" : "integer",
                      "description" : "`levelOrder` defines where that level exists in the hierarchy of levels. `levelOrder`'s lower numbers \nare at the top of the hierarchy (ie field -> 1) and higher numbers are at the bottom of the hierarchy (ie plant -> 9). \n\nFor more information on Observation Levels, please review the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Observation_Levels\">Observation Levels documentation</a>. ",
                      "nullable" : true,
                      "example" : 2
                    },
                    "observationUnitDbId" : {
                      "type" : "string",
                      "description" : "The ID which uniquely identifies an observation unit\n<br/>If this level has on ObservationUnit associated with it, record the observationUnitDbId here. This is intended to construct a strict hierarchy of observationUnits. \n<br/>If there is no ObservationUnit associated with this level, this field can set to NULL or omitted from the response.",
                      "nullable" : true,
                      "example" : "5ab883e9"
                    }
                  },
                  "description" : "Observation levels indicate the granularity level at which the measurements are taken. `levelName` \ndefines the level, `levelOrder` defines where that level exists in the hierarchy of levels. \n`levelOrder`s lower numbers are at the top of the hierarchy (ie field > 0) and higher numbers are \nat the bottom of the hierarchy (ie plant > 6). `levelCode` is an ID code for this level tag. Identify \nthis observation unit by each level of the hierarchy where it exists. \n\nFor more information on Observation Levels, please review the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Observation_Levels\">Observation Levels documentation</a>. \n\n**Standard Level Names: study, field, entry, rep, block, sub-block, plot, sub-plot, plant, pot, sample** "
                }
              },
              "positionCoordinateX" : {
                "type" : "string",
                "description" : "The X position coordinate for an observation unit. Different systems may use different coordinate systems.",
                "nullable" : true,
                "example" : "74"
              },
              "positionCoordinateXType" : {
                "type" : "string",
                "description" : "The type of positional coordinate used. Must be one of the following values \n\nLONGITUDE - ISO 6709 standard, WGS84 geodetic datum. See 'Location Coordinate Encoding' for details \n\nLATITUDE - ISO 6709 standard, WGS84 geodetic datum. See 'Location Coordinate Encoding' for details \n\nPLANTED_ROW - The physical planted row number \n\nPLANTED_INDIVIDUAL - The physical counted number, could be independant or within a planted row \n\nGRID_ROW - The row index number of a square grid overlay \n\nGRID_COL - The column index number of a square grid overlay \n\nMEASURED_ROW - The distance in meters from a defined 0-th row \n\nMEASURED_COL - The distance in meters from a defined 0-th column ",
                "nullable" : true,
                "example" : "GRID_COL",
                "enum" : [ "LONGITUDE", "LATITUDE", "PLANTED_ROW", "PLANTED_INDIVIDUAL", "GRID_ROW", "GRID_COL", "MEASURED_ROW", "MEASURED_COL" ]
              },
              "positionCoordinateY" : {
                "type" : "string",
                "description" : "The Y position coordinate for an observation unit. Different systems may use different coordinate systems.",
                "nullable" : true,
                "example" : "03"
              },
              "positionCoordinateYType" : {
                "type" : "string",
                "description" : "The type of positional coordinate used. Must be one of the following values \n\nLONGITUDE - ISO 6709 standard, WGS84 geodetic datum. See 'Location Coordinate Encoding' for details \n\nLATITUDE - ISO 6709 standard, WGS84 geodetic datum. See 'Location Coordinate Encoding' for details \n\nPLANTED_ROW - The physical planted row number  \n\nPLANTED_INDIVIDUAL - The physical counted number, could be independant or within a planted row \n\nGRID_ROW - The row index number of a square grid overlay \n\nGRID_COL - The column index number of a square grid overlay \n\nMEASURED_ROW - The distance in meters from a defined 0-th row \n\nMEASURED_COL - The distance in meters from a defined 0-th column ",
                "nullable" : true,
                "example" : "GRID_ROW",
                "enum" : [ "LONGITUDE", "LATITUDE", "PLANTED_ROW", "PLANTED_INDIVIDUAL", "GRID_ROW", "GRID_COL", "MEASURED_ROW", "MEASURED_COL" ]
              }
            },
            "description" : "All positional and layout information related to this Observation Unit \n\nMIAPPE V1.1 (DM-73) Spatial distribution - Type and value of a spatial coordinate (georeference or relative) \nor level of observation (plot 45, subblock 7, block 2) provided as a key-value pair of the form type:value. \nLevels of observation must be consistent with those listed in the Study section.",
            "nullable" : true
          },
          "observations" : {
            "type" : "array",
            "description" : "All observations attached to this observation unit. \n\nDefault for this field is null or omitted. Do NOT include data in this field unless the 'includeObservations' flag is explicitly set to True.",
            "nullable" : true,
            "items" : {
              "required" : [ "observationDbId" ],
              "type" : "object",
              "properties" : {
                "additionalInfo" : {
                  "type" : "object",
                  "additionalProperties" : {
                    "type" : "string"
                  },
                  "description" : "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.",
                  "nullable" : true
                },
                "collector" : {
                  "type" : "string",
                  "description" : "The name or identifier of the entity which collected the observation",
                  "nullable" : true,
                  "example" : "917d3ae0"
                },
                "externalReferences" : {
                  "title" : "ExternalReferences",
                  "type" : "array",
                  "description" : "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.",
                  "nullable" : true,
                  "example" : [ {
                    "referenceId" : "doi:10.155454/12341234",
                    "referenceSource" : "DOI"
                  }, {
                    "referenceId" : "75a50e76",
                    "referenceSource" : "Remote Data Collection Upload Tool"
                  } ],
                  "items" : {
                    "type" : "object",
                    "properties" : {
                      "referenceID" : {
                        "type" : "string",
                        "description" : "**Deprecated in v2.1** Please use `referenceId`. Github issue number #460 \n<br>The external reference ID. Could be a simple string or a URI.",
                        "nullable" : true,
                        "deprecated" : true
                      },
                      "referenceId" : {
                        "type" : "string",
                        "description" : "The external reference ID. Could be a simple string or a URI."
                      },
                      "referenceSource" : {
                        "type" : "string",
                        "description" : "An identifier for the source system or database of this reference"
                      }
                    }
                  }
                },
                "geoCoordinates" : {
                  "title" : "GeoJSON",
                  "type" : "object",
                  "properties" : {
                    "geometry" : {
                      "title" : "GeoJSON Geometry",
                      "type" : "object",
                      "description" : "A geometry as defined by GeoJSON (RFC 7946). In this context, only Point or Polygon geometry are allowed.",
                      "example" : {
                        "coordinates" : [ -76.506042, 42.417373, 123 ],
                        "type" : "Point"
                      },
                      "discriminator" : {
                        "propertyName" : "type",
                        "mapping" : {
                          "Point" : "#/components/schemas/pointGeometry",
                          "Polygon" : "#/components/schemas/polygonGeometry"
                        }
                      },
                      "oneOf" : [ {
                        "required" : [ "coordinates", "type" ],
                        "type" : "object",
                        "properties" : {
                          "coordinates" : {
                            "minItems" : 2,
                            "type" : "array",
                            "description" : "A single position",
                            "example" : [ -76.506042, 42.417373, 123 ],
                            "items" : {
                              "type" : "number"
                            }
                          },
                          "type" : {
                            "type" : "string",
                            "description" : "The literal string \"Point\"",
                            "example" : "Point",
                            "default" : "Point"
                          }
                        },
                        "description" : "Copied from RFC 7946 Section 3.1.1\n\nA position is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or\neasting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element."
                      }, {
                        "required" : [ "coordinates", "type" ],
                        "type" : "object",
                        "properties" : {
                          "coordinates" : {
                            "type" : "array",
                            "description" : "An array of linear rings",
                            "example" : [ [ [ -77.456654, 42.241133, 494 ], [ -75.414133, 41.508282, 571 ], [ -76.506042, 42.417373, 123 ], [ -77.456654, 42.241133, 346 ] ] ],
                            "items" : {
                              "minItems" : 4,
                              "type" : "array",
                              "description" : "An array of at least four positions where the first equals the last",
                              "example" : [ [ -77.456654, 42.241133, 494 ], [ -75.414133, 41.508282, 571 ], [ -76.506042, 42.417373, 123 ], [ -77.456654, 42.241133, 346 ] ],
                              "items" : {
                                "minItems" : 2,
                                "type" : "array",
                                "description" : "A single position",
                                "example" : [ -76.506042, 42.417373, 123 ],
                                "items" : {
                                  "type" : "number"
                                }
                              }
                            }
                          },
                          "type" : {
                            "type" : "string",
                            "description" : "The literal string \"Polygon\"",
                            "example" : "Polygon",
                            "default" : "Polygon"
                          }
                        },
                        "description" : "An array of Linear Rings. Each Linear Ring is an array of Points. \n\nA Point is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or\neasting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element."
                      } ]
                    },
                    "type" : {
                      "type" : "string",
                      "description" : "The literal string \"Feature\"",
                      "example" : "Feature",
                      "default" : "Feature"
                    }
                  },
                  "description" : "One geometry as defined by GeoJSON (RFC 7946). All coordinates are decimal values on the WGS84 geographic coordinate reference system.\n\nCopied from RFC 7946 Section 3.1.1\n\nA position is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or\neasting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element.",
                  "nullable" : true
                },
                "germplasmDbId" : {
                  "type" : "string",
                  "description" : "The ID which uniquely identifies a germplasm",
                  "nullable" : true,
                  "example" : "2408ab11"
                },
                "germplasmName" : {
                  "type" : "string",
                  "description" : "Name of the germplasm. It can be the preferred name and does not have to be unique.",
                  "nullable" : true,
                  "example" : "A0000003"
                },
                "observationDbId" : {
                  "type" : "string",
                  "description" : "The ID which uniquely identifies an observation",
                  "example" : "ef24b615"
                },
                "observationTimeStamp" : {
                  "type" : "string",
                  "description" : "The date and time when this observation was made",
                  "format" : "date-time",
                  "nullable" : true
                },
                "observationUnitDbId" : {
                  "type" : "string",
                  "description" : "The ID which uniquely identifies an observation unit",
                  "nullable" : true,
                  "example" : "598111d4"
                },
                "observationUnitName" : {
                  "type" : "string",
                  "description" : "A human readable name for an observation unit",
                  "nullable" : true,
                  "example" : "Plot 1"
                },
                "observationVariableDbId" : {
                  "type" : "string",
                  "description" : "The ID which uniquely identifies an observation variable",
                  "nullable" : true,
                  "example" : "c403d107"
                },
                "observationVariableName" : {
                  "type" : "string",
                  "description" : "A human readable name for an observation variable",
                  "nullable" : true,
                  "example" : "Plant Height in meters"
                },
                "season" : {
                  "required" : [ "seasonDbId" ],
                  "type" : "object",
                  "properties" : {
                    "season" : {
                      "type" : "string",
                      "description" : "**Deprecated in v2.1** Please use `seasonName`. Github issue number #456 \n<br>Name of the season. ex. 'Spring', 'Q2', 'Season A', etc.",
                      "nullable" : true,
                      "example" : "Spring",
                      "deprecated" : true
                    },
                    "seasonDbId" : {
                      "type" : "string",
                      "description" : "The ID which uniquely identifies a season. For backward compatibility it can be a string like '2012', '1957-2004'",
                      "nullable" : true,
                      "example" : "Spring_2018"
                    },
                    "seasonName" : {
                      "type" : "string",
                      "description" : "Name of the season. ex. 'Spring', 'Q2', 'Season A', etc.",
                      "nullable" : true,
                      "example" : "Spring"
                    },
                    "year" : {
                      "type" : "integer",
                      "description" : "The 4 digit year of the season.",
                      "nullable" : true,
                      "example" : 2018
                    }
                  },
                  "nullable" : true
                },
                "studyDbId" : {
                  "type" : "string",
                  "description" : "The ID which uniquely identifies a study within the given database server",
                  "nullable" : true,
                  "example" : "ef2829db"
                },
                "uploadedBy" : {
                  "type" : "string",
                  "description" : "The name or id of the user who uploaded the observation to the database system",
                  "nullable" : true,
                  "example" : "a2f7f60b"
                },
                "value" : {
                  "type" : "string",
                  "description" : "The value of the data collected as an observation",
                  "nullable" : true,
                  "example" : "2.3"
                }
              },
              "x-brapi-metadata" : {
                "description" : "A value assigned for a specific ObservationVariable when observing a specific ObservationUnit.",
                "module" : "BrAPI-Phenotyping",
                "primaryModel" : true,
                "title" : "Observation"
              }
            }
          },
          "programDbId" : {
            "type" : "string",
            "description" : "The ID which uniquely identifies a program",
            "nullable" : true,
            "example" : "2d763a7a"
          },
          "programName" : {
            "type" : "string",
            "description" : "The human readable name of a program",
            "nullable" : true,
            "example" : "The Perfect Breeding Program"
          },
          "seedLotDbId" : {
            "type" : "string",
            "description" : "The unique identifier for the originating Seed Lot",
            "nullable" : true,
            "example" : "261ecb09"
          },
          "seedLotName" : {
            "type" : "string",
            "description" : "A human readable name for the originating Seed Lot",
            "nullable" : true,
            "example" : "Seed Lot Alpha"
          },
          "studyDbId" : {
            "type" : "string",
            "description" : "The ID which uniquely identifies a study within the given database server",
            "nullable" : true,
            "example" : "9865addc"
          },
          "studyName" : {
            "type" : "string",
            "description" : "The human readable name for a study",
            "nullable" : true,
            "example" : "Purple_Tomato_1"
          },
          "treatments" : {
            "type" : "array",
            "description" : "List of treatments applied to an observation unit.\n\nMIAPPE V1.1 (DM-74) Observation Unit factor value - List of values for each factor applied to the observation unit.",
            "nullable" : true,
            "items" : {
              "type" : "object",
              "properties" : {
                "factor" : {
                  "type" : "string",
                  "description" : "The type of treatment/factor. ex. 'fertilizer', 'inoculation', 'irrigation', etc\n\nMIAPPE V1.1 (DM-61) Experimental Factor type - Name/Acronym of the experimental factor.",
                  "nullable" : true,
                  "example" : "fertilizer"
                },
                "modality" : {
                  "type" : "string",
                  "description" : "The treatment/factor description. ex. 'low fertilizer', 'yellow rust inoculation', 'high water', etc\n\nMIAPPE V1.1 (DM-62) Experimental Factor description - Free text description of the experimental factor. This includes all relevant treatments planned and protocol planned for all the plants targeted by a given experimental factor. ",
                  "nullable" : true,
                  "example" : "low fertilizer"
                }
              }
            }
          },
          "trialDbId" : {
            "type" : "string",
            "description" : "The ID which uniquely identifies a trial",
            "nullable" : true,
            "example" : "776a609c"
          },
          "trialName" : {
            "type" : "string",
            "description" : "The human readable name of a trial",
            "nullable" : true,
            "example" : "Purple Tomato"
          }
        },
        "x-brapi-metadata" : {
          "description" : "A representation of the physical entity being observed during a phenotype data collection process. Typically, this is a Plot or a Plant, but it could include things like Fields, Blocks, or Samples.",
          "module" : "BrAPI-Phenotyping",
          "primaryModel" : true,
          "title" : "ObservationUnit"
        }
      },
      "ObservationUnitHierarchyLevel" : {
        "title" : "ObservationUnitHierarchyLevel",
        "type" : "object",
        "properties" : {
          "levelName" : {
            "type" : "string",
            "description" : "A name for this level \n\n**Standard Level Names: study, field, entry, rep, block, sub-block, plot, sub-plot, plant, pot, sample** \n\nFor more information on Observation Levels, please review the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Observation_Levels\">Observation Levels documentation</a>. ",
            "nullable" : true,
            "example" : "plot"
          },
          "levelOrder" : {
            "type" : "integer",
            "description" : "`levelOrder` defines where that level exists in the hierarchy of levels. `levelOrder`'s lower numbers \nare at the top of the hierarchy (ie field -> 1) and higher numbers are at the bottom of the hierarchy (ie plant -> 9). \n\nFor more information on Observation Levels, please review the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Observation_Levels\">Observation Levels documentation</a>. ",
            "nullable" : true,
            "example" : 2
          }
        },
        "description" : "Observation levels indicate the granularity level at which the measurements are taken. `levelName` \ndefines the level, `levelOrder` defines where that level exists in the hierarchy of levels. \n`levelOrder`s lower numbers are at the top of the hierarchy (ie field > 0) and higher numbers are \nat the bottom of the hierarchy (ie plant > 6). \n\n**Standard Level Names: study, field, entry, rep, block, sub-block, plot, sub-plot, plant, pot, sample** \n\nFor more information on Observation Levels, please review the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Observation_Levels\">Observation Levels documentation</a>. "
      },
      "ObservationUnitLevel" : {
        "title" : "ObservationUnitLevel",
        "type" : "object",
        "properties" : {
          "levelCode" : {
            "type" : "string",
            "description" : "An ID code or number to represent a real thing that may or may not be an an observation unit.\n<br/>For example, if the 'levelName' is 'plot', then the 'levelCode' would be the plot number or plot barcode. If this plot is also considered an ObservationUnit, then the appropriate observationUnitDbId should also be recorded.\n<br/>If the 'levelName' is 'field', then the 'levelCode' might be something like '3' or 'F3' to indicate the third field at a research station. ",
            "nullable" : true,
            "example" : "Plot_123"
          },
          "levelName" : {
            "type" : "string",
            "description" : "A name for this level \n\n**Standard Level Names: study, field, entry, rep, block, sub-block, plot, sub-plot, plant, pot, sample** \n\nFor more information on Observation Levels, please review the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Observation_Levels\">Observation Levels documentation</a>. ",
            "nullable" : true,
            "example" : "plot"
          },
          "levelOrder" : {
            "type" : "integer",
            "description" : "`levelOrder` defines where that level exists in the hierarchy of levels. `levelOrder`'s lower numbers \nare at the top of the hierarchy (ie field -> 1) and higher numbers are at the bottom of the hierarchy (ie plant -> 9). \n\nFor more information on Observation Levels, please review the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Observation_Levels\">Observation Levels documentation</a>. ",
            "nullable" : true,
            "example" : 2
          }
        },
        "description" : "Observation levels indicate the granularity level at which the measurements are taken. `levelName` \ndefines the level, `levelOrder` defines where that level exists in the hierarchy of levels. \n`levelOrder`s lower numbers are at the top of the hierarchy (ie field > 0) and higher numbers are \nat the bottom of the hierarchy (ie plant > 6). `levelCode` is an ID code for this level tag. Identify \nthis observation unit by each level of the hierarchy where it exists. \n\nFor more information on Observation Levels, please review the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Observation_Levels\">Observation Levels documentation</a>. \n\n**Standard Level Names: study, field, entry, rep, block, sub-block, plot, sub-plot, plant, pot, sample** "
      },
      "ObservationUnitLevelRelationship" : {
        "title" : "ObservationUnitLevelRelationship",
        "type" : "object",
        "properties" : {
          "levelCode" : {
            "type" : "string",
            "description" : "An ID code or number to represent a real thing that may or may not be an an observation unit.\n<br/>For example, if the 'levelName' is 'plot', then the 'levelCode' would be the plot number or plot barcode. If this plot is also considered an ObservationUnit, then the appropriate observationUnitDbId should also be recorded.\n<br/>If the 'levelName' is 'field', then the 'levelCode' might be something like '3' or 'F3' to indicate the third field at a research station. ",
            "nullable" : true,
            "example" : "Plot_123"
          },
          "levelName" : {
            "type" : "string",
            "description" : "A name for this level \n\n**Standard Level Names: study, field, entry, rep, block, sub-block, plot, sub-plot, plant, pot, sample** \n\nFor more information on Observation Levels, please review the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Observation_Levels\">Observation Levels documentation</a>. ",
            "nullable" : true,
            "example" : "plot"
          },
          "levelOrder" : {
            "type" : "integer",
            "description" : "`levelOrder` defines where that level exists in the hierarchy of levels. `levelOrder`'s lower numbers \nare at the top of the hierarchy (ie field -> 1) and higher numbers are at the bottom of the hierarchy (ie plant -> 9). \n\nFor more information on Observation Levels, please review the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Observation_Levels\">Observation Levels documentation</a>. ",
            "nullable" : true,
            "example" : 2
          },
          "observationUnitDbId" : {
            "type" : "string",
            "description" : "The ID which uniquely identifies an observation unit\n<br/>If this level has on ObservationUnit associated with it, record the observationUnitDbId here. This is intended to construct a strict hierarchy of observationUnits. \n<br/>If there is no ObservationUnit associated with this level, this field can set to NULL or omitted from the response.",
            "nullable" : true,
            "example" : "5ab883e9"
          }
        },
        "description" : "Observation levels indicate the granularity level at which the measurements are taken. `levelName` \ndefines the level, `levelOrder` defines where that level exists in the hierarchy of levels. \n`levelOrder`s lower numbers are at the top of the hierarchy (ie field > 0) and higher numbers are \nat the bottom of the hierarchy (ie plant > 6). `levelCode` is an ID code for this level tag. Identify \nthis observation unit by each level of the hierarchy where it exists. \n\nFor more information on Observation Levels, please review the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Observation_Levels\">Observation Levels documentation</a>. \n\n**Standard Level Names: study, field, entry, rep, block, sub-block, plot, sub-plot, plant, pot, sample** "
      },
      "ObservationUnitNewRequest" : {
        "type" : "object",
        "properties" : {
          "additionalInfo" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.",
            "nullable" : true
          },
          "crossDbId" : {
            "type" : "string",
            "description" : "the unique identifier for a cross",
            "nullable" : true,
            "example" : "d105fd6f"
          },
          "crossName" : {
            "type" : "string",
            "description" : "the human readable name for a cross",
            "nullable" : true,
            "example" : "my_Crosses_2018_01"
          },
          "externalReferences" : {
            "title" : "ExternalReferences",
            "type" : "array",
            "description" : "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.",
            "nullable" : true,
            "example" : [ {
              "referenceId" : "doi:10.155454/12341234",
              "referenceSource" : "DOI"
            }, {
              "referenceId" : "75a50e76",
              "referenceSource" : "Remote Data Collection Upload Tool"
            } ],
            "items" : {
              "type" : "object",
              "properties" : {
                "referenceID" : {
                  "type" : "string",
                  "description" : "**Deprecated in v2.1** Please use `referenceId`. Github issue number #460 \n<br>The external reference ID. Could be a simple string or a URI.",
                  "nullable" : true,
                  "deprecated" : true
                },
                "referenceId" : {
                  "type" : "string",
                  "description" : "The external reference ID. Could be a simple string or a URI."
                },
                "referenceSource" : {
                  "type" : "string",
                  "description" : "An identifier for the source system or database of this reference"
                }
              }
            }
          },
          "germplasmDbId" : {
            "type" : "string",
            "description" : "The ID which uniquely identifies a germplasm",
            "nullable" : true,
            "example" : "e9d9ed57"
          },
          "germplasmName" : {
            "type" : "string",
            "description" : "Name of the germplasm. It can be the preferred name and does not have to be unique.",
            "nullable" : true,
            "example" : "A0000001"
          },
          "locationDbId" : {
            "type" : "string",
            "description" : "The ID which uniquely identifies a location, associated with this study",
            "nullable" : true,
            "example" : "0e208b20"
          },
          "locationName" : {
            "type" : "string",
            "description" : "The human readable name of a location associated with this study",
            "nullable" : true,
            "example" : "Field Station Alpha"
          },
          "observationUnitName" : {
            "type" : "string",
            "description" : "A human readable name for an observation unit",
            "nullable" : true,
            "example" : "Plot 1"
          },
          "observationUnitPUI" : {
            "type" : "string",
            "description" : "A Permanent Unique Identifier for an observation unit\n\nMIAPPE V1.1 (DM-72) External ID - Identifier for the observation unit in a persistent repository, comprises the name of the repository and the identifier of the observation unit therein. The EBI Biosamples repository can be used. URI are recommended when possible.",
            "nullable" : true,
            "example" : "http://pui.per/plot/1a9afc14"
          },
          "observationUnitPosition" : {
            "type" : "object",
            "properties" : {
              "entryType" : {
                "type" : "string",
                "description" : "The type of entry for this observation unit. ex. \"CHECK\", \"TEST\", \"FILLER\"",
                "nullable" : true,
                "example" : "TEST",
                "enum" : [ "CHECK", "TEST", "FILLER" ]
              },
              "geoCoordinates" : {
                "title" : "GeoJSON",
                "type" : "object",
                "properties" : {
                  "geometry" : {
                    "title" : "GeoJSON Geometry",
                    "type" : "object",
                    "description" : "A geometry as defined by GeoJSON (RFC 7946). In this context, only Point or Polygon geometry are allowed.",
                    "example" : {
                      "coordinates" : [ -76.506042, 42.417373, 123 ],
                      "type" : "Point"
                    },
                    "discriminator" : {
                      "propertyName" : "type",
                      "mapping" : {
                        "Point" : "#/components/schemas/pointGeometry",
                        "Polygon" : "#/components/schemas/polygonGeometry"
                      }
                    },
                    "oneOf" : [ {
                      "required" : [ "coordinates", "type" ],
                      "type" : "object",
                      "properties" : {
                        "coordinates" : {
                          "minItems" : 2,
                          "type" : "array",
                          "description" : "A single position",
                          "example" : [ -76.506042, 42.417373, 123 ],
                          "items" : {
                            "type" : "number"
                          }
                        },
                        "type" : {
                          "type" : "string",
                          "description" : "The literal string \"Point\"",
                          "example" : "Point",
                          "default" : "Point"
                        }
                      },
                      "description" : "Copied from RFC 7946 Section 3.1.1\n\nA position is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or\neasting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element."
                    }, {
                      "required" : [ "coordinates", "type" ],
                      "type" : "object",
                      "properties" : {
                        "coordinates" : {
                          "type" : "array",
                          "description" : "An array of linear rings",
                          "example" : [ [ [ -77.456654, 42.241133, 494 ], [ -75.414133, 41.508282, 571 ], [ -76.506042, 42.417373, 123 ], [ -77.456654, 42.241133, 346 ] ] ],
                          "items" : {
                            "minItems" : 4,
                            "type" : "array",
                            "description" : "An array of at least four positions where the first equals the last",
                            "example" : [ [ -77.456654, 42.241133, 494 ], [ -75.414133, 41.508282, 571 ], [ -76.506042, 42.417373, 123 ], [ -77.456654, 42.241133, 346 ] ],
                            "items" : {
                              "minItems" : 2,
                              "type" : "array",
                              "description" : "A single position",
                              "example" : [ -76.506042, 42.417373, 123 ],
                              "items" : {
                                "type" : "number"
                              }
                            }
                          }
                        },
                        "type" : {
                          "type" : "string",
                          "description" : "The literal string \"Polygon\"",
                          "example" : "Polygon",
                          "default" : "Polygon"
                        }
                      },
                      "description" : "An array of Linear Rings. Each Linear Ring is an array of Points. \n\nA Point is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or\neasting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element."
                    } ]
                  },
                  "type" : {
                    "type" : "string",
                    "description" : "The literal string \"Feature\"",
                    "example" : "Feature",
                    "default" : "Feature"
                  }
                },
                "description" : "One geometry as defined by GeoJSON (RFC 7946). All coordinates are decimal values on the WGS84 geographic coordinate reference system.\n\nCopied from RFC 7946 Section 3.1.1\n\nA position is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or\neasting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element.",
                "nullable" : true
              },
              "observationLevel" : {
                "title" : "ObservationUnitLevel",
                "type" : "object",
                "properties" : {
                  "levelCode" : {
                    "type" : "string",
                    "description" : "An ID code or number to represent a real thing that may or may not be an an observation unit.\n<br/>For example, if the 'levelName' is 'plot', then the 'levelCode' would be the plot number or plot barcode. If this plot is also considered an ObservationUnit, then the appropriate observationUnitDbId should also be recorded.\n<br/>If the 'levelName' is 'field', then the 'levelCode' might be something like '3' or 'F3' to indicate the third field at a research station. ",
                    "nullable" : true,
                    "example" : "Plot_123"
                  },
                  "levelName" : {
                    "type" : "string",
                    "description" : "A name for this level \n\n**Standard Level Names: study, field, entry, rep, block, sub-block, plot, sub-plot, plant, pot, sample** \n\nFor more information on Observation Levels, please review the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Observation_Levels\">Observation Levels documentation</a>. ",
                    "nullable" : true,
                    "example" : "plot"
                  },
                  "levelOrder" : {
                    "type" : "integer",
                    "description" : "`levelOrder` defines where that level exists in the hierarchy of levels. `levelOrder`'s lower numbers \nare at the top of the hierarchy (ie field -> 1) and higher numbers are at the bottom of the hierarchy (ie plant -> 9). \n\nFor more information on Observation Levels, please review the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Observation_Levels\">Observation Levels documentation</a>. ",
                    "nullable" : true,
                    "example" : 2
                  }
                },
                "description" : "The exact level and level code of an observation unit. \n\nFor more information on Observation Levels, please review the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Observation_Levels\">Observation Levels documentation</a>. \n\nMIAPPE V1.1 DM-71 Observation unit type \"Type of observation unit in textual form, usually one of the following: study, block, sub-block, plot, sub-plot, pot, plant. Use of other observation unit types is possible but not recommended. \nThe observation unit type can not be used to indicate sub-plant levels. However, observations can still be made on the sub-plant level, as long as the details are indicated in the associated observed variable (see observed variables). \nAlternatively, it is possible to use samples for more detailed tracing of sub-plant units, attaching the observations to them instead.\" "
              },
              "observationLevelRelationships" : {
                "type" : "array",
                "description" : "Observation levels indicate the granularity level at which the measurements are taken. `levelName` \ndefines the level, `levelOrder` defines where that level exists in the hierarchy of levels. \n`levelOrder`s lower numbers are at the top of the hierarchy (ie field > 0) and higher numbers are \nat the bottom of the hierarchy (ie plant > 6). `levelCode` is an ID code for this level tag. Identify \nthis observation unit by each level of the hierarchy where it exists. \n\nFor more information on Observation Levels, please review the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Observation_Levels\">Observation Levels documentation</a>. \n\n**Standard Level Names: study, field, entry, rep, block, sub-block, plot, sub-plot, plant, pot, sample** ",
                "nullable" : true,
                "example" : [ {
                  "levelCode" : "Field_1",
                  "levelName" : "field",
                  "levelOrder" : 0
                }, {
                  "levelCode" : "Block_12",
                  "levelName" : "block",
                  "levelOrder" : 1
                }, {
                  "levelCode" : "Plot_123",
                  "levelName" : "plot",
                  "levelOrder" : 2
                } ],
                "items" : {
                  "title" : "ObservationUnitLevelRelationship",
                  "type" : "object",
                  "properties" : {
                    "levelCode" : {
                      "type" : "string",
                      "description" : "An ID code or number to represent a real thing that may or may not be an an observation unit.\n<br/>For example, if the 'levelName' is 'plot', then the 'levelCode' would be the plot number or plot barcode. If this plot is also considered an ObservationUnit, then the appropriate observationUnitDbId should also be recorded.\n<br/>If the 'levelName' is 'field', then the 'levelCode' might be something like '3' or 'F3' to indicate the third field at a research station. ",
                      "nullable" : true,
                      "example" : "Plot_123"
                    },
                    "levelName" : {
                      "type" : "string",
                      "description" : "A name for this level \n\n**Standard Level Names: study, field, entry, rep, block, sub-block, plot, sub-plot, plant, pot, sample** \n\nFor more information on Observation Levels, please review the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Observation_Levels\">Observation Levels documentation</a>. ",
                      "nullable" : true,
                      "example" : "plot"
                    },
                    "levelOrder" : {
                      "type" : "integer",
                      "description" : "`levelOrder` defines where that level exists in the hierarchy of levels. `levelOrder`'s lower numbers \nare at the top of the hierarchy (ie field -> 1) and higher numbers are at the bottom of the hierarchy (ie plant -> 9). \n\nFor more information on Observation Levels, please review the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Observation_Levels\">Observation Levels documentation</a>. ",
                      "nullable" : true,
                      "example" : 2
                    },
                    "observationUnitDbId" : {
                      "type" : "string",
                      "description" : "The ID which uniquely identifies an observation unit\n<br/>If this level has on ObservationUnit associated with it, record the observationUnitDbId here. This is intended to construct a strict hierarchy of observationUnits. \n<br/>If there is no ObservationUnit associated with this level, this field can set to NULL or omitted from the response.",
                      "nullable" : true,
                      "example" : "5ab883e9"
                    }
                  },
                  "description" : "Observation levels indicate the granularity level at which the measurements are taken. `levelName` \ndefines the level, `levelOrder` defines where that level exists in the hierarchy of levels. \n`levelOrder`s lower numbers are at the top of the hierarchy (ie field > 0) and higher numbers are \nat the bottom of the hierarchy (ie plant > 6). `levelCode` is an ID code for this level tag. Identify \nthis observation unit by each level of the hierarchy where it exists. \n\nFor more information on Observation Levels, please review the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Observation_Levels\">Observation Levels documentation</a>. \n\n**Standard Level Names: study, field, entry, rep, block, sub-block, plot, sub-plot, plant, pot, sample** "
                }
              },
              "positionCoordinateX" : {
                "type" : "string",
                "description" : "The X position coordinate for an observation unit. Different systems may use different coordinate systems.",
                "nullable" : true,
                "example" : "74"
              },
              "positionCoordinateXType" : {
                "type" : "string",
                "description" : "The type of positional coordinate used. Must be one of the following values \n\nLONGITUDE - ISO 6709 standard, WGS84 geodetic datum. See 'Location Coordinate Encoding' for details \n\nLATITUDE - ISO 6709 standard, WGS84 geodetic datum. See 'Location Coordinate Encoding' for details \n\nPLANTED_ROW - The physical planted row number \n\nPLANTED_INDIVIDUAL - The physical counted number, could be independant or within a planted row \n\nGRID_ROW - The row index number of a square grid overlay \n\nGRID_COL - The column index number of a square grid overlay \n\nMEASURED_ROW - The distance in meters from a defined 0-th row \n\nMEASURED_COL - The distance in meters from a defined 0-th column ",
                "nullable" : true,
                "example" : "GRID_COL",
                "enum" : [ "LONGITUDE", "LATITUDE", "PLANTED_ROW", "PLANTED_INDIVIDUAL", "GRID_ROW", "GRID_COL", "MEASURED_ROW", "MEASURED_COL" ]
              },
              "positionCoordinateY" : {
                "type" : "string",
                "description" : "The Y position coordinate for an observation unit. Different systems may use different coordinate systems.",
                "nullable" : true,
                "example" : "03"
              },
              "positionCoordinateYType" : {
                "type" : "string",
                "description" : "The type of positional coordinate used. Must be one of the following values \n\nLONGITUDE - ISO 6709 standard, WGS84 geodetic datum. See 'Location Coordinate Encoding' for details \n\nLATITUDE - ISO 6709 standard, WGS84 geodetic datum. See 'Location Coordinate Encoding' for details \n\nPLANTED_ROW - The physical planted row number  \n\nPLANTED_INDIVIDUAL - The physical counted number, could be independant or within a planted row \n\nGRID_ROW - The row index number of a square grid overlay \n\nGRID_COL - The column index number of a square grid overlay \n\nMEASURED_ROW - The distance in meters from a defined 0-th row \n\nMEASURED_COL - The distance in meters from a defined 0-th column ",
                "nullable" : true,
                "example" : "GRID_ROW",
                "enum" : [ "LONGITUDE", "LATITUDE", "PLANTED_ROW", "PLANTED_INDIVIDUAL", "GRID_ROW", "GRID_COL", "MEASURED_ROW", "MEASURED_COL" ]
              }
            },
            "description" : "All positional and layout information related to this Observation Unit \n\nMIAPPE V1.1 (DM-73) Spatial distribution - Type and value of a spatial coordinate (georeference or relative) \nor level of observation (plot 45, subblock 7, block 2) provided as a key-value pair of the form type:value. \nLevels of observation must be consistent with those listed in the Study section.",
            "nullable" : true
          },
          "programDbId" : {
            "type" : "string",
            "description" : "The ID which uniquely identifies a program",
            "nullable" : true,
            "example" : "2d763a7a"
          },
          "programName" : {
            "type" : "string",
            "description" : "The human readable name of a program",
            "nullable" : true,
            "example" : "The Perfect Breeding Program"
          },
          "seedLotDbId" : {
            "type" : "string",
            "description" : "The unique identifier for the originating Seed Lot",
            "nullable" : true,
            "example" : "261ecb09"
          },
          "seedLotName" : {
            "type" : "string",
            "description" : "A human readable name for the originating Seed Lot",
            "nullable" : true,
            "example" : "Seed Lot Alpha"
          },
          "studyDbId" : {
            "type" : "string",
            "description" : "The ID which uniquely identifies a study within the given database server",
            "nullable" : true,
            "example" : "9865addc"
          },
          "studyName" : {
            "type" : "string",
            "description" : "The human readable name for a study",
            "nullable" : true,
            "example" : "Purple_Tomato_1"
          },
          "treatments" : {
            "type" : "array",
            "description" : "List of treatments applied to an observation unit.\n\nMIAPPE V1.1 (DM-74) Observation Unit factor value - List of values for each factor applied to the observation unit.",
            "nullable" : true,
            "items" : {
              "type" : "object",
              "properties" : {
                "factor" : {
                  "type" : "string",
                  "description" : "The type of treatment/factor. ex. 'fertilizer', 'inoculation', 'irrigation', etc\n\nMIAPPE V1.1 (DM-61) Experimental Factor type - Name/Acronym of the experimental factor.",
                  "nullable" : true,
                  "example" : "fertilizer"
                },
                "modality" : {
                  "type" : "string",
                  "description" : "The treatment/factor description. ex. 'low fertilizer', 'yellow rust inoculation', 'high water', etc\n\nMIAPPE V1.1 (DM-62) Experimental Factor description - Free text description of the experimental factor. This includes all relevant treatments planned and protocol planned for all the plants targeted by a given experimental factor. ",
                  "nullable" : true,
                  "example" : "low fertilizer"
                }
              }
            }
          },
          "trialDbId" : {
            "type" : "string",
            "description" : "The ID which uniquely identifies a trial",
            "nullable" : true,
            "example" : "776a609c"
          },
          "trialName" : {
            "type" : "string",
            "description" : "The human readable name of a trial",
            "nullable" : true,
            "example" : "Purple Tomato"
          }
        }
      },
      "ObservationUnitPosition" : {
        "type" : "object",
        "properties" : {
          "entryType" : {
            "type" : "string",
            "description" : "The type of entry for this observation unit. ex. \"CHECK\", \"TEST\", \"FILLER\"",
            "nullable" : true,
            "example" : "TEST",
            "enum" : [ "CHECK", "TEST", "FILLER" ]
          },
          "geoCoordinates" : {
            "title" : "GeoJSON",
            "type" : "object",
            "properties" : {
              "geometry" : {
                "title" : "GeoJSON Geometry",
                "type" : "object",
                "description" : "A geometry as defined by GeoJSON (RFC 7946). In this context, only Point or Polygon geometry are allowed.",
                "example" : {
                  "coordinates" : [ -76.506042, 42.417373, 123 ],
                  "type" : "Point"
                },
                "discriminator" : {
                  "propertyName" : "type",
                  "mapping" : {
                    "Point" : "#/components/schemas/pointGeometry",
                    "Polygon" : "#/components/schemas/polygonGeometry"
                  }
                },
                "oneOf" : [ {
                  "required" : [ "coordinates", "type" ],
                  "type" : "object",
                  "properties" : {
                    "coordinates" : {
                      "minItems" : 2,
                      "type" : "array",
                      "description" : "A single position",
                      "example" : [ -76.506042, 42.417373, 123 ],
                      "items" : {
                        "type" : "number"
                      }
                    },
                    "type" : {
                      "type" : "string",
                      "description" : "The literal string \"Point\"",
                      "example" : "Point",
                      "default" : "Point"
                    }
                  },
                  "description" : "Copied from RFC 7946 Section 3.1.1\n\nA position is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or\neasting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element."
                }, {
                  "required" : [ "coordinates", "type" ],
                  "type" : "object",
                  "properties" : {
                    "coordinates" : {
                      "type" : "array",
                      "description" : "An array of linear rings",
                      "example" : [ [ [ -77.456654, 42.241133, 494 ], [ -75.414133, 41.508282, 571 ], [ -76.506042, 42.417373, 123 ], [ -77.456654, 42.241133, 346 ] ] ],
                      "items" : {
                        "minItems" : 4,
                        "type" : "array",
                        "description" : "An array of at least four positions where the first equals the last",
                        "example" : [ [ -77.456654, 42.241133, 494 ], [ -75.414133, 41.508282, 571 ], [ -76.506042, 42.417373, 123 ], [ -77.456654, 42.241133, 346 ] ],
                        "items" : {
                          "minItems" : 2,
                          "type" : "array",
                          "description" : "A single position",
                          "example" : [ -76.506042, 42.417373, 123 ],
                          "items" : {
                            "type" : "number"
                          }
                        }
                      }
                    },
                    "type" : {
                      "type" : "string",
                      "description" : "The literal string \"Polygon\"",
                      "example" : "Polygon",
                      "default" : "Polygon"
                    }
                  },
                  "description" : "An array of Linear Rings. Each Linear Ring is an array of Points. \n\nA Point is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or\neasting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element."
                } ]
              },
              "type" : {
                "type" : "string",
                "description" : "The literal string \"Feature\"",
                "example" : "Feature",
                "default" : "Feature"
              }
            },
            "description" : "One geometry as defined by GeoJSON (RFC 7946). All coordinates are decimal values on the WGS84 geographic coordinate reference system.\n\nCopied from RFC 7946 Section 3.1.1\n\nA position is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or\neasting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element.",
            "nullable" : true
          },
          "observationLevel" : {
            "title" : "ObservationUnitLevel",
            "type" : "object",
            "properties" : {
              "levelCode" : {
                "type" : "string",
                "description" : "An ID code or number to represent a real thing that may or may not be an an observation unit.\n<br/>For example, if the 'levelName' is 'plot', then the 'levelCode' would be the plot number or plot barcode. If this plot is also considered an ObservationUnit, then the appropriate observationUnitDbId should also be recorded.\n<br/>If the 'levelName' is 'field', then the 'levelCode' might be something like '3' or 'F3' to indicate the third field at a research station. ",
                "nullable" : true,
                "example" : "Plot_123"
              },
              "levelName" : {
                "type" : "string",
                "description" : "A name for this level \n\n**Standard Level Names: study, field, entry, rep, block, sub-block, plot, sub-plot, plant, pot, sample** \n\nFor more information on Observation Levels, please review the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Observation_Levels\">Observation Levels documentation</a>. ",
                "nullable" : true,
                "example" : "plot"
              },
              "levelOrder" : {
                "type" : "integer",
                "description" : "`levelOrder` defines where that level exists in the hierarchy of levels. `levelOrder`'s lower numbers \nare at the top of the hierarchy (ie field -> 1) and higher numbers are at the bottom of the hierarchy (ie plant -> 9). \n\nFor more information on Observation Levels, please review the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Observation_Levels\">Observation Levels documentation</a>. ",
                "nullable" : true,
                "example" : 2
              }
            },
            "description" : "The exact level and level code of an observation unit. \n\nFor more information on Observation Levels, please review the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Observation_Levels\">Observation Levels documentation</a>. \n\nMIAPPE V1.1 DM-71 Observation unit type \"Type of observation unit in textual form, usually one of the following: study, block, sub-block, plot, sub-plot, pot, plant. Use of other observation unit types is possible but not recommended. \nThe observation unit type can not be used to indicate sub-plant levels. However, observations can still be made on the sub-plant level, as long as the details are indicated in the associated observed variable (see observed variables). \nAlternatively, it is possible to use samples for more detailed tracing of sub-plant units, attaching the observations to them instead.\" "
          },
          "observationLevelRelationships" : {
            "type" : "array",
            "description" : "Observation levels indicate the granularity level at which the measurements are taken. `levelName` \ndefines the level, `levelOrder` defines where that level exists in the hierarchy of levels. \n`levelOrder`s lower numbers are at the top of the hierarchy (ie field > 0) and higher numbers are \nat the bottom of the hierarchy (ie plant > 6). `levelCode` is an ID code for this level tag. Identify \nthis observation unit by each level of the hierarchy where it exists. \n\nFor more information on Observation Levels, please review the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Observation_Levels\">Observation Levels documentation</a>. \n\n**Standard Level Names: study, field, entry, rep, block, sub-block, plot, sub-plot, plant, pot, sample** ",
            "nullable" : true,
            "example" : [ {
              "levelCode" : "Field_1",
              "levelName" : "field",
              "levelOrder" : 0
            }, {
              "levelCode" : "Block_12",
              "levelName" : "block",
              "levelOrder" : 1
            }, {
              "levelCode" : "Plot_123",
              "levelName" : "plot",
              "levelOrder" : 2
            } ],
            "items" : {
              "title" : "ObservationUnitLevelRelationship",
              "type" : "object",
              "properties" : {
                "levelCode" : {
                  "type" : "string",
                  "description" : "An ID code or number to represent a real thing that may or may not be an an observation unit.\n<br/>For example, if the 'levelName' is 'plot', then the 'levelCode' would be the plot number or plot barcode. If this plot is also considered an ObservationUnit, then the appropriate observationUnitDbId should also be recorded.\n<br/>If the 'levelName' is 'field', then the 'levelCode' might be something like '3' or 'F3' to indicate the third field at a research station. ",
                  "nullable" : true,
                  "example" : "Plot_123"
                },
                "levelName" : {
                  "type" : "string",
                  "description" : "A name for this level \n\n**Standard Level Names: study, field, entry, rep, block, sub-block, plot, sub-plot, plant, pot, sample** \n\nFor more information on Observation Levels, please review the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Observation_Levels\">Observation Levels documentation</a>. ",
                  "nullable" : true,
                  "example" : "plot"
                },
                "levelOrder" : {
                  "type" : "integer",
                  "description" : "`levelOrder` defines where that level exists in the hierarchy of levels. `levelOrder`'s lower numbers \nare at the top of the hierarchy (ie field -> 1) and higher numbers are at the bottom of the hierarchy (ie plant -> 9). \n\nFor more information on Observation Levels, please review the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Observation_Levels\">Observation Levels documentation</a>. ",
                  "nullable" : true,
                  "example" : 2
                },
                "observationUnitDbId" : {
                  "type" : "string",
                  "description" : "The ID which uniquely identifies an observation unit\n<br/>If this level has on ObservationUnit associated with it, record the observationUnitDbId here. This is intended to construct a strict hierarchy of observationUnits. \n<br/>If there is no ObservationUnit associated with this level, this field can set to NULL or omitted from the response.",
                  "nullable" : true,
                  "example" : "5ab883e9"
                }
              },
              "description" : "Observation levels indicate the granularity level at which the measurements are taken. `levelName` \ndefines the level, `levelOrder` defines where that level exists in the hierarchy of levels. \n`levelOrder`s lower numbers are at the top of the hierarchy (ie field > 0) and higher numbers are \nat the bottom of the hierarchy (ie plant > 6). `levelCode` is an ID code for this level tag. Identify \nthis observation unit by each level of the hierarchy where it exists. \n\nFor more information on Observation Levels, please review the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Observation_Levels\">Observation Levels documentation</a>. \n\n**Standard Level Names: study, field, entry, rep, block, sub-block, plot, sub-plot, plant, pot, sample** "
            }
          },
          "positionCoordinateX" : {
            "type" : "string",
            "description" : "The X position coordinate for an observation unit. Different systems may use different coordinate systems.",
            "nullable" : true,
            "example" : "74"
          },
          "positionCoordinateXType" : {
            "type" : "string",
            "description" : "The type of positional coordinate used. Must be one of the following values \n\nLONGITUDE - ISO 6709 standard, WGS84 geodetic datum. See 'Location Coordinate Encoding' for details \n\nLATITUDE - ISO 6709 standard, WGS84 geodetic datum. See 'Location Coordinate Encoding' for details \n\nPLANTED_ROW - The physical planted row number \n\nPLANTED_INDIVIDUAL - The physical counted number, could be independant or within a planted row \n\nGRID_ROW - The row index number of a square grid overlay \n\nGRID_COL - The column index number of a square grid overlay \n\nMEASURED_ROW - The distance in meters from a defined 0-th row \n\nMEASURED_COL - The distance in meters from a defined 0-th column ",
            "nullable" : true,
            "example" : "GRID_COL",
            "enum" : [ "LONGITUDE", "LATITUDE", "PLANTED_ROW", "PLANTED_INDIVIDUAL", "GRID_ROW", "GRID_COL", "MEASURED_ROW", "MEASURED_COL" ]
          },
          "positionCoordinateY" : {
            "type" : "string",
            "description" : "The Y position coordinate for an observation unit. Different systems may use different coordinate systems.",
            "nullable" : true,
            "example" : "03"
          },
          "positionCoordinateYType" : {
            "type" : "string",
            "description" : "The type of positional coordinate used. Must be one of the following values \n\nLONGITUDE - ISO 6709 standard, WGS84 geodetic datum. See 'Location Coordinate Encoding' for details \n\nLATITUDE - ISO 6709 standard, WGS84 geodetic datum. See 'Location Coordinate Encoding' for details \n\nPLANTED_ROW - The physical planted row number  \n\nPLANTED_INDIVIDUAL - The physical counted number, could be independant or within a planted row \n\nGRID_ROW - The row index number of a square grid overlay \n\nGRID_COL - The column index number of a square grid overlay \n\nMEASURED_ROW - The distance in meters from a defined 0-th row \n\nMEASURED_COL - The distance in meters from a defined 0-th column ",
            "nullable" : true,
            "example" : "GRID_ROW",
            "enum" : [ "LONGITUDE", "LATITUDE", "PLANTED_ROW", "PLANTED_INDIVIDUAL", "GRID_ROW", "GRID_COL", "MEASURED_ROW", "MEASURED_COL" ]
          }
        },
        "description" : "All positional and layout information related to this Observation Unit \n\nMIAPPE V1.1 (DM-73) Spatial distribution - Type and value of a spatial coordinate (georeference or relative) \nor level of observation (plot 45, subblock 7, block 2) provided as a key-value pair of the form type:value. \nLevels of observation must be consistent with those listed in the Study section."
      },
      "ObservationUnitSearchRequest" : {
        "type" : "object",
        "properties" : {
          "commonCropNames" : {
            "type" : "array",
            "description" : "The BrAPI Common Crop Name is the simple, generalized, widely accepted name of the organism being researched. It is most often used in multi-crop systems where digital resources need to be divided at a high level. Things like 'Maize', 'Wheat', and 'Rice' are examples of common crop names.\n\nUse this parameter to only return results associated with the given crops. \n\nUse `GET /commoncropnames` to find the list of available crops on a server.",
            "example" : [ "Tomatillo", "Paw Paw" ],
            "items" : {
              "type" : "string"
            }
          },
          "externalReferenceIDs" : {
            "type" : "array",
            "description" : "**Deprecated in v2.1** Please use `externalReferenceIds`. Github issue number #460 \n<br>List of external reference IDs. Could be a simple strings or a URIs. (use with `externalReferenceSources` parameter)",
            "example" : [ "doi:10.155454/12341234", "14a19841" ],
            "deprecated" : true,
            "items" : {
              "type" : "string"
            }
          },
          "externalReferenceIds" : {
            "type" : "array",
            "description" : "List of external reference IDs. Could be a simple strings or a URIs. (use with `externalReferenceSources` parameter)",
            "example" : [ "doi:10.155454/12341234", "14a19841" ],
            "items" : {
              "type" : "string"
            }
          },
          "externalReferenceSources" : {
            "type" : "array",
            "description" : "List of identifiers for the source system or database of an external reference (use with `externalReferenceIDs` parameter)",
            "example" : [ "DOI", "Field App Name" ],
            "items" : {
              "type" : "string"
            }
          },
          "germplasmDbIds" : {
            "type" : "array",
            "description" : "List of IDs which uniquely identify germplasm to search for",
            "example" : [ "e9c6edd7", "1b1df4a6" ],
            "items" : {
              "type" : "string"
            }
          },
          "germplasmNames" : {
            "type" : "array",
            "description" : "List of human readable names to identify germplasm to search for",
            "example" : [ "A0000003", "A0000477" ],
            "items" : {
              "type" : "string"
            }
          },
          "includeObservations" : {
            "type" : "boolean",
            "description" : "Use this parameter to include a list of observations embedded in each ObservationUnit object. \n\nCAUTION - Use this parameter at your own risk. It may return large, unpaginated lists of observation data. Only set this value to True if you are sure you need to.",
            "nullable" : true,
            "example" : false
          },
          "locationDbIds" : {
            "type" : "array",
            "description" : "The location ids to search for",
            "example" : [ "b28911cf", "5071d1e4" ],
            "items" : {
              "type" : "string"
            }
          },
          "locationNames" : {
            "type" : "array",
            "description" : "A human readable names to search for",
            "example" : [ "Location Alpha", "The Large Hadron Collider" ],
            "items" : {
              "type" : "string"
            }
          },
          "observationLevelRelationships" : {
            "type" : "array",
            "description" : "Searches for values in ObservationUnit->observationUnitPosition->observationLevelRelationships",
            "nullable" : true,
            "example" : [ {
              "levelCode" : "Field_1",
              "levelName" : "field"
            } ],
            "items" : {
              "title" : "ObservationUnitLevelRelationship",
              "type" : "object",
              "properties" : {
                "levelCode" : {
                  "type" : "string",
                  "description" : "An ID code or number to represent a real thing that may or may not be an an observation unit.\n<br/>For example, if the 'levelName' is 'plot', then the 'levelCode' would be the plot number or plot barcode. If this plot is also considered an ObservationUnit, then the appropriate observationUnitDbId should also be recorded.\n<br/>If the 'levelName' is 'field', then the 'levelCode' might be something like '3' or 'F3' to indicate the third field at a research station. ",
                  "nullable" : true,
                  "example" : "Plot_123"
                },
                "levelName" : {
                  "type" : "string",
                  "description" : "A name for this level \n\n**Standard Level Names: study, field, entry, rep, block, sub-block, plot, sub-plot, plant, pot, sample** \n\nFor more information on Observation Levels, please review the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Observation_Levels\">Observation Levels documentation</a>. ",
                  "nullable" : true,
                  "example" : "plot"
                },
                "levelOrder" : {
                  "type" : "integer",
                  "description" : "`levelOrder` defines where that level exists in the hierarchy of levels. `levelOrder`'s lower numbers \nare at the top of the hierarchy (ie field -> 1) and higher numbers are at the bottom of the hierarchy (ie plant -> 9). \n\nFor more information on Observation Levels, please review the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Observation_Levels\">Observation Levels documentation</a>. ",
                  "nullable" : true,
                  "example" : 2
                },
                "observationUnitDbId" : {
                  "type" : "string",
                  "description" : "The ID which uniquely identifies an observation unit\n<br/>If this level has on ObservationUnit associated with it, record the observationUnitDbId here. This is intended to construct a strict hierarchy of observationUnits. \n<br/>If there is no ObservationUnit associated with this level, this field can set to NULL or omitted from the response.",
                  "nullable" : true,
                  "example" : "5ab883e9"
                }
              },
              "description" : "Observation levels indicate the granularity level at which the measurements are taken. `levelName` \ndefines the level, `levelOrder` defines where that level exists in the hierarchy of levels. \n`levelOrder`s lower numbers are at the top of the hierarchy (ie field > 0) and higher numbers are \nat the bottom of the hierarchy (ie plant > 6). `levelCode` is an ID code for this level tag. Identify \nthis observation unit by each level of the hierarchy where it exists. \n\nFor more information on Observation Levels, please review the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Observation_Levels\">Observation Levels documentation</a>. \n\n**Standard Level Names: study, field, entry, rep, block, sub-block, plot, sub-plot, plant, pot, sample** "
            }
          },
          "observationLevels" : {
            "type" : "array",
            "description" : "Searches for values in ObservationUnit->observationUnitPosition->observationLevel",
            "nullable" : true,
            "example" : [ {
              "levelCode" : "Plot_123",
              "levelName" : "plot"
            }, {
              "levelCode" : "Plot_456",
              "levelName" : "plot"
            }, {
              "levelCode" : "Plot_789",
              "levelName" : "plot"
            } ],
            "items" : {
              "title" : "ObservationUnitLevel",
              "type" : "object",
              "properties" : {
                "levelCode" : {
                  "type" : "string",
                  "description" : "An ID code or number to represent a real thing that may or may not be an an observation unit.\n<br/>For example, if the 'levelName' is 'plot', then the 'levelCode' would be the plot number or plot barcode. If this plot is also considered an ObservationUnit, then the appropriate observationUnitDbId should also be recorded.\n<br/>If the 'levelName' is 'field', then the 'levelCode' might be something like '3' or 'F3' to indicate the third field at a research station. ",
                  "nullable" : true,
                  "example" : "Plot_123"
                },
                "levelName" : {
                  "type" : "string",
                  "description" : "A name for this level \n\n**Standard Level Names: study, field, entry, rep, block, sub-block, plot, sub-plot, plant, pot, sample** \n\nFor more information on Observation Levels, please review the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Observation_Levels\">Observation Levels documentation</a>. ",
                  "nullable" : true,
                  "example" : "plot"
                },
                "levelOrder" : {
                  "type" : "integer",
                  "description" : "`levelOrder` defines where that level exists in the hierarchy of levels. `levelOrder`'s lower numbers \nare at the top of the hierarchy (ie field -> 1) and higher numbers are at the bottom of the hierarchy (ie plant -> 9). \n\nFor more information on Observation Levels, please review the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Observation_Levels\">Observation Levels documentation</a>. ",
                  "nullable" : true,
                  "example" : 2
                }
              },
              "description" : "Observation levels indicate the granularity level at which the measurements are taken. `levelName` \ndefines the level, `levelOrder` defines where that level exists in the hierarchy of levels. \n`levelOrder`s lower numbers are at the top of the hierarchy (ie field > 0) and higher numbers are \nat the bottom of the hierarchy (ie plant > 6). `levelCode` is an ID code for this level tag. Identify \nthis observation unit by each level of the hierarchy where it exists. \n\nFor more information on Observation Levels, please review the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Observation_Levels\">Observation Levels documentation</a>. \n\n**Standard Level Names: study, field, entry, rep, block, sub-block, plot, sub-plot, plant, pot, sample** "
            }
          },
          "observationUnitDbIds" : {
            "type" : "array",
            "description" : "The unique id of an observation unit",
            "nullable" : true,
            "example" : [ "66bab7e3", "0e5e7f99" ],
            "items" : {
              "type" : "string"
            }
          },
          "observationUnitNames" : {
            "type" : "array",
            "description" : "The human readable identifier for an Observation Unit",
            "nullable" : true,
            "example" : [ "FieldA_PlotB", "SpecialPlantName" ],
            "items" : {
              "type" : "string"
            }
          },
          "observationVariableDbIds" : {
            "type" : "array",
            "description" : "The DbIds of Variables to search for",
            "example" : [ "a646187d", "6d23513b" ],
            "items" : {
              "type" : "string"
            }
          },
          "observationVariableNames" : {
            "type" : "array",
            "description" : "The names of Variables to search for",
            "example" : [ "Plant Height in meters", "Wheat rust score 1-5" ],
            "items" : {
              "type" : "string"
            }
          },
          "observationVariablePUIs" : {
            "type" : "array",
            "description" : "The Permanent Unique Identifier of an Observation Variable, usually in the form of a URI",
            "example" : [ "http://my-traits.com/trait/CO_123:0008012", "http://my-traits.com/trait/CO_123:0007261" ],
            "items" : {
              "type" : "string"
            }
          },
          "page" : {
            "type" : "integer",
            "description" : "Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.",
            "example" : 0
          },
          "pageSize" : {
            "type" : "integer",
            "description" : "The size of the pages to be returned. Default is `1000`.",
            "example" : 1000
          },
          "programDbIds" : {
            "type" : "array",
            "description" : "A BrAPI Program represents the high level organization or group who is responsible for conducting trials and studies. Things like Breeding Programs and Funded Projects are considered BrAPI Programs. \n\nUse this parameter to only return results associated with the given programs. \n\nUse `GET /programs` to find the list of available programs on a server.",
            "example" : [ "8f5de35b", "0e2d4a13" ],
            "items" : {
              "type" : "string"
            }
          },
          "programNames" : {
            "type" : "array",
            "description" : "Use this parameter to only return results associated with the given program names. Program names are not required to be unique.\n\nUse `GET /programs` to find the list of available programs on a server.",
            "example" : [ "Better Breeding Program", "Best Breeding Program" ],
            "items" : {
              "type" : "string"
            }
          },
          "seasonDbIds" : {
            "type" : "array",
            "description" : "The year or Phenotyping campaign of a multi-annual study (trees, grape, ...)",
            "nullable" : true,
            "example" : [ "Spring 2018", "Season A" ],
            "items" : {
              "type" : "string"
            }
          },
          "studyDbIds" : {
            "type" : "array",
            "description" : "List of study identifiers to search for",
            "example" : [ "cf6c4bd4", "691e69d6" ],
            "items" : {
              "type" : "string"
            }
          },
          "studyNames" : {
            "type" : "array",
            "description" : "List of study names to filter search results",
            "example" : [ "The First Bob Study 2017", "Wheat Yield Trial 246" ],
            "items" : {
              "type" : "string"
            }
          },
          "trialDbIds" : {
            "type" : "array",
            "description" : "The ID which uniquely identifies a trial to search for",
            "example" : [ "d2593dc2", "9431a731" ],
            "items" : {
              "type" : "string"
            }
          },
          "trialNames" : {
            "type" : "array",
            "description" : "The human readable name of a trial to search for",
            "example" : [ "All Yield Trials 2016", "Disease Resistance Study Comparison Group" ],
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "ObservationUnitTable" : {
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "array",
            "description" : "The 2D matrix of observation data. ObservationVariables and other metadata are the columns, ObservationUnits are the rows.",
            "example" : [ [ "f3a8a3db", "Plant Alpha", "0fe3e48b", "2017 Plant Study", "06307ec0", "A0043001", "76.50106681", "42.44409301", "2017", "Field_1", "Plot_11", "SubPlot_111", "Plant_1111", "Pot_1111", "Block_11", "Entry_11", "Rep_11", "25.3", "3", "50.75" ], [ "05d1b011", "Plant Beta", "0fe3e48b", "2017 Plant Study", "59d435cd", "A0043002", "76.50106683", "42.44409301", "2017", "Field_1", "Plot_11", "SubPlot_112", "Plant_1122", "Pot_1122", "Block_11", "Entry_11", "Rep_12", "27.9", "1", "45.345" ], [ "67e2d87c", "Plant Gamma", "0fe3e48b", "2017 Plant Study", "06307ec0", "A0043001", "76.50106681", "42.44409356", "2017", "Field_1", "Plot_12", "SubPlot_123", "Plant_1233", "Pot_1233", "Block_12", "Entry_12", "Rep_11", "25.5", "3", "50.76" ], [ "d98d0d4c", "Plant Epsilon", "0fe3e48b", "2017 Plant Study", "59d435cd", "A0043002", "76.50106683", "42.44409356", "2017", "Field_1", "Plot_12", "SubPlot_124", "Plant_1244", "Pot_1244", "Block_12", "Entry_12", "Rep_12", "28.9", "0", "46.5" ] ],
            "items" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          },
          "headerRow" : {
            "type" : "array",
            "description" : "<p>The table is REQUIRED to have the following columns</p>\n<ul>\n  <li>observationUnitDbId - Each row is related to one Observation Unit</li>\n  <li>At least one column with an observationVariableDbId</li>\n</ul>\n<p>The table may have any or all of the following OPTIONAL columns. Included columns are decided by the server developer</p>\n<ul>\n  <li>observationUnitName</li>\n  <li>studyDbId</li>\n  <li>studyName</li>\n  <li>germplasmDbId</li>\n  <li>germplasmName</li>\n  <li>positionCoordinateX</li>\n  <li>positionCoordinateY</li>\n  <li>year</li>\n</ul>\n<p>The table also may have any number of Observation Unit Hierarchy Level columns. For example:</p>\n<ul>\n  <li>field</li>\n  <li>plot</li>\n  <li>sub-plot</li>\n  <li>plant</li>\n  <li>pot</li>\n  <li>block</li>\n  <li>entry</li>\n  <li>rep</li>\n</ul>\n<p>The JSON representation provides a pair of extra arrays for defining the headers of the table. \nThe first array \"headerRow\" will always contain \"observationUnitDbId\" and any or all of the OPTIONAL column header names. \nThe second array \"observationVariables\" contains the names and DbIds for the Observation Variables represented in the table. \nBy appending the two arrays, you can construct the complete header row of the table. </p>",
            "example" : [ "observationUnitDbId", "observationUnitName", "studyDbId", "studyName", "germplasmDbId", "germplasmName", "positionCoordinateX", "positionCoordinateY", "year", "field", "plot", "sub-plot", "plant", "pot", "block", "entry", "rep" ],
            "items" : {
              "type" : "string",
              "description" : "valid header fields",
              "enum" : [ "observationUnitDbId", "observationUnitName", "studyDbId", "studyName", "germplasmDbId", "germplasmName", "positionCoordinateX", "positionCoordinateY", "year", "field", "plot", "sub-plot", "plant", "pot", "block", "entry", "rep" ]
            }
          },
          "observationVariables" : {
            "type" : "array",
            "description" : "The list of observation variables which have values recorded for them in the data matrix. Append to the 'headerRow' for complete header row of the table.",
            "example" : [ {
              "observationVariableDbId" : "367aa1a9",
              "observationVariableName" : "Plant height"
            }, {
              "observationVariableDbId" : "2acb934c",
              "observationVariableName" : "Carotenoid"
            }, {
              "observationVariableDbId" : "85a21ce1",
              "observationVariableName" : "Root color"
            }, {
              "observationVariableDbId" : "46f590e5",
              "observationVariableName" : "Virus severity"
            } ],
            "items" : {
              "type" : "object",
              "properties" : {
                "observationVariableDbId" : {
                  "type" : "string",
                  "description" : "Variable unique identifier",
                  "example" : "367aa1a9"
                },
                "observationVariableName" : {
                  "type" : "string",
                  "description" : "Variable name (usually a short name)",
                  "example" : "Plant height"
                }
              }
            }
          }
        }
      },
      "ObservationVariable" : {
        "required" : [ "method", "observationVariableDbId", "observationVariableName", "scale", "trait" ],
        "type" : "object",
        "properties" : {
          "additionalInfo" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.",
            "nullable" : true
          },
          "commonCropName" : {
            "type" : "string",
            "description" : "Crop name (examples: \"Maize\", \"Wheat\")",
            "nullable" : true,
            "example" : "Maize"
          },
          "contextOfUse" : {
            "type" : "array",
            "description" : "Indication of how trait is routinely used. (examples: [\"Trial evaluation\", \"Nursery evaluation\"])",
            "nullable" : true,
            "example" : [ "Trial evaluation", "Nursery evaluation" ],
            "items" : {
              "type" : "string"
            }
          },
          "defaultValue" : {
            "type" : "string",
            "description" : "Variable default value. (examples: \"red\", \"2.3\", etc.)",
            "nullable" : true,
            "example" : "2.0"
          },
          "documentationURL" : {
            "type" : "string",
            "description" : "A URL to the human readable documentation of an object",
            "format" : "uri",
            "nullable" : true,
            "example" : "https://wiki.brapi.org/documentation.html"
          },
          "externalReferences" : {
            "title" : "ExternalReferences",
            "type" : "array",
            "description" : "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.",
            "nullable" : true,
            "example" : [ {
              "referenceId" : "doi:10.155454/12341234",
              "referenceSource" : "DOI"
            }, {
              "referenceId" : "75a50e76",
              "referenceSource" : "Remote Data Collection Upload Tool"
            } ],
            "items" : {
              "type" : "object",
              "properties" : {
                "referenceID" : {
                  "type" : "string",
                  "description" : "**Deprecated in v2.1** Please use `referenceId`. Github issue number #460 \n<br>The external reference ID. Could be a simple string or a URI.",
                  "nullable" : true,
                  "deprecated" : true
                },
                "referenceId" : {
                  "type" : "string",
                  "description" : "The external reference ID. Could be a simple string or a URI."
                },
                "referenceSource" : {
                  "type" : "string",
                  "description" : "An identifier for the source system or database of this reference"
                }
              }
            }
          },
          "growthStage" : {
            "type" : "string",
            "description" : "Growth stage at which measurement is made (examples: \"flowering\")",
            "nullable" : true,
            "example" : "flowering"
          },
          "institution" : {
            "type" : "string",
            "description" : "Name of institution submitting the variable",
            "nullable" : true,
            "example" : "The BrAPI Institute"
          },
          "language" : {
            "type" : "string",
            "description" : "2 letter ISO 639-1 code for the language of submission of the variable.",
            "nullable" : true,
            "example" : "en"
          },
          "method" : {
            "required" : [ "methodName" ],
            "type" : "object",
            "properties" : {
              "additionalInfo" : {
                "type" : "object",
                "additionalProperties" : {
                  "type" : "string"
                },
                "description" : "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.",
                "nullable" : true
              },
              "bibliographicalReference" : {
                "type" : "string",
                "description" : "Bibliographical reference describing the method.\n<br/>MIAPPE V1.1 (DM-91) Reference associated to the method - URI/DOI of reference describing the method.",
                "nullable" : true,
                "example" : "Smith, 1893, Really Cool Paper, Popular Journal"
              },
              "description" : {
                "type" : "string",
                "description" : "Method description\n<br/>MIAPPE V1.1 (DM-90) Method description - Textual description of the method, which may extend a method defined in an external reference with specific parameters, e.g. growth stage, inoculation precise organ (leaf number)",
                "nullable" : true,
                "example" : "A measuring tape was used"
              },
              "externalReferences" : {
                "title" : "ExternalReferences",
                "type" : "array",
                "description" : "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.",
                "nullable" : true,
                "example" : [ {
                  "referenceId" : "doi:10.155454/12341234",
                  "referenceSource" : "DOI"
                }, {
                  "referenceId" : "75a50e76",
                  "referenceSource" : "Remote Data Collection Upload Tool"
                } ],
                "items" : {
                  "type" : "object",
                  "properties" : {
                    "referenceID" : {
                      "type" : "string",
                      "description" : "**Deprecated in v2.1** Please use `referenceId`. Github issue number #460 \n<br>The external reference ID. Could be a simple string or a URI.",
                      "nullable" : true,
                      "deprecated" : true
                    },
                    "referenceId" : {
                      "type" : "string",
                      "description" : "The external reference ID. Could be a simple string or a URI."
                    },
                    "referenceSource" : {
                      "type" : "string",
                      "description" : "An identifier for the source system or database of this reference"
                    }
                  }
                }
              },
              "formula" : {
                "type" : "string",
                "description" : "For computational methods i.e., when the method consists in assessing the trait by computing measurements, write the generic formula used for the calculation",
                "nullable" : true,
                "example" : "a^2 + b^2 = c^2"
              },
              "methodClass" : {
                "type" : "string",
                "description" : "Method class (examples: \"Measurement\", \"Counting\", \"Estimation\", \"Computation\", etc.)",
                "nullable" : true,
                "example" : "Measurement"
              },
              "methodDbId" : {
                "type" : "string",
                "description" : "Method unique identifier",
                "example" : "0adb2764"
              },
              "methodName" : {
                "type" : "string",
                "description" : "Human readable name for the method\n<br/>MIAPPE V1.1 (DM-88) Method  Name of the method of observation",
                "example" : "Measuring Tape"
              },
              "methodPUI" : {
                "type" : "string",
                "description" : "The Permanent Unique Identifier of a Method, usually in the form of a URI",
                "nullable" : true,
                "example" : "http://my-traits.com/trait/CO_123:0000212"
              },
              "ontologyReference" : {
                "required" : [ "ontologyDbId", "ontologyName" ],
                "type" : "object",
                "properties" : {
                  "documentationLinks" : {
                    "type" : "array",
                    "description" : "links to various ontology documentation",
                    "nullable" : true,
                    "items" : {
                      "type" : "object",
                      "properties" : {
                        "URL" : {
                          "type" : "string",
                          "format" : "uri",
                          "example" : "http://purl.obolibrary.org/obo/ro.owl"
                        },
                        "type" : {
                          "type" : "string",
                          "example" : "OBO",
                          "enum" : [ "OBO", "RDF", "WEBPAGE" ]
                        }
                      }
                    }
                  },
                  "ontologyDbId" : {
                    "type" : "string",
                    "description" : "Ontology database unique identifier",
                    "example" : "6b071868"
                  },
                  "ontologyName" : {
                    "type" : "string",
                    "description" : "Ontology name",
                    "example" : "The Crop Ontology"
                  },
                  "version" : {
                    "type" : "string",
                    "description" : "Ontology version (no specific format)",
                    "nullable" : true,
                    "example" : "7.2.3"
                  }
                },
                "description" : "MIAPPE V1.1\n\n(DM-85) Variable accession number - Accession number of the variable in the Crop Ontology\n\n(DM-87) Trait accession number - Accession number of the trait in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).\n\n(DM-89) Method accession number - Accession number of the method in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).\n\n(DM-93) Scale accession number - Accession number of the scale in a suitable controlled vocabulary (Crop Ontology)."
              }
            },
            "description" : "A description of the way an Observation should be collected. \n<br>For example, an ObservationVariable might be defined with a Trait of \"plant height\", a Scale of \"meters\", and a Method of \"tape measure\". This variable would be distinct from a variable with the Method \"estimation\" or \"drone image processing\". "
          },
          "observationVariableDbId" : {
            "type" : "string",
            "description" : "Variable unique identifier\n\nMIAPPE V1.1 (DM-83) Variable ID - Code used to identify the variable in the data file. We recommend using a variable definition from the Crop Ontology where possible. Otherwise, the Crop Ontology naming convention is recommended: <trait abbreviation>_<method abbreviation>_<scale abbreviation>). A variable ID must be unique within a given investigation.",
            "example" : "b9b7edd1"
          },
          "observationVariableName" : {
            "type" : "string",
            "description" : "Variable name (usually a short name)\n\nMIAPPE V1.1 (DM-84) Variable name - Name of the variable.",
            "example" : "Variable Name"
          },
          "observationVariablePUI" : {
            "type" : "string",
            "description" : "The Permanent Unique Identifier of a Observation Variable, usually in the form of a URI",
            "nullable" : true,
            "example" : "http://my-traits.com/trait/CO_123:0009012"
          },
          "ontologyReference" : {
            "required" : [ "ontologyDbId", "ontologyName" ],
            "type" : "object",
            "properties" : {
              "documentationLinks" : {
                "type" : "array",
                "description" : "links to various ontology documentation",
                "nullable" : true,
                "items" : {
                  "type" : "object",
                  "properties" : {
                    "URL" : {
                      "type" : "string",
                      "format" : "uri",
                      "example" : "http://purl.obolibrary.org/obo/ro.owl"
                    },
                    "type" : {
                      "type" : "string",
                      "example" : "OBO",
                      "enum" : [ "OBO", "RDF", "WEBPAGE" ]
                    }
                  }
                }
              },
              "ontologyDbId" : {
                "type" : "string",
                "description" : "Ontology database unique identifier",
                "example" : "6b071868"
              },
              "ontologyName" : {
                "type" : "string",
                "description" : "Ontology name",
                "example" : "The Crop Ontology"
              },
              "version" : {
                "type" : "string",
                "description" : "Ontology version (no specific format)",
                "nullable" : true,
                "example" : "7.2.3"
              }
            },
            "description" : "MIAPPE V1.1\n\n(DM-85) Variable accession number - Accession number of the variable in the Crop Ontology\n\n(DM-87) Trait accession number - Accession number of the trait in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).\n\n(DM-89) Method accession number - Accession number of the method in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).\n\n(DM-93) Scale accession number - Accession number of the scale in a suitable controlled vocabulary (Crop Ontology).",
            "nullable" : true
          },
          "scale" : {
            "required" : [ "scaleDbId", "scaleName" ],
            "type" : "object",
            "properties" : {
              "additionalInfo" : {
                "type" : "object",
                "additionalProperties" : {
                  "type" : "string"
                },
                "description" : "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.",
                "nullable" : true
              },
              "dataType" : {
                "type" : "string",
                "description" : "<p>Class of the scale, entries can be</p>\n<p>\"Code\" -  This scale class is exceptionally used to express complex traits. Code is a nominal scale that combines the expressions of the different traits composing the complex trait. For example a severity trait might be expressed by a 2 digit and 2 character code. The first 2 digits are the percentage of the plant covered by a fungus and the 2 characters refer to the delay in development, e.g. \"75VD\" means \"75 %\" of the plant is infected and the plant is very delayed.</p>\n<p>\"Date\" - The date class is for events expressed in a time format, See ISO 8601</p>\n<p>\"Duration\" - The Duration class is for time elapsed between two events expressed in a time format, e.g. days, hours, months</p>\n<p>\"Nominal\" - Categorical scale that can take one of a limited and fixed number of categories. There is no intrinsic ordering to the categories</p>\n<p>\"Numerical\" - Numerical scales express the trait with real numbers. The numerical scale defines the unit e.g. centimeter, ton per hectare, branches</p>\n<p>\"Ordinal\" - Ordinal scales are scales composed of ordered categories</p>\n<p>\"Text\" - A free text is used to express the trait.</p>",
                "nullable" : true,
                "example" : "Numerical",
                "enum" : [ "Code", "Date", "Duration", "Nominal", "Numerical", "Ordinal", "Text" ]
              },
              "decimalPlaces" : {
                "type" : "integer",
                "description" : "For numerical, number of decimal places to be reported",
                "nullable" : true,
                "example" : 2
              },
              "externalReferences" : {
                "title" : "ExternalReferences",
                "type" : "array",
                "description" : "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.",
                "nullable" : true,
                "example" : [ {
                  "referenceId" : "doi:10.155454/12341234",
                  "referenceSource" : "DOI"
                }, {
                  "referenceId" : "75a50e76",
                  "referenceSource" : "Remote Data Collection Upload Tool"
                } ],
                "items" : {
                  "type" : "object",
                  "properties" : {
                    "referenceID" : {
                      "type" : "string",
                      "description" : "**Deprecated in v2.1** Please use `referenceId`. Github issue number #460 \n<br>The external reference ID. Could be a simple string or a URI.",
                      "nullable" : true,
                      "deprecated" : true
                    },
                    "referenceId" : {
                      "type" : "string",
                      "description" : "The external reference ID. Could be a simple string or a URI."
                    },
                    "referenceSource" : {
                      "type" : "string",
                      "description" : "An identifier for the source system or database of this reference"
                    }
                  }
                }
              },
              "ontologyReference" : {
                "required" : [ "ontologyDbId", "ontologyName" ],
                "type" : "object",
                "properties" : {
                  "documentationLinks" : {
                    "type" : "array",
                    "description" : "links to various ontology documentation",
                    "nullable" : true,
                    "items" : {
                      "type" : "object",
                      "properties" : {
                        "URL" : {
                          "type" : "string",
                          "format" : "uri",
                          "example" : "http://purl.obolibrary.org/obo/ro.owl"
                        },
                        "type" : {
                          "type" : "string",
                          "example" : "OBO",
                          "enum" : [ "OBO", "RDF", "WEBPAGE" ]
                        }
                      }
                    }
                  },
                  "ontologyDbId" : {
                    "type" : "string",
                    "description" : "Ontology database unique identifier",
                    "example" : "6b071868"
                  },
                  "ontologyName" : {
                    "type" : "string",
                    "description" : "Ontology name",
                    "example" : "The Crop Ontology"
                  },
                  "version" : {
                    "type" : "string",
                    "description" : "Ontology version (no specific format)",
                    "nullable" : true,
                    "example" : "7.2.3"
                  }
                },
                "description" : "MIAPPE V1.1\n\n(DM-85) Variable accession number - Accession number of the variable in the Crop Ontology\n\n(DM-87) Trait accession number - Accession number of the trait in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).\n\n(DM-89) Method accession number - Accession number of the method in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).\n\n(DM-93) Scale accession number - Accession number of the scale in a suitable controlled vocabulary (Crop Ontology)."
              },
              "scaleDbId" : {
                "type" : "string",
                "description" : "Unique identifier of the scale. If left blank, the upload system will automatically generate a scale ID.",
                "example" : "af730171"
              },
              "scaleName" : {
                "type" : "string",
                "description" : "Name of the scale\n<br/>MIAPPE V1.1 (DM-92) Scale Name of the scale associated with the variable",
                "nullable" : true,
                "example" : "Meters"
              },
              "scalePUI" : {
                "type" : "string",
                "description" : "The Permanent Unique Identifier of a Scale, usually in the form of a URI",
                "nullable" : true,
                "example" : "http://my-traits.com/trait/CO_123:0000112"
              },
              "units" : {
                "type" : "string",
                "description" : "This field can be used to describe the units used for this scale. This should be the abbreviated \nform of the units, intended to be displayed with every value using this scale. Usually this only \napplies when `dataType` is Numeric, but could also be included for other dataTypes when applicable.",
                "nullable" : true,
                "example" : "m"
              },
              "validValues" : {
                "type" : "object",
                "properties" : {
                  "categories" : {
                    "type" : "array",
                    "description" : "List of possible values with optional labels",
                    "example" : [ {
                      "label" : "low",
                      "value" : "0"
                    }, {
                      "label" : "medium",
                      "value" : "5"
                    }, {
                      "label" : "high",
                      "value" : "10"
                    } ],
                    "items" : {
                      "type" : "object",
                      "properties" : {
                        "label" : {
                          "type" : "string",
                          "description" : "A text label for a category"
                        },
                        "value" : {
                          "type" : "string",
                          "description" : "The actual value for a category"
                        }
                      }
                    }
                  },
                  "max" : {
                    "type" : "integer",
                    "description" : "**Deprecated in v2.1** Please use `maximumValue`. Github issue number #450 \n<br>Maximum value for numerical scales. Typically used for data capture control and QC.",
                    "nullable" : true,
                    "example" : 9999,
                    "deprecated" : true
                  },
                  "maximumValue" : {
                    "type" : "string",
                    "description" : "Maximum value for numerical, date, and time scales. Typically used for data capture control and QC.",
                    "nullable" : true,
                    "example" : "9999"
                  },
                  "min" : {
                    "type" : "integer",
                    "description" : "**Deprecated in v2.1** Please use `minimumValue`. Github issue number #450 \n<br>Minimum value for numerical scales. Typically used for data capture control and QC.",
                    "nullable" : true,
                    "example" : 2,
                    "deprecated" : true
                  },
                  "minimumValue" : {
                    "type" : "string",
                    "description" : "Minimum value for numerical, date, and time scales. Typically used for data capture control and QC.",
                    "nullable" : true,
                    "example" : "2"
                  }
                },
                "nullable" : true
              }
            },
            "description" : "A Scale describes the units and acceptable values for an ObservationVariable. \n<br>For example, an ObservationVariable might be defined with a Trait of \"plant height\", a Scale of \"meters\", and a Method of \"tape measure\". This variable would be distinct from a variable with the Scale \"inches\" or \"pixels\"."
          },
          "scientist" : {
            "type" : "string",
            "description" : "Name of scientist submitting the variable.",
            "nullable" : true,
            "example" : "Dr. Bob Robertson"
          },
          "status" : {
            "type" : "string",
            "description" : "Variable status. (examples: \"recommended\", \"obsolete\", \"legacy\", etc.)",
            "nullable" : true,
            "example" : "recommended"
          },
          "submissionTimestamp" : {
            "type" : "string",
            "description" : "Timestamp when the Variable was added (ISO 8601)",
            "format" : "date-time",
            "nullable" : true
          },
          "synonyms" : {
            "type" : "array",
            "description" : "Other variable names",
            "nullable" : true,
            "example" : [ "Maize Height", "Stalk Height", "Corn Height" ],
            "items" : {
              "type" : "string"
            }
          },
          "trait" : {
            "required" : [ "traitName" ],
            "type" : "object",
            "properties" : {
              "additionalInfo" : {
                "type" : "object",
                "additionalProperties" : {
                  "type" : "string"
                },
                "description" : "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.",
                "nullable" : true
              },
              "alternativeAbbreviations" : {
                "type" : "array",
                "description" : "A list of shortened, human readable, names for a Trait. These abbreviations are acceptable alternatives to the mainAbbreviation and do not need to follow any formatting convention.",
                "nullable" : true,
                "example" : [ "H", "PH", "H1" ],
                "items" : {
                  "type" : "string"
                }
              },
              "attribute" : {
                "type" : "string",
                "description" : "A trait can be decomposed as \"Trait\" = \"Entity\" + \"Attribute\", the attribute is the observed feature (or characteristic) of the entity e.g., for \"grain colour\", attribute = \"colour\"",
                "nullable" : true,
                "example" : "height"
              },
              "attributePUI" : {
                "type" : "string",
                "description" : "The Permanent Unique Identifier of a Trait Attribute, usually in the form of a URI\n<br/>A trait can be decomposed as \"Trait\" = \"Entity\" + \"Attribute\", the attribute is the observed feature (or characteristic) of the entity e.g., for \"grain colour\", attribute = \"colour\"",
                "nullable" : true,
                "example" : "http://my-traits.com/trait/PO:00012345"
              },
              "entity" : {
                "type" : "string",
                "description" : "A trait can be decomposed as \"Trait\" = \"Entity\" + \"Attribute\", the entity is the part of the plant that the trait refers to e.g., for \"grain colour\", entity = \"grain\"",
                "nullable" : true,
                "example" : "Stalk"
              },
              "entityPUI" : {
                "type" : "string",
                "description" : "The Permanent Unique Identifier of a Trait Entity, usually in the form of a URI\n<br/>A Trait can be decomposed as \"Trait\" = \"Entity\" + \"Attribute\", the Entity is the part of the plant that the trait refers to e.g., for \"grain colour\", entity = \"grain\" ",
                "nullable" : true,
                "example" : "http://my-traits.com/trait/PATO:00098765"
              },
              "externalReferences" : {
                "title" : "ExternalReferences",
                "type" : "array",
                "description" : "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.",
                "nullable" : true,
                "example" : [ {
                  "referenceId" : "doi:10.155454/12341234",
                  "referenceSource" : "DOI"
                }, {
                  "referenceId" : "75a50e76",
                  "referenceSource" : "Remote Data Collection Upload Tool"
                } ],
                "items" : {
                  "type" : "object",
                  "properties" : {
                    "referenceID" : {
                      "type" : "string",
                      "description" : "**Deprecated in v2.1** Please use `referenceId`. Github issue number #460 \n<br>The external reference ID. Could be a simple string or a URI.",
                      "nullable" : true,
                      "deprecated" : true
                    },
                    "referenceId" : {
                      "type" : "string",
                      "description" : "The external reference ID. Could be a simple string or a URI."
                    },
                    "referenceSource" : {
                      "type" : "string",
                      "description" : "An identifier for the source system or database of this reference"
                    }
                  }
                }
              },
              "mainAbbreviation" : {
                "type" : "string",
                "description" : "A shortened version of the human readable name for a Trait",
                "nullable" : true,
                "example" : "PH"
              },
              "ontologyReference" : {
                "required" : [ "ontologyDbId", "ontologyName" ],
                "type" : "object",
                "properties" : {
                  "documentationLinks" : {
                    "type" : "array",
                    "description" : "links to various ontology documentation",
                    "nullable" : true,
                    "items" : {
                      "type" : "object",
                      "properties" : {
                        "URL" : {
                          "type" : "string",
                          "format" : "uri",
                          "example" : "http://purl.obolibrary.org/obo/ro.owl"
                        },
                        "type" : {
                          "type" : "string",
                          "example" : "OBO",
                          "enum" : [ "OBO", "RDF", "WEBPAGE" ]
                        }
                      }
                    }
                  },
                  "ontologyDbId" : {
                    "type" : "string",
                    "description" : "Ontology database unique identifier",
                    "example" : "6b071868"
                  },
                  "ontologyName" : {
                    "type" : "string",
                    "description" : "Ontology name",
                    "example" : "The Crop Ontology"
                  },
                  "version" : {
                    "type" : "string",
                    "description" : "Ontology version (no specific format)",
                    "nullable" : true,
                    "example" : "7.2.3"
                  }
                },
                "description" : "MIAPPE V1.1\n\n(DM-85) Variable accession number - Accession number of the variable in the Crop Ontology\n\n(DM-87) Trait accession number - Accession number of the trait in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).\n\n(DM-89) Method accession number - Accession number of the method in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).\n\n(DM-93) Scale accession number - Accession number of the scale in a suitable controlled vocabulary (Crop Ontology)."
              },
              "status" : {
                "type" : "string",
                "description" : "Trait status (examples: \"recommended\", \"obsolete\", \"legacy\", etc.)",
                "nullable" : true,
                "example" : "recommended"
              },
              "synonyms" : {
                "type" : "array",
                "description" : "Other trait names",
                "nullable" : true,
                "example" : [ "Height", "Plant Height", "Stalk Height", "Canopy Height" ],
                "items" : {
                  "type" : "string"
                }
              },
              "traitClass" : {
                "type" : "string",
                "description" : "A classification to describe the type of trait and the context it should be considered in.\n<br/> examples- \"morphological\", \"phenological\", \"agronomical\", \"physiological\", \"abiotic stress\", \"biotic stress\", \"biochemical\", \"quality traits\", \"fertility\", etc.",
                "nullable" : true,
                "example" : "phenological"
              },
              "traitDbId" : {
                "type" : "string",
                "description" : "The ID which uniquely identifies a trait",
                "example" : "9b2e34f5"
              },
              "traitDescription" : {
                "type" : "string",
                "description" : "The description of a trait",
                "nullable" : true,
                "example" : "The height of the plant"
              },
              "traitName" : {
                "type" : "string",
                "description" : "The human readable name of a trait\n<br/>MIAPPE V1.1 (DM-86) Trait - Name of the (plant or environmental) trait under observation",
                "example" : "Height"
              },
              "traitPUI" : {
                "type" : "string",
                "description" : "The Permanent Unique Identifier of a Trait, usually in the form of a URI",
                "nullable" : true,
                "example" : "http://my-traits.com/trait/CO_123:0000012"
              }
            },
            "description" : "A Trait describes what property is being observed. \n<br>For example, an ObservationVariable might be defined with a Trait of \"plant height\", a Scale of \"meters\", and a Method of \"tape measure\". This variable would be distinct from a variable with the Trait \"Leaf length\" or \"Flower height\". "
          }
        },
        "x-brapi-metadata" : {
          "description" : "A unique combination of Trait, Method, and Scale to define a clear context for an Observation.",
          "module" : "BrAPI-Phenotyping",
          "primaryModel" : true,
          "title" : "ObservationVariable"
        }
      },
      "ObservationVariableNewRequest" : {
        "required" : [ "method", "observationVariableName", "scale", "trait" ],
        "type" : "object",
        "properties" : {
          "additionalInfo" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.",
            "nullable" : true
          },
          "commonCropName" : {
            "type" : "string",
            "description" : "Crop name (examples: \"Maize\", \"Wheat\")",
            "nullable" : true,
            "example" : "Maize"
          },
          "contextOfUse" : {
            "type" : "array",
            "description" : "Indication of how trait is routinely used. (examples: [\"Trial evaluation\", \"Nursery evaluation\"])",
            "nullable" : true,
            "example" : [ "Trial evaluation", "Nursery evaluation" ],
            "items" : {
              "type" : "string"
            }
          },
          "defaultValue" : {
            "type" : "string",
            "description" : "Variable default value. (examples: \"red\", \"2.3\", etc.)",
            "nullable" : true,
            "example" : "2.0"
          },
          "documentationURL" : {
            "type" : "string",
            "description" : "A URL to the human readable documentation of an object",
            "format" : "uri",
            "nullable" : true,
            "example" : "https://wiki.brapi.org/documentation.html"
          },
          "externalReferences" : {
            "title" : "ExternalReferences",
            "type" : "array",
            "description" : "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.",
            "nullable" : true,
            "example" : [ {
              "referenceId" : "doi:10.155454/12341234",
              "referenceSource" : "DOI"
            }, {
              "referenceId" : "75a50e76",
              "referenceSource" : "Remote Data Collection Upload Tool"
            } ],
            "items" : {
              "type" : "object",
              "properties" : {
                "referenceID" : {
                  "type" : "string",
                  "description" : "**Deprecated in v2.1** Please use `referenceId`. Github issue number #460 \n<br>The external reference ID. Could be a simple string or a URI.",
                  "nullable" : true,
                  "deprecated" : true
                },
                "referenceId" : {
                  "type" : "string",
                  "description" : "The external reference ID. Could be a simple string or a URI."
                },
                "referenceSource" : {
                  "type" : "string",
                  "description" : "An identifier for the source system or database of this reference"
                }
              }
            }
          },
          "growthStage" : {
            "type" : "string",
            "description" : "Growth stage at which measurement is made (examples: \"flowering\")",
            "nullable" : true,
            "example" : "flowering"
          },
          "institution" : {
            "type" : "string",
            "description" : "Name of institution submitting the variable",
            "nullable" : true,
            "example" : "The BrAPI Institute"
          },
          "language" : {
            "type" : "string",
            "description" : "2 letter ISO 639-1 code for the language of submission of the variable.",
            "nullable" : true,
            "example" : "en"
          },
          "method" : {
            "required" : [ "methodName" ],
            "type" : "object",
            "properties" : {
              "additionalInfo" : {
                "type" : "object",
                "additionalProperties" : {
                  "type" : "string"
                },
                "description" : "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.",
                "nullable" : true
              },
              "bibliographicalReference" : {
                "type" : "string",
                "description" : "Bibliographical reference describing the method.\n<br/>MIAPPE V1.1 (DM-91) Reference associated to the method - URI/DOI of reference describing the method.",
                "nullable" : true,
                "example" : "Smith, 1893, Really Cool Paper, Popular Journal"
              },
              "description" : {
                "type" : "string",
                "description" : "Method description\n<br/>MIAPPE V1.1 (DM-90) Method description - Textual description of the method, which may extend a method defined in an external reference with specific parameters, e.g. growth stage, inoculation precise organ (leaf number)",
                "nullable" : true,
                "example" : "A measuring tape was used"
              },
              "externalReferences" : {
                "title" : "ExternalReferences",
                "type" : "array",
                "description" : "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.",
                "nullable" : true,
                "example" : [ {
                  "referenceId" : "doi:10.155454/12341234",
                  "referenceSource" : "DOI"
                }, {
                  "referenceId" : "75a50e76",
                  "referenceSource" : "Remote Data Collection Upload Tool"
                } ],
                "items" : {
                  "type" : "object",
                  "properties" : {
                    "referenceID" : {
                      "type" : "string",
                      "description" : "**Deprecated in v2.1** Please use `referenceId`. Github issue number #460 \n<br>The external reference ID. Could be a simple string or a URI.",
                      "nullable" : true,
                      "deprecated" : true
                    },
                    "referenceId" : {
                      "type" : "string",
                      "description" : "The external reference ID. Could be a simple string or a URI."
                    },
                    "referenceSource" : {
                      "type" : "string",
                      "description" : "An identifier for the source system or database of this reference"
                    }
                  }
                }
              },
              "formula" : {
                "type" : "string",
                "description" : "For computational methods i.e., when the method consists in assessing the trait by computing measurements, write the generic formula used for the calculation",
                "nullable" : true,
                "example" : "a^2 + b^2 = c^2"
              },
              "methodClass" : {
                "type" : "string",
                "description" : "Method class (examples: \"Measurement\", \"Counting\", \"Estimation\", \"Computation\", etc.)",
                "nullable" : true,
                "example" : "Measurement"
              },
              "methodDbId" : {
                "type" : "string",
                "description" : "Method unique identifier",
                "example" : "0adb2764"
              },
              "methodName" : {
                "type" : "string",
                "description" : "Human readable name for the method\n<br/>MIAPPE V1.1 (DM-88) Method  Name of the method of observation",
                "example" : "Measuring Tape"
              },
              "methodPUI" : {
                "type" : "string",
                "description" : "The Permanent Unique Identifier of a Method, usually in the form of a URI",
                "nullable" : true,
                "example" : "http://my-traits.com/trait/CO_123:0000212"
              },
              "ontologyReference" : {
                "required" : [ "ontologyDbId", "ontologyName" ],
                "type" : "object",
                "properties" : {
                  "documentationLinks" : {
                    "type" : "array",
                    "description" : "links to various ontology documentation",
                    "nullable" : true,
                    "items" : {
                      "type" : "object",
                      "properties" : {
                        "URL" : {
                          "type" : "string",
                          "format" : "uri",
                          "example" : "http://purl.obolibrary.org/obo/ro.owl"
                        },
                        "type" : {
                          "type" : "string",
                          "example" : "OBO",
                          "enum" : [ "OBO", "RDF", "WEBPAGE" ]
                        }
                      }
                    }
                  },
                  "ontologyDbId" : {
                    "type" : "string",
                    "description" : "Ontology database unique identifier",
                    "example" : "6b071868"
                  },
                  "ontologyName" : {
                    "type" : "string",
                    "description" : "Ontology name",
                    "example" : "The Crop Ontology"
                  },
                  "version" : {
                    "type" : "string",
                    "description" : "Ontology version (no specific format)",
                    "nullable" : true,
                    "example" : "7.2.3"
                  }
                },
                "description" : "MIAPPE V1.1\n\n(DM-85) Variable accession number - Accession number of the variable in the Crop Ontology\n\n(DM-87) Trait accession number - Accession number of the trait in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).\n\n(DM-89) Method accession number - Accession number of the method in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).\n\n(DM-93) Scale accession number - Accession number of the scale in a suitable controlled vocabulary (Crop Ontology)."
              }
            },
            "description" : "A description of the way an Observation should be collected. \n<br>For example, an ObservationVariable might be defined with a Trait of \"plant height\", a Scale of \"meters\", and a Method of \"tape measure\". This variable would be distinct from a variable with the Method \"estimation\" or \"drone image processing\". "
          },
          "observationVariableName" : {
            "type" : "string",
            "description" : "Human readable name of an Observation Variable\n\nMIAPPE V1.1 (DM-84) Variable name - Name of the variable.",
            "example" : "Variable Name"
          },
          "observationVariablePUI" : {
            "type" : "string",
            "description" : "The Permanent Unique Identifier of a Observation Variable, usually in the form of a URI",
            "nullable" : true,
            "example" : "http://my-traits.com/trait/CO_123:0009012"
          },
          "ontologyReference" : {
            "required" : [ "ontologyDbId", "ontologyName" ],
            "type" : "object",
            "properties" : {
              "documentationLinks" : {
                "type" : "array",
                "description" : "links to various ontology documentation",
                "nullable" : true,
                "items" : {
                  "type" : "object",
                  "properties" : {
                    "URL" : {
                      "type" : "string",
                      "format" : "uri",
                      "example" : "http://purl.obolibrary.org/obo/ro.owl"
                    },
                    "type" : {
                      "type" : "string",
                      "example" : "OBO",
                      "enum" : [ "OBO", "RDF", "WEBPAGE" ]
                    }
                  }
                }
              },
              "ontologyDbId" : {
                "type" : "string",
                "description" : "Ontology database unique identifier",
                "example" : "6b071868"
              },
              "ontologyName" : {
                "type" : "string",
                "description" : "Ontology name",
                "example" : "The Crop Ontology"
              },
              "version" : {
                "type" : "string",
                "description" : "Ontology version (no specific format)",
                "nullable" : true,
                "example" : "7.2.3"
              }
            },
            "description" : "MIAPPE V1.1\n\n(DM-85) Variable accession number - Accession number of the variable in the Crop Ontology\n\n(DM-87) Trait accession number - Accession number of the trait in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).\n\n(DM-89) Method accession number - Accession number of the method in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).\n\n(DM-93) Scale accession number - Accession number of the scale in a suitable controlled vocabulary (Crop Ontology).",
            "nullable" : true
          },
          "scale" : {
            "required" : [ "scaleDbId", "scaleName" ],
            "type" : "object",
            "properties" : {
              "additionalInfo" : {
                "type" : "object",
                "additionalProperties" : {
                  "type" : "string"
                },
                "description" : "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.",
                "nullable" : true
              },
              "dataType" : {
                "type" : "string",
                "description" : "<p>Class of the scale, entries can be</p>\n<p>\"Code\" -  This scale class is exceptionally used to express complex traits. Code is a nominal scale that combines the expressions of the different traits composing the complex trait. For example a severity trait might be expressed by a 2 digit and 2 character code. The first 2 digits are the percentage of the plant covered by a fungus and the 2 characters refer to the delay in development, e.g. \"75VD\" means \"75 %\" of the plant is infected and the plant is very delayed.</p>\n<p>\"Date\" - The date class is for events expressed in a time format, See ISO 8601</p>\n<p>\"Duration\" - The Duration class is for time elapsed between two events expressed in a time format, e.g. days, hours, months</p>\n<p>\"Nominal\" - Categorical scale that can take one of a limited and fixed number of categories. There is no intrinsic ordering to the categories</p>\n<p>\"Numerical\" - Numerical scales express the trait with real numbers. The numerical scale defines the unit e.g. centimeter, ton per hectare, branches</p>\n<p>\"Ordinal\" - Ordinal scales are scales composed of ordered categories</p>\n<p>\"Text\" - A free text is used to express the trait.</p>",
                "nullable" : true,
                "example" : "Numerical",
                "enum" : [ "Code", "Date", "Duration", "Nominal", "Numerical", "Ordinal", "Text" ]
              },
              "decimalPlaces" : {
                "type" : "integer",
                "description" : "For numerical, number of decimal places to be reported",
                "nullable" : true,
                "example" : 2
              },
              "externalReferences" : {
                "title" : "ExternalReferences",
                "type" : "array",
                "description" : "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.",
                "nullable" : true,
                "example" : [ {
                  "referenceId" : "doi:10.155454/12341234",
                  "referenceSource" : "DOI"
                }, {
                  "referenceId" : "75a50e76",
                  "referenceSource" : "Remote Data Collection Upload Tool"
                } ],
                "items" : {
                  "type" : "object",
                  "properties" : {
                    "referenceID" : {
                      "type" : "string",
                      "description" : "**Deprecated in v2.1** Please use `referenceId`. Github issue number #460 \n<br>The external reference ID. Could be a simple string or a URI.",
                      "nullable" : true,
                      "deprecated" : true
                    },
                    "referenceId" : {
                      "type" : "string",
                      "description" : "The external reference ID. Could be a simple string or a URI."
                    },
                    "referenceSource" : {
                      "type" : "string",
                      "description" : "An identifier for the source system or database of this reference"
                    }
                  }
                }
              },
              "ontologyReference" : {
                "required" : [ "ontologyDbId", "ontologyName" ],
                "type" : "object",
                "properties" : {
                  "documentationLinks" : {
                    "type" : "array",
                    "description" : "links to various ontology documentation",
                    "nullable" : true,
                    "items" : {
                      "type" : "object",
                      "properties" : {
                        "URL" : {
                          "type" : "string",
                          "format" : "uri",
                          "example" : "http://purl.obolibrary.org/obo/ro.owl"
                        },
                        "type" : {
                          "type" : "string",
                          "example" : "OBO",
                          "enum" : [ "OBO", "RDF", "WEBPAGE" ]
                        }
                      }
                    }
                  },
                  "ontologyDbId" : {
                    "type" : "string",
                    "description" : "Ontology database unique identifier",
                    "example" : "6b071868"
                  },
                  "ontologyName" : {
                    "type" : "string",
                    "description" : "Ontology name",
                    "example" : "The Crop Ontology"
                  },
                  "version" : {
                    "type" : "string",
                    "description" : "Ontology version (no specific format)",
                    "nullable" : true,
                    "example" : "7.2.3"
                  }
                },
                "description" : "MIAPPE V1.1\n\n(DM-85) Variable accession number - Accession number of the variable in the Crop Ontology\n\n(DM-87) Trait accession number - Accession number of the trait in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).\n\n(DM-89) Method accession number - Accession number of the method in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).\n\n(DM-93) Scale accession number - Accession number of the scale in a suitable controlled vocabulary (Crop Ontology)."
              },
              "scaleDbId" : {
                "type" : "string",
                "description" : "Unique identifier of the scale. If left blank, the upload system will automatically generate a scale ID.",
                "example" : "af730171"
              },
              "scaleName" : {
                "type" : "string",
                "description" : "Name of the scale\n<br/>MIAPPE V1.1 (DM-92) Scale Name of the scale associated with the variable",
                "nullable" : true,
                "example" : "Meters"
              },
              "scalePUI" : {
                "type" : "string",
                "description" : "The Permanent Unique Identifier of a Scale, usually in the form of a URI",
                "nullable" : true,
                "example" : "http://my-traits.com/trait/CO_123:0000112"
              },
              "units" : {
                "type" : "string",
                "description" : "This field can be used to describe the units used for this scale. This should be the abbreviated \nform of the units, intended to be displayed with every value using this scale. Usually this only \napplies when `dataType` is Numeric, but could also be included for other dataTypes when applicable.",
                "nullable" : true,
                "example" : "m"
              },
              "validValues" : {
                "type" : "object",
                "properties" : {
                  "categories" : {
                    "type" : "array",
                    "description" : "List of possible values with optional labels",
                    "example" : [ {
                      "label" : "low",
                      "value" : "0"
                    }, {
                      "label" : "medium",
                      "value" : "5"
                    }, {
                      "label" : "high",
                      "value" : "10"
                    } ],
                    "items" : {
                      "type" : "object",
                      "properties" : {
                        "label" : {
                          "type" : "string",
                          "description" : "A text label for a category"
                        },
                        "value" : {
                          "type" : "string",
                          "description" : "The actual value for a category"
                        }
                      }
                    }
                  },
                  "max" : {
                    "type" : "integer",
                    "description" : "**Deprecated in v2.1** Please use `maximumValue`. Github issue number #450 \n<br>Maximum value for numerical scales. Typically used for data capture control and QC.",
                    "nullable" : true,
                    "example" : 9999,
                    "deprecated" : true
                  },
                  "maximumValue" : {
                    "type" : "string",
                    "description" : "Maximum value for numerical, date, and time scales. Typically used for data capture control and QC.",
                    "nullable" : true,
                    "example" : "9999"
                  },
                  "min" : {
                    "type" : "integer",
                    "description" : "**Deprecated in v2.1** Please use `minimumValue`. Github issue number #450 \n<br>Minimum value for numerical scales. Typically used for data capture control and QC.",
                    "nullable" : true,
                    "example" : 2,
                    "deprecated" : true
                  },
                  "minimumValue" : {
                    "type" : "string",
                    "description" : "Minimum value for numerical, date, and time scales. Typically used for data capture control and QC.",
                    "nullable" : true,
                    "example" : "2"
                  }
                },
                "nullable" : true
              }
            },
            "description" : "A Scale describes the units and acceptable values for an ObservationVariable. \n<br>For example, an ObservationVariable might be defined with a Trait of \"plant height\", a Scale of \"meters\", and a Method of \"tape measure\". This variable would be distinct from a variable with the Scale \"inches\" or \"pixels\"."
          },
          "scientist" : {
            "type" : "string",
            "description" : "Name of scientist submitting the variable.",
            "nullable" : true,
            "example" : "Dr. Bob Robertson"
          },
          "status" : {
            "type" : "string",
            "description" : "Variable status. (examples: \"recommended\", \"obsolete\", \"legacy\", etc.)",
            "nullable" : true,
            "example" : "recommended"
          },
          "submissionTimestamp" : {
            "type" : "string",
            "description" : "Timestamp when the Variable was added (ISO 8601)",
            "format" : "date-time",
            "nullable" : true
          },
          "synonyms" : {
            "type" : "array",
            "description" : "Other variable names",
            "nullable" : true,
            "example" : [ "Maize Height", "Stalk Height", "Corn Height" ],
            "items" : {
              "type" : "string"
            }
          },
          "trait" : {
            "required" : [ "traitName" ],
            "type" : "object",
            "properties" : {
              "additionalInfo" : {
                "type" : "object",
                "additionalProperties" : {
                  "type" : "string"
                },
                "description" : "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.",
                "nullable" : true
              },
              "alternativeAbbreviations" : {
                "type" : "array",
                "description" : "A list of shortened, human readable, names for a Trait. These abbreviations are acceptable alternatives to the mainAbbreviation and do not need to follow any formatting convention.",
                "nullable" : true,
                "example" : [ "H", "PH", "H1" ],
                "items" : {
                  "type" : "string"
                }
              },
              "attribute" : {
                "type" : "string",
                "description" : "A trait can be decomposed as \"Trait\" = \"Entity\" + \"Attribute\", the attribute is the observed feature (or characteristic) of the entity e.g., for \"grain colour\", attribute = \"colour\"",
                "nullable" : true,
                "example" : "height"
              },
              "attributePUI" : {
                "type" : "string",
                "description" : "The Permanent Unique Identifier of a Trait Attribute, usually in the form of a URI\n<br/>A trait can be decomposed as \"Trait\" = \"Entity\" + \"Attribute\", the attribute is the observed feature (or characteristic) of the entity e.g., for \"grain colour\", attribute = \"colour\"",
                "nullable" : true,
                "example" : "http://my-traits.com/trait/PO:00012345"
              },
              "entity" : {
                "type" : "string",
                "description" : "A trait can be decomposed as \"Trait\" = \"Entity\" + \"Attribute\", the entity is the part of the plant that the trait refers to e.g., for \"grain colour\", entity = \"grain\"",
                "nullable" : true,
                "example" : "Stalk"
              },
              "entityPUI" : {
                "type" : "string",
                "description" : "The Permanent Unique Identifier of a Trait Entity, usually in the form of a URI\n<br/>A Trait can be decomposed as \"Trait\" = \"Entity\" + \"Attribute\", the Entity is the part of the plant that the trait refers to e.g., for \"grain colour\", entity = \"grain\" ",
                "nullable" : true,
                "example" : "http://my-traits.com/trait/PATO:00098765"
              },
              "externalReferences" : {
                "title" : "ExternalReferences",
                "type" : "array",
                "description" : "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.",
                "nullable" : true,
                "example" : [ {
                  "referenceId" : "doi:10.155454/12341234",
                  "referenceSource" : "DOI"
                }, {
                  "referenceId" : "75a50e76",
                  "referenceSource" : "Remote Data Collection Upload Tool"
                } ],
                "items" : {
                  "type" : "object",
                  "properties" : {
                    "referenceID" : {
                      "type" : "string",
                      "description" : "**Deprecated in v2.1** Please use `referenceId`. Github issue number #460 \n<br>The external reference ID. Could be a simple string or a URI.",
                      "nullable" : true,
                      "deprecated" : true
                    },
                    "referenceId" : {
                      "type" : "string",
                      "description" : "The external reference ID. Could be a simple string or a URI."
                    },
                    "referenceSource" : {
                      "type" : "string",
                      "description" : "An identifier for the source system or database of this reference"
                    }
                  }
                }
              },
              "mainAbbreviation" : {
                "type" : "string",
                "description" : "A shortened version of the human readable name for a Trait",
                "nullable" : true,
                "example" : "PH"
              },
              "ontologyReference" : {
                "required" : [ "ontologyDbId", "ontologyName" ],
                "type" : "object",
                "properties" : {
                  "documentationLinks" : {
                    "type" : "array",
                    "description" : "links to various ontology documentation",
                    "nullable" : true,
                    "items" : {
                      "type" : "object",
                      "properties" : {
                        "URL" : {
                          "type" : "string",
                          "format" : "uri",
                          "example" : "http://purl.obolibrary.org/obo/ro.owl"
                        },
                        "type" : {
                          "type" : "string",
                          "example" : "OBO",
                          "enum" : [ "OBO", "RDF", "WEBPAGE" ]
                        }
                      }
                    }
                  },
                  "ontologyDbId" : {
                    "type" : "string",
                    "description" : "Ontology database unique identifier",
                    "example" : "6b071868"
                  },
                  "ontologyName" : {
                    "type" : "string",
                    "description" : "Ontology name",
                    "example" : "The Crop Ontology"
                  },
                  "version" : {
                    "type" : "string",
                    "description" : "Ontology version (no specific format)",
                    "nullable" : true,
                    "example" : "7.2.3"
                  }
                },
                "description" : "MIAPPE V1.1\n\n(DM-85) Variable accession number - Accession number of the variable in the Crop Ontology\n\n(DM-87) Trait accession number - Accession number of the trait in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).\n\n(DM-89) Method accession number - Accession number of the method in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).\n\n(DM-93) Scale accession number - Accession number of the scale in a suitable controlled vocabulary (Crop Ontology)."
              },
              "status" : {
                "type" : "string",
                "description" : "Trait status (examples: \"recommended\", \"obsolete\", \"legacy\", etc.)",
                "nullable" : true,
                "example" : "recommended"
              },
              "synonyms" : {
                "type" : "array",
                "description" : "Other trait names",
                "nullable" : true,
                "example" : [ "Height", "Plant Height", "Stalk Height", "Canopy Height" ],
                "items" : {
                  "type" : "string"
                }
              },
              "traitClass" : {
                "type" : "string",
                "description" : "A classification to describe the type of trait and the context it should be considered in.\n<br/> examples- \"morphological\", \"phenological\", \"agronomical\", \"physiological\", \"abiotic stress\", \"biotic stress\", \"biochemical\", \"quality traits\", \"fertility\", etc.",
                "nullable" : true,
                "example" : "phenological"
              },
              "traitDbId" : {
                "type" : "string",
                "description" : "The ID which uniquely identifies a trait",
                "example" : "9b2e34f5"
              },
              "traitDescription" : {
                "type" : "string",
                "description" : "The description of a trait",
                "nullable" : true,
                "example" : "The height of the plant"
              },
              "traitName" : {
                "type" : "string",
                "description" : "The human readable name of a trait\n<br/>MIAPPE V1.1 (DM-86) Trait - Name of the (plant or environmental) trait under observation",
                "example" : "Height"
              },
              "traitPUI" : {
                "type" : "string",
                "description" : "The Permanent Unique Identifier of a Trait, usually in the form of a URI",
                "nullable" : true,
                "example" : "http://my-traits.com/trait/CO_123:0000012"
              }
            },
            "description" : "A Trait describes what property is being observed. \n<br>For example, an ObservationVariable might be defined with a Trait of \"plant height\", a Scale of \"meters\", and a Method of \"tape measure\". This variable would be distinct from a variable with the Trait \"Leaf length\" or \"Flower height\". "
          }
        }
      },
      "ObservationVariableSearchRequest" : {
        "type" : "object",
        "properties" : {
          "commonCropNames" : {
            "type" : "array",
            "description" : "The BrAPI Common Crop Name is the simple, generalized, widely accepted name of the organism being researched. It is most often used in multi-crop systems where digital resources need to be divided at a high level. Things like 'Maize', 'Wheat', and 'Rice' are examples of common crop names.\n\nUse this parameter to only return results associated with the given crops. \n\nUse `GET /commoncropnames` to find the list of available crops on a server.",
            "example" : [ "Tomatillo", "Paw Paw" ],
            "items" : {
              "type" : "string"
            }
          },
          "dataTypes" : {
            "type" : "array",
            "description" : "List of scale data types to filter search results",
            "example" : [ "Numerical", "Ordinal", "Text" ],
            "items" : {
              "type" : "string",
              "description" : "<p>Class of the scale, entries can be</p>\n<p>\"Code\" -  This scale class is exceptionally used to express complex traits. Code is a nominal scale that combines the expressions of the different traits composing the complex trait. For example a severity trait might be expressed by a 2 digit and 2 character code. The first 2 digits are the percentage of the plant covered by a fungus and the 2 characters refer to the delay in development, e.g. \"75VD\" means \"75 %\" of the plant is infected and the plant is very delayed.</p>\n<p>\"Date\" - The date class is for events expressed in a time format, See ISO 8601</p>\n<p>\"Duration\" - The Duration class is for time elapsed between two events expressed in a time format, e.g. days, hours, months</p>\n<p>\"Nominal\" - Categorical scale that can take one of a limited and fixed number of categories. There is no intrinsic ordering to the categories</p>\n<p>\"Numerical\" - Numerical scales express the trait with real numbers. The numerical scale defines the unit e.g. centimeter, ton per hectare, branches</p>\n<p>\"Ordinal\" - Ordinal scales are scales composed of ordered categories</p>\n<p>\"Text\" - A free text is used to express the trait.</p>",
              "example" : "Numerical",
              "enum" : [ "Code", "Date", "Duration", "Nominal", "Numerical", "Ordinal", "Text" ]
            }
          },
          "externalReferenceIDs" : {
            "type" : "array",
            "description" : "**Deprecated in v2.1** Please use `externalReferenceIds`. Github issue number #460 \n<br>List of external reference IDs. Could be a simple strings or a URIs. (use with `externalReferenceSources` parameter)",
            "example" : [ "doi:10.155454/12341234", "14a19841" ],
            "deprecated" : true,
            "items" : {
              "type" : "string"
            }
          },
          "externalReferenceIds" : {
            "type" : "array",
            "description" : "List of external reference IDs. Could be a simple strings or a URIs. (use with `externalReferenceSources` parameter)",
            "example" : [ "doi:10.155454/12341234", "14a19841" ],
            "items" : {
              "type" : "string"
            }
          },
          "externalReferenceSources" : {
            "type" : "array",
            "description" : "List of identifiers for the source system or database of an external reference (use with `externalReferenceIDs` parameter)",
            "example" : [ "DOI", "Field App Name" ],
            "items" : {
              "type" : "string"
            }
          },
          "methodDbIds" : {
            "type" : "array",
            "description" : "List of methods to filter search results",
            "example" : [ "07e34f83", "d3d5517a" ],
            "items" : {
              "type" : "string"
            }
          },
          "methodNames" : {
            "type" : "array",
            "description" : "Human readable name for the method\n<br/>MIAPPE V1.1 (DM-88) Method  Name of the method of observation",
            "example" : [ "Measuring Tape", "Spectrometer" ],
            "items" : {
              "type" : "string"
            }
          },
          "methodPUIs" : {
            "type" : "array",
            "description" : "The Permanent Unique Identifier of a Method, usually in the form of a URI",
            "example" : [ "http://my-traits.com/trait/CO_123:0000212", "http://my-traits.com/trait/CO_123:0003557" ],
            "items" : {
              "type" : "string"
            }
          },
          "observationVariableDbIds" : {
            "type" : "array",
            "description" : "The DbIds of Variables to search for",
            "example" : [ "a646187d", "6d23513b" ],
            "items" : {
              "type" : "string"
            }
          },
          "observationVariableNames" : {
            "type" : "array",
            "description" : "The names of Variables to search for",
            "example" : [ "Plant Height in meters", "Wheat rust score 1-5" ],
            "items" : {
              "type" : "string"
            }
          },
          "observationVariablePUIs" : {
            "type" : "array",
            "description" : "The Permanent Unique Identifier of an Observation Variable, usually in the form of a URI",
            "example" : [ "http://my-traits.com/trait/CO_123:0008012", "http://my-traits.com/trait/CO_123:0007261" ],
            "items" : {
              "type" : "string"
            }
          },
          "ontologyDbIds" : {
            "type" : "array",
            "description" : "List of ontology IDs to search for",
            "example" : [ "f44f7b23", "a26b576e" ],
            "items" : {
              "type" : "string"
            }
          },
          "page" : {
            "type" : "integer",
            "description" : "Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.",
            "example" : 0
          },
          "pageSize" : {
            "type" : "integer",
            "description" : "The size of the pages to be returned. Default is `1000`.",
            "example" : 1000
          },
          "programDbIds" : {
            "type" : "array",
            "description" : "A BrAPI Program represents the high level organization or group who is responsible for conducting trials and studies. Things like Breeding Programs and Funded Projects are considered BrAPI Programs. \n\nUse this parameter to only return results associated with the given programs. \n\nUse `GET /programs` to find the list of available programs on a server.",
            "example" : [ "8f5de35b", "0e2d4a13" ],
            "items" : {
              "type" : "string"
            }
          },
          "programNames" : {
            "type" : "array",
            "description" : "Use this parameter to only return results associated with the given program names. Program names are not required to be unique.\n\nUse `GET /programs` to find the list of available programs on a server.",
            "example" : [ "Better Breeding Program", "Best Breeding Program" ],
            "items" : {
              "type" : "string"
            }
          },
          "scaleDbIds" : {
            "type" : "array",
            "description" : "The unique identifier for a Scale",
            "example" : [ "a13ecffa", "7e1afe4f" ],
            "items" : {
              "type" : "string"
            }
          },
          "scaleNames" : {
            "type" : "array",
            "description" : "Name of the scale\n<br/>MIAPPE V1.1 (DM-92) Scale Name of the scale associated with the variable",
            "example" : [ "Meters", "Liters" ],
            "items" : {
              "type" : "string"
            }
          },
          "scalePUIs" : {
            "type" : "array",
            "description" : "The Permanent Unique Identifier of a Scale, usually in the form of a URI",
            "example" : [ "http://my-traits.com/trait/CO_123:0000336", "http://my-traits.com/trait/CO_123:0000560" ],
            "items" : {
              "type" : "string"
            }
          },
          "studyDbId" : {
            "type" : "array",
            "description" : "**Deprecated in v2.1** Please use `studyDbIds`. Github issue number #483 \n<br>The unique ID of a studies to filter on",
            "example" : [ "5bcac0ae", "7f48e22d" ],
            "deprecated" : true,
            "items" : {
              "type" : "string"
            }
          },
          "studyDbIds" : {
            "type" : "array",
            "description" : "List of study identifiers to search for",
            "example" : [ "cf6c4bd4", "691e69d6" ],
            "items" : {
              "type" : "string"
            }
          },
          "studyNames" : {
            "type" : "array",
            "description" : "List of study names to filter search results",
            "example" : [ "The First Bob Study 2017", "Wheat Yield Trial 246" ],
            "items" : {
              "type" : "string"
            }
          },
          "traitAttributePUIs" : {
            "type" : "array",
            "description" : "The Permanent Unique Identifier of a Trait Attribute, usually in the form of a URI\n<br/>A trait can be decomposed as \"Trait\" = \"Entity\" + \"Attribute\", the attribute is the observed feature (or characteristic) of the entity e.g., for \"grain colour\", attribute = \"colour\"",
            "example" : [ "http://my-traits.com/trait/CO_123:0008336", "http://my-traits.com/trait/CO_123:0001092" ],
            "items" : {
              "type" : "string"
            }
          },
          "traitAttributes" : {
            "type" : "array",
            "description" : "A trait can be decomposed as \"Trait\" = \"Entity\" + \"Attribute\", the attribute is the observed feature (or characteristic) of the entity e.g., for \"grain colour\", attribute = \"colour\"",
            "example" : [ "Height", "Color" ],
            "items" : {
              "type" : "string"
            }
          },
          "traitClasses" : {
            "type" : "array",
            "description" : "List of trait classes to filter search results",
            "example" : [ "morphological", "phenological", "agronomical" ],
            "items" : {
              "type" : "string"
            }
          },
          "traitDbIds" : {
            "type" : "array",
            "description" : "The unique identifier for a Trait",
            "example" : [ "ef81147b", "78d82fad" ],
            "items" : {
              "type" : "string"
            }
          },
          "traitEntities" : {
            "type" : "array",
            "description" : "A trait can be decomposed as \"Trait\" = \"Entity\" + \"Attribute\", the entity is the part of the plant that the trait refers to e.g., for \"grain colour\", entity = \"grain\"",
            "example" : [ "Stalk", "Root" ],
            "items" : {
              "type" : "string"
            }
          },
          "traitEntityPUIs" : {
            "type" : "array",
            "description" : "The Permanent Unique Identifier of a Trait Entity, usually in the form of a URI\n<br/>A trait can be decomposed as \"Trait\" = \"Entity\" + \"Attribute\", the entity is the part of the plant that the trait refers to e.g., for \"grain colour\", entity = \"grain\" ",
            "example" : [ "http://my-traits.com/trait/CO_123:0004098", "http://my-traits.com/trait/CO_123:0002366" ],
            "items" : {
              "type" : "string"
            }
          },
          "traitNames" : {
            "type" : "array",
            "description" : "The human readable name of a trait\n<br/>MIAPPE V1.1 (DM-86) Trait - Name of the (plant or environmental) trait under observation",
            "example" : [ "Stalk Height", "Root Color" ],
            "items" : {
              "type" : "string"
            }
          },
          "traitPUIs" : {
            "type" : "array",
            "description" : "The Permanent Unique Identifier of a Trait, usually in the form of a URI",
            "example" : [ "http://my-traits.com/trait/CO_123:0000456", "http://my-traits.com/trait/CO_123:0000820" ],
            "items" : {
              "type" : "string"
            }
          },
          "trialDbIds" : {
            "type" : "array",
            "description" : "The ID which uniquely identifies a trial to search for",
            "example" : [ "d2593dc2", "9431a731" ],
            "items" : {
              "type" : "string"
            }
          },
          "trialNames" : {
            "type" : "array",
            "description" : "The human readable name of a trial to search for",
            "example" : [ "All Yield Trials 2016", "Disease Resistance Study Comparison Group" ],
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "Ontology" : {
        "required" : [ "ontologyDbId", "ontologyName" ],
        "type" : "object",
        "properties" : {
          "additionalInfo" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.",
            "nullable" : true
          },
          "authors" : {
            "type" : "string",
            "description" : "Ontology's list of authors (no specific format)",
            "nullable" : true,
            "example" : "Bob Robertson, Rob Robertson"
          },
          "copyright" : {
            "type" : "string",
            "description" : "Ontology copyright",
            "nullable" : true,
            "example" : "Copyright 1987, Bob Robertson"
          },
          "description" : {
            "type" : "string",
            "description" : "Human readable description of Ontology",
            "nullable" : true,
            "example" : "This is an example ontology that does not exist"
          },
          "documentationURL" : {
            "type" : "string",
            "description" : "A URL to the human readable documentation of an object",
            "format" : "uri",
            "nullable" : true,
            "example" : "https://wiki.brapi.org/ontology"
          },
          "licence" : {
            "type" : "string",
            "description" : "Ontology licence",
            "nullable" : true,
            "example" : "MIT Open source licence"
          },
          "ontologyDbId" : {
            "type" : "string",
            "description" : "Ontology database unique identifier",
            "example" : "18e186cd"
          },
          "ontologyName" : {
            "type" : "string",
            "description" : "Ontology name",
            "nullable" : true,
            "example" : "The Official Ontology"
          },
          "version" : {
            "type" : "string",
            "description" : "Ontology version (no specific format)",
            "nullable" : true,
            "example" : "V1.3.2"
          }
        },
        "x-brapi-metadata" : {
          "description" : "The identifier and metadata needed to reference an external controlled vocabulary",
          "module" : "BrAPI-Phenotyping",
          "primaryModel" : true,
          "title" : "Ontology"
        }
      },
      "OntologyNewRequest" : {
        "required" : [ "ontologyName" ],
        "type" : "object",
        "properties" : {
          "additionalInfo" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.",
            "nullable" : true
          },
          "authors" : {
            "type" : "string",
            "description" : "Ontology's list of authors (no specific format)",
            "nullable" : true,
            "example" : "Bob Robertson, Rob Robertson"
          },
          "copyright" : {
            "type" : "string",
            "description" : "Ontology copyright",
            "nullable" : true,
            "example" : "Copyright 1987, Bob Robertson"
          },
          "description" : {
            "type" : "string",
            "description" : "Human readable description of Ontology",
            "nullable" : true,
            "example" : "This is an example ontology that does not exist"
          },
          "documentationURL" : {
            "type" : "string",
            "description" : "A URL to the human readable documentation of an object",
            "format" : "uri",
            "nullable" : true,
            "example" : "https://wiki.brapi.org/ontology"
          },
          "licence" : {
            "type" : "string",
            "description" : "Ontology licence",
            "nullable" : true,
            "example" : "MIT Open source licence"
          },
          "ontologyName" : {
            "type" : "string",
            "description" : "Ontology name",
            "nullable" : true,
            "example" : "The Official Ontology"
          },
          "version" : {
            "type" : "string",
            "description" : "Ontology version (no specific format)",
            "nullable" : true,
            "example" : "V1.3.2"
          }
        }
      },
      "OntologyReference" : {
        "required" : [ "ontologyDbId", "ontologyName" ],
        "type" : "object",
        "properties" : {
          "documentationLinks" : {
            "type" : "array",
            "description" : "links to various ontology documentation",
            "nullable" : true,
            "items" : {
              "type" : "object",
              "properties" : {
                "URL" : {
                  "type" : "string",
                  "format" : "uri",
                  "example" : "http://purl.obolibrary.org/obo/ro.owl"
                },
                "type" : {
                  "type" : "string",
                  "example" : "OBO",
                  "enum" : [ "OBO", "RDF", "WEBPAGE" ]
                }
              }
            }
          },
          "ontologyDbId" : {
            "type" : "string",
            "description" : "Ontology database unique identifier",
            "example" : "6b071868"
          },
          "ontologyName" : {
            "type" : "string",
            "description" : "Ontology name",
            "example" : "The Crop Ontology"
          },
          "version" : {
            "type" : "string",
            "description" : "Ontology version (no specific format)",
            "nullable" : true,
            "example" : "7.2.3"
          }
        },
        "description" : "MIAPPE V1.1\n\n(DM-85) Variable accession number - Accession number of the variable in the Crop Ontology\n\n(DM-87) Trait accession number - Accession number of the trait in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).\n\n(DM-89) Method accession number - Accession number of the method in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).\n\n(DM-93) Scale accession number - Accession number of the scale in a suitable controlled vocabulary (Crop Ontology)."
      },
      "OntologyTerm" : {
        "type" : "object",
        "properties" : {
          "term" : {
            "type" : "string",
            "description" : "Ontology term - the label of the ontology term the termId is pointing to.",
            "nullable" : true,
            "example" : "sonic hedgehog"
          },
          "termURI" : {
            "type" : "string",
            "description" : "Ontology term identifier - the CURIE for an ontology term. It differs from the standard GA4GH schema's :ref:`id ` in that it is a CURIE pointing to an information resource outside of the scope of the schema or its resource implementation.",
            "nullable" : true,
            "example" : "MGI:MGI:98297"
          }
        },
        "description" : "An ontology term describing an attribute."
      },
      "ParentType" : {
        "type" : "string",
        "description" : "The type of parent used during crossing. Accepted values for this field are 'MALE', 'FEMALE', 'SELF', 'POPULATION', and 'CLONAL'. \n\nIn a pedigree record, the 'parentType' describes each parent of a particular germplasm. \n\nIn a progeny record, the 'parentType' is used to describe how this germplasm was crossed to generate a particular progeny. \nFor example, given a record for germplasm A, having a progeny B and C. The 'parentType' field for progeny B item refers \nto the 'parentType' of A toward B. The 'parentType' field for progeny C item refers to the 'parentType' of A toward C.\nIn this way, A could be a male parent to B, but a female parent to C. ",
        "example" : "FEMALE",
        "enum" : [ "MALE", "FEMALE", "SELF", "POPULATION", "CLONAL" ]
      },
      "ParentTypeDEP" : {
        "type" : "string",
        "description" : "The type of parent used during crossing. Accepted values for this field are 'MALE', 'FEMALE', 'SELF', 'POPULATION', and 'CLONAL'. \n\nIn a pedigree record, the 'parentType' describes each parent of a particular germplasm. \n\nIn a progeny record, the 'parentType' is used to describe how this germplasm was crossed to generate a particular progeny. \nFor example, given a record for germplasm A, having a progeny B and C. The 'parentType' field for progeny B item refers \nto the 'parentType' of A toward B. The 'parentType' field for progeny C item refers to the 'parentType' of A toward C.\nIn this way, A could be a male parent to B, but a female parent to C. ",
        "example" : "FEMALE",
        "enum" : [ "MALE", "FEMALE", "SELF", "POPULATION", "CLONAL" ]
      },
      "PedigreeNode" : {
        "required" : [ "germplasmDbId", "germplasmName" ],
        "type" : "object",
        "properties" : {
          "additionalInfo" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.",
            "nullable" : true
          },
          "breedingMethodDbId" : {
            "type" : "string",
            "description" : "The unique identifier for the breeding method used to create this germplasm",
            "nullable" : true,
            "example" : "ffcce7ef"
          },
          "breedingMethodName" : {
            "type" : "string",
            "description" : "The human readable name of the breeding method used to create this germplasm",
            "nullable" : true,
            "example" : "Male Backcross"
          },
          "crossingProjectDbId" : {
            "type" : "string",
            "description" : "The crossing project used to generate this germplasm",
            "nullable" : true,
            "example" : "625e745a"
          },
          "crossingYear" : {
            "type" : "integer",
            "description" : "The year the parents were originally crossed",
            "nullable" : true,
            "example" : 2005
          },
          "defaultDisplayName" : {
            "type" : "string",
            "description" : "Human readable name used for display purposes",
            "nullable" : true,
            "example" : "A0000003"
          },
          "externalReferences" : {
            "$ref" : "#/components/schemas/ExternalReferences"
          },
          "familyCode" : {
            "type" : "string",
            "description" : "The code representing the family of this germplasm",
            "nullable" : true,
            "example" : "F0000203"
          },
          "germplasmDbId" : {
            "type" : "string",
            "description" : "The ID which uniquely identifies a germplasm",
            "example" : "1098ebaf"
          },
          "germplasmName" : {
            "type" : "string",
            "description" : "A human readable name for a germplasm",
            "example" : "A0021004"
          },
          "germplasmPUI" : {
            "type" : "string",
            "description" : "The Permanent Unique Identifier which represents a germplasm\n\nMIAPPE V1.1 (DM-41) Biological material ID - Code used to identify the biological material in the data file. Should be unique within the Investigation. Can correspond to experimental plant ID, seed lot ID, etc This material identification is different from a BiosampleID which corresponds to Observation Unit or Samples sections below.\n\nMIAPPE V1.1 (DM-51) Material source DOI - Digital Object Identifier (DOI) of the material source\n\nMCPD (v2.1) (PUID) 0. Any persistent, unique identifier assigned to the accession so it can be unambiguously referenced at the global level and the information associated with it harvested through automated means. Report one PUID for each accession. The Secretariat of the International Treaty on Plant Genetic Resources for Food and Agriculture (PGRFA) is facilitating the assignment of a persistent unique identifier (PUID), in the form of a DOI, to PGRFA at the accession level. Genebanks not applying a true PUID to their accessions should use, and request recipients to use, the concatenation of INSTCODE, ACCENUMB, and GENUS as a globally unique identifier similar in most respects to the PUID whenever they exchange information on accessions with third parties.",
            "nullable" : true,
            "example" : "http://pui.per/accession/A0000003"
          },
          "parents" : {
            "type" : "array",
            "description" : "A list of parent germplasm references in the pedigree tree for this germplasm. These represent edges in the tree, connecting to other nodes.\n<br/> Typically, this array should only have one parent (clonal or self) or two parents (cross). In some special cases, there may be more parents, usually when the exact parent is not known. \n<br/> If the parameter 'includeParents' is set to false, then this array should be empty, null, or not present in the response.",
            "nullable" : true,
            "example" : [ {
              "germplasmDbId" : "b66958de",
              "germplasmName" : "A0000592",
              "parentType" : "MALE"
            }, {
              "germplasmDbId" : "a55847ed",
              "germplasmName" : "A0000592",
              "parentType" : "FEMALE"
            } ],
            "items" : {
              "required" : [ "germplasmDbId", "parentType" ],
              "type" : "object",
              "properties" : {
                "germplasmDbId" : {
                  "type" : "string",
                  "description" : "The ID which uniquely identifies a germplasm",
                  "example" : "a55847ed"
                },
                "germplasmName" : {
                  "type" : "string",
                  "description" : "A human readable name for a germplasm",
                  "nullable" : true,
                  "example" : "A0000592"
                },
                "parentType" : {
                  "$ref" : "#/components/schemas/ParentType"
                }
              }
            }
          },
          "pedigreeString" : {
            "type" : "string",
            "description" : "The string representation of the pedigree for this germplasm in PURDY notation",
            "nullable" : true,
            "example" : "A0000001/A0000002"
          },
          "progeny" : {
            "type" : "array",
            "description" : "A list of germplasm references that are direct children of this germplasm. These represent edges in the tree, connecting to other nodes.\n<br/> The given germplasm could have a large number of progeny, across a number of different breeding methods. The 'parentType' shows \n      the type of parent this germplasm is to each of the child germplasm references.\n<br/> If the parameter 'includeProgeny' is set to false, then this array should be empty, null, or not present in the response.",
            "nullable" : true,
            "example" : [ {
              "germplasmDbId" : "e8d5dad7",
              "germplasmName" : "A0021011",
              "parentType" : "FEMALE"
            }, {
              "germplasmDbId" : "ac07fbd8",
              "germplasmName" : "A0021012",
              "parentType" : "FEMALE"
            }, {
              "germplasmDbId" : "07f45f67",
              "germplasmName" : "A0021013",
              "parentType" : "FEMALE"
            } ],
            "items" : {
              "required" : [ "germplasmDbId", "parentType" ],
              "type" : "object",
              "properties" : {
                "germplasmDbId" : {
                  "type" : "string",
                  "description" : "The ID which uniquely identifies a germplasm",
                  "example" : "a55847ed"
                },
                "germplasmName" : {
                  "type" : "string",
                  "description" : "A human readable name for a germplasm",
                  "nullable" : true,
                  "example" : "A0000592"
                },
                "parentType" : {
                  "$ref" : "#/components/schemas/ParentType"
                }
              }
            }
          },
          "siblings" : {
            "type" : "array",
            "description" : "A list of sibling germplasm references in the pedigree tree for this germplasm. These represent edges in the tree, connecting to other nodes.\n<br/> Siblings share at least one parent with the given germplasm. \n<br/> If the parameter 'includeSiblings' is set to false, then this array should be empty, null, or not present in the response.",
            "nullable" : true,
            "example" : [ {
              "germplasmDbId" : "334f53a3",
              "germplasmName" : "A0021005"
            }, {
              "germplasmDbId" : "7bbbda8c",
              "germplasmName" : "A0021006"
            }, {
              "germplasmDbId" : "ab1d9b26",
              "germplasmName" : "A0021007"
            } ],
            "items" : {
              "required" : [ "germplasmDbId" ],
              "type" : "object",
              "properties" : {
                "germplasmDbId" : {
                  "type" : "string",
                  "description" : "The ID which uniquely identifies a germplasm",
                  "example" : "a55847ed"
                },
                "germplasmName" : {
                  "type" : "string",
                  "description" : "A human readable name for a germplasm",
                  "nullable" : true,
                  "example" : "A0000592"
                }
              }
            }
          }
        },
        "x-brapi-metadata" : {
          "description" : "A representation of a particular Germplasm within a pedigree tree, and all the links to its parents, siblings, and children. From a list of PedigreeNode objects, a client application should have all the information it needs to draw a pedigree tree visualization, or calculate genetic distances.",
          "module" : "BrAPI-Germplasm",
          "primaryModel" : true,
          "title" : "PedigreeNode"
        }
      },
      "PedigreeNodeDEP" : {
        "required" : [ "germplasmDbId" ],
        "type" : "object",
        "properties" : {
          "crossingProjectDbId" : {
            "type" : "string",
            "description" : "The crossing project used to generate this germplasm",
            "nullable" : true,
            "example" : "625e745a"
          },
          "crossingYear" : {
            "type" : "integer",
            "description" : "The year the parents were originally crossed",
            "nullable" : true,
            "example" : 2005
          },
          "familyCode" : {
            "type" : "string",
            "description" : "The code representing the family",
            "nullable" : true,
            "example" : "F0000203"
          },
          "germplasmDbId" : {
            "type" : "string",
            "description" : "The ID which uniquely identifies a germplasm",
            "example" : "1098ebaf"
          },
          "germplasmName" : {
            "type" : "string",
            "description" : "A human readable name for a germplasm",
            "nullable" : true,
            "example" : "A0021004"
          },
          "parents" : {
            "type" : "array",
            "description" : "List of parent nodes in the pedigree tree.",
            "nullable" : true,
            "example" : [ {
              "germplasmDbId" : "b66958de",
              "germplasmName" : "A0000592",
              "parentType" : "MALE"
            }, {
              "germplasmDbId" : "a55847ed",
              "germplasmName" : "A0000592",
              "parentType" : "FEMALE"
            } ],
            "items" : {
              "type" : "object",
              "properties" : {
                "germplasmDbId" : {
                  "type" : "string",
                  "description" : "The germplasm DbId of the parent of this germplasm",
                  "example" : "a55847ed"
                },
                "germplasmName" : {
                  "type" : "string",
                  "description" : "the human readable name of the parent of this germplasm",
                  "nullable" : true,
                  "example" : "A0000592"
                },
                "parentType" : {
                  "$ref" : "#/components/schemas/ParentTypeDEP"
                }
              }
            }
          },
          "pedigree" : {
            "type" : "string",
            "description" : "The string representation of the pedigree in PURDY notation.",
            "nullable" : true,
            "example" : "A0000001/A0000002"
          },
          "siblings" : {
            "type" : "array",
            "description" : "List of sibling germplasm",
            "nullable" : true,
            "example" : [ {
              "germplasmDbId" : "334f53a3",
              "germplasmName" : "A0021005"
            }, {
              "germplasmDbId" : "7bbbda8c",
              "germplasmName" : "A0021006"
            }, {
              "germplasmDbId" : "ab1d9b26",
              "germplasmName" : "A0021007"
            } ],
            "items" : {
              "type" : "object",
              "properties" : {
                "germplasmDbId" : {
                  "type" : "string",
                  "description" : "the germplasm DbId of the sibling"
                },
                "germplasmName" : {
                  "type" : "string",
                  "description" : "the germplasm name of the sibling"
                }
              }
            }
          }
        }
      },
      "PedigreeSearchRequest" : {
        "type" : "object",
        "properties" : {
          "accessionNumbers" : {
            "type" : "array",
            "description" : "A collection of unique identifiers for materials or germplasm within a genebank\n\nMCPD (v2.1) (ACCENUMB) 2. This is the unique identifier for accessions within a genebank, and is assigned when a sample is entered into the genebank collection (e.g. \"PI 113869\").",
            "nullable" : true,
            "example" : [ "A0000003", "A0000477" ],
            "items" : {
              "type" : "string"
            }
          },
          "binomialNames" : {
            "type" : "array",
            "description" : "List of the full binomial name (scientific name) to identify a germplasm",
            "nullable" : true,
            "example" : [ "Aspergillus fructus", "Zea mays" ],
            "items" : {
              "type" : "string"
            }
          },
          "collections" : {
            "type" : "array",
            "description" : "A specific panel/collection/population name this germplasm belongs to.",
            "nullable" : true,
            "example" : [ "RDP1", "MDP1" ],
            "items" : {
              "type" : "string"
            }
          },
          "commonCropNames" : {
            "type" : "array",
            "description" : "The BrAPI Common Crop Name is the simple, generalized, widely accepted name of the organism being researched. It is most often used in multi-crop systems where digital resources need to be divided at a high level. Things like 'Maize', 'Wheat', and 'Rice' are examples of common crop names.\n\nUse this parameter to only return results associated with the given crops. \n\nUse `GET /commoncropnames` to find the list of available crops on a server.",
            "example" : [ "Tomatillo", "Paw Paw" ],
            "items" : {
              "type" : "string"
            }
          },
          "externalReferenceIDs" : {
            "type" : "array",
            "description" : "**Deprecated in v2.1** Please use `externalReferenceIds`. Github issue number #460 \n<br>List of external reference IDs. Could be a simple strings or a URIs. (use with `externalReferenceSources` parameter)",
            "example" : [ "doi:10.155454/12341234", "14a19841" ],
            "deprecated" : true,
            "items" : {
              "type" : "string"
            }
          },
          "externalReferenceIds" : {
            "type" : "array",
            "description" : "List of external reference IDs. Could be a simple strings or a URIs. (use with `externalReferenceSources` parameter)",
            "example" : [ "doi:10.155454/12341234", "14a19841" ],
            "items" : {
              "type" : "string"
            }
          },
          "externalReferenceSources" : {
            "type" : "array",
            "description" : "List of identifiers for the source system or database of an external reference (use with `externalReferenceIDs` parameter)",
            "example" : [ "DOI", "Field App Name" ],
            "items" : {
              "type" : "string"
            }
          },
          "familyCodes" : {
            "type" : "array",
            "description" : "A familyCode representing the family this germplasm belongs to.",
            "nullable" : true,
            "example" : [ "f0000203", "fa009965" ],
            "items" : {
              "type" : "string"
            }
          },
          "genus" : {
            "type" : "array",
            "description" : "List of Genus names to identify germplasm",
            "nullable" : true,
            "example" : [ "Aspergillus", "Zea" ],
            "items" : {
              "type" : "string"
            }
          },
          "germplasmDbIds" : {
            "type" : "array",
            "description" : "List of IDs which uniquely identify germplasm to search for",
            "example" : [ "e9c6edd7", "1b1df4a6" ],
            "items" : {
              "type" : "string"
            }
          },
          "germplasmNames" : {
            "type" : "array",
            "description" : "List of human readable names to identify germplasm to search for",
            "example" : [ "A0000003", "A0000477" ],
            "items" : {
              "type" : "string"
            }
          },
          "germplasmPUIs" : {
            "type" : "array",
            "description" : "List of Permanent Unique Identifiers to identify germplasm",
            "nullable" : true,
            "example" : [ "http://pui.per/accession/A0000003", "http://pui.per/accession/A0000477" ],
            "items" : {
              "type" : "string"
            }
          },
          "includeFullTree" : {
            "type" : "boolean",
            "description" : "If this parameter is true, recursively include ALL of the nodes available in this pedigree tree",
            "nullable" : true,
            "example" : true
          },
          "includeParents" : {
            "type" : "boolean",
            "description" : "If this parameter is true, include the array of parents in the response",
            "nullable" : true,
            "example" : true
          },
          "includeProgeny" : {
            "type" : "boolean",
            "description" : "If this parameter is true, include the array of progeny in the response",
            "nullable" : true,
            "example" : true
          },
          "includeSiblings" : {
            "type" : "boolean",
            "description" : "If this parameter is true, include the array of siblings in the response",
            "nullable" : true,
            "example" : true
          },
          "instituteCodes" : {
            "type" : "array",
            "description" : "The code for the institute that maintains the material. \n<br/> MCPD (v2.1) (INSTCODE) 1. FAO WIEWS code of the institute where the accession is maintained. The codes consist of the 3-letter ISO 3166 country code of the country where the institute is located plus a number (e.g. PER001). The current set of institute codes is available from http://www.fao.org/wiews. For those institutes not yet having an FAO Code, or for those with \"obsolete\" codes, see \"Common formatting rules (v)\".",
            "nullable" : true,
            "example" : [ "PER001", "NOR001" ],
            "items" : {
              "type" : "string"
            }
          },
          "page" : {
            "type" : "integer",
            "description" : "Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.",
            "example" : 0
          },
          "pageSize" : {
            "type" : "integer",
            "description" : "The size of the pages to be returned. Default is `1000`.",
            "example" : 1000
          },
          "pedigreeDepth" : {
            "type" : "integer",
            "description" : "Recursively include this number of levels up the tree in the response (parents, grand-parents, great-grand-parents, etc)",
            "nullable" : true,
            "example" : 3
          },
          "progenyDepth" : {
            "type" : "integer",
            "description" : "Recursively include this number of levels down the tree in the response (children, grand-children, great-grand-children, etc)",
            "nullable" : true,
            "example" : 3
          },
          "programDbIds" : {
            "type" : "array",
            "description" : "A BrAPI Program represents the high level organization or group who is responsible for conducting trials and studies. Things like Breeding Programs and Funded Projects are considered BrAPI Programs. \n\nUse this parameter to only return results associated with the given programs. \n\nUse `GET /programs` to find the list of available programs on a server.",
            "example" : [ "8f5de35b", "0e2d4a13" ],
            "items" : {
              "type" : "string"
            }
          },
          "programNames" : {
            "type" : "array",
            "description" : "Use this parameter to only return results associated with the given program names. Program names are not required to be unique.\n\nUse `GET /programs` to find the list of available programs on a server.",
            "example" : [ "Better Breeding Program", "Best Breeding Program" ],
            "items" : {
              "type" : "string"
            }
          },
          "species" : {
            "type" : "array",
            "description" : "List of Species names to identify germplasm",
            "nullable" : true,
            "example" : [ "fructus", "mays" ],
            "items" : {
              "type" : "string"
            }
          },
          "studyDbIds" : {
            "type" : "array",
            "description" : "List of study identifiers to search for",
            "example" : [ "cf6c4bd4", "691e69d6" ],
            "items" : {
              "type" : "string"
            }
          },
          "studyNames" : {
            "type" : "array",
            "description" : "List of study names to filter search results",
            "example" : [ "The First Bob Study 2017", "Wheat Yield Trial 246" ],
            "items" : {
              "type" : "string"
            }
          },
          "synonyms" : {
            "type" : "array",
            "description" : "List of alternative names or IDs used to reference this germplasm",
            "nullable" : true,
            "example" : [ "variety_1", "2c38f9b6" ],
            "items" : {
              "type" : "string"
            }
          },
          "trialDbIds" : {
            "type" : "array",
            "description" : "The ID which uniquely identifies a trial to search for",
            "example" : [ "d2593dc2", "9431a731" ],
            "items" : {
              "type" : "string"
            }
          },
          "trialNames" : {
            "type" : "array",
            "description" : "The human readable name of a trial to search for",
            "example" : [ "All Yield Trials 2016", "Disease Resistance Study Comparison Group" ],
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "Person" : {
        "required" : [ "personDbId" ],
        "type" : "object",
        "properties" : {
          "additionalInfo" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.",
            "nullable" : true
          },
          "description" : {
            "type" : "string",
            "description" : "description of this person",
            "nullable" : true,
            "example" : "Bob likes pina coladas and getting caught in the rain."
          },
          "emailAddress" : {
            "type" : "string",
            "description" : "email address for this person",
            "nullable" : true,
            "example" : "bob@bob.com"
          },
          "externalReferences" : {
            "title" : "ExternalReferences",
            "type" : "array",
            "description" : "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.",
            "nullable" : true,
            "example" : [ {
              "referenceId" : "doi:10.155454/12341234",
              "referenceSource" : "DOI"
            }, {
              "referenceId" : "75a50e76",
              "referenceSource" : "Remote Data Collection Upload Tool"
            } ],
            "items" : {
              "type" : "object",
              "properties" : {
                "referenceID" : {
                  "type" : "string",
                  "description" : "**Deprecated in v2.1** Please use `referenceId`. Github issue number #460 \n<br>The external reference ID. Could be a simple string or a URI.",
                  "nullable" : true,
                  "deprecated" : true
                },
                "referenceId" : {
                  "type" : "string",
                  "description" : "The external reference ID. Could be a simple string or a URI."
                },
                "referenceSource" : {
                  "type" : "string",
                  "description" : "An identifier for the source system or database of this reference"
                }
              }
            }
          },
          "firstName" : {
            "type" : "string",
            "description" : "Persons first name",
            "nullable" : true,
            "example" : "Bob"
          },
          "lastName" : {
            "type" : "string",
            "description" : "Persons last name",
            "nullable" : true,
            "example" : "Robertson"
          },
          "mailingAddress" : {
            "type" : "string",
            "description" : "physical address of this person",
            "nullable" : true,
            "example" : "123 Street Ave, City, State, Country"
          },
          "middleName" : {
            "type" : "string",
            "description" : "Persons middle name",
            "nullable" : true,
            "example" : "Danger"
          },
          "personDbId" : {
            "type" : "string",
            "description" : "Unique ID for a person",
            "example" : "14340a54"
          },
          "phoneNumber" : {
            "type" : "string",
            "description" : "phone number of this person",
            "nullable" : true,
            "example" : "+1-555-555-5555"
          },
          "userID" : {
            "type" : "string",
            "description" : "A systems user ID associated with this person. Different from personDbId because you could have a person who is not a user of the system.",
            "nullable" : true,
            "example" : "bob-23"
          }
        },
        "x-brapi-metadata" : {
          "description" : "A generic object used to maintain the metadata needed to describe a human. The Person might be a software user, a field technician, or a primary contact for a Program.",
          "module" : "BrAPI-Core",
          "primaryModel" : true,
          "title" : "Person"
        }
      },
      "PersonNewRequest" : {
        "type" : "object",
        "properties" : {
          "additionalInfo" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.",
            "nullable" : true
          },
          "description" : {
            "type" : "string",
            "description" : "description of this person",
            "nullable" : true,
            "example" : "Bob likes pina coladas and getting caught in the rain."
          },
          "emailAddress" : {
            "type" : "string",
            "description" : "email address for this person",
            "nullable" : true,
            "example" : "bob@bob.com"
          },
          "externalReferences" : {
            "title" : "ExternalReferences",
            "type" : "array",
            "description" : "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.",
            "nullable" : true,
            "example" : [ {
              "referenceId" : "doi:10.155454/12341234",
              "referenceSource" : "DOI"
            }, {
              "referenceId" : "75a50e76",
              "referenceSource" : "Remote Data Collection Upload Tool"
            } ],
            "items" : {
              "type" : "object",
              "properties" : {
                "referenceID" : {
                  "type" : "string",
                  "description" : "**Deprecated in v2.1** Please use `referenceId`. Github issue number #460 \n<br>The external reference ID. Could be a simple string or a URI.",
                  "nullable" : true,
                  "deprecated" : true
                },
                "referenceId" : {
                  "type" : "string",
                  "description" : "The external reference ID. Could be a simple string or a URI."
                },
                "referenceSource" : {
                  "type" : "string",
                  "description" : "An identifier for the source system or database of this reference"
                }
              }
            }
          },
          "firstName" : {
            "type" : "string",
            "description" : "Persons first name",
            "nullable" : true,
            "example" : "Bob"
          },
          "lastName" : {
            "type" : "string",
            "description" : "Persons last name",
            "nullable" : true,
            "example" : "Robertson"
          },
          "mailingAddress" : {
            "type" : "string",
            "description" : "physical address of this person",
            "nullable" : true,
            "example" : "123 Street Ave, City, State, Country"
          },
          "middleName" : {
            "type" : "string",
            "description" : "Persons middle name",
            "nullable" : true,
            "example" : "Danger"
          },
          "phoneNumber" : {
            "type" : "string",
            "description" : "phone number of this person",
            "nullable" : true,
            "example" : "+1-555-555-5555"
          },
          "userID" : {
            "type" : "string",
            "description" : "A systems user ID associated with this person. Different from personDbId because you could have a person who is not a user of the system.",
            "nullable" : true,
            "example" : "bob-23"
          }
        }
      },
      "PersonSearchRequest" : {
        "type" : "object",
        "properties" : {
          "commonCropNames" : {
            "type" : "array",
            "description" : "The BrAPI Common Crop Name is the simple, generalized, widely accepted name of the organism being researched. It is most often used in multi-crop systems where digital resources need to be divided at a high level. Things like 'Maize', 'Wheat', and 'Rice' are examples of common crop names.\n\nUse this parameter to only return results associated with the given crops. \n\nUse `GET /commoncropnames` to find the list of available crops on a server.",
            "example" : [ "Tomatillo", "Paw Paw" ],
            "items" : {
              "type" : "string"
            }
          },
          "emailAddresses" : {
            "type" : "array",
            "description" : "email address for this person",
            "nullable" : true,
            "example" : [ "bob@bob.com", "rob@bob.com" ],
            "items" : {
              "type" : "string"
            }
          },
          "externalReferenceIDs" : {
            "type" : "array",
            "description" : "**Deprecated in v2.1** Please use `externalReferenceIds`. Github issue number #460 \n<br>List of external reference IDs. Could be a simple strings or a URIs. (use with `externalReferenceSources` parameter)",
            "example" : [ "doi:10.155454/12341234", "14a19841" ],
            "deprecated" : true,
            "items" : {
              "type" : "string"
            }
          },
          "externalReferenceIds" : {
            "type" : "array",
            "description" : "List of external reference IDs. Could be a simple strings or a URIs. (use with `externalReferenceSources` parameter)",
            "example" : [ "doi:10.155454/12341234", "14a19841" ],
            "items" : {
              "type" : "string"
            }
          },
          "externalReferenceSources" : {
            "type" : "array",
            "description" : "List of identifiers for the source system or database of an external reference (use with `externalReferenceIDs` parameter)",
            "example" : [ "DOI", "Field App Name" ],
            "items" : {
              "type" : "string"
            }
          },
          "firstNames" : {
            "type" : "array",
            "description" : "Persons first name",
            "nullable" : true,
            "example" : [ "Bob", "Rob" ],
            "items" : {
              "type" : "string"
            }
          },
          "lastNames" : {
            "type" : "array",
            "description" : "Persons last name",
            "nullable" : true,
            "example" : [ "Robertson", "Smith" ],
            "items" : {
              "type" : "string"
            }
          },
          "mailingAddresses" : {
            "type" : "array",
            "description" : "physical address of this person",
            "nullable" : true,
            "example" : [ "123 Main Street", "456 Side Street" ],
            "items" : {
              "type" : "string"
            }
          },
          "middleNames" : {
            "type" : "array",
            "description" : "Persons middle name",
            "nullable" : true,
            "example" : [ "Danger", "Fight" ],
            "items" : {
              "type" : "string"
            }
          },
          "page" : {
            "type" : "integer",
            "description" : "Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.",
            "example" : 0
          },
          "pageSize" : {
            "type" : "integer",
            "description" : "The size of the pages to be returned. Default is `1000`.",
            "example" : 1000
          },
          "personDbIds" : {
            "type" : "array",
            "description" : "Unique ID for this person",
            "nullable" : true,
            "example" : [ "1e7731ab", "bc28cff8" ],
            "items" : {
              "type" : "string"
            }
          },
          "phoneNumbers" : {
            "type" : "array",
            "description" : "phone number of this person",
            "nullable" : true,
            "example" : [ "9995555555", "8884444444" ],
            "items" : {
              "type" : "string"
            }
          },
          "programDbIds" : {
            "type" : "array",
            "description" : "A BrAPI Program represents the high level organization or group who is responsible for conducting trials and studies. Things like Breeding Programs and Funded Projects are considered BrAPI Programs. \n\nUse this parameter to only return results associated with the given programs. \n\nUse `GET /programs` to find the list of available programs on a server.",
            "example" : [ "8f5de35b", "0e2d4a13" ],
            "items" : {
              "type" : "string"
            }
          },
          "programNames" : {
            "type" : "array",
            "description" : "Use this parameter to only return results associated with the given program names. Program names are not required to be unique.\n\nUse `GET /programs` to find the list of available programs on a server.",
            "example" : [ "Better Breeding Program", "Best Breeding Program" ],
            "items" : {
              "type" : "string"
            }
          },
          "userIDs" : {
            "type" : "array",
            "description" : "A systems user ID associated with this person. Different from personDbId because you could have a person who is not a user of the system.",
            "nullable" : true,
            "example" : [ "bob", "rob" ],
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "PlannedCross" : {
        "required" : [ "plannedCrossDbId" ],
        "type" : "object",
        "properties" : {
          "additionalInfo" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.",
            "nullable" : true
          },
          "crossType" : {
            "type" : "string",
            "description" : "the type of cross",
            "nullable" : true,
            "example" : "BIPARENTAL",
            "enum" : [ "BIPARENTAL", "SELF", "OPEN_POLLINATED", "BULK", "BULK_SELFED", "BULK_OPEN_POLLINATED", "DOUBLE_HAPLOID" ]
          },
          "crossingProjectDbId" : {
            "type" : "string",
            "description" : "the unique identifier for a crossing project",
            "nullable" : true,
            "example" : "696d7c92"
          },
          "crossingProjectName" : {
            "type" : "string",
            "description" : "the human readable name for a crossing project",
            "nullable" : true,
            "example" : "my_Crosses_2018"
          },
          "externalReferences" : {
            "title" : "ExternalReferences",
            "type" : "array",
            "description" : "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.",
            "nullable" : true,
            "example" : [ {
              "referenceId" : "doi:10.155454/12341234",
              "referenceSource" : "DOI"
            }, {
              "referenceId" : "75a50e76",
              "referenceSource" : "Remote Data Collection Upload Tool"
            } ],
            "items" : {
              "type" : "object",
              "properties" : {
                "referenceID" : {
                  "type" : "string",
                  "description" : "**Deprecated in v2.1** Please use `referenceId`. Github issue number #460 \n<br>The external reference ID. Could be a simple string or a URI.",
                  "nullable" : true,
                  "deprecated" : true
                },
                "referenceId" : {
                  "type" : "string",
                  "description" : "The external reference ID. Could be a simple string or a URI."
                },
                "referenceSource" : {
                  "type" : "string",
                  "description" : "An identifier for the source system or database of this reference"
                }
              }
            }
          },
          "parent1" : {
            "type" : "object",
            "properties" : {
              "germplasmDbId" : {
                "type" : "string",
                "description" : "the unique identifier for a germplasm",
                "nullable" : true,
                "example" : "d34b10c3"
              },
              "germplasmName" : {
                "type" : "string",
                "description" : "the human readable name for a germplasm",
                "nullable" : true,
                "example" : "TME_419"
              },
              "observationUnitDbId" : {
                "type" : "string",
                "description" : "the unique identifier for an observation unit",
                "nullable" : true,
                "example" : "2e1926a7"
              },
              "observationUnitName" : {
                "type" : "string",
                "description" : "the human readable name for an observation unit",
                "nullable" : true,
                "example" : "my_Plot_9001"
              },
              "parentType" : {
                "type" : "string",
                "description" : "The type of parent ex. 'MALE', 'FEMALE', 'SELF', 'POPULATION', etc.",
                "example" : "MALE",
                "enum" : [ "MALE", "FEMALE", "SELF", "POPULATION" ]
              }
            },
            "nullable" : true
          },
          "parent2" : {
            "type" : "object",
            "properties" : {
              "germplasmDbId" : {
                "type" : "string",
                "description" : "the unique identifier for a germplasm",
                "nullable" : true,
                "example" : "d34b10c3"
              },
              "germplasmName" : {
                "type" : "string",
                "description" : "the human readable name for a germplasm",
                "nullable" : true,
                "example" : "TME_419"
              },
              "observationUnitDbId" : {
                "type" : "string",
                "description" : "the unique identifier for an observation unit",
                "nullable" : true,
                "example" : "2e1926a7"
              },
              "observationUnitName" : {
                "type" : "string",
                "description" : "the human readable name for an observation unit",
                "nullable" : true,
                "example" : "my_Plot_9001"
              },
              "parentType" : {
                "type" : "string",
                "description" : "The type of parent ex. 'MALE', 'FEMALE', 'SELF', 'POPULATION', etc.",
                "example" : "MALE",
                "enum" : [ "MALE", "FEMALE", "SELF", "POPULATION" ]
              }
            },
            "nullable" : true
          },
          "plannedCrossDbId" : {
            "type" : "string",
            "description" : "the unique identifier for a planned cross",
            "example" : "c8905568"
          },
          "plannedCrossName" : {
            "type" : "string",
            "description" : "the human readable name for a planned cross",
            "nullable" : true,
            "example" : "my_Crosses_2018_01"
          },
          "status" : {
            "type" : "string",
            "description" : "The status of this planned cross. Is it waiting to be performed ('TODO'), has it been completed successfully ('DONE'), or has it not been done on purpose ('SKIPPED').",
            "nullable" : true,
            "example" : "TODO",
            "enum" : [ "TODO", "DONE", "SKIPPED" ]
          }
        },
        "x-brapi-metadata" : {
          "description" : "Information regarding the intention to mate specific organisms together to produce offspring with desired traits. A PlannedCross becomes an actual Cross when the desired mating event actually occurs in the field.",
          "module" : "BrAPI-Germplasm",
          "primaryModel" : true,
          "title" : "PlannedCross"
        }
      },
      "PlannedCrossNewRequest" : {
        "type" : "object",
        "properties" : {
          "additionalInfo" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.",
            "nullable" : true
          },
          "crossType" : {
            "type" : "string",
            "description" : "the type of cross",
            "nullable" : true,
            "example" : "BIPARENTAL",
            "enum" : [ "BIPARENTAL", "SELF", "OPEN_POLLINATED", "BULK", "BULK_SELFED", "BULK_OPEN_POLLINATED", "DOUBLE_HAPLOID" ]
          },
          "crossingProjectDbId" : {
            "type" : "string",
            "description" : "the unique identifier for a crossing project",
            "nullable" : true,
            "example" : "696d7c92"
          },
          "crossingProjectName" : {
            "type" : "string",
            "description" : "the human readable name for a crossing project",
            "nullable" : true,
            "example" : "my_Crosses_2018"
          },
          "externalReferences" : {
            "title" : "ExternalReferences",
            "type" : "array",
            "description" : "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.",
            "nullable" : true,
            "example" : [ {
              "referenceId" : "doi:10.155454/12341234",
              "referenceSource" : "DOI"
            }, {
              "referenceId" : "75a50e76",
              "referenceSource" : "Remote Data Collection Upload Tool"
            } ],
            "items" : {
              "type" : "object",
              "properties" : {
                "referenceID" : {
                  "type" : "string",
                  "description" : "**Deprecated in v2.1** Please use `referenceId`. Github issue number #460 \n<br>The external reference ID. Could be a simple string or a URI.",
                  "nullable" : true,
                  "deprecated" : true
                },
                "referenceId" : {
                  "type" : "string",
                  "description" : "The external reference ID. Could be a simple string or a URI."
                },
                "referenceSource" : {
                  "type" : "string",
                  "description" : "An identifier for the source system or database of this reference"
                }
              }
            }
          },
          "parent1" : {
            "type" : "object",
            "properties" : {
              "germplasmDbId" : {
                "type" : "string",
                "description" : "the unique identifier for a germplasm",
                "nullable" : true,
                "example" : "d34b10c3"
              },
              "germplasmName" : {
                "type" : "string",
                "description" : "the human readable name for a germplasm",
                "nullable" : true,
                "example" : "TME_419"
              },
              "observationUnitDbId" : {
                "type" : "string",
                "description" : "the unique identifier for an observation unit",
                "nullable" : true,
                "example" : "2e1926a7"
              },
              "observationUnitName" : {
                "type" : "string",
                "description" : "the human readable name for an observation unit",
                "nullable" : true,
                "example" : "my_Plot_9001"
              },
              "parentType" : {
                "type" : "string",
                "description" : "The type of parent ex. 'MALE', 'FEMALE', 'SELF', 'POPULATION', etc.",
                "example" : "MALE",
                "enum" : [ "MALE", "FEMALE", "SELF", "POPULATION" ]
              }
            },
            "nullable" : true
          },
          "parent2" : {
            "type" : "object",
            "properties" : {
              "germplasmDbId" : {
                "type" : "string",
                "description" : "the unique identifier for a germplasm",
                "nullable" : true,
                "example" : "d34b10c3"
              },
              "germplasmName" : {
                "type" : "string",
                "description" : "the human readable name for a germplasm",
                "nullable" : true,
                "example" : "TME_419"
              },
              "observationUnitDbId" : {
                "type" : "string",
                "description" : "the unique identifier for an observation unit",
                "nullable" : true,
                "example" : "2e1926a7"
              },
              "observationUnitName" : {
                "type" : "string",
                "description" : "the human readable name for an observation unit",
                "nullable" : true,
                "example" : "my_Plot_9001"
              },
              "parentType" : {
                "type" : "string",
                "description" : "The type of parent ex. 'MALE', 'FEMALE', 'SELF', 'POPULATION', etc.",
                "example" : "MALE",
                "enum" : [ "MALE", "FEMALE", "SELF", "POPULATION" ]
              }
            },
            "nullable" : true
          },
          "plannedCrossName" : {
            "type" : "string",
            "description" : "the human readable name for a planned cross",
            "nullable" : true,
            "example" : "my_Crosses_2018_01"
          },
          "status" : {
            "type" : "string",
            "description" : "The status of this planned cross. Is it waiting to be performed ('TODO'), has it been completed successfully ('DONE'), or has it not been done on purpose ('SKIPPED').",
            "nullable" : true,
            "example" : "TODO",
            "enum" : [ "TODO", "DONE", "SKIPPED" ]
          }
        }
      },
      "Plate" : {
        "required" : [ "plateDbId", "plateName" ],
        "type" : "object",
        "properties" : {
          "additionalInfo" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.",
            "nullable" : true
          },
          "externalReferences" : {
            "title" : "ExternalReferences",
            "type" : "array",
            "description" : "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.",
            "nullable" : true,
            "example" : [ {
              "referenceId" : "doi:10.155454/12341234",
              "referenceSource" : "DOI"
            }, {
              "referenceId" : "75a50e76",
              "referenceSource" : "Remote Data Collection Upload Tool"
            } ],
            "items" : {
              "type" : "object",
              "properties" : {
                "referenceID" : {
                  "type" : "string",
                  "description" : "**Deprecated in v2.1** Please use `referenceId`. Github issue number #460 \n<br>The external reference ID. Could be a simple string or a URI.",
                  "nullable" : true,
                  "deprecated" : true
                },
                "referenceId" : {
                  "type" : "string",
                  "description" : "The external reference ID. Could be a simple string or a URI."
                },
                "referenceSource" : {
                  "type" : "string",
                  "description" : "An identifier for the source system or database of this reference"
                }
              }
            }
          },
          "plateBarcode" : {
            "type" : "string",
            "description" : "A unique identifier physically attached to a `Plate`",
            "nullable" : true,
            "example" : "11223344"
          },
          "plateDbId" : {
            "type" : "string",
            "description" : "The ID which uniquely identifies a `Plate`",
            "example" : "a106467f"
          },
          "plateFormat" : {
            "type" : "string",
            "description" : "Enum for plate formats, usually \"PLATE_96\" for a 96 well plate or \"TUBES\" for plateless format",
            "nullable" : true,
            "example" : "PLATE_96",
            "enum" : [ "PLATE_96", "TUBES" ]
          },
          "plateName" : {
            "type" : "string",
            "description" : "A human readable name for a `Plate`",
            "example" : "Plate_123_XYZ"
          },
          "programDbId" : {
            "type" : "string",
            "description" : "The ID which uniquely identifies a `Program` within the given database server",
            "nullable" : true,
            "example" : "bd748e00"
          },
          "sampleType" : {
            "type" : "string",
            "description" : "The type of samples taken. ex. 'DNA', 'RNA', 'Tissue', etc",
            "nullable" : true,
            "example" : "TISSUE",
            "enum" : [ "DNA", "RNA", "TISSUE", "MIXED" ]
          },
          "studyDbId" : {
            "type" : "string",
            "description" : "The ID which uniquely identifies a `Study` within the given database server",
            "nullable" : true,
            "example" : "64bd6bf9"
          },
          "trialDbId" : {
            "type" : "string",
            "description" : "The ID which uniquely identifies a `Trial` within the given database server",
            "nullable" : true,
            "example" : "d34c5349"
          }
        },
        "x-brapi-metadata" : {
          "description" : "A Plate represents the metadata for a collection of Samples. The physical Plate being represented might be a plastic tray full of Samples, or a group of Samples stored in individual containers ie bags, test tubes, etc. Whatever the container is, the Samples in a Plate should be related by the same physical space, though they may or may not be related as part of the same experiment or analysis.",
          "module" : "BrAPI-Genotyping",
          "primaryModel" : true,
          "title" : "Plate"
        }
      },
      "PlateFormat" : {
        "type" : "string",
        "description" : "Enum for plate formats, usually \"PLATE_96\" for a 96 well plate or \"TUBES\" for plateless format",
        "example" : "PLATE_96",
        "enum" : [ "PLATE_96", "TUBES" ]
      },
      "PlateNewRequest" : {
        "required" : [ "plateName" ],
        "type" : "object",
        "properties" : {
          "additionalInfo" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.",
            "nullable" : true
          },
          "externalReferences" : {
            "title" : "ExternalReferences",
            "type" : "array",
            "description" : "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.",
            "nullable" : true,
            "example" : [ {
              "referenceId" : "doi:10.155454/12341234",
              "referenceSource" : "DOI"
            }, {
              "referenceId" : "75a50e76",
              "referenceSource" : "Remote Data Collection Upload Tool"
            } ],
            "items" : {
              "type" : "object",
              "properties" : {
                "referenceID" : {
                  "type" : "string",
                  "description" : "**Deprecated in v2.1** Please use `referenceId`. Github issue number #460 \n<br>The external reference ID. Could be a simple string or a URI.",
                  "nullable" : true,
                  "deprecated" : true
                },
                "referenceId" : {
                  "type" : "string",
                  "description" : "The external reference ID. Could be a simple string or a URI."
                },
                "referenceSource" : {
                  "type" : "string",
                  "description" : "An identifier for the source system or database of this reference"
                }
              }
            }
          },
          "plateBarcode" : {
            "type" : "string",
            "description" : "A unique identifier physically attached to a `Plate`",
            "nullable" : true,
            "example" : "11223344"
          },
          "plateFormat" : {
            "type" : "string",
            "description" : "Enum for plate formats, usually \"PLATE_96\" for a 96 well plate or \"TUBES\" for plateless format",
            "nullable" : true,
            "example" : "PLATE_96",
            "enum" : [ "PLATE_96", "TUBES" ]
          },
          "plateName" : {
            "type" : "string",
            "description" : "A human readable name for a `Plate`",
            "example" : "Plate_123_XYZ"
          },
          "programDbId" : {
            "type" : "string",
            "description" : "The ID which uniquely identifies a `Program` within the given database server",
            "nullable" : true,
            "example" : "bd748e00"
          },
          "sampleType" : {
            "type" : "string",
            "description" : "The type of samples taken. ex. 'DNA', 'RNA', 'Tissue', etc",
            "nullable" : true,
            "example" : "TISSUE",
            "enum" : [ "DNA", "RNA", "TISSUE", "MIXED" ]
          },
          "studyDbId" : {
            "type" : "string",
            "description" : "The ID which uniquely identifies a `Study` within the given database server",
            "nullable" : true,
            "example" : "64bd6bf9"
          },
          "trialDbId" : {
            "type" : "string",
            "description" : "The ID which uniquely identifies a `Trial` within the given database server",
            "nullable" : true,
            "example" : "d34c5349"
          }
        }
      },
      "PlateSearchRequest" : {
        "type" : "object",
        "properties" : {
          "commonCropNames" : {
            "type" : "array",
            "description" : "The BrAPI Common Crop Name is the simple, generalized, widely accepted name of the organism being researched. It is most often used in multi-crop systems where digital resources need to be divided at a high level. Things like 'Maize', 'Wheat', and 'Rice' are examples of common crop names.\n\nUse this parameter to only return results associated with the given crops. \n\nUse `GET /commoncropnames` to find the list of available crops on a server.",
            "example" : [ "Tomatillo", "Paw Paw" ],
            "items" : {
              "type" : "string"
            }
          },
          "externalReferenceIDs" : {
            "type" : "array",
            "description" : "**Deprecated in v2.1** Please use `externalReferenceIds`. Github issue number #460 \n<br>List of external reference IDs. Could be a simple strings or a URIs. (use with `externalReferenceSources` parameter)",
            "example" : [ "doi:10.155454/12341234", "14a19841" ],
            "deprecated" : true,
            "items" : {
              "type" : "string"
            }
          },
          "externalReferenceIds" : {
            "type" : "array",
            "description" : "List of external reference IDs. Could be a simple strings or a URIs. (use with `externalReferenceSources` parameter)",
            "example" : [ "doi:10.155454/12341234", "14a19841" ],
            "items" : {
              "type" : "string"
            }
          },
          "externalReferenceSources" : {
            "type" : "array",
            "description" : "List of identifiers for the source system or database of an external reference (use with `externalReferenceIDs` parameter)",
            "example" : [ "DOI", "Field App Name" ],
            "items" : {
              "type" : "string"
            }
          },
          "germplasmDbIds" : {
            "type" : "array",
            "description" : "The ID which uniquely identifies a germplasm",
            "nullable" : true,
            "example" : [ "d745e1e2", "6dd28d74" ],
            "items" : {
              "type" : "string"
            }
          },
          "germplasmNames" : {
            "type" : "array",
            "description" : "List of human readable names to identify germplasm to search for",
            "example" : [ "A0000003", "A0000477" ],
            "items" : {
              "type" : "string"
            }
          },
          "observationUnitDbIds" : {
            "type" : "array",
            "description" : "The ID which uniquely identifies an observation unit",
            "nullable" : true,
            "example" : [ "3cd0ca36", "983f3b14" ],
            "items" : {
              "type" : "string"
            }
          },
          "page" : {
            "type" : "integer",
            "description" : "Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.",
            "example" : 0
          },
          "pageSize" : {
            "type" : "integer",
            "description" : "The size of the pages to be returned. Default is `1000`.",
            "example" : 1000
          },
          "plateBarcodes" : {
            "type" : "array",
            "description" : "A unique identifier physically attached to the plate",
            "nullable" : true,
            "example" : [ "11223344", "55667788" ],
            "items" : {
              "type" : "string"
            }
          },
          "plateDbIds" : {
            "type" : "array",
            "description" : "The ID which uniquely identifies a plate of samples",
            "nullable" : true,
            "example" : [ "0cac98b8", "b96125fb" ],
            "items" : {
              "type" : "string"
            }
          },
          "plateNames" : {
            "type" : "array",
            "description" : "The human readable name of a plate of samples",
            "nullable" : true,
            "example" : [ "0cac98b8", "b96125fb" ],
            "items" : {
              "type" : "string"
            }
          },
          "programDbIds" : {
            "type" : "array",
            "description" : "A BrAPI Program represents the high level organization or group who is responsible for conducting trials and studies. Things like Breeding Programs and Funded Projects are considered BrAPI Programs. \n\nUse this parameter to only return results associated with the given programs. \n\nUse `GET /programs` to find the list of available programs on a server.",
            "example" : [ "8f5de35b", "0e2d4a13" ],
            "items" : {
              "type" : "string"
            }
          },
          "programNames" : {
            "type" : "array",
            "description" : "Use this parameter to only return results associated with the given program names. Program names are not required to be unique.\n\nUse `GET /programs` to find the list of available programs on a server.",
            "example" : [ "Better Breeding Program", "Best Breeding Program" ],
            "items" : {
              "type" : "string"
            }
          },
          "sampleDbIds" : {
            "type" : "array",
            "description" : "The ID which uniquely identifies a sample",
            "nullable" : true,
            "example" : [ "3bece2ca", "dd286cc6" ],
            "items" : {
              "type" : "string"
            }
          },
          "sampleGroupDbIds" : {
            "type" : "array",
            "description" : "The unique identifier for a group of related Samples",
            "nullable" : true,
            "example" : [ "45e1e2d7", "6cc6dd28" ],
            "items" : {
              "type" : "string"
            }
          },
          "sampleNames" : {
            "type" : "array",
            "description" : "The human readable name of the sample",
            "nullable" : true,
            "example" : [ "SA_111", "SA_222" ],
            "items" : {
              "type" : "string"
            }
          },
          "studyDbIds" : {
            "type" : "array",
            "description" : "List of study identifiers to search for",
            "example" : [ "cf6c4bd4", "691e69d6" ],
            "items" : {
              "type" : "string"
            }
          },
          "studyNames" : {
            "type" : "array",
            "description" : "List of study names to filter search results",
            "example" : [ "The First Bob Study 2017", "Wheat Yield Trial 246" ],
            "items" : {
              "type" : "string"
            }
          },
          "trialDbIds" : {
            "type" : "array",
            "description" : "The ID which uniquely identifies a trial to search for",
            "example" : [ "d2593dc2", "9431a731" ],
            "items" : {
              "type" : "string"
            }
          },
          "trialNames" : {
            "type" : "array",
            "description" : "The human readable name of a trial to search for",
            "example" : [ "All Yield Trials 2016", "Disease Resistance Study Comparison Group" ],
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "ProgenyNodeDEP" : {
        "required" : [ "germplasmDbId", "progeny" ],
        "type" : "object",
        "properties" : {
          "germplasmDbId" : {
            "type" : "string",
            "description" : "The ID which uniquely identifies a germplasm",
            "example" : "01b974dc"
          },
          "germplasmName" : {
            "type" : "string",
            "description" : "A human readable name for a germplasm",
            "nullable" : true,
            "example" : "A0021004"
          },
          "progeny" : {
            "type" : "array",
            "description" : "List of germplasm entities which are direct children of this germplasm",
            "example" : [ {
              "germplasmDbId" : "e8d5dad7",
              "germplasmName" : "A0021011",
              "parentType" : "FEMALE"
            }, {
              "germplasmDbId" : "ac07fbd8",
              "germplasmName" : "A0021012",
              "parentType" : "FEMALE"
            }, {
              "germplasmDbId" : "07f45f67",
              "germplasmName" : "A0021013",
              "parentType" : "FEMALE"
            } ],
            "items" : {
              "required" : [ "germplasmDbId", "parentType" ],
              "type" : "object",
              "properties" : {
                "germplasmDbId" : {
                  "type" : "string",
                  "description" : "The unique identifier of a progeny germplasm",
                  "example" : "e8d5dad7"
                },
                "germplasmName" : {
                  "type" : "string",
                  "description" : "The human readable name of a progeny germplasm",
                  "nullable" : true,
                  "example" : "A0021011"
                },
                "parentType" : {
                  "$ref" : "#/components/schemas/ParentTypeDEP"
                }
              }
            }
          }
        }
      },
      "Program" : {
        "required" : [ "programDbId", "programName" ],
        "type" : "object",
        "properties" : {
          "abbreviation" : {
            "type" : "string",
            "description" : "A shortened version of the human readable name for a Program",
            "nullable" : true,
            "example" : "P1"
          },
          "additionalInfo" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.",
            "nullable" : true
          },
          "commonCropName" : {
            "type" : "string",
            "description" : "Common name for the crop which this program is for",
            "nullable" : true,
            "example" : "Tomatillo"
          },
          "documentationURL" : {
            "type" : "string",
            "description" : "A URL to the human readable documentation of an object",
            "format" : "uri",
            "nullable" : true,
            "example" : "https://wiki.brapi.org"
          },
          "externalReferences" : {
            "title" : "ExternalReferences",
            "type" : "array",
            "description" : "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.",
            "nullable" : true,
            "example" : [ {
              "referenceId" : "doi:10.155454/12341234",
              "referenceSource" : "DOI"
            }, {
              "referenceId" : "75a50e76",
              "referenceSource" : "Remote Data Collection Upload Tool"
            } ],
            "items" : {
              "type" : "object",
              "properties" : {
                "referenceID" : {
                  "type" : "string",
                  "description" : "**Deprecated in v2.1** Please use `referenceId`. Github issue number #460 \n<br>The external reference ID. Could be a simple string or a URI.",
                  "nullable" : true,
                  "deprecated" : true
                },
                "referenceId" : {
                  "type" : "string",
                  "description" : "The external reference ID. Could be a simple string or a URI."
                },
                "referenceSource" : {
                  "type" : "string",
                  "description" : "An identifier for the source system or database of this reference"
                }
              }
            }
          },
          "fundingInformation" : {
            "type" : "string",
            "description" : "Information describing the grant or funding source for this program",
            "nullable" : true,
            "example" : "EU: FP7-244374"
          },
          "leadPersonDbId" : {
            "type" : "string",
            "description" : "The unique identifier of the program leader",
            "nullable" : true,
            "example" : "fe6f5c50"
          },
          "leadPersonName" : {
            "type" : "string",
            "description" : "The name of the program leader",
            "nullable" : true,
            "example" : "Bob Robertson"
          },
          "objective" : {
            "type" : "string",
            "description" : "The primary objective of the program",
            "nullable" : true,
            "example" : "Make a better tomatillo"
          },
          "programDbId" : {
            "type" : "string",
            "description" : "The ID which uniquely identifies the program",
            "example" : "f60f15b2"
          },
          "programName" : {
            "type" : "string",
            "description" : "Human readable name of the program",
            "example" : "Tomatillo_Breeding_Program"
          },
          "programType" : {
            "type" : "string",
            "description" : "The type of program entity this object represents\n<br/> 'STANDARD' represents a standard, permenant breeding program\n<br/> 'PROJECT' represents a short term project, usually with a set time limit based on funding   ",
            "example" : "STANDARD",
            "enum" : [ "STANDARD", "PROJECT" ]
          }
        },
        "x-brapi-metadata" : {
          "description" : "A BrAPI Program represents the high level organization or group who is responsible for conducting trials and studies. Things like Breeding Programs and Funded Projects are considered BrAPI Programs. A Program can contain multiple Trials. A Trial can contain multiple Studies.",
          "module" : "BrAPI-Core",
          "primaryModel" : true,
          "title" : "Program"
        }
      },
      "ProgramNewRequest" : {
        "required" : [ "programName" ],
        "type" : "object",
        "properties" : {
          "abbreviation" : {
            "type" : "string",
            "description" : "A shortened version of the human readable name for a Program",
            "nullable" : true,
            "example" : "P1"
          },
          "additionalInfo" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.",
            "nullable" : true
          },
          "commonCropName" : {
            "type" : "string",
            "description" : "Common name for the crop which this program is for",
            "nullable" : true,
            "example" : "Tomatillo"
          },
          "documentationURL" : {
            "type" : "string",
            "description" : "A URL to the human readable documentation of an object",
            "format" : "uri",
            "nullable" : true,
            "example" : "https://wiki.brapi.org"
          },
          "externalReferences" : {
            "title" : "ExternalReferences",
            "type" : "array",
            "description" : "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.",
            "nullable" : true,
            "example" : [ {
              "referenceId" : "doi:10.155454/12341234",
              "referenceSource" : "DOI"
            }, {
              "referenceId" : "75a50e76",
              "referenceSource" : "Remote Data Collection Upload Tool"
            } ],
            "items" : {
              "type" : "object",
              "properties" : {
                "referenceID" : {
                  "type" : "string",
                  "description" : "**Deprecated in v2.1** Please use `referenceId`. Github issue number #460 \n<br>The external reference ID. Could be a simple string or a URI.",
                  "nullable" : true,
                  "deprecated" : true
                },
                "referenceId" : {
                  "type" : "string",
                  "description" : "The external reference ID. Could be a simple string or a URI."
                },
                "referenceSource" : {
                  "type" : "string",
                  "description" : "An identifier for the source system or database of this reference"
                }
              }
            }
          },
          "fundingInformation" : {
            "type" : "string",
            "description" : "Information describing the grant or funding source for this program",
            "nullable" : true,
            "example" : "EU: FP7-244374"
          },
          "leadPersonDbId" : {
            "type" : "string",
            "description" : "The unique identifier of the program leader",
            "nullable" : true,
            "example" : "fe6f5c50"
          },
          "leadPersonName" : {
            "type" : "string",
            "description" : "The name of the program leader",
            "nullable" : true,
            "example" : "Bob Robertson"
          },
          "objective" : {
            "type" : "string",
            "description" : "The primary objective of the program",
            "nullable" : true,
            "example" : "Make a better tomatillo"
          },
          "programName" : {
            "type" : "string",
            "description" : "Human readable name of the program",
            "example" : "Tomatillo_Breeding_Program"
          },
          "programType" : {
            "type" : "string",
            "description" : "The type of program entity this object represents\n<br/> 'STANDARD' represents a standard, permenant breeding program\n<br/> 'PROJECT' represents a short term project, usually with a set time limit based on funding   ",
            "example" : "STANDARD",
            "enum" : [ "STANDARD", "PROJECT" ]
          }
        }
      },
      "ProgramSearchRequest" : {
        "type" : "object",
        "properties" : {
          "abbreviations" : {
            "type" : "array",
            "description" : "A list of shortened human readable names for a set of Programs",
            "nullable" : true,
            "example" : [ "P1", "P2" ],
            "items" : {
              "type" : "string"
            }
          },
          "commonCropNames" : {
            "type" : "array",
            "description" : "The BrAPI Common Crop Name is the simple, generalized, widely accepted name of the organism being researched. It is most often used in multi-crop systems where digital resources need to be divided at a high level. Things like 'Maize', 'Wheat', and 'Rice' are examples of common crop names.\n\nUse this parameter to only return results associated with the given crops. \n\nUse `GET /commoncropnames` to find the list of available crops on a server.",
            "example" : [ "Tomatillo", "Paw Paw" ],
            "items" : {
              "type" : "string"
            }
          },
          "externalReferenceIDs" : {
            "type" : "array",
            "description" : "**Deprecated in v2.1** Please use `externalReferenceIds`. Github issue number #460 \n<br>List of external reference IDs. Could be a simple strings or a URIs. (use with `externalReferenceSources` parameter)",
            "example" : [ "doi:10.155454/12341234", "14a19841" ],
            "deprecated" : true,
            "items" : {
              "type" : "string"
            }
          },
          "externalReferenceIds" : {
            "type" : "array",
            "description" : "List of external reference IDs. Could be a simple strings or a URIs. (use with `externalReferenceSources` parameter)",
            "example" : [ "doi:10.155454/12341234", "14a19841" ],
            "items" : {
              "type" : "string"
            }
          },
          "externalReferenceSources" : {
            "type" : "array",
            "description" : "List of identifiers for the source system or database of an external reference (use with `externalReferenceIDs` parameter)",
            "example" : [ "DOI", "Field App Name" ],
            "items" : {
              "type" : "string"
            }
          },
          "leadPersonDbIds" : {
            "type" : "array",
            "description" : "The person DbIds of the program leader to search for",
            "nullable" : true,
            "example" : [ "d8bd96c7", "a2b9c8e7" ],
            "items" : {
              "type" : "string"
            }
          },
          "leadPersonNames" : {
            "type" : "array",
            "description" : "The names of the program leader to search for",
            "nullable" : true,
            "example" : [ "Bob Robertson", "Rob Robertson" ],
            "items" : {
              "type" : "string"
            }
          },
          "objectives" : {
            "type" : "array",
            "description" : "A program objective to search for",
            "nullable" : true,
            "example" : [ "Objective Code One", "This is a longer objective search query" ],
            "items" : {
              "type" : "string"
            }
          },
          "page" : {
            "type" : "integer",
            "description" : "Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.",
            "example" : 0
          },
          "pageSize" : {
            "type" : "integer",
            "description" : "The size of the pages to be returned. Default is `1000`.",
            "example" : 1000
          },
          "programDbIds" : {
            "type" : "array",
            "description" : "A BrAPI Program represents the high level organization or group who is responsible for conducting trials and studies. Things like Breeding Programs and Funded Projects are considered BrAPI Programs. \n\nUse this parameter to only return results associated with the given programs. \n\nUse `GET /programs` to find the list of available programs on a server.",
            "example" : [ "8f5de35b", "0e2d4a13" ],
            "items" : {
              "type" : "string"
            }
          },
          "programNames" : {
            "type" : "array",
            "description" : "Use this parameter to only return results associated with the given program names. Program names are not required to be unique.\n\nUse `GET /programs` to find the list of available programs on a server.",
            "example" : [ "Better Breeding Program", "Best Breeding Program" ],
            "items" : {
              "type" : "string"
            }
          },
          "programTypes" : {
            "type" : "array",
            "description" : "The type of program entity this object represents\n<br/> 'STANARD' represents a standard, permenant breeding program\n<br/> 'PROJECT' represents a short term project, usually with a set time limit based on funding ",
            "nullable" : true,
            "example" : [ "STANARD", "PROJECT" ],
            "items" : {
              "type" : "string",
              "enum" : [ "STANARD", "PROJECT" ]
            }
          }
        }
      },
      "Reference" : {
        "required" : [ "referenceDbId", "referenceName" ],
        "type" : "object",
        "properties" : {
          "additionalInfo" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.",
            "nullable" : true
          },
          "commonCropName" : {
            "type" : "string",
            "description" : "Common name for the crop",
            "nullable" : true,
            "example" : "Maize"
          },
          "externalReferences" : {
            "$ref" : "#/components/schemas/ExternalReferences"
          },
          "isDerived" : {
            "type" : "boolean",
            "description" : "A sequence X is said to be derived from source sequence Y, if X and Y are of the same length and the per-base sequence divergence at A/C/G/T bases is sufficiently small. Two sequences derived from the same official sequence share the same coordinates and annotations, and can be replaced with the official sequence for certain use cases.",
            "format" : "boolean",
            "nullable" : true,
            "example" : false
          },
          "length" : {
            "type" : "integer",
            "description" : "The length of this `Reference` sequence.",
            "nullable" : true,
            "example" : 50000000
          },
          "md5checksum" : {
            "type" : "string",
            "description" : "The MD5 checksum uniquely representing this `Reference` as a lower-case hexadecimal string, calculated as the MD5 of the upper-case sequence excluding all whitespace characters (this is equivalent to SQ:M5 in SAM).",
            "nullable" : true,
            "example" : "c2365e900c81a89cf74d83dab60df146"
          },
          "referenceDbId" : {
            "type" : "string",
            "description" : "The unique identifier for a `Reference`",
            "example" : "fc0a81d0"
          },
          "referenceName" : {
            "type" : "string",
            "description" : "The human readable name of a `Reference` within a `ReferenceSet`.",
            "example" : "Chromosome 2"
          },
          "referenceSetDbId" : {
            "type" : "string",
            "description" : "The unique identifier for a `ReferenceSet`",
            "nullable" : true,
            "example" : "c1ecfef1"
          },
          "referenceSetName" : {
            "type" : "string",
            "description" : "The human readable name of a `ReferenceSet`",
            "nullable" : true,
            "example" : "The Best Assembly Ever"
          },
          "sourceAccessions" : {
            "type" : "array",
            "description" : "All known corresponding accession IDs in INSDC (GenBank/ENA/DDBJ) which must include a version number, e.g. `GCF_000001405.26`.",
            "nullable" : true,
            "example" : [ "GCF_000001405.26" ],
            "items" : {
              "type" : "string"
            }
          },
          "sourceDivergence" : {
            "type" : "number",
            "description" : "The `sourceDivergence` is the fraction of non-indel bases that do not match the `Reference` this message was derived from.",
            "format" : "float",
            "nullable" : true,
            "example" : 0.01
          },
          "sourceGermplasm" : {
            "type" : "array",
            "description" : "All known corresponding Germplasm",
            "nullable" : true,
            "items" : {
              "type" : "object",
              "properties" : {
                "germplasmDbId" : {
                  "type" : "string",
                  "description" : "The ID which uniquely identifies a `Germplasm` within the given database server",
                  "example" : "d4076594"
                },
                "germplasmName" : {
                  "type" : "string",
                  "description" : "The human readable name of a `Germplasm`",
                  "example" : "A0000003"
                }
              }
            }
          },
          "sourceURI" : {
            "type" : "string",
            "description" : "The URI from which the sequence was obtained. Specifies a FASTA format file/string with one name, sequence pair. In most cases, clients should call the `getReferenceBases()` method to obtain sequence bases for a `Reference` instead of attempting to retrieve this URI.",
            "nullable" : true,
            "example" : "https://wiki.brapi.org/files/demo.fast"
          },
          "species" : {
            "$ref" : "#/components/schemas/OntologyTerm"
          }
        },
        "description" : "A `Reference` is a canonical assembled contig, intended to act as a reference coordinate space for other genomic annotations. A single `Reference` might represent the human chromosome 1, for instance. `References` are designed to be immutable.",
        "x-brapi-metadata" : {
          "description" : "A `Reference` is a canonical assembled contig, intended to act as a reference coordinate space for other genomic annotations. A single `Reference` might represent the human chromosome 1, for instance. `References` are designed to be immutable.",
          "module" : "BrAPI-Genotyping",
          "primaryModel" : true,
          "title" : "Reference"
        }
      },
      "ReferenceBases" : {
        "type" : "object",
        "properties" : {
          "nextPageToken" : {
            "type" : "string",
            "description" : "The continuation token, which is used to page through large result sets. Provide this value in a subsequent request to return the next page of results. This field will be empty if there are not any additional results.",
            "nullable" : true,
            "example" : "3a3d658a"
          },
          "offset" : {
            "type" : "integer",
            "description" : "The offset position (0-based) of the given sequence from the start of this `Reference`. This value will differ for each page in a request.",
            "nullable" : true,
            "example" : 20000
          },
          "sequence" : {
            "type" : "string",
            "description" : "A sub-string of the bases that make up this reference. Bases are represented as IUPAC-IUB codes; this string matches the regular expression `[ACGTMRWSYKVHDBN]*`.",
            "nullable" : true,
            "example" : "TAGGATTGAGCTCTATATTAGGATTGAGCTCTATATTAGGATTGAGCTCTATATTAGGATTGAGCTCTATATTAGGATTGAGCTCTATATTAGGATTGAGCTCTATATTAGGATTGAGCTCTATATTAGGATTGAGCTCTATATTAGGATTGAGCTCTATAT"
          }
        },
        "description" : "A string representation of the `Reference` base alleles."
      },
      "ReferenceSet" : {
        "required" : [ "referenceSetDbId", "referenceSetName" ],
        "type" : "object",
        "properties" : {
          "additionalInfo" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.",
            "nullable" : true
          },
          "assemblyPUI" : {
            "type" : "string",
            "description" : "The remaining information is about the source of the sequences Public id of this reference set, such as `GRCH_37`.",
            "nullable" : true,
            "example" : "doi://10.12345/fake/9876"
          },
          "commonCropName" : {
            "type" : "string",
            "description" : "Common name for the crop",
            "nullable" : true,
            "example" : "Maize"
          },
          "description" : {
            "type" : "string",
            "description" : "Optional free text description of this reference set.",
            "nullable" : true,
            "example" : "This is an example description for an assembly"
          },
          "externalReferences" : {
            "$ref" : "#/components/schemas/ExternalReferences"
          },
          "isDerived" : {
            "type" : "boolean",
            "description" : "A reference set may be derived from a source if it contains additional sequences, or some of the sequences within it are derived (see the definition of `isDerived` in `Reference`).",
            "format" : "boolean",
            "nullable" : true
          },
          "md5checksum" : {
            "type" : "string",
            "description" : "Order-independent MD5 checksum which identifies this `ReferenceSet`.\n\nTo compute this checksum, make a list of `Reference.md5checksum` for all\n`Reference` s in this set. Then sort that list, and take the MD5 hash of\nall the strings concatenated together. Express the hash as a lower-case\nhexadecimal string.",
            "nullable" : true,
            "example" : "c2365e900c81a89cf74d83dab60df146"
          },
          "referenceSetDbId" : {
            "type" : "string",
            "description" : "The unique identifier for a ReferenceSet",
            "example" : "c1ecfef1"
          },
          "referenceSetName" : {
            "type" : "string",
            "description" : "The human readable name of a ReferenceSet",
            "example" : "The Best Assembly Ever"
          },
          "sourceAccessions" : {
            "type" : "array",
            "description" : "All known corresponding accession IDs in INSDC (GenBank/ENA/DDBJ) ideally with a version number, e.g. `NC_000001.11`.",
            "nullable" : true,
            "example" : [ "A0000002", "A0009393" ],
            "items" : {
              "type" : "string"
            }
          },
          "sourceGermplasm" : {
            "type" : "array",
            "description" : "All known corresponding Germplasm",
            "nullable" : true,
            "items" : {
              "type" : "object",
              "properties" : {
                "germplasmDbId" : {
                  "type" : "string",
                  "description" : "The ID which uniquely identifies a germplasm within the given database server",
                  "example" : "d4076594"
                },
                "germplasmName" : {
                  "type" : "string",
                  "description" : "The human readable name of a germplasm",
                  "example" : "A0000003"
                }
              }
            }
          },
          "sourceURI" : {
            "type" : "string",
            "description" : "Specifies a FASTA format file/string.",
            "nullable" : true,
            "example" : "https://wiki.brapi.org/files/demo.fast"
          },
          "species" : {
            "$ref" : "#/components/schemas/OntologyTerm"
          }
        },
        "description" : "A `ReferenceSet` is a set of `Reference` s which typically comprise a reference assembly, such as `GRCH_38`. A `ReferenceSet` defines a common coordinate space for comparing reference-aligned experimental data.",
        "x-brapi-metadata" : {
          "description" : "A `ReferenceSet` is a set of `Reference` s which typically comprise a reference assembly, such as `GRCH_38`. A `ReferenceSet` defines a common coordinate space for comparing reference-aligned experimental data.",
          "module" : "BrAPI-Genotyping",
          "primaryModel" : true,
          "title" : "ReferenceSet"
        }
      },
      "ReferenceSetsSearchRequest" : {
        "type" : "object",
        "properties" : {
          "accessions" : {
            "type" : "array",
            "description" : "If set, return the reference sets for which the `accession` matches this string (case-sensitive, exact match).",
            "nullable" : true,
            "example" : [ "A0009283", "A0006657" ],
            "items" : {
              "type" : "string"
            }
          },
          "assemblyPUIs" : {
            "type" : "array",
            "description" : "If set, return the reference sets for which the `assemblyId` matches this string (case-sensitive, exact match).",
            "nullable" : true,
            "example" : [ "doi:10.15454/312953986E3", "doi:10.15454/312953986E3" ],
            "items" : {
              "type" : "string"
            }
          },
          "commonCropNames" : {
            "type" : "array",
            "description" : "The BrAPI Common Crop Name is the simple, generalized, widely accepted name of the organism being researched. It is most often used in multi-crop systems where digital resources need to be divided at a high level. Things like 'Maize', 'Wheat', and 'Rice' are examples of common crop names.\n\nUse this parameter to only return results associated with the given crops. \n\nUse `GET /commoncropnames` to find the list of available crops on a server.",
            "example" : [ "Tomatillo", "Paw Paw" ],
            "items" : {
              "type" : "string"
            }
          },
          "externalReferenceIDs" : {
            "type" : "array",
            "description" : "**Deprecated in v2.1** Please use `externalReferenceIds`. Github issue number #460 \n<br>List of external reference IDs. Could be a simple strings or a URIs. (use with `externalReferenceSources` parameter)",
            "example" : [ "doi:10.155454/12341234", "14a19841" ],
            "deprecated" : true,
            "items" : {
              "type" : "string"
            }
          },
          "externalReferenceIds" : {
            "type" : "array",
            "description" : "List of external reference IDs. Could be a simple strings or a URIs. (use with `externalReferenceSources` parameter)",
            "example" : [ "doi:10.155454/12341234", "14a19841" ],
            "items" : {
              "type" : "string"
            }
          },
          "externalReferenceSources" : {
            "type" : "array",
            "description" : "List of identifiers for the source system or database of an external reference (use with `externalReferenceIDs` parameter)",
            "example" : [ "DOI", "Field App Name" ],
            "items" : {
              "type" : "string"
            }
          },
          "germplasmDbIds" : {
            "type" : "array",
            "description" : "List of IDs which uniquely identify germplasm to search for",
            "example" : [ "e9c6edd7", "1b1df4a6" ],
            "items" : {
              "type" : "string"
            }
          },
          "germplasmNames" : {
            "type" : "array",
            "description" : "List of human readable names to identify germplasm to search for",
            "example" : [ "A0000003", "A0000477" ],
            "items" : {
              "type" : "string"
            }
          },
          "md5checksums" : {
            "type" : "array",
            "description" : "If set, return the reference sets for which the `md5checksum` matches this string (case-sensitive, exact match).",
            "nullable" : true,
            "example" : [ "c2365e900c81a89cf74d83dab60df146" ],
            "items" : {
              "type" : "string"
            }
          },
          "page" : {
            "type" : "integer",
            "description" : "Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.",
            "example" : 0
          },
          "pageSize" : {
            "type" : "integer",
            "description" : "The size of the pages to be returned. Default is `1000`.",
            "example" : 1000
          },
          "programDbIds" : {
            "type" : "array",
            "description" : "A BrAPI Program represents the high level organization or group who is responsible for conducting trials and studies. Things like Breeding Programs and Funded Projects are considered BrAPI Programs. \n\nUse this parameter to only return results associated with the given programs. \n\nUse `GET /programs` to find the list of available programs on a server.",
            "example" : [ "8f5de35b", "0e2d4a13" ],
            "items" : {
              "type" : "string"
            }
          },
          "programNames" : {
            "type" : "array",
            "description" : "Use this parameter to only return results associated with the given program names. Program names are not required to be unique.\n\nUse `GET /programs` to find the list of available programs on a server.",
            "example" : [ "Better Breeding Program", "Best Breeding Program" ],
            "items" : {
              "type" : "string"
            }
          },
          "referenceSetDbIds" : {
            "type" : "array",
            "description" : "The `ReferenceSets` to search.",
            "nullable" : true,
            "example" : [ "32a19dd7", "2c182c18" ],
            "items" : {
              "type" : "string"
            }
          },
          "studyDbIds" : {
            "type" : "array",
            "description" : "List of study identifiers to search for",
            "example" : [ "cf6c4bd4", "691e69d6" ],
            "items" : {
              "type" : "string"
            }
          },
          "studyNames" : {
            "type" : "array",
            "description" : "List of study names to filter search results",
            "example" : [ "The First Bob Study 2017", "Wheat Yield Trial 246" ],
            "items" : {
              "type" : "string"
            }
          },
          "trialDbIds" : {
            "type" : "array",
            "description" : "The ID which uniquely identifies a trial to search for",
            "example" : [ "d2593dc2", "9431a731" ],
            "items" : {
              "type" : "string"
            }
          },
          "trialNames" : {
            "type" : "array",
            "description" : "The human readable name of a trial to search for",
            "example" : [ "All Yield Trials 2016", "Disease Resistance Study Comparison Group" ],
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "ReferencesSearchRequest" : {
        "type" : "object",
        "properties" : {
          "accessions" : {
            "type" : "array",
            "description" : "If specified, return the references for which the `accession` matches this string (case-sensitive, exact match).",
            "nullable" : true,
            "example" : [ "A0009283", "A0006657" ],
            "items" : {
              "type" : "string"
            }
          },
          "commonCropNames" : {
            "type" : "array",
            "description" : "The BrAPI Common Crop Name is the simple, generalized, widely accepted name of the organism being researched. It is most often used in multi-crop systems where digital resources need to be divided at a high level. Things like 'Maize', 'Wheat', and 'Rice' are examples of common crop names.\n\nUse this parameter to only return results associated with the given crops. \n\nUse `GET /commoncropnames` to find the list of available crops on a server.",
            "example" : [ "Tomatillo", "Paw Paw" ],
            "items" : {
              "type" : "string"
            }
          },
          "externalReferenceIDs" : {
            "type" : "array",
            "description" : "**Deprecated in v2.1** Please use `externalReferenceIds`. Github issue number #460 \n<br>List of external reference IDs. Could be a simple strings or a URIs. (use with `externalReferenceSources` parameter)",
            "example" : [ "doi:10.155454/12341234", "14a19841" ],
            "deprecated" : true,
            "items" : {
              "type" : "string"
            }
          },
          "externalReferenceIds" : {
            "type" : "array",
            "description" : "List of external reference IDs. Could be a simple strings or a URIs. (use with `externalReferenceSources` parameter)",
            "example" : [ "doi:10.155454/12341234", "14a19841" ],
            "items" : {
              "type" : "string"
            }
          },
          "externalReferenceSources" : {
            "type" : "array",
            "description" : "List of identifiers for the source system or database of an external reference (use with `externalReferenceIDs` parameter)",
            "example" : [ "DOI", "Field App Name" ],
            "items" : {
              "type" : "string"
            }
          },
          "germplasmDbIds" : {
            "type" : "array",
            "description" : "List of IDs which uniquely identify germplasm to search for",
            "example" : [ "e9c6edd7", "1b1df4a6" ],
            "items" : {
              "type" : "string"
            }
          },
          "germplasmNames" : {
            "type" : "array",
            "description" : "List of human readable names to identify germplasm to search for",
            "example" : [ "A0000003", "A0000477" ],
            "items" : {
              "type" : "string"
            }
          },
          "isDerived" : {
            "type" : "boolean",
            "description" : "A sequence X is said to be derived from source sequence Y, if X and Y are of the same length and the per-base sequence divergence at A/C/G/T bases is sufficiently small. Two sequences derived from the same official sequence share the same coordinates and annotations, and can be replaced with the official sequence for certain use cases.",
            "format" : "boolean",
            "nullable" : true
          },
          "maxLength" : {
            "type" : "integer",
            "description" : "The minimum length of this `References` sequence.",
            "nullable" : true,
            "example" : 90000
          },
          "md5checksums" : {
            "type" : "array",
            "description" : "If specified, return the references for which the `md5checksum` matches this string (case-sensitive, exact match).",
            "nullable" : true,
            "example" : [ "c2365e900c81a89cf74d83dab60df146" ],
            "items" : {
              "type" : "string"
            }
          },
          "minLength" : {
            "type" : "integer",
            "description" : "The minimum length of this `References` sequence.",
            "nullable" : true,
            "example" : 4000
          },
          "page" : {
            "type" : "integer",
            "description" : "Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.",
            "example" : 0
          },
          "pageSize" : {
            "type" : "integer",
            "description" : "The size of the pages to be returned. Default is `1000`.",
            "example" : 1000
          },
          "programDbIds" : {
            "type" : "array",
            "description" : "A BrAPI Program represents the high level organization or group who is responsible for conducting trials and studies. Things like Breeding Programs and Funded Projects are considered BrAPI Programs. \n\nUse this parameter to only return results associated with the given programs. \n\nUse `GET /programs` to find the list of available programs on a server.",
            "example" : [ "8f5de35b", "0e2d4a13" ],
            "items" : {
              "type" : "string"
            }
          },
          "programNames" : {
            "type" : "array",
            "description" : "Use this parameter to only return results associated with the given program names. Program names are not required to be unique.\n\nUse `GET /programs` to find the list of available programs on a server.",
            "example" : [ "Better Breeding Program", "Best Breeding Program" ],
            "items" : {
              "type" : "string"
            }
          },
          "referenceDbIds" : {
            "type" : "array",
            "description" : "A list of IDs which uniquely identify `References` within the given database server",
            "nullable" : true,
            "example" : [ "04c83ea7", "d0998a34" ],
            "items" : {
              "type" : "string"
            }
          },
          "referenceSetDbIds" : {
            "type" : "array",
            "description" : "A list of IDs which uniquely identify `ReferenceSets` within the given database server",
            "nullable" : true,
            "example" : [ "32a19dd7", "2c182c18" ],
            "items" : {
              "type" : "string"
            }
          },
          "studyDbIds" : {
            "type" : "array",
            "description" : "List of study identifiers to search for",
            "example" : [ "cf6c4bd4", "691e69d6" ],
            "items" : {
              "type" : "string"
            }
          },
          "studyNames" : {
            "type" : "array",
            "description" : "List of study names to filter search results",
            "example" : [ "The First Bob Study 2017", "Wheat Yield Trial 246" ],
            "items" : {
              "type" : "string"
            }
          },
          "trialDbIds" : {
            "type" : "array",
            "description" : "The ID which uniquely identifies a trial to search for",
            "example" : [ "d2593dc2", "9431a731" ],
            "items" : {
              "type" : "string"
            }
          },
          "trialNames" : {
            "type" : "array",
            "description" : "The human readable name of a trial to search for",
            "example" : [ "All Yield Trials 2016", "Disease Resistance Study Comparison Group" ],
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "Sample" : {
        "required" : [ "sampleName" ],
        "type" : "object",
        "properties" : {
          "additionalInfo" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.",
            "nullable" : true
          },
          "column" : {
            "maximum" : 12,
            "minimum" : 1,
            "type" : "integer",
            "description" : "The Column identifier for this `Sample` location in the `Plate`",
            "nullable" : true,
            "example" : 6
          },
          "externalReferences" : {
            "title" : "ExternalReferences",
            "type" : "array",
            "description" : "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.",
            "example" : [ {
              "referenceId" : "doi:10.155454/12341234",
              "referenceSource" : "DOI"
            }, {
              "referenceId" : "75a50e76",
              "referenceSource" : "Remote Data Collection Upload Tool"
            } ],
            "items" : {
              "type" : "object",
              "properties" : {
                "referenceID" : {
                  "type" : "string",
                  "description" : "**Deprecated in v2.1** Please use `referenceId`. Github issue number #460 \n<br>The external reference ID. Could be a simple string or a URI.",
                  "nullable" : true,
                  "deprecated" : true
                },
                "referenceId" : {
                  "type" : "string",
                  "description" : "The external reference ID. Could be a simple string or a URI."
                },
                "referenceSource" : {
                  "type" : "string",
                  "description" : "An identifier for the source system or database of this reference"
                }
              }
            }
          },
          "germplasmDbId" : {
            "type" : "string",
            "description" : "The ID which uniquely identifies a `Germplasm`",
            "nullable" : true,
            "example" : "7e08d538"
          },
          "observationUnitDbId" : {
            "type" : "string",
            "description" : "The ID which uniquely identifies an `ObservationUnit`",
            "nullable" : true,
            "example" : "073a3ce5"
          },
          "plateDbId" : {
            "type" : "string",
            "description" : "The ID which uniquely identifies a `Plate` of `Sample`",
            "nullable" : true,
            "example" : "2dce16d1"
          },
          "plateName" : {
            "type" : "string",
            "description" : "The human readable name of a `Plate`",
            "nullable" : true,
            "example" : "Plate_alpha_20191022"
          },
          "programDbId" : {
            "type" : "string",
            "description" : "The ID which uniquely identifies a `Program` within the given database server",
            "nullable" : true,
            "example" : "bd748e00"
          },
          "row" : {
            "type" : "string",
            "description" : "The Row identifier for this `Sample` location in the `Plate`",
            "nullable" : true,
            "example" : "B"
          },
          "sampleBarcode" : {
            "type" : "string",
            "description" : "A unique identifier physically attached to the `Sample`",
            "nullable" : true,
            "example" : "3a027b59"
          },
          "sampleDescription" : {
            "type" : "string",
            "description" : "Description of a `Sample`\n<br>MIAPPE V1.1 (DM-79) Sample description - Any information not captured by the other sample fields, including quantification, sample treatments and processing.",
            "nullable" : true,
            "example" : "This sample was taken from the root of a tree"
          },
          "sampleGroupDbId" : {
            "type" : "string",
            "description" : "The ID which uniquely identifies a group of `Samples`",
            "nullable" : true,
            "example" : "8524b436"
          },
          "sampleName" : {
            "type" : "string",
            "description" : "The human readable name of the `Sample`",
            "example" : "Sample_alpha_20191022"
          },
          "samplePUI" : {
            "type" : "string",
            "description" : "A permanent unique identifier for the `Sample` (DOI, URL, UUID, etc)\n<br> MIAPPE V1.1 (DM-81) External ID - An identifier for the sample in a persistent repository, comprising the name of the repository and the accession number of the observation unit therein. Submission to the EBI Biosamples repository is recommended. URI are recommended when possible. ",
            "nullable" : true,
            "example" : "doi:10.15454/312953986E3"
          },
          "sampleTimestamp" : {
            "type" : "string",
            "description" : "The date and time a `Sample` was collected from the field\n<br> MIAPPE V1.1 (DM-80) Collection date - The date and time when the sample was collected / harvested",
            "format" : "date-time",
            "nullable" : true
          },
          "sampleType" : {
            "type" : "string",
            "description" : "The type of `Sample` taken. ex. 'DNA', 'RNA', 'Tissue', etc",
            "nullable" : true,
            "example" : "Tissue"
          },
          "studyDbId" : {
            "type" : "string",
            "description" : "The ID which uniquely identifies a `Study` within the given database server",
            "nullable" : true,
            "example" : "64bd6bf9"
          },
          "takenBy" : {
            "type" : "string",
            "description" : "The name or identifier of the entity which took the `Sample` from the field",
            "nullable" : true,
            "example" : "Bob"
          },
          "tissueType" : {
            "type" : "string",
            "description" : "The type of tissue sampled. ex. 'Leaf', 'Root', etc.\n<br> MIAPPE V1.1 (DM-78) Plant anatomical entity - A description of  the plant part (e.g. leaf) or the plant product (e.g. resin) from which the sample was taken, in the form of an accession number to a suitable controlled vocabulary (Plant Ontology).",
            "nullable" : true,
            "example" : "Root"
          },
          "trialDbId" : {
            "type" : "string",
            "description" : "The ID which uniquely identifies a `Trial` within the given database server",
            "nullable" : true,
            "example" : "d34c5349"
          },
          "well" : {
            "type" : "string",
            "description" : "The Well identifier for this `Sample` location in the `Plate`. Usually a concatenation of Row and Column, or just a number if the `Samples` are not part of an ordered `Plate`.",
            "nullable" : true,
            "example" : "B6"
          }
        },
        "x-brapi-metadata" : {
          "description" : "The identifiers and metadata associated with a physical piece of biological material collected from the field for external analysis. A Sample can take many forms (leaf clipping, seed, DNA, etc) and might be used for a variety of analysis procedures (spectra, genotyping, etc).",
          "module" : "BrAPI-Genotyping",
          "primaryModel" : true,
          "title" : "Sample"
        }
      },
      "SampleNewRequest" : {
        "required" : [ "sampleName" ],
        "type" : "object",
        "properties" : {
          "additionalInfo" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.",
            "nullable" : true
          },
          "column" : {
            "maximum" : 12,
            "minimum" : 1,
            "type" : "integer",
            "description" : "The Column identifier for this `Sample` location in the `Plate`",
            "nullable" : true,
            "example" : 6
          },
          "externalReferences" : {
            "title" : "ExternalReferences",
            "type" : "array",
            "description" : "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.",
            "example" : [ {
              "referenceId" : "doi:10.155454/12341234",
              "referenceSource" : "DOI"
            }, {
              "referenceId" : "75a50e76",
              "referenceSource" : "Remote Data Collection Upload Tool"
            } ],
            "items" : {
              "type" : "object",
              "properties" : {
                "referenceID" : {
                  "type" : "string",
                  "description" : "**Deprecated in v2.1** Please use `referenceId`. Github issue number #460 \n<br>The external reference ID. Could be a simple string or a URI.",
                  "nullable" : true,
                  "deprecated" : true
                },
                "referenceId" : {
                  "type" : "string",
                  "description" : "The external reference ID. Could be a simple string or a URI."
                },
                "referenceSource" : {
                  "type" : "string",
                  "description" : "An identifier for the source system or database of this reference"
                }
              }
            }
          },
          "germplasmDbId" : {
            "type" : "string",
            "description" : "The ID which uniquely identifies a `Germplasm`",
            "nullable" : true,
            "example" : "7e08d538"
          },
          "observationUnitDbId" : {
            "type" : "string",
            "description" : "The ID which uniquely identifies an `ObservationUnit`",
            "nullable" : true,
            "example" : "073a3ce5"
          },
          "plateDbId" : {
            "type" : "string",
            "description" : "The ID which uniquely identifies a `Plate` of `Sample`",
            "nullable" : true,
            "example" : "2dce16d1"
          },
          "plateName" : {
            "type" : "string",
            "description" : "The human readable name of a `Plate`",
            "nullable" : true,
            "example" : "Plate_alpha_20191022"
          },
          "programDbId" : {
            "type" : "string",
            "description" : "The ID which uniquely identifies a `Program` within the given database server",
            "nullable" : true,
            "example" : "bd748e00"
          },
          "row" : {
            "type" : "string",
            "description" : "The Row identifier for this `Sample` location in the `Plate`",
            "nullable" : true,
            "example" : "B"
          },
          "sampleBarcode" : {
            "type" : "string",
            "description" : "A unique identifier physically attached to the `Sample`",
            "nullable" : true,
            "example" : "3a027b59"
          },
          "sampleDescription" : {
            "type" : "string",
            "description" : "Description of a `Sample`\n<br>MIAPPE V1.1 (DM-79) Sample description - Any information not captured by the other sample fields, including quantification, sample treatments and processing.",
            "nullable" : true,
            "example" : "This sample was taken from the root of a tree"
          },
          "sampleGroupDbId" : {
            "type" : "string",
            "description" : "The ID which uniquely identifies a group of `Samples`",
            "nullable" : true,
            "example" : "8524b436"
          },
          "sampleName" : {
            "type" : "string",
            "description" : "The human readable name of the `Sample`",
            "example" : "Sample_alpha_20191022"
          },
          "samplePUI" : {
            "type" : "string",
            "description" : "A permanent unique identifier for the `Sample` (DOI, URL, UUID, etc)\n<br> MIAPPE V1.1 (DM-81) External ID - An identifier for the sample in a persistent repository, comprising the name of the repository and the accession number of the observation unit therein. Submission to the EBI Biosamples repository is recommended. URI are recommended when possible. ",
            "nullable" : true,
            "example" : "doi:10.15454/312953986E3"
          },
          "sampleTimestamp" : {
            "type" : "string",
            "description" : "The date and time a `Sample` was collected from the field\n<br> MIAPPE V1.1 (DM-80) Collection date - The date and time when the sample was collected / harvested",
            "format" : "date-time",
            "nullable" : true
          },
          "sampleType" : {
            "type" : "string",
            "description" : "The type of `Sample` taken. ex. 'DNA', 'RNA', 'Tissue', etc",
            "nullable" : true,
            "example" : "Tissue"
          },
          "studyDbId" : {
            "type" : "string",
            "description" : "The ID which uniquely identifies a `Study` within the given database server",
            "nullable" : true,
            "example" : "64bd6bf9"
          },
          "takenBy" : {
            "type" : "string",
            "description" : "The name or identifier of the entity which took the `Sample` from the field",
            "nullable" : true,
            "example" : "Bob"
          },
          "tissueType" : {
            "type" : "string",
            "description" : "The type of tissue sampled. ex. 'Leaf', 'Root', etc.\n<br> MIAPPE V1.1 (DM-78) Plant anatomical entity - A description of  the plant part (e.g. leaf) or the plant product (e.g. resin) from which the sample was taken, in the form of an accession number to a suitable controlled vocabulary (Plant Ontology).",
            "nullable" : true,
            "example" : "Root"
          },
          "trialDbId" : {
            "type" : "string",
            "description" : "The ID which uniquely identifies a `Trial` within the given database server",
            "nullable" : true,
            "example" : "d34c5349"
          },
          "well" : {
            "type" : "string",
            "description" : "The Well identifier for this `Sample` location in the `Plate`. Usually a concatenation of Row and Column, or just a number if the `Samples` are not part of an ordered `Plate`.",
            "nullable" : true,
            "example" : "B6"
          }
        }
      },
      "SampleSearchRequest" : {
        "type" : "object",
        "properties" : {
          "commonCropNames" : {
            "type" : "array",
            "description" : "The BrAPI Common Crop Name is the simple, generalized, widely accepted name of the organism being researched. It is most often used in multi-crop systems where digital resources need to be divided at a high level. Things like 'Maize', 'Wheat', and 'Rice' are examples of common crop names.\n\nUse this parameter to only return results associated with the given crops. \n\nUse `GET /commoncropnames` to find the list of available crops on a server.",
            "example" : [ "Tomatillo", "Paw Paw" ],
            "items" : {
              "type" : "string"
            }
          },
          "externalReferenceIDs" : {
            "type" : "array",
            "description" : "**Deprecated in v2.1** Please use `externalReferenceIds`. Github issue number #460 \n<br>List of external reference IDs. Could be a simple strings or a URIs. (use with `externalReferenceSources` parameter)",
            "example" : [ "doi:10.155454/12341234", "14a19841" ],
            "deprecated" : true,
            "items" : {
              "type" : "string"
            }
          },
          "externalReferenceIds" : {
            "type" : "array",
            "description" : "List of external reference IDs. Could be a simple strings or a URIs. (use with `externalReferenceSources` parameter)",
            "example" : [ "doi:10.155454/12341234", "14a19841" ],
            "items" : {
              "type" : "string"
            }
          },
          "externalReferenceSources" : {
            "type" : "array",
            "description" : "List of identifiers for the source system or database of an external reference (use with `externalReferenceIDs` parameter)",
            "example" : [ "DOI", "Field App Name" ],
            "items" : {
              "type" : "string"
            }
          },
          "germplasmDbIds" : {
            "type" : "array",
            "description" : "The ID which uniquely identifies a `Germplasm`",
            "nullable" : true,
            "example" : [ "d745e1e2", "6dd28d74" ],
            "items" : {
              "type" : "string"
            }
          },
          "germplasmNames" : {
            "type" : "array",
            "description" : "List of human readable names to identify germplasm to search for",
            "example" : [ "A0000003", "A0000477" ],
            "items" : {
              "type" : "string"
            }
          },
          "observationUnitDbIds" : {
            "type" : "array",
            "description" : "The ID which uniquely identifies an `ObservationUnit`",
            "nullable" : true,
            "example" : [ "3cd0ca36", "983f3b14" ],
            "items" : {
              "type" : "string"
            }
          },
          "page" : {
            "type" : "integer",
            "description" : "Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.",
            "example" : 0
          },
          "pageSize" : {
            "type" : "integer",
            "description" : "The size of the pages to be returned. Default is `1000`.",
            "example" : 1000
          },
          "plateDbIds" : {
            "type" : "array",
            "description" : "The ID which uniquely identifies a `Plate` of `Samples`",
            "nullable" : true,
            "example" : [ "0cac98b8", "b96125fb" ],
            "items" : {
              "type" : "string"
            }
          },
          "plateNames" : {
            "type" : "array",
            "description" : "The human readable name of a `Plate` of `Samples`",
            "nullable" : true,
            "example" : [ "0cac98b8", "b96125fb" ],
            "items" : {
              "type" : "string"
            }
          },
          "programDbIds" : {
            "type" : "array",
            "description" : "A BrAPI Program represents the high level organization or group who is responsible for conducting trials and studies. Things like Breeding Programs and Funded Projects are considered BrAPI Programs. \n\nUse this parameter to only return results associated with the given programs. \n\nUse `GET /programs` to find the list of available programs on a server.",
            "example" : [ "8f5de35b", "0e2d4a13" ],
            "items" : {
              "type" : "string"
            }
          },
          "programNames" : {
            "type" : "array",
            "description" : "Use this parameter to only return results associated with the given program names. Program names are not required to be unique.\n\nUse `GET /programs` to find the list of available programs on a server.",
            "example" : [ "Better Breeding Program", "Best Breeding Program" ],
            "items" : {
              "type" : "string"
            }
          },
          "sampleDbIds" : {
            "type" : "array",
            "description" : "The ID which uniquely identifies a `Sample`",
            "nullable" : true,
            "example" : [ "3bece2ca", "dd286cc6" ],
            "items" : {
              "type" : "string"
            }
          },
          "sampleGroupDbIds" : {
            "type" : "array",
            "description" : "The unique identifier for a group of related `Samples`",
            "nullable" : true,
            "example" : [ "45e1e2d7", "6cc6dd28" ],
            "items" : {
              "type" : "string"
            }
          },
          "sampleNames" : {
            "type" : "array",
            "description" : "The human readable name of the `Sample`",
            "nullable" : true,
            "example" : [ "SA_111", "SA_222" ],
            "items" : {
              "type" : "string"
            }
          },
          "studyDbIds" : {
            "type" : "array",
            "description" : "List of study identifiers to search for",
            "example" : [ "cf6c4bd4", "691e69d6" ],
            "items" : {
              "type" : "string"
            }
          },
          "studyNames" : {
            "type" : "array",
            "description" : "List of study names to filter search results",
            "example" : [ "The First Bob Study 2017", "Wheat Yield Trial 246" ],
            "items" : {
              "type" : "string"
            }
          },
          "trialDbIds" : {
            "type" : "array",
            "description" : "The ID which uniquely identifies a trial to search for",
            "example" : [ "d2593dc2", "9431a731" ],
            "items" : {
              "type" : "string"
            }
          },
          "trialNames" : {
            "type" : "array",
            "description" : "The human readable name of a trial to search for",
            "example" : [ "All Yield Trials 2016", "Disease Resistance Study Comparison Group" ],
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "Scale" : {
        "required" : [ "scaleDbId", "scaleName" ],
        "type" : "object",
        "properties" : {
          "additionalInfo" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.",
            "nullable" : true
          },
          "dataType" : {
            "type" : "string",
            "description" : "<p>Class of the scale, entries can be</p>\n<p>\"Code\" -  This scale class is exceptionally used to express complex traits. Code is a nominal scale that combines the expressions of the different traits composing the complex trait. For example a severity trait might be expressed by a 2 digit and 2 character code. The first 2 digits are the percentage of the plant covered by a fungus and the 2 characters refer to the delay in development, e.g. \"75VD\" means \"75 %\" of the plant is infected and the plant is very delayed.</p>\n<p>\"Date\" - The date class is for events expressed in a time format, See ISO 8601</p>\n<p>\"Duration\" - The Duration class is for time elapsed between two events expressed in a time format, e.g. days, hours, months</p>\n<p>\"Nominal\" - Categorical scale that can take one of a limited and fixed number of categories. There is no intrinsic ordering to the categories</p>\n<p>\"Numerical\" - Numerical scales express the trait with real numbers. The numerical scale defines the unit e.g. centimeter, ton per hectare, branches</p>\n<p>\"Ordinal\" - Ordinal scales are scales composed of ordered categories</p>\n<p>\"Text\" - A free text is used to express the trait.</p>",
            "nullable" : true,
            "example" : "Numerical",
            "enum" : [ "Code", "Date", "Duration", "Nominal", "Numerical", "Ordinal", "Text" ]
          },
          "decimalPlaces" : {
            "type" : "integer",
            "description" : "For numerical, number of decimal places to be reported",
            "nullable" : true,
            "example" : 2
          },
          "externalReferences" : {
            "title" : "ExternalReferences",
            "type" : "array",
            "description" : "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.",
            "nullable" : true,
            "example" : [ {
              "referenceId" : "doi:10.155454/12341234",
              "referenceSource" : "DOI"
            }, {
              "referenceId" : "75a50e76",
              "referenceSource" : "Remote Data Collection Upload Tool"
            } ],
            "items" : {
              "type" : "object",
              "properties" : {
                "referenceID" : {
                  "type" : "string",
                  "description" : "**Deprecated in v2.1** Please use `referenceId`. Github issue number #460 \n<br>The external reference ID. Could be a simple string or a URI.",
                  "nullable" : true,
                  "deprecated" : true
                },
                "referenceId" : {
                  "type" : "string",
                  "description" : "The external reference ID. Could be a simple string or a URI."
                },
                "referenceSource" : {
                  "type" : "string",
                  "description" : "An identifier for the source system or database of this reference"
                }
              }
            }
          },
          "ontologyReference" : {
            "required" : [ "ontologyDbId", "ontologyName" ],
            "type" : "object",
            "properties" : {
              "documentationLinks" : {
                "type" : "array",
                "description" : "links to various ontology documentation",
                "nullable" : true,
                "items" : {
                  "type" : "object",
                  "properties" : {
                    "URL" : {
                      "type" : "string",
                      "format" : "uri",
                      "example" : "http://purl.obolibrary.org/obo/ro.owl"
                    },
                    "type" : {
                      "type" : "string",
                      "example" : "OBO",
                      "enum" : [ "OBO", "RDF", "WEBPAGE" ]
                    }
                  }
                }
              },
              "ontologyDbId" : {
                "type" : "string",
                "description" : "Ontology database unique identifier",
                "example" : "6b071868"
              },
              "ontologyName" : {
                "type" : "string",
                "description" : "Ontology name",
                "example" : "The Crop Ontology"
              },
              "version" : {
                "type" : "string",
                "description" : "Ontology version (no specific format)",
                "nullable" : true,
                "example" : "7.2.3"
              }
            },
            "description" : "MIAPPE V1.1\n\n(DM-85) Variable accession number - Accession number of the variable in the Crop Ontology\n\n(DM-87) Trait accession number - Accession number of the trait in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).\n\n(DM-89) Method accession number - Accession number of the method in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).\n\n(DM-93) Scale accession number - Accession number of the scale in a suitable controlled vocabulary (Crop Ontology)."
          },
          "scaleDbId" : {
            "type" : "string",
            "description" : "Unique identifier of the scale. If left blank, the upload system will automatically generate a scale ID.",
            "example" : "af730171"
          },
          "scaleName" : {
            "type" : "string",
            "description" : "Name of the scale\n<br/>MIAPPE V1.1 (DM-92) Scale Name of the scale associated with the variable",
            "nullable" : true,
            "example" : "Meters"
          },
          "scalePUI" : {
            "type" : "string",
            "description" : "The Permanent Unique Identifier of a Scale, usually in the form of a URI",
            "nullable" : true,
            "example" : "http://my-traits.com/trait/CO_123:0000112"
          },
          "units" : {
            "type" : "string",
            "description" : "This field can be used to describe the units used for this scale. This should be the abbreviated \nform of the units, intended to be displayed with every value using this scale. Usually this only \napplies when `dataType` is Numeric, but could also be included for other dataTypes when applicable.",
            "nullable" : true,
            "example" : "m"
          },
          "validValues" : {
            "type" : "object",
            "properties" : {
              "categories" : {
                "type" : "array",
                "description" : "List of possible values with optional labels",
                "example" : [ {
                  "label" : "low",
                  "value" : "0"
                }, {
                  "label" : "medium",
                  "value" : "5"
                }, {
                  "label" : "high",
                  "value" : "10"
                } ],
                "items" : {
                  "type" : "object",
                  "properties" : {
                    "label" : {
                      "type" : "string",
                      "description" : "A text label for a category"
                    },
                    "value" : {
                      "type" : "string",
                      "description" : "The actual value for a category"
                    }
                  }
                }
              },
              "max" : {
                "type" : "integer",
                "description" : "**Deprecated in v2.1** Please use `maximumValue`. Github issue number #450 \n<br>Maximum value for numerical scales. Typically used for data capture control and QC.",
                "nullable" : true,
                "example" : 9999,
                "deprecated" : true
              },
              "maximumValue" : {
                "type" : "string",
                "description" : "Maximum value for numerical, date, and time scales. Typically used for data capture control and QC.",
                "nullable" : true,
                "example" : "9999"
              },
              "min" : {
                "type" : "integer",
                "description" : "**Deprecated in v2.1** Please use `minimumValue`. Github issue number #450 \n<br>Minimum value for numerical scales. Typically used for data capture control and QC.",
                "nullable" : true,
                "example" : 2,
                "deprecated" : true
              },
              "minimumValue" : {
                "type" : "string",
                "description" : "Minimum value for numerical, date, and time scales. Typically used for data capture control and QC.",
                "nullable" : true,
                "example" : "2"
              }
            },
            "nullable" : true
          }
        },
        "description" : "Scale metadata",
        "x-brapi-metadata" : {
          "module" : "BrAPI-Phenotyping",
          "primaryModel" : true,
          "title" : "Scale"
        }
      },
      "ScaleBaseClass" : {
        "required" : [ "scaleName" ],
        "type" : "object",
        "properties" : {
          "additionalInfo" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.",
            "nullable" : true
          },
          "dataType" : {
            "type" : "string",
            "description" : "<p>Class of the scale, entries can be</p>\n<p>\"Code\" -  This scale class is exceptionally used to express complex traits. Code is a nominal scale that combines the expressions of the different traits composing the complex trait. For example a severity trait might be expressed by a 2 digit and 2 character code. The first 2 digits are the percentage of the plant covered by a fungus and the 2 characters refer to the delay in development, e.g. \"75VD\" means \"75 %\" of the plant is infected and the plant is very delayed.</p>\n<p>\"Date\" - The date class is for events expressed in a time format, See ISO 8601</p>\n<p>\"Duration\" - The Duration class is for time elapsed between two events expressed in a time format, e.g. days, hours, months</p>\n<p>\"Nominal\" - Categorical scale that can take one of a limited and fixed number of categories. There is no intrinsic ordering to the categories</p>\n<p>\"Numerical\" - Numerical scales express the trait with real numbers. The numerical scale defines the unit e.g. centimeter, ton per hectare, branches</p>\n<p>\"Ordinal\" - Ordinal scales are scales composed of ordered categories</p>\n<p>\"Text\" - A free text is used to express the trait.</p>",
            "nullable" : true,
            "example" : "Numerical",
            "enum" : [ "Code", "Date", "Duration", "Nominal", "Numerical", "Ordinal", "Text" ]
          },
          "decimalPlaces" : {
            "type" : "integer",
            "description" : "For numerical, number of decimal places to be reported",
            "nullable" : true,
            "example" : 2
          },
          "externalReferences" : {
            "title" : "ExternalReferences",
            "type" : "array",
            "description" : "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.",
            "nullable" : true,
            "example" : [ {
              "referenceId" : "doi:10.155454/12341234",
              "referenceSource" : "DOI"
            }, {
              "referenceId" : "75a50e76",
              "referenceSource" : "Remote Data Collection Upload Tool"
            } ],
            "items" : {
              "type" : "object",
              "properties" : {
                "referenceID" : {
                  "type" : "string",
                  "description" : "**Deprecated in v2.1** Please use `referenceId`. Github issue number #460 \n<br>The external reference ID. Could be a simple string or a URI.",
                  "nullable" : true,
                  "deprecated" : true
                },
                "referenceId" : {
                  "type" : "string",
                  "description" : "The external reference ID. Could be a simple string or a URI."
                },
                "referenceSource" : {
                  "type" : "string",
                  "description" : "An identifier for the source system or database of this reference"
                }
              }
            }
          },
          "ontologyReference" : {
            "required" : [ "ontologyDbId", "ontologyName" ],
            "type" : "object",
            "properties" : {
              "documentationLinks" : {
                "type" : "array",
                "description" : "links to various ontology documentation",
                "nullable" : true,
                "items" : {
                  "type" : "object",
                  "properties" : {
                    "URL" : {
                      "type" : "string",
                      "format" : "uri",
                      "example" : "http://purl.obolibrary.org/obo/ro.owl"
                    },
                    "type" : {
                      "type" : "string",
                      "example" : "OBO",
                      "enum" : [ "OBO", "RDF", "WEBPAGE" ]
                    }
                  }
                }
              },
              "ontologyDbId" : {
                "type" : "string",
                "description" : "Ontology database unique identifier",
                "example" : "6b071868"
              },
              "ontologyName" : {
                "type" : "string",
                "description" : "Ontology name",
                "example" : "The Crop Ontology"
              },
              "version" : {
                "type" : "string",
                "description" : "Ontology version (no specific format)",
                "nullable" : true,
                "example" : "7.2.3"
              }
            },
            "description" : "MIAPPE V1.1\n\n(DM-85) Variable accession number - Accession number of the variable in the Crop Ontology\n\n(DM-87) Trait accession number - Accession number of the trait in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).\n\n(DM-89) Method accession number - Accession number of the method in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).\n\n(DM-93) Scale accession number - Accession number of the scale in a suitable controlled vocabulary (Crop Ontology)."
          },
          "scaleName" : {
            "type" : "string",
            "description" : "Name of the scale\n<br/>MIAPPE V1.1 (DM-92) Scale Name of the scale associated with the variable",
            "nullable" : true,
            "example" : "Meters"
          },
          "scalePUI" : {
            "type" : "string",
            "description" : "The Permanent Unique Identifier of a Scale, usually in the form of a URI",
            "nullable" : true,
            "example" : "http://my-traits.com/trait/CO_123:0000112"
          },
          "units" : {
            "type" : "string",
            "description" : "This field can be used to describe the units used for this scale. This should be the abbreviated \nform of the units, intended to be displayed with every value using this scale. Usually this only \napplies when `dataType` is Numeric, but could also be included for other dataTypes when applicable.",
            "nullable" : true,
            "example" : "m"
          },
          "validValues" : {
            "type" : "object",
            "properties" : {
              "categories" : {
                "type" : "array",
                "description" : "List of possible values with optional labels",
                "example" : [ {
                  "label" : "low",
                  "value" : "0"
                }, {
                  "label" : "medium",
                  "value" : "5"
                }, {
                  "label" : "high",
                  "value" : "10"
                } ],
                "items" : {
                  "type" : "object",
                  "properties" : {
                    "label" : {
                      "type" : "string",
                      "description" : "A text label for a category"
                    },
                    "value" : {
                      "type" : "string",
                      "description" : "The actual value for a category"
                    }
                  }
                }
              },
              "max" : {
                "type" : "integer",
                "description" : "**Deprecated in v2.1** Please use `maximumValue`. Github issue number #450 \n<br>Maximum value for numerical scales. Typically used for data capture control and QC.",
                "nullable" : true,
                "example" : 9999,
                "deprecated" : true
              },
              "maximumValue" : {
                "type" : "string",
                "description" : "Maximum value for numerical, date, and time scales. Typically used for data capture control and QC.",
                "nullable" : true,
                "example" : "9999"
              },
              "min" : {
                "type" : "integer",
                "description" : "**Deprecated in v2.1** Please use `minimumValue`. Github issue number #450 \n<br>Minimum value for numerical scales. Typically used for data capture control and QC.",
                "nullable" : true,
                "example" : 2,
                "deprecated" : true
              },
              "minimumValue" : {
                "type" : "string",
                "description" : "Minimum value for numerical, date, and time scales. Typically used for data capture control and QC.",
                "nullable" : true,
                "example" : "2"
              }
            },
            "nullable" : true
          }
        },
        "description" : "A Scale describes the units and acceptable values for an ObservationVariable. \n<br>For example, an ObservationVariable might be defined with a Trait of \"plant height\", a Scale of \"meters\", and a Method of \"tape measure\". This variable would be distinct from a variable with the Scale \"inches\" or \"pixels\"."
      },
      "ScaleNewRequest" : {
        "$ref" : "#/components/schemas/ScaleBaseClass"
      },
      "SearchRequestParametersCommonCropNames" : {
        "type" : "object",
        "properties" : {
          "commonCropNames" : {
            "type" : "array",
            "description" : "The BrAPI Common Crop Name is the simple, generalized, widely accepted name of the organism being researched. It is most often used in multi-crop systems where digital resources need to be divided at a high level. Things like 'Maize', 'Wheat', and 'Rice' are examples of common crop names.\n\nUse this parameter to only return results associated with the given crops. \n\nUse `GET /commoncropnames` to find the list of available crops on a server.",
            "example" : [ "Tomatillo", "Paw Paw" ],
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "SearchRequestParametersExternalReferences" : {
        "type" : "object",
        "properties" : {
          "externalReferenceIDs" : {
            "type" : "array",
            "description" : "**Deprecated in v2.1** Please use `externalReferenceIds`. Github issue number #460 \n<br>List of external reference IDs. Could be a simple strings or a URIs. (use with `externalReferenceSources` parameter)",
            "example" : [ "doi:10.155454/12341234", "14a19841" ],
            "deprecated" : true,
            "items" : {
              "type" : "string"
            }
          },
          "externalReferenceIds" : {
            "type" : "array",
            "description" : "List of external reference IDs. Could be a simple strings or a URIs. (use with `externalReferenceSources` parameter)",
            "example" : [ "doi:10.155454/12341234", "14a19841" ],
            "items" : {
              "type" : "string"
            }
          },
          "externalReferenceSources" : {
            "type" : "array",
            "description" : "List of identifiers for the source system or database of an external reference (use with `externalReferenceIDs` parameter)",
            "example" : [ "DOI", "Field App Name" ],
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "SearchRequestParametersGermplasm" : {
        "type" : "object",
        "properties" : {
          "germplasmDbIds" : {
            "type" : "array",
            "description" : "List of IDs which uniquely identify germplasm to search for",
            "example" : [ "e9c6edd7", "1b1df4a6" ],
            "items" : {
              "type" : "string"
            }
          },
          "germplasmNames" : {
            "type" : "array",
            "description" : "List of human readable names to identify germplasm to search for",
            "example" : [ "A0000003", "A0000477" ],
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "SearchRequestParametersLocations" : {
        "type" : "object",
        "properties" : {
          "locationDbIds" : {
            "type" : "array",
            "description" : "The location ids to search for",
            "example" : [ "b28911cf", "5071d1e4" ],
            "items" : {
              "type" : "string"
            }
          },
          "locationNames" : {
            "type" : "array",
            "description" : "A human readable names to search for",
            "example" : [ "Location Alpha", "The Large Hadron Collider" ],
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "SearchRequestParametersObservationVariables" : {
        "type" : "object",
        "properties" : {
          "observationVariableDbIds" : {
            "type" : "array",
            "description" : "The DbIds of Variables to search for",
            "example" : [ "a646187d", "6d23513b" ],
            "items" : {
              "type" : "string"
            }
          },
          "observationVariableNames" : {
            "type" : "array",
            "description" : "The names of Variables to search for",
            "example" : [ "Plant Height in meters", "Wheat rust score 1-5" ],
            "items" : {
              "type" : "string"
            }
          },
          "observationVariablePUIs" : {
            "type" : "array",
            "description" : "The Permanent Unique Identifier of an Observation Variable, usually in the form of a URI",
            "example" : [ "http://my-traits.com/trait/CO_123:0008012", "http://my-traits.com/trait/CO_123:0007261" ],
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "SearchRequestParametersPaging" : {
        "type" : "object",
        "properties" : {
          "page" : {
            "type" : "integer",
            "description" : "Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.",
            "example" : 0
          },
          "pageSize" : {
            "type" : "integer",
            "description" : "The size of the pages to be returned. Default is `1000`.",
            "example" : 1000
          }
        }
      },
      "SearchRequestParametersPrograms" : {
        "type" : "object",
        "properties" : {
          "programDbIds" : {
            "type" : "array",
            "description" : "A BrAPI Program represents the high level organization or group who is responsible for conducting trials and studies. Things like Breeding Programs and Funded Projects are considered BrAPI Programs. \n\nUse this parameter to only return results associated with the given programs. \n\nUse `GET /programs` to find the list of available programs on a server.",
            "example" : [ "8f5de35b", "0e2d4a13" ],
            "items" : {
              "type" : "string"
            }
          },
          "programNames" : {
            "type" : "array",
            "description" : "Use this parameter to only return results associated with the given program names. Program names are not required to be unique.\n\nUse `GET /programs` to find the list of available programs on a server.",
            "example" : [ "Better Breeding Program", "Best Breeding Program" ],
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "SearchRequestParametersStudies" : {
        "type" : "object",
        "properties" : {
          "studyDbIds" : {
            "type" : "array",
            "description" : "List of study identifiers to search for",
            "example" : [ "cf6c4bd4", "691e69d6" ],
            "items" : {
              "type" : "string"
            }
          },
          "studyNames" : {
            "type" : "array",
            "description" : "List of study names to filter search results",
            "example" : [ "The First Bob Study 2017", "Wheat Yield Trial 246" ],
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "SearchRequestParametersTokenPaging" : {
        "type" : "object",
        "properties" : {
          "page" : {
            "type" : "integer",
            "description" : "Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.",
            "example" : 0
          },
          "pageSize" : {
            "type" : "integer",
            "description" : "The size of the pages to be returned. Default is `1000`.",
            "example" : 1000
          },
          "pageToken" : {
            "type" : "string",
            "description" : "**Deprecated in v2.1** Please use `page`. Github issue number #451 \n<br>Used to request a specific page of data to be returned.\n<br>Tokenized pages are for large data sets which can not be efficiently broken into indexed pages. Use the nextPageToken and prevPageToken from a prior response to construct a query and move to the next or previous page respectively. ",
            "example" : "33c27874",
            "deprecated" : true
          }
        }
      },
      "SearchRequestParametersTrials" : {
        "type" : "object",
        "properties" : {
          "trialDbIds" : {
            "type" : "array",
            "description" : "The ID which uniquely identifies a trial to search for",
            "example" : [ "d2593dc2", "9431a731" ],
            "items" : {
              "type" : "string"
            }
          },
          "trialNames" : {
            "type" : "array",
            "description" : "The human readable name of a trial to search for",
            "example" : [ "All Yield Trials 2016", "Disease Resistance Study Comparison Group" ],
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "SearchRequestParametersVariableBaseClass" : {
        "type" : "object",
        "properties" : {
          "commonCropNames" : {
            "type" : "array",
            "description" : "The BrAPI Common Crop Name is the simple, generalized, widely accepted name of the organism being researched. It is most often used in multi-crop systems where digital resources need to be divided at a high level. Things like 'Maize', 'Wheat', and 'Rice' are examples of common crop names.\n\nUse this parameter to only return results associated with the given crops. \n\nUse `GET /commoncropnames` to find the list of available crops on a server.",
            "example" : [ "Tomatillo", "Paw Paw" ],
            "items" : {
              "type" : "string"
            }
          },
          "dataTypes" : {
            "type" : "array",
            "description" : "List of scale data types to filter search results",
            "example" : [ "Numerical", "Ordinal", "Text" ],
            "items" : {
              "type" : "string",
              "description" : "<p>Class of the scale, entries can be</p>\n<p>\"Code\" -  This scale class is exceptionally used to express complex traits. Code is a nominal scale that combines the expressions of the different traits composing the complex trait. For example a severity trait might be expressed by a 2 digit and 2 character code. The first 2 digits are the percentage of the plant covered by a fungus and the 2 characters refer to the delay in development, e.g. \"75VD\" means \"75 %\" of the plant is infected and the plant is very delayed.</p>\n<p>\"Date\" - The date class is for events expressed in a time format, See ISO 8601</p>\n<p>\"Duration\" - The Duration class is for time elapsed between two events expressed in a time format, e.g. days, hours, months</p>\n<p>\"Nominal\" - Categorical scale that can take one of a limited and fixed number of categories. There is no intrinsic ordering to the categories</p>\n<p>\"Numerical\" - Numerical scales express the trait with real numbers. The numerical scale defines the unit e.g. centimeter, ton per hectare, branches</p>\n<p>\"Ordinal\" - Ordinal scales are scales composed of ordered categories</p>\n<p>\"Text\" - A free text is used to express the trait.</p>",
              "example" : "Numerical",
              "enum" : [ "Code", "Date", "Duration", "Nominal", "Numerical", "Ordinal", "Text" ]
            }
          },
          "externalReferenceIDs" : {
            "type" : "array",
            "description" : "**Deprecated in v2.1** Please use `externalReferenceIds`. Github issue number #460 \n<br>List of external reference IDs. Could be a simple strings or a URIs. (use with `externalReferenceSources` parameter)",
            "example" : [ "doi:10.155454/12341234", "14a19841" ],
            "deprecated" : true,
            "items" : {
              "type" : "string"
            }
          },
          "externalReferenceIds" : {
            "type" : "array",
            "description" : "List of external reference IDs. Could be a simple strings or a URIs. (use with `externalReferenceSources` parameter)",
            "example" : [ "doi:10.155454/12341234", "14a19841" ],
            "items" : {
              "type" : "string"
            }
          },
          "externalReferenceSources" : {
            "type" : "array",
            "description" : "List of identifiers for the source system or database of an external reference (use with `externalReferenceIDs` parameter)",
            "example" : [ "DOI", "Field App Name" ],
            "items" : {
              "type" : "string"
            }
          },
          "methodDbIds" : {
            "type" : "array",
            "description" : "List of methods to filter search results",
            "example" : [ "07e34f83", "d3d5517a" ],
            "items" : {
              "type" : "string"
            }
          },
          "methodNames" : {
            "type" : "array",
            "description" : "Human readable name for the method\n<br/>MIAPPE V1.1 (DM-88) Method  Name of the method of observation",
            "example" : [ "Measuring Tape", "Spectrometer" ],
            "items" : {
              "type" : "string"
            }
          },
          "methodPUIs" : {
            "type" : "array",
            "description" : "The Permanent Unique Identifier of a Method, usually in the form of a URI",
            "example" : [ "http://my-traits.com/trait/CO_123:0000212", "http://my-traits.com/trait/CO_123:0003557" ],
            "items" : {
              "type" : "string"
            }
          },
          "ontologyDbIds" : {
            "type" : "array",
            "description" : "List of ontology IDs to search for",
            "example" : [ "f44f7b23", "a26b576e" ],
            "items" : {
              "type" : "string"
            }
          },
          "page" : {
            "type" : "integer",
            "description" : "Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.",
            "example" : 0
          },
          "pageSize" : {
            "type" : "integer",
            "description" : "The size of the pages to be returned. Default is `1000`.",
            "example" : 1000
          },
          "programDbIds" : {
            "type" : "array",
            "description" : "A BrAPI Program represents the high level organization or group who is responsible for conducting trials and studies. Things like Breeding Programs and Funded Projects are considered BrAPI Programs. \n\nUse this parameter to only return results associated with the given programs. \n\nUse `GET /programs` to find the list of available programs on a server.",
            "example" : [ "8f5de35b", "0e2d4a13" ],
            "items" : {
              "type" : "string"
            }
          },
          "programNames" : {
            "type" : "array",
            "description" : "Use this parameter to only return results associated with the given program names. Program names are not required to be unique.\n\nUse `GET /programs` to find the list of available programs on a server.",
            "example" : [ "Better Breeding Program", "Best Breeding Program" ],
            "items" : {
              "type" : "string"
            }
          },
          "scaleDbIds" : {
            "type" : "array",
            "description" : "The unique identifier for a Scale",
            "example" : [ "a13ecffa", "7e1afe4f" ],
            "items" : {
              "type" : "string"
            }
          },
          "scaleNames" : {
            "type" : "array",
            "description" : "Name of the scale\n<br/>MIAPPE V1.1 (DM-92) Scale Name of the scale associated with the variable",
            "example" : [ "Meters", "Liters" ],
            "items" : {
              "type" : "string"
            }
          },
          "scalePUIs" : {
            "type" : "array",
            "description" : "The Permanent Unique Identifier of a Scale, usually in the form of a URI",
            "example" : [ "http://my-traits.com/trait/CO_123:0000336", "http://my-traits.com/trait/CO_123:0000560" ],
            "items" : {
              "type" : "string"
            }
          },
          "studyDbId" : {
            "type" : "array",
            "description" : "**Deprecated in v2.1** Please use `studyDbIds`. Github issue number #483 \n<br>The unique ID of a studies to filter on",
            "example" : [ "5bcac0ae", "7f48e22d" ],
            "deprecated" : true,
            "items" : {
              "type" : "string"
            }
          },
          "studyDbIds" : {
            "type" : "array",
            "description" : "List of study identifiers to search for",
            "example" : [ "cf6c4bd4", "691e69d6" ],
            "items" : {
              "type" : "string"
            }
          },
          "studyNames" : {
            "type" : "array",
            "description" : "List of study names to filter search results",
            "example" : [ "The First Bob Study 2017", "Wheat Yield Trial 246" ],
            "items" : {
              "type" : "string"
            }
          },
          "traitAttributePUIs" : {
            "type" : "array",
            "description" : "The Permanent Unique Identifier of a Trait Attribute, usually in the form of a URI\n<br/>A trait can be decomposed as \"Trait\" = \"Entity\" + \"Attribute\", the attribute is the observed feature (or characteristic) of the entity e.g., for \"grain colour\", attribute = \"colour\"",
            "example" : [ "http://my-traits.com/trait/CO_123:0008336", "http://my-traits.com/trait/CO_123:0001092" ],
            "items" : {
              "type" : "string"
            }
          },
          "traitAttributes" : {
            "type" : "array",
            "description" : "A trait can be decomposed as \"Trait\" = \"Entity\" + \"Attribute\", the attribute is the observed feature (or characteristic) of the entity e.g., for \"grain colour\", attribute = \"colour\"",
            "example" : [ "Height", "Color" ],
            "items" : {
              "type" : "string"
            }
          },
          "traitClasses" : {
            "type" : "array",
            "description" : "List of trait classes to filter search results",
            "example" : [ "morphological", "phenological", "agronomical" ],
            "items" : {
              "type" : "string"
            }
          },
          "traitDbIds" : {
            "type" : "array",
            "description" : "The unique identifier for a Trait",
            "example" : [ "ef81147b", "78d82fad" ],
            "items" : {
              "type" : "string"
            }
          },
          "traitEntities" : {
            "type" : "array",
            "description" : "A trait can be decomposed as \"Trait\" = \"Entity\" + \"Attribute\", the entity is the part of the plant that the trait refers to e.g., for \"grain colour\", entity = \"grain\"",
            "example" : [ "Stalk", "Root" ],
            "items" : {
              "type" : "string"
            }
          },
          "traitEntityPUIs" : {
            "type" : "array",
            "description" : "The Permanent Unique Identifier of a Trait Entity, usually in the form of a URI\n<br/>A trait can be decomposed as \"Trait\" = \"Entity\" + \"Attribute\", the entity is the part of the plant that the trait refers to e.g., for \"grain colour\", entity = \"grain\" ",
            "example" : [ "http://my-traits.com/trait/CO_123:0004098", "http://my-traits.com/trait/CO_123:0002366" ],
            "items" : {
              "type" : "string"
            }
          },
          "traitNames" : {
            "type" : "array",
            "description" : "The human readable name of a trait\n<br/>MIAPPE V1.1 (DM-86) Trait - Name of the (plant or environmental) trait under observation",
            "example" : [ "Stalk Height", "Root Color" ],
            "items" : {
              "type" : "string"
            }
          },
          "traitPUIs" : {
            "type" : "array",
            "description" : "The Permanent Unique Identifier of a Trait, usually in the form of a URI",
            "example" : [ "http://my-traits.com/trait/CO_123:0000456", "http://my-traits.com/trait/CO_123:0000820" ],
            "items" : {
              "type" : "string"
            }
          },
          "trialDbIds" : {
            "type" : "array",
            "description" : "The ID which uniquely identifies a trial to search for",
            "example" : [ "d2593dc2", "9431a731" ],
            "items" : {
              "type" : "string"
            }
          },
          "trialNames" : {
            "type" : "array",
            "description" : "The human readable name of a trial to search for",
            "example" : [ "All Yield Trials 2016", "Disease Resistance Study Comparison Group" ],
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "Season" : {
        "required" : [ "seasonDbId" ],
        "type" : "object",
        "properties" : {
          "seasonDbId" : {
            "type" : "string",
            "description" : "The ID which uniquely identifies a season. For backward compatibility it can be a string like '2012', '1957-2004'",
            "example" : "Spring_2018"
          },
          "seasonName" : {
            "type" : "string",
            "description" : "Name of the season. ex. 'Spring', 'Q2', 'Season A', etc.",
            "nullable" : true,
            "example" : "Spring"
          },
          "year" : {
            "type" : "integer",
            "description" : "The 4 digit year of the season.",
            "nullable" : true,
            "example" : 2018
          }
        },
        "x-brapi-metadata" : {
          "description" : "A Season defines a period in time. A Season is made of two parts; (1) the primary year and (2) a term which defines a segment of the year. This term could be a traditional season, like \"Spring\" or \"Summer\", or this term could be a month, like \"May\" or \"June\", or this could be an arbitrary season name which is meaningful to the breeding Program like \"PlantingTime_3\" or \"Season E\".",
          "module" : "BrAPI-Core",
          "primaryModel" : true,
          "title" : "Season"
        }
      },
      "SeasonObs" : {
        "required" : [ "seasonDbId" ],
        "type" : "object",
        "properties" : {
          "season" : {
            "type" : "string",
            "description" : "**Deprecated in v2.1** Please use `seasonName`. Github issue number #456 \n<br>Name of the season. ex. 'Spring', 'Q2', 'Season A', etc.",
            "nullable" : true,
            "example" : "Spring",
            "deprecated" : true
          },
          "seasonDbId" : {
            "type" : "string",
            "description" : "The ID which uniquely identifies a season. For backward compatibility it can be a string like '2012', '1957-2004'",
            "nullable" : true,
            "example" : "Spring_2018"
          },
          "seasonName" : {
            "type" : "string",
            "description" : "Name of the season. ex. 'Spring', 'Q2', 'Season A', etc.",
            "nullable" : true,
            "example" : "Spring"
          },
          "year" : {
            "type" : "integer",
            "description" : "The 4 digit year of the season.",
            "nullable" : true,
            "example" : 2018
          }
        }
      },
      "SeedLot" : {
        "required" : [ "seedLotDbId", "seedLotName" ],
        "type" : "object",
        "properties" : {
          "additionalInfo" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.",
            "nullable" : true
          },
          "amount" : {
            "type" : "number",
            "description" : "The current balance of the amount of material in a SeedLot. Could be a count (seeds, bulbs, etc) or a weight (kg of seed).",
            "nullable" : true,
            "example" : 561
          },
          "contentMixture" : {
            "type" : "array",
            "description" : "The mixture of germplasm present in the seed lot.\n<br/>\nIf this seed lot only contains a single germplasm, the response should contain the name \nand DbId of that germplasm with a mixturePercentage value of 100\n<br/>\nIf the seed lot contains a mixture of different germplasm, the response should contain \nthe name and DbId every germplasm present. The mixturePercentage field should contain \nthe ratio of each germplasm in the total mixture. All of the mixturePercentage values \nin this array should sum to equal 100.",
            "nullable" : true,
            "items" : {
              "type" : "object",
              "properties" : {
                "crossDbId" : {
                  "type" : "string",
                  "description" : "The unique DbId for a cross contained in this seed lot",
                  "nullable" : true,
                  "example" : "d105fd6f"
                },
                "crossName" : {
                  "type" : "string",
                  "description" : "The human readable name for a cross contained in this seed lot",
                  "nullable" : true,
                  "example" : "my_Crosses_2018_01"
                },
                "germplasmDbId" : {
                  "type" : "string",
                  "description" : "The unique DbId of the Germplasm contained in this Seed Lot",
                  "nullable" : true,
                  "example" : "029d705d"
                },
                "germplasmName" : {
                  "type" : "string",
                  "description" : "The human readable name of the Germplasm contained in this Seed Lot",
                  "nullable" : true,
                  "example" : "A0000003"
                },
                "mixturePercentage" : {
                  "type" : "integer",
                  "description" : "The percentage of the given germplasm in the seed lot mixture.",
                  "nullable" : true,
                  "example" : 100
                }
              }
            }
          },
          "createdDate" : {
            "type" : "string",
            "description" : "The time stamp for when this seed lot was created",
            "format" : "date-time",
            "nullable" : true
          },
          "externalReferences" : {
            "title" : "ExternalReferences",
            "type" : "array",
            "description" : "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.",
            "nullable" : true,
            "example" : [ {
              "referenceId" : "doi:10.155454/12341234",
              "referenceSource" : "DOI"
            }, {
              "referenceId" : "75a50e76",
              "referenceSource" : "Remote Data Collection Upload Tool"
            } ],
            "items" : {
              "type" : "object",
              "properties" : {
                "referenceID" : {
                  "type" : "string",
                  "description" : "**Deprecated in v2.1** Please use `referenceId`. Github issue number #460 \n<br>The external reference ID. Could be a simple string or a URI.",
                  "nullable" : true,
                  "deprecated" : true
                },
                "referenceId" : {
                  "type" : "string",
                  "description" : "The external reference ID. Could be a simple string or a URI."
                },
                "referenceSource" : {
                  "type" : "string",
                  "description" : "An identifier for the source system or database of this reference"
                }
              }
            }
          },
          "lastUpdated" : {
            "type" : "string",
            "description" : "The timestamp for the last update to this Seed Lot (including transactions)",
            "format" : "date-time",
            "nullable" : true
          },
          "locationDbId" : {
            "type" : "string",
            "description" : "The unique identifier for a Location",
            "nullable" : true,
            "example" : "3cfdd67d"
          },
          "locationName" : {
            "type" : "string",
            "description" : "A human readable name for a location",
            "nullable" : true,
            "example" : "Location 1"
          },
          "programDbId" : {
            "type" : "string",
            "description" : "The unique DbId of the breeding program this Seed Lot belongs to",
            "nullable" : true,
            "example" : "e972d569"
          },
          "programName" : {
            "type" : "string",
            "description" : "The human readable name of the breeding program this Seed Lot belongs to",
            "nullable" : true,
            "example" : "Tomatillo_Breeding_Program"
          },
          "seedLotDbId" : {
            "type" : "string",
            "description" : "Unique DbId for the Seed Lot",
            "example" : "261ecb09"
          },
          "seedLotDescription" : {
            "type" : "string",
            "description" : "A general description of this Seed Lot",
            "nullable" : true,
            "example" : "This is a description of a seed lot"
          },
          "seedLotName" : {
            "type" : "string",
            "description" : "A human readable name for this Seed Lot",
            "example" : "Seed Lot Alpha"
          },
          "sourceCollection" : {
            "type" : "string",
            "description" : "The description of the source where this material was originally collected (wild, nursery, etc)",
            "nullable" : true,
            "example" : "nursery"
          },
          "storageLocation" : {
            "type" : "string",
            "description" : "Description the storage location",
            "nullable" : true,
            "example" : "The storage location is an massive, underground, bunker."
          },
          "units" : {
            "type" : "string",
            "description" : "A description of the things being counted in a SeedLot (seeds, bulbs, kg, tree, etc)",
            "nullable" : true,
            "example" : "seeds"
          }
        },
        "x-brapi-metadata" : {
          "description" : "A SeedLot, also known as an InventoryLot, is a collection of starting material (seeds, bulbs, root-stock, etc) for a particular Germplasm. The amount of material available for each Germplasm can be increased by seed production and decreased by planting or trading with another breeding Program.",
          "module" : "BrAPI-Germplasm",
          "primaryModel" : true,
          "title" : "SeedLot"
        }
      },
      "SeedLotNewRequest" : {
        "required" : [ "seedLotName" ],
        "type" : "object",
        "properties" : {
          "additionalInfo" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.",
            "nullable" : true
          },
          "amount" : {
            "type" : "number",
            "description" : "The current balance of the amount of material in a SeedLot. Could be a count (seeds, bulbs, etc) or a weight (kg of seed).",
            "nullable" : true,
            "example" : 561
          },
          "contentMixture" : {
            "type" : "array",
            "description" : "The mixture of germplasm present in the seed lot.\n<br/>\nIf this seed lot only contains a single germplasm, the response should contain the name \nand DbId of that germplasm with a mixturePercentage value of 100\n<br/>\nIf the seed lot contains a mixture of different germplasm, the response should contain \nthe name and DbId every germplasm present. The mixturePercentage field should contain \nthe ratio of each germplasm in the total mixture. All of the mixturePercentage values \nin this array should sum to equal 100.",
            "nullable" : true,
            "items" : {
              "type" : "object",
              "properties" : {
                "crossDbId" : {
                  "type" : "string",
                  "description" : "The unique DbId for a cross contained in this seed lot",
                  "nullable" : true,
                  "example" : "d105fd6f"
                },
                "crossName" : {
                  "type" : "string",
                  "description" : "The human readable name for a cross contained in this seed lot",
                  "nullable" : true,
                  "example" : "my_Crosses_2018_01"
                },
                "germplasmDbId" : {
                  "type" : "string",
                  "description" : "The unique DbId of the Germplasm contained in this Seed Lot",
                  "nullable" : true,
                  "example" : "029d705d"
                },
                "germplasmName" : {
                  "type" : "string",
                  "description" : "The human readable name of the Germplasm contained in this Seed Lot",
                  "nullable" : true,
                  "example" : "A0000003"
                },
                "mixturePercentage" : {
                  "type" : "integer",
                  "description" : "The percentage of the given germplasm in the seed lot mixture.",
                  "nullable" : true,
                  "example" : 100
                }
              }
            }
          },
          "createdDate" : {
            "type" : "string",
            "description" : "The time stamp for when this seed lot was created",
            "format" : "date-time",
            "nullable" : true
          },
          "externalReferences" : {
            "title" : "ExternalReferences",
            "type" : "array",
            "description" : "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.",
            "nullable" : true,
            "example" : [ {
              "referenceId" : "doi:10.155454/12341234",
              "referenceSource" : "DOI"
            }, {
              "referenceId" : "75a50e76",
              "referenceSource" : "Remote Data Collection Upload Tool"
            } ],
            "items" : {
              "type" : "object",
              "properties" : {
                "referenceID" : {
                  "type" : "string",
                  "description" : "**Deprecated in v2.1** Please use `referenceId`. Github issue number #460 \n<br>The external reference ID. Could be a simple string or a URI.",
                  "nullable" : true,
                  "deprecated" : true
                },
                "referenceId" : {
                  "type" : "string",
                  "description" : "The external reference ID. Could be a simple string or a URI."
                },
                "referenceSource" : {
                  "type" : "string",
                  "description" : "An identifier for the source system or database of this reference"
                }
              }
            }
          },
          "lastUpdated" : {
            "type" : "string",
            "description" : "The timestamp for the last update to this Seed Lot (including transactions)",
            "format" : "date-time",
            "nullable" : true
          },
          "locationDbId" : {
            "type" : "string",
            "description" : "The unique identifier for a Location",
            "nullable" : true,
            "example" : "3cfdd67d"
          },
          "locationName" : {
            "type" : "string",
            "description" : "A human readable name for a location",
            "nullable" : true,
            "example" : "Location 1"
          },
          "programDbId" : {
            "type" : "string",
            "description" : "The unique DbId of the breeding program this Seed Lot belongs to",
            "nullable" : true,
            "example" : "e972d569"
          },
          "programName" : {
            "type" : "string",
            "description" : "The human readable name of the breeding program this Seed Lot belongs to",
            "nullable" : true,
            "example" : "Tomatillo_Breeding_Program"
          },
          "seedLotDescription" : {
            "type" : "string",
            "description" : "A general description of this Seed Lot",
            "nullable" : true,
            "example" : "This is a description of a seed lot"
          },
          "seedLotName" : {
            "type" : "string",
            "description" : "A human readable name for this Seed Lot",
            "example" : "Seed Lot Alpha"
          },
          "sourceCollection" : {
            "type" : "string",
            "description" : "The description of the source where this material was originally collected (wild, nursery, etc)",
            "nullable" : true,
            "example" : "nursery"
          },
          "storageLocation" : {
            "type" : "string",
            "description" : "Description the storage location",
            "nullable" : true,
            "example" : "The storage location is an massive, underground, bunker."
          },
          "units" : {
            "type" : "string",
            "description" : "A description of the things being counted in a SeedLot (seeds, bulbs, kg, tree, etc)",
            "nullable" : true,
            "example" : "seeds"
          }
        }
      },
      "SeedLotTransaction" : {
        "required" : [ "transactionDbId" ],
        "type" : "object",
        "properties" : {
          "additionalInfo" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.",
            "nullable" : true
          },
          "amount" : {
            "type" : "number",
            "description" : "The number of units being transferred between SeedLots. Could be a count (seeds, bulbs, etc) or a weight (kg of seed).",
            "nullable" : true,
            "example" : 45
          },
          "externalReferences" : {
            "title" : "ExternalReferences",
            "type" : "array",
            "description" : "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.",
            "nullable" : true,
            "example" : [ {
              "referenceId" : "doi:10.155454/12341234",
              "referenceSource" : "DOI"
            }, {
              "referenceId" : "75a50e76",
              "referenceSource" : "Remote Data Collection Upload Tool"
            } ],
            "items" : {
              "type" : "object",
              "properties" : {
                "referenceID" : {
                  "type" : "string",
                  "description" : "**Deprecated in v2.1** Please use `referenceId`. Github issue number #460 \n<br>The external reference ID. Could be a simple string or a URI.",
                  "nullable" : true,
                  "deprecated" : true
                },
                "referenceId" : {
                  "type" : "string",
                  "description" : "The external reference ID. Could be a simple string or a URI."
                },
                "referenceSource" : {
                  "type" : "string",
                  "description" : "An identifier for the source system or database of this reference"
                }
              }
            }
          },
          "fromSeedLotDbId" : {
            "type" : "string",
            "description" : "The identifier for the Seed Lot being transferred out of",
            "nullable" : true,
            "example" : "11eef13b"
          },
          "toSeedLotDbId" : {
            "type" : "string",
            "description" : "The identifier for the Seed Lot being transferred into",
            "nullable" : true,
            "example" : "59339b90"
          },
          "transactionDbId" : {
            "type" : "string",
            "description" : "Unique DbId for the Seed Lot Transaction",
            "example" : "28e46db9"
          },
          "transactionDescription" : {
            "type" : "string",
            "description" : "A general description of this Seed Lot Transaction",
            "nullable" : true,
            "example" : "f9cd88d2"
          },
          "transactionTimestamp" : {
            "type" : "string",
            "description" : "The time stamp for when the transaction occurred",
            "format" : "date-time",
            "nullable" : true
          },
          "units" : {
            "type" : "string",
            "description" : "A description of the things being transferred between SeedLots in a transaction (seeds, bulbs, kg, etc)",
            "nullable" : true,
            "example" : "seeds"
          }
        },
        "x-brapi-metadata" : {
          "description" : "The record of an event where material was moved in or out of a particular SeedLot",
          "module" : "BrAPI-Germplasm",
          "primaryModel" : true,
          "title" : "SeedLotTransaction"
        }
      },
      "SeedLotTransactionNewRequest" : {
        "type" : "object",
        "properties" : {
          "additionalInfo" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.",
            "nullable" : true
          },
          "amount" : {
            "type" : "number",
            "description" : "The number of units being transferred between SeedLots. Could be a count (seeds, bulbs, etc) or a weight (kg of seed).",
            "nullable" : true,
            "example" : 45
          },
          "externalReferences" : {
            "title" : "ExternalReferences",
            "type" : "array",
            "description" : "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.",
            "nullable" : true,
            "example" : [ {
              "referenceId" : "doi:10.155454/12341234",
              "referenceSource" : "DOI"
            }, {
              "referenceId" : "75a50e76",
              "referenceSource" : "Remote Data Collection Upload Tool"
            } ],
            "items" : {
              "type" : "object",
              "properties" : {
                "referenceID" : {
                  "type" : "string",
                  "description" : "**Deprecated in v2.1** Please use `referenceId`. Github issue number #460 \n<br>The external reference ID. Could be a simple string or a URI.",
                  "nullable" : true,
                  "deprecated" : true
                },
                "referenceId" : {
                  "type" : "string",
                  "description" : "The external reference ID. Could be a simple string or a URI."
                },
                "referenceSource" : {
                  "type" : "string",
                  "description" : "An identifier for the source system or database of this reference"
                }
              }
            }
          },
          "fromSeedLotDbId" : {
            "type" : "string",
            "description" : "The identifier for the Seed Lot being transferred out of",
            "nullable" : true,
            "example" : "11eef13b"
          },
          "toSeedLotDbId" : {
            "type" : "string",
            "description" : "The identifier for the Seed Lot being transferred into",
            "nullable" : true,
            "example" : "59339b90"
          },
          "transactionDescription" : {
            "type" : "string",
            "description" : "A general description of this Seed Lot Transaction",
            "nullable" : true,
            "example" : "f9cd88d2"
          },
          "transactionTimestamp" : {
            "type" : "string",
            "description" : "The time stamp for when the transaction occurred",
            "format" : "date-time",
            "nullable" : true
          },
          "units" : {
            "type" : "string",
            "description" : "A description of the things being transferred between SeedLots in a transaction (seeds, bulbs, kg, etc)",
            "nullable" : true,
            "example" : "seeds"
          }
        }
      },
      "ServerInfo" : {
        "required" : [ "calls" ],
        "type" : "object",
        "properties" : {
          "calls" : {
            "type" : "array",
            "description" : "Array of available calls on this server",
            "items" : {
              "$ref" : "#/components/schemas/Service"
            }
          },
          "contactEmail" : {
            "type" : "string",
            "description" : "A contact email address for this server management",
            "example" : "contact@institute.org"
          },
          "documentationURL" : {
            "type" : "string",
            "description" : "A URL to the human readable documentation of an object",
            "example" : "institute.org/server"
          },
          "location" : {
            "type" : "string",
            "description" : "Physical location of this server (ie. City, Country)",
            "example" : "USA"
          },
          "organizationName" : {
            "type" : "string",
            "description" : "The name of the organization that manages this server and data",
            "example" : "The Institute"
          },
          "organizationURL" : {
            "type" : "string",
            "description" : "The URL of the organization that manages this server and data",
            "example" : "institute.org/home"
          },
          "serverDescription" : {
            "type" : "string",
            "description" : "A description of this server",
            "example" : "The BrAPI Test Server\nWeb Server - Apache Tomcat 7.0.32\nDatabase - Postgres 10\nSupported BrAPI Version - V2.0"
          },
          "serverName" : {
            "type" : "string",
            "description" : "The name of this server",
            "example" : "The BrAPI Test Server"
          }
        }
      },
      "Service" : {
        "required" : [ "methods", "service", "versions" ],
        "type" : "object",
        "properties" : {
          "contentTypes" : {
            "type" : "array",
            "description" : "The possible content types returned by the service endpoint",
            "example" : [ "application/json" ],
            "items" : {
              "$ref" : "#/components/schemas/ContentTypes"
            }
          },
          "dataTypes" : {
            "type" : "array",
            "description" : "**Deprecated in v2.1** Please use `contentTypes`. Github issue number #443 \n<br/>The possible data formats returned by the available call ",
            "example" : [ "application/json" ],
            "deprecated" : true,
            "items" : {
              "$ref" : "#/components/schemas/ContentTypes"
            }
          },
          "methods" : {
            "type" : "array",
            "description" : "The possible HTTP Methods to be used with the available call",
            "example" : [ "GET", "POST" ],
            "items" : {
              "type" : "string",
              "enum" : [ "GET", "POST", "PUT", "DELETE" ]
            }
          },
          "service" : {
            "type" : "string",
            "description" : "The name of the available call as recorded in the documentation",
            "example" : "germplasm/{germplasmDbId}/pedigree"
          },
          "versions" : {
            "type" : "array",
            "description" : "The supported versions of a particular call",
            "example" : [ "2.0", "2.1" ],
            "items" : {
              "type" : "string",
              "enum" : [ "2.0", "2.1", "2.2" ]
            }
          }
        }
      },
      "Study" : {
        "required" : [ "studyDbId", "studyName" ],
        "type" : "object",
        "properties" : {
          "active" : {
            "type" : "boolean",
            "description" : "A flag to indicate if a Study is currently active and ongoing",
            "nullable" : true,
            "example" : true
          },
          "additionalInfo" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.",
            "nullable" : true
          },
          "commonCropName" : {
            "type" : "string",
            "description" : "Common name for the crop associated with this study",
            "nullable" : true,
            "example" : "Grape"
          },
          "contacts" : {
            "type" : "array",
            "description" : "List of contact entities associated with this study",
            "nullable" : true,
            "items" : {
              "required" : [ "contactDbId" ],
              "type" : "object",
              "properties" : {
                "contactDbId" : {
                  "type" : "string",
                  "description" : "The ID which uniquely identifies this contact\n\nMIAPPE V1.1 (DM-33) Person ID - An identifier for the data submitter. If that submitter is an individual, ORCID identifiers are recommended.",
                  "example" : "5f4e5509"
                },
                "email" : {
                  "type" : "string",
                  "description" : "The contacts email address\n\nMIAPPE V1.1 (DM-32) Person email - The electronic mail address of the person.",
                  "nullable" : true,
                  "example" : "bob@bob.com"
                },
                "instituteName" : {
                  "type" : "string",
                  "description" : "The name of the institution which this contact is part of\n\nMIAPPE V1.1 (DM-35) Person affiliation - The institution the person belongs to",
                  "nullable" : true,
                  "example" : "The BrAPI Institute"
                },
                "name" : {
                  "type" : "string",
                  "description" : "The full name of this contact person\n\nMIAPPE V1.1 (DM-31) Person name - The name of the person (either full name or as used in scientific publications)",
                  "nullable" : true,
                  "example" : "Bob Robertson"
                },
                "orcid" : {
                  "type" : "string",
                  "description" : "The Open Researcher and Contributor ID for this contact person (orcid.org)\n\nMIAPPE V1.1 (DM-33) Person ID - An identifier for the data submitter. If that submitter is an individual, ORCID identifiers are recommended.",
                  "nullable" : true,
                  "example" : "http://orcid.org/0000-0001-8640-1750"
                },
                "type" : {
                  "type" : "string",
                  "description" : "The type of person this contact represents (ex: Coordinator, Scientist, PI, etc.)\n\nMIAPPE V1.1 (DM-34) Person role - Type of contribution of the person to the investigation",
                  "nullable" : true,
                  "example" : "PI"
                }
              }
            }
          },
          "culturalPractices" : {
            "type" : "string",
            "description" : "MIAPPE V1.1 (DM-28) Cultural practices - General description of the cultural practices of the study.",
            "nullable" : true,
            "example" : "Irrigation was applied according needs during summer to prevent water stress."
          },
          "dataLinks" : {
            "type" : "array",
            "description" : "List of links to extra data files associated with this study. Extra data could include notes, images, and reference data.",
            "nullable" : true,
            "items" : {
              "type" : "object",
              "properties" : {
                "dataFormat" : {
                  "type" : "string",
                  "description" : "The structure of the data within a file. For example - VCF, table, image archive, multispectral image archives in EDAM ontology (used in Galaxy)\n\nMIAPPE V1.1 (DM-38) Data file description - Description of the format of the data file. May be a standard file format name, or a description of organization of the data in a tabular file.",
                  "nullable" : true,
                  "example" : "Image Archive"
                },
                "description" : {
                  "type" : "string",
                  "description" : "The general description of this data link\n\nMIAPPE V1.1 (DM-38) Data file description - Description of the format of the data file. May be a standard file format name, or a description of organization of the data in a tabular file.",
                  "nullable" : true,
                  "example" : "Raw drone images collected for this study"
                },
                "fileFormat" : {
                  "type" : "string",
                  "description" : "The MIME type of the file (ie text/csv, application/excel, application/zip).\n\nMIAPPE V1.1 (DM-38) Data file description - Description of the format of the data file. May be a standard file format name, or a description of organization of the data in a tabular file.",
                  "nullable" : true,
                  "example" : "application/zip"
                },
                "name" : {
                  "type" : "string",
                  "description" : "The name of the external data link\n\nMIAPPE V1.1 (DM-38) Data file description - Description of the format of the data file. May be a standard file format name, or a description of organization of the data in a tabular file.",
                  "nullable" : true,
                  "example" : "image-archive.zip"
                },
                "provenance" : {
                  "type" : "string",
                  "description" : "The description of the origin or ownership of this linked data. Could be a formal reference to software, method, or workflow.",
                  "nullable" : true,
                  "example" : "Image Processing Pipeline, built at the University of Antarctica: https://github.com/antarctica/pipeline"
                },
                "scientificType" : {
                  "type" : "string",
                  "description" : "The general type of data. For example- Genotyping, Phenotyping raw data, Phenotyping reduced data, Environmental, etc",
                  "nullable" : true,
                  "example" : "Environmental"
                },
                "url" : {
                  "type" : "string",
                  "description" : "URL describing the location of this data file to view or download\n\nMIAPPE V1.1 (DM-37) Data file link - Link to the data file (or digital object) in a public database or in a persistent institutional repository; or identifier of the data file when submitted together with the MIAPPE submission.",
                  "format" : "uri",
                  "nullable" : true,
                  "example" : "https://brapi.org/image-archive.zip"
                },
                "version" : {
                  "type" : "string",
                  "description" : "The version number for this data \n\nMIAPPE V1.1 (DM-39) Data file version - The version of the dataset (the actual data).",
                  "nullable" : true,
                  "example" : "1.0.3"
                }
              }
            }
          },
          "documentationURL" : {
            "type" : "string",
            "description" : "A URL to the human readable documentation of an object",
            "format" : "uri",
            "nullable" : true,
            "example" : "https://wiki.brapi.org"
          },
          "endDate" : {
            "type" : "string",
            "description" : "The date the study ends\n\nMIAPPE V1.1 (DM-15) End date of study - Date and, if relevant, time when the experiment ended",
            "format" : "date-time",
            "nullable" : true
          },
          "environmentParameters" : {
            "type" : "array",
            "description" : "Environmental parameters that were kept constant throughout the study and did not change between observation units.\n\nMIAPPE V1.1 (DM-57) Environment - Environmental parameters that were kept constant throughout the study and did not change between observation units or assays. Environment characteristics that vary over time, i.e. environmental variables, should be recorded as Observed Variables (see below).",
            "nullable" : true,
            "items" : {
              "required" : [ "description", "parameterName" ],
              "type" : "object",
              "properties" : {
                "description" : {
                  "type" : "string",
                  "description" : "Human-readable value of the environment parameter (defined above) constant within the experiment",
                  "example" : "the soil type was clay"
                },
                "parameterName" : {
                  "type" : "string",
                  "description" : "Name of the environment parameter constant within the experiment\n\nMIAPPE V1.1 (DM-58) Environment parameter - Name of the environment parameter constant within the experiment. ",
                  "example" : "soil type"
                },
                "parameterPUI" : {
                  "type" : "string",
                  "description" : "URI pointing to an ontology class for the parameter",
                  "nullable" : true,
                  "example" : "PECO:0007155"
                },
                "unit" : {
                  "type" : "string",
                  "description" : "Unit of the value for this parameter",
                  "nullable" : true,
                  "example" : "pH"
                },
                "unitPUI" : {
                  "type" : "string",
                  "description" : "URI pointing to an ontology class for the unit",
                  "nullable" : true,
                  "example" : "PECO:0007059"
                },
                "value" : {
                  "type" : "string",
                  "description" : "Numerical or categorical value\n\nMIAPPE V1.1 (DM-59) Environment parameter value - Value of the environment parameter (defined above) constant within the experiment.",
                  "nullable" : true,
                  "example" : "clay soil"
                },
                "valuePUI" : {
                  "type" : "string",
                  "description" : "URI pointing to an ontology class for the parameter value",
                  "nullable" : true,
                  "example" : "ENVO:00002262"
                }
              }
            }
          },
          "experimentalDesign" : {
            "type" : "object",
            "properties" : {
              "PUI" : {
                "type" : "string",
                "description" : "MIAPPE V1.1 (DM-23) Type of experimental design - Type of experimental  design of the study, in the form of an accession number from the Crop Ontology.",
                "nullable" : true,
                "example" : "CO_715:0000145"
              },
              "description" : {
                "type" : "string",
                "description" : "MIAPPE V1.1 (DM-22) Description of the experimental design - Short description of the experimental design, possibly including statistical design. In specific cases, e.g. legacy datasets or data computed from several studies, the experimental design can be \"unknown\"/\"NA\", \"aggregated/reduced data\", or simply 'none'.",
                "nullable" : true,
                "example" : "Lines were repeated twice at each location using a complete block design. In order to limit competition effects, each block was organized into four sub-blocks corresponding to earliest groups based on a prior information."
              }
            },
            "description" : "The experimental and statistical design full description plus a category PUI taken from crop research ontology or agronomy ontology",
            "nullable" : true
          },
          "externalReferences" : {
            "title" : "ExternalReferences",
            "type" : "array",
            "description" : "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.",
            "nullable" : true,
            "example" : [ {
              "referenceId" : "doi:10.155454/12341234",
              "referenceSource" : "DOI"
            }, {
              "referenceId" : "75a50e76",
              "referenceSource" : "Remote Data Collection Upload Tool"
            } ],
            "items" : {
              "type" : "object",
              "properties" : {
                "referenceID" : {
                  "type" : "string",
                  "description" : "**Deprecated in v2.1** Please use `referenceId`. Github issue number #460 \n<br>The external reference ID. Could be a simple string or a URI.",
                  "nullable" : true,
                  "deprecated" : true
                },
                "referenceId" : {
                  "type" : "string",
                  "description" : "The external reference ID. Could be a simple string or a URI."
                },
                "referenceSource" : {
                  "type" : "string",
                  "description" : "An identifier for the source system or database of this reference"
                }
              }
            }
          },
          "growthFacility" : {
            "type" : "object",
            "properties" : {
              "PUI" : {
                "type" : "string",
                "description" : "MIAPPE V1.1 (DM-27) Type of growth facility - Type of growth facility in which the study was carried out, in the form of an accession number from the Crop Ontology.",
                "example" : "CO_715:0000162"
              },
              "description" : {
                "type" : "string",
                "description" : "MIAPPE V1.1 (DM-26) Description of growth facility - Short description of the facility in which the study was carried out.",
                "example" : "field environment condition, greenhouse"
              }
            },
            "description" : "Short description of the facility in which the study was carried out.",
            "nullable" : true
          },
          "lastUpdate" : {
            "type" : "object",
            "properties" : {
              "timestamp" : {
                "type" : "string",
                "format" : "date-time",
                "nullable" : true
              },
              "version" : {
                "type" : "string",
                "nullable" : true,
                "example" : "1.2.3"
              }
            },
            "description" : "The date and time when this study was last modified",
            "nullable" : true
          },
          "license" : {
            "type" : "string",
            "description" : "The usage license associated with the study data",
            "nullable" : true,
            "example" : "MIT License"
          },
          "locationDbId" : {
            "type" : "string",
            "description" : "The unique identifier for a Location",
            "nullable" : true,
            "example" : "3cfdd67d"
          },
          "locationName" : {
            "type" : "string",
            "description" : "A human readable name for this location\n\nMIAPPE V1.1 (DM-18) Experimental site name - The name of the natural site, experimental field, greenhouse, phenotyping facility, etc. where the experiment took place.",
            "nullable" : true,
            "example" : "Location 1"
          },
          "observationLevels" : {
            "type" : "array",
            "description" : "Observation levels indicate the granularity level at which the measurements are taken. `levelName` defines the level, `levelOrder` defines where that level exists in the hierarchy of levels. `levelOrder`s lower numbers are at the top of the hierarchy (ie field > 0) and higher numbers are at the bottom of the hierarchy (ie plant > 6). ",
            "nullable" : true,
            "example" : [ {
              "levelName" : "field",
              "levelOrder" : 0
            }, {
              "levelName" : "block",
              "levelOrder" : 1
            }, {
              "levelName" : "plot",
              "levelOrder" : 2
            } ],
            "items" : {
              "title" : "ObservationUnitHierarchyLevel",
              "type" : "object",
              "properties" : {
                "levelName" : {
                  "type" : "string",
                  "description" : "A name for this level \n\n**Standard Level Names: study, field, entry, rep, block, sub-block, plot, sub-plot, plant, pot, sample** \n\nFor more information on Observation Levels, please review the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Observation_Levels\">Observation Levels documentation</a>. ",
                  "nullable" : true,
                  "example" : "plot"
                },
                "levelOrder" : {
                  "type" : "integer",
                  "description" : "`levelOrder` defines where that level exists in the hierarchy of levels. `levelOrder`'s lower numbers \nare at the top of the hierarchy (ie field -> 1) and higher numbers are at the bottom of the hierarchy (ie plant -> 9). \n\nFor more information on Observation Levels, please review the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Observation_Levels\">Observation Levels documentation</a>. ",
                  "nullable" : true,
                  "example" : 2
                }
              },
              "description" : "Observation levels indicate the granularity level at which the measurements are taken. `levelName` \ndefines the level, `levelOrder` defines where that level exists in the hierarchy of levels. \n`levelOrder`s lower numbers are at the top of the hierarchy (ie field > 0) and higher numbers are \nat the bottom of the hierarchy (ie plant > 6). \n\n**Standard Level Names: study, field, entry, rep, block, sub-block, plot, sub-plot, plant, pot, sample** \n\nFor more information on Observation Levels, please review the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Observation_Levels\">Observation Levels documentation</a>. "
            }
          },
          "observationUnitsDescription" : {
            "type" : "string",
            "description" : "MIAPPE V1.1 (DM-25) Observation unit description - General description of the observation units in the study.",
            "nullable" : true,
            "example" : "Observation units consisted in individual plots themselves consisting of a row of 15 plants at a density of approximately six plants per square meter."
          },
          "observationVariableDbIds" : {
            "type" : "array",
            "description" : "The list of Observation Variables being used in this study. \n\nThis list is intended to be the wishlist of variables to collect in this study. It may or may not match the set of variables used in the collected observation records. ",
            "example" : [ "57c236f9", "48b327ea", "a5b367c5" ],
            "items" : {
              "type" : "string"
            }
          },
          "seasons" : {
            "type" : "array",
            "description" : "List of seasons over which this study was performed.",
            "nullable" : true,
            "example" : [ "Spring_2018" ],
            "items" : {
              "type" : "string"
            }
          },
          "startDate" : {
            "type" : "string",
            "description" : "The date this study started\n\nMIAPPE V1.1 (DM-14) Start date of study - Date and, if relevant, time when the experiment started",
            "format" : "date-time",
            "nullable" : true
          },
          "studyCode" : {
            "type" : "string",
            "description" : "A short human readable code for a study",
            "nullable" : true,
            "example" : "Grape_Yield_Spring_2018"
          },
          "studyDbId" : {
            "type" : "string",
            "description" : "The ID which uniquely identifies a study within the given database server\n\nMIAPPE V1.1 (DM-11) Study unique ID - Unique identifier comprising the name or identifier for the institution/database hosting the submission of the study data, and the identifier of the study in that institution.",
            "example" : "175ac75a"
          },
          "studyDescription" : {
            "type" : "string",
            "description" : "The description of this study\n\nMIAPPE V1.1 (DM-13) Study description - Human-readable text describing the study",
            "example" : "This is a yield study for Spring 2018"
          },
          "studyName" : {
            "type" : "string",
            "description" : "The human readable name for a study\n\nMIAPPE V1.1 (DM-12) Study title - Human-readable text summarising the study",
            "example" : "INRA's Walnut Genetic Resources Observation at Kenya"
          },
          "studyPUI" : {
            "type" : "string",
            "description" : "A permanent unique identifier associated with this study data. For example, a URI or DOI",
            "nullable" : true,
            "example" : "doi:10.155454/12349537312"
          },
          "studyType" : {
            "type" : "string",
            "description" : "The type of study being performed. ex. \"Yield Trial\", etc",
            "example" : "Phenotyping"
          },
          "trialDbId" : {
            "type" : "string",
            "description" : "The ID which uniquely identifies a trial",
            "example" : "48b327ea"
          },
          "trialName" : {
            "type" : "string",
            "description" : "The human readable name of a trial",
            "example" : "Grape_Yield_Trial"
          }
        },
        "x-brapi-metadata" : {
          "description" : "A Study represents an experiment that has taken place at a single location. The Study contains metadata about the parameters and design of the experiment. It can also be used to group results and data sets generated from the experiment. A Trial can represent a collection of one or more Studies.",
          "module" : "BrAPI-Core",
          "primaryModel" : true,
          "title" : "Study"
        }
      },
      "StudyNewRequest" : {
        "required" : [ "studyName" ],
        "type" : "object",
        "properties" : {
          "active" : {
            "type" : "boolean",
            "description" : "A flag to indicate if a Study is currently active and ongoing",
            "nullable" : true,
            "example" : true
          },
          "additionalInfo" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.",
            "nullable" : true
          },
          "commonCropName" : {
            "type" : "string",
            "description" : "Common name for the crop associated with this study",
            "nullable" : true,
            "example" : "Grape"
          },
          "contacts" : {
            "type" : "array",
            "description" : "List of contact entities associated with this study",
            "nullable" : true,
            "items" : {
              "required" : [ "contactDbId" ],
              "type" : "object",
              "properties" : {
                "contactDbId" : {
                  "type" : "string",
                  "description" : "The ID which uniquely identifies this contact\n\nMIAPPE V1.1 (DM-33) Person ID - An identifier for the data submitter. If that submitter is an individual, ORCID identifiers are recommended.",
                  "example" : "5f4e5509"
                },
                "email" : {
                  "type" : "string",
                  "description" : "The contacts email address\n\nMIAPPE V1.1 (DM-32) Person email - The electronic mail address of the person.",
                  "nullable" : true,
                  "example" : "bob@bob.com"
                },
                "instituteName" : {
                  "type" : "string",
                  "description" : "The name of the institution which this contact is part of\n\nMIAPPE V1.1 (DM-35) Person affiliation - The institution the person belongs to",
                  "nullable" : true,
                  "example" : "The BrAPI Institute"
                },
                "name" : {
                  "type" : "string",
                  "description" : "The full name of this contact person\n\nMIAPPE V1.1 (DM-31) Person name - The name of the person (either full name or as used in scientific publications)",
                  "nullable" : true,
                  "example" : "Bob Robertson"
                },
                "orcid" : {
                  "type" : "string",
                  "description" : "The Open Researcher and Contributor ID for this contact person (orcid.org)\n\nMIAPPE V1.1 (DM-33) Person ID - An identifier for the data submitter. If that submitter is an individual, ORCID identifiers are recommended.",
                  "nullable" : true,
                  "example" : "http://orcid.org/0000-0001-8640-1750"
                },
                "type" : {
                  "type" : "string",
                  "description" : "The type of person this contact represents (ex: Coordinator, Scientist, PI, etc.)\n\nMIAPPE V1.1 (DM-34) Person role - Type of contribution of the person to the investigation",
                  "nullable" : true,
                  "example" : "PI"
                }
              }
            }
          },
          "culturalPractices" : {
            "type" : "string",
            "description" : "MIAPPE V1.1 (DM-28) Cultural practices - General description of the cultural practices of the study.",
            "nullable" : true,
            "example" : "Irrigation was applied according needs during summer to prevent water stress."
          },
          "dataLinks" : {
            "type" : "array",
            "description" : "List of links to extra data files associated with this study. Extra data could include notes, images, and reference data.",
            "nullable" : true,
            "items" : {
              "type" : "object",
              "properties" : {
                "dataFormat" : {
                  "type" : "string",
                  "description" : "The structure of the data within a file. For example - VCF, table, image archive, multispectral image archives in EDAM ontology (used in Galaxy)\n\nMIAPPE V1.1 (DM-38) Data file description - Description of the format of the data file. May be a standard file format name, or a description of organization of the data in a tabular file.",
                  "nullable" : true,
                  "example" : "Image Archive"
                },
                "description" : {
                  "type" : "string",
                  "description" : "The general description of this data link\n\nMIAPPE V1.1 (DM-38) Data file description - Description of the format of the data file. May be a standard file format name, or a description of organization of the data in a tabular file.",
                  "nullable" : true,
                  "example" : "Raw drone images collected for this study"
                },
                "fileFormat" : {
                  "type" : "string",
                  "description" : "The MIME type of the file (ie text/csv, application/excel, application/zip).\n\nMIAPPE V1.1 (DM-38) Data file description - Description of the format of the data file. May be a standard file format name, or a description of organization of the data in a tabular file.",
                  "nullable" : true,
                  "example" : "application/zip"
                },
                "name" : {
                  "type" : "string",
                  "description" : "The name of the external data link\n\nMIAPPE V1.1 (DM-38) Data file description - Description of the format of the data file. May be a standard file format name, or a description of organization of the data in a tabular file.",
                  "nullable" : true,
                  "example" : "image-archive.zip"
                },
                "provenance" : {
                  "type" : "string",
                  "description" : "The description of the origin or ownership of this linked data. Could be a formal reference to software, method, or workflow.",
                  "nullable" : true,
                  "example" : "Image Processing Pipeline, built at the University of Antarctica: https://github.com/antarctica/pipeline"
                },
                "scientificType" : {
                  "type" : "string",
                  "description" : "The general type of data. For example- Genotyping, Phenotyping raw data, Phenotyping reduced data, Environmental, etc",
                  "nullable" : true,
                  "example" : "Environmental"
                },
                "url" : {
                  "type" : "string",
                  "description" : "URL describing the location of this data file to view or download\n\nMIAPPE V1.1 (DM-37) Data file link - Link to the data file (or digital object) in a public database or in a persistent institutional repository; or identifier of the data file when submitted together with the MIAPPE submission.",
                  "format" : "uri",
                  "nullable" : true,
                  "example" : "https://brapi.org/image-archive.zip"
                },
                "version" : {
                  "type" : "string",
                  "description" : "The version number for this data \n\nMIAPPE V1.1 (DM-39) Data file version - The version of the dataset (the actual data).",
                  "nullable" : true,
                  "example" : "1.0.3"
                }
              }
            }
          },
          "documentationURL" : {
            "type" : "string",
            "description" : "A URL to the human readable documentation of an object",
            "format" : "uri",
            "nullable" : true,
            "example" : "https://wiki.brapi.org"
          },
          "endDate" : {
            "type" : "string",
            "description" : "The date the study ends\n\nMIAPPE V1.1 (DM-15) End date of study - Date and, if relevant, time when the experiment ended",
            "format" : "date-time",
            "nullable" : true
          },
          "environmentParameters" : {
            "type" : "array",
            "description" : "Environmental parameters that were kept constant throughout the study and did not change between observation units.\n\nMIAPPE V1.1 (DM-57) Environment - Environmental parameters that were kept constant throughout the study and did not change between observation units or assays. Environment characteristics that vary over time, i.e. environmental variables, should be recorded as Observed Variables (see below).",
            "nullable" : true,
            "items" : {
              "required" : [ "description", "parameterName" ],
              "type" : "object",
              "properties" : {
                "description" : {
                  "type" : "string",
                  "description" : "Human-readable value of the environment parameter (defined above) constant within the experiment",
                  "example" : "the soil type was clay"
                },
                "parameterName" : {
                  "type" : "string",
                  "description" : "Name of the environment parameter constant within the experiment\n\nMIAPPE V1.1 (DM-58) Environment parameter - Name of the environment parameter constant within the experiment. ",
                  "example" : "soil type"
                },
                "parameterPUI" : {
                  "type" : "string",
                  "description" : "URI pointing to an ontology class for the parameter",
                  "nullable" : true,
                  "example" : "PECO:0007155"
                },
                "unit" : {
                  "type" : "string",
                  "description" : "Unit of the value for this parameter",
                  "nullable" : true,
                  "example" : "pH"
                },
                "unitPUI" : {
                  "type" : "string",
                  "description" : "URI pointing to an ontology class for the unit",
                  "nullable" : true,
                  "example" : "PECO:0007059"
                },
                "value" : {
                  "type" : "string",
                  "description" : "Numerical or categorical value\n\nMIAPPE V1.1 (DM-59) Environment parameter value - Value of the environment parameter (defined above) constant within the experiment.",
                  "nullable" : true,
                  "example" : "clay soil"
                },
                "valuePUI" : {
                  "type" : "string",
                  "description" : "URI pointing to an ontology class for the parameter value",
                  "nullable" : true,
                  "example" : "ENVO:00002262"
                }
              }
            }
          },
          "experimentalDesign" : {
            "type" : "object",
            "properties" : {
              "PUI" : {
                "type" : "string",
                "description" : "MIAPPE V1.1 (DM-23) Type of experimental design - Type of experimental  design of the study, in the form of an accession number from the Crop Ontology.",
                "nullable" : true,
                "example" : "CO_715:0000145"
              },
              "description" : {
                "type" : "string",
                "description" : "MIAPPE V1.1 (DM-22) Description of the experimental design - Short description of the experimental design, possibly including statistical design. In specific cases, e.g. legacy datasets or data computed from several studies, the experimental design can be \"unknown\"/\"NA\", \"aggregated/reduced data\", or simply 'none'.",
                "nullable" : true,
                "example" : "Lines were repeated twice at each location using a complete block design. In order to limit competition effects, each block was organized into four sub-blocks corresponding to earliest groups based on a prior information."
              }
            },
            "description" : "The experimental and statistical design full description plus a category PUI taken from crop research ontology or agronomy ontology",
            "nullable" : true
          },
          "externalReferences" : {
            "title" : "ExternalReferences",
            "type" : "array",
            "description" : "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.",
            "nullable" : true,
            "example" : [ {
              "referenceId" : "doi:10.155454/12341234",
              "referenceSource" : "DOI"
            }, {
              "referenceId" : "75a50e76",
              "referenceSource" : "Remote Data Collection Upload Tool"
            } ],
            "items" : {
              "type" : "object",
              "properties" : {
                "referenceID" : {
                  "type" : "string",
                  "description" : "**Deprecated in v2.1** Please use `referenceId`. Github issue number #460 \n<br>The external reference ID. Could be a simple string or a URI.",
                  "nullable" : true,
                  "deprecated" : true
                },
                "referenceId" : {
                  "type" : "string",
                  "description" : "The external reference ID. Could be a simple string or a URI."
                },
                "referenceSource" : {
                  "type" : "string",
                  "description" : "An identifier for the source system or database of this reference"
                }
              }
            }
          },
          "growthFacility" : {
            "type" : "object",
            "properties" : {
              "PUI" : {
                "type" : "string",
                "description" : "MIAPPE V1.1 (DM-27) Type of growth facility - Type of growth facility in which the study was carried out, in the form of an accession number from the Crop Ontology.",
                "example" : "CO_715:0000162"
              },
              "description" : {
                "type" : "string",
                "description" : "MIAPPE V1.1 (DM-26) Description of growth facility - Short description of the facility in which the study was carried out.",
                "example" : "field environment condition, greenhouse"
              }
            },
            "description" : "Short description of the facility in which the study was carried out.",
            "nullable" : true
          },
          "lastUpdate" : {
            "type" : "object",
            "properties" : {
              "timestamp" : {
                "type" : "string",
                "format" : "date-time",
                "nullable" : true
              },
              "version" : {
                "type" : "string",
                "nullable" : true,
                "example" : "1.2.3"
              }
            },
            "description" : "The date and time when this study was last modified",
            "nullable" : true
          },
          "license" : {
            "type" : "string",
            "description" : "The usage license associated with the study data",
            "nullable" : true,
            "example" : "MIT License"
          },
          "locationDbId" : {
            "type" : "string",
            "description" : "The unique identifier for a Location",
            "nullable" : true,
            "example" : "3cfdd67d"
          },
          "locationName" : {
            "type" : "string",
            "description" : "A human readable name for this location\n\nMIAPPE V1.1 (DM-18) Experimental site name - The name of the natural site, experimental field, greenhouse, phenotyping facility, etc. where the experiment took place.",
            "nullable" : true,
            "example" : "Location 1"
          },
          "observationLevels" : {
            "type" : "array",
            "description" : "Observation levels indicate the granularity level at which the measurements are taken. `levelName` defines the level, `levelOrder` defines where that level exists in the hierarchy of levels. `levelOrder`s lower numbers are at the top of the hierarchy (ie field > 0) and higher numbers are at the bottom of the hierarchy (ie plant > 6). ",
            "nullable" : true,
            "example" : [ {
              "levelName" : "field",
              "levelOrder" : 0
            }, {
              "levelName" : "block",
              "levelOrder" : 1
            }, {
              "levelName" : "plot",
              "levelOrder" : 2
            } ],
            "items" : {
              "title" : "ObservationUnitHierarchyLevel",
              "type" : "object",
              "properties" : {
                "levelName" : {
                  "type" : "string",
                  "description" : "A name for this level \n\n**Standard Level Names: study, field, entry, rep, block, sub-block, plot, sub-plot, plant, pot, sample** \n\nFor more information on Observation Levels, please review the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Observation_Levels\">Observation Levels documentation</a>. ",
                  "nullable" : true,
                  "example" : "plot"
                },
                "levelOrder" : {
                  "type" : "integer",
                  "description" : "`levelOrder` defines where that level exists in the hierarchy of levels. `levelOrder`'s lower numbers \nare at the top of the hierarchy (ie field -> 1) and higher numbers are at the bottom of the hierarchy (ie plant -> 9). \n\nFor more information on Observation Levels, please review the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Observation_Levels\">Observation Levels documentation</a>. ",
                  "nullable" : true,
                  "example" : 2
                }
              },
              "description" : "Observation levels indicate the granularity level at which the measurements are taken. `levelName` \ndefines the level, `levelOrder` defines where that level exists in the hierarchy of levels. \n`levelOrder`s lower numbers are at the top of the hierarchy (ie field > 0) and higher numbers are \nat the bottom of the hierarchy (ie plant > 6). \n\n**Standard Level Names: study, field, entry, rep, block, sub-block, plot, sub-plot, plant, pot, sample** \n\nFor more information on Observation Levels, please review the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Observation_Levels\">Observation Levels documentation</a>. "
            }
          },
          "observationUnitsDescription" : {
            "type" : "string",
            "description" : "MIAPPE V1.1 (DM-25) Observation unit description - General description of the observation units in the study.",
            "nullable" : true,
            "example" : "Observation units consisted in individual plots themselves consisting of a row of 15 plants at a density of approximately six plants per square meter."
          },
          "observationVariableDbIds" : {
            "type" : "array",
            "description" : "The list of Observation Variables being used in this study. \n\nThis list is intended to be the wishlist of variables to collect in this study. It may or may not match the set of variables used in the collected observation records. ",
            "example" : [ "57c236f9", "48b327ea", "a5b367c5" ],
            "items" : {
              "type" : "string"
            }
          },
          "seasons" : {
            "type" : "array",
            "description" : "List of seasons over which this study was performed.",
            "nullable" : true,
            "example" : [ "Spring_2018" ],
            "items" : {
              "type" : "string"
            }
          },
          "startDate" : {
            "type" : "string",
            "description" : "The date this study started\n\nMIAPPE V1.1 (DM-14) Start date of study - Date and, if relevant, time when the experiment started",
            "format" : "date-time",
            "nullable" : true
          },
          "studyCode" : {
            "type" : "string",
            "description" : "A short human readable code for a study",
            "nullable" : true,
            "example" : "Grape_Yield_Spring_2018"
          },
          "studyDescription" : {
            "type" : "string",
            "description" : "The description of this study\n\nMIAPPE V1.1 (DM-13) Study description - Human-readable text describing the study",
            "example" : "This is a yield study for Spring 2018"
          },
          "studyName" : {
            "type" : "string",
            "description" : "The human readable name for a study\n\nMIAPPE V1.1 (DM-12) Study title - Human-readable text summarising the study",
            "example" : "INRA's Walnut Genetic Resources Observation at Kenya"
          },
          "studyPUI" : {
            "type" : "string",
            "description" : "A permanent unique identifier associated with this study data. For example, a URI or DOI",
            "nullable" : true,
            "example" : "doi:10.155454/12349537312"
          },
          "studyType" : {
            "type" : "string",
            "description" : "The type of study being performed. ex. \"Yield Trial\", etc",
            "example" : "Phenotyping"
          },
          "trialDbId" : {
            "type" : "string",
            "description" : "The ID which uniquely identifies a trial",
            "example" : "48b327ea"
          },
          "trialName" : {
            "type" : "string",
            "description" : "The human readable name of a trial",
            "example" : "Grape_Yield_Trial"
          }
        }
      },
      "StudySearchRequest" : {
        "type" : "object",
        "properties" : {
          "active" : {
            "type" : "boolean",
            "description" : "A flag to indicate if a Study is currently active and ongoing",
            "nullable" : true,
            "example" : true
          },
          "commonCropNames" : {
            "type" : "array",
            "description" : "The BrAPI Common Crop Name is the simple, generalized, widely accepted name of the organism being researched. It is most often used in multi-crop systems where digital resources need to be divided at a high level. Things like 'Maize', 'Wheat', and 'Rice' are examples of common crop names.\n\nUse this parameter to only return results associated with the given crops. \n\nUse `GET /commoncropnames` to find the list of available crops on a server.",
            "example" : [ "Tomatillo", "Paw Paw" ],
            "items" : {
              "type" : "string"
            }
          },
          "externalReferenceIDs" : {
            "type" : "array",
            "description" : "**Deprecated in v2.1** Please use `externalReferenceIds`. Github issue number #460 \n<br>List of external reference IDs. Could be a simple strings or a URIs. (use with `externalReferenceSources` parameter)",
            "example" : [ "doi:10.155454/12341234", "14a19841" ],
            "deprecated" : true,
            "items" : {
              "type" : "string"
            }
          },
          "externalReferenceIds" : {
            "type" : "array",
            "description" : "List of external reference IDs. Could be a simple strings or a URIs. (use with `externalReferenceSources` parameter)",
            "example" : [ "doi:10.155454/12341234", "14a19841" ],
            "items" : {
              "type" : "string"
            }
          },
          "externalReferenceSources" : {
            "type" : "array",
            "description" : "List of identifiers for the source system or database of an external reference (use with `externalReferenceIDs` parameter)",
            "example" : [ "DOI", "Field App Name" ],
            "items" : {
              "type" : "string"
            }
          },
          "germplasmDbIds" : {
            "type" : "array",
            "description" : "List of IDs which uniquely identify germplasm to search for",
            "example" : [ "e9c6edd7", "1b1df4a6" ],
            "items" : {
              "type" : "string"
            }
          },
          "germplasmNames" : {
            "type" : "array",
            "description" : "List of human readable names to identify germplasm to search for",
            "example" : [ "A0000003", "A0000477" ],
            "items" : {
              "type" : "string"
            }
          },
          "locationDbIds" : {
            "type" : "array",
            "description" : "The location ids to search for",
            "example" : [ "b28911cf", "5071d1e4" ],
            "items" : {
              "type" : "string"
            }
          },
          "locationNames" : {
            "type" : "array",
            "description" : "A human readable names to search for",
            "example" : [ "Location Alpha", "The Large Hadron Collider" ],
            "items" : {
              "type" : "string"
            }
          },
          "observationVariableDbIds" : {
            "type" : "array",
            "description" : "The DbIds of Variables to search for",
            "example" : [ "a646187d", "6d23513b" ],
            "items" : {
              "type" : "string"
            }
          },
          "observationVariableNames" : {
            "type" : "array",
            "description" : "The names of Variables to search for",
            "example" : [ "Plant Height in meters", "Wheat rust score 1-5" ],
            "items" : {
              "type" : "string"
            }
          },
          "observationVariablePUIs" : {
            "type" : "array",
            "description" : "The Permanent Unique Identifier of an Observation Variable, usually in the form of a URI",
            "example" : [ "http://my-traits.com/trait/CO_123:0008012", "http://my-traits.com/trait/CO_123:0007261" ],
            "items" : {
              "type" : "string"
            }
          },
          "page" : {
            "type" : "integer",
            "description" : "Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.",
            "example" : 0
          },
          "pageSize" : {
            "type" : "integer",
            "description" : "The size of the pages to be returned. Default is `1000`.",
            "example" : 1000
          },
          "programDbIds" : {
            "type" : "array",
            "description" : "A BrAPI Program represents the high level organization or group who is responsible for conducting trials and studies. Things like Breeding Programs and Funded Projects are considered BrAPI Programs. \n\nUse this parameter to only return results associated with the given programs. \n\nUse `GET /programs` to find the list of available programs on a server.",
            "example" : [ "8f5de35b", "0e2d4a13" ],
            "items" : {
              "type" : "string"
            }
          },
          "programNames" : {
            "type" : "array",
            "description" : "Use this parameter to only return results associated with the given program names. Program names are not required to be unique.\n\nUse `GET /programs` to find the list of available programs on a server.",
            "example" : [ "Better Breeding Program", "Best Breeding Program" ],
            "items" : {
              "type" : "string"
            }
          },
          "seasonDbIds" : {
            "type" : "array",
            "description" : "The ID which uniquely identifies a season",
            "nullable" : true,
            "example" : [ "Harvest Two 2017", "Summer 2018" ],
            "items" : {
              "type" : "string"
            }
          },
          "sortBy" : {
            "type" : "string",
            "description" : "Name of one of the fields within the study object on which results can be sorted",
            "nullable" : true,
            "enum" : [ "studyDbId", "trialDbId", "programDbId", "locationDbId", "seasonDbId", "studyType", "studyName", "studyLocation", "programName", "germplasmDbId", "observationVariableDbId" ]
          },
          "sortOrder" : {
            "type" : "string",
            "description" : "Order results should be sorted. ex. \"ASC\" or \"DESC\"",
            "nullable" : true,
            "enum" : [ "ASC", "DESC" ]
          },
          "studyCodes" : {
            "type" : "array",
            "description" : "A short human readable code for a study",
            "nullable" : true,
            "example" : [ "Grape_Yield_Spring_2018", "Walnut_Kenya" ],
            "items" : {
              "type" : "string"
            }
          },
          "studyDbIds" : {
            "type" : "array",
            "description" : "List of study identifiers to search for",
            "example" : [ "cf6c4bd4", "691e69d6" ],
            "items" : {
              "type" : "string"
            }
          },
          "studyNames" : {
            "type" : "array",
            "description" : "List of study names to filter search results",
            "example" : [ "The First Bob Study 2017", "Wheat Yield Trial 246" ],
            "items" : {
              "type" : "string"
            }
          },
          "studyPUIs" : {
            "type" : "array",
            "description" : "Permanent unique identifier associated with study data. For example, a URI or DOI",
            "nullable" : true,
            "example" : [ "doi:10.155454/12349537312", "https://pui.per/d8dd35e1" ],
            "items" : {
              "type" : "string"
            }
          },
          "studyTypes" : {
            "type" : "array",
            "description" : "The type of study being performed. ex. \"Yield Trial\", etc",
            "nullable" : true,
            "example" : [ "Yield Trial", "Disease Resistance Trial" ],
            "items" : {
              "type" : "string"
            }
          },
          "trialDbIds" : {
            "type" : "array",
            "description" : "The ID which uniquely identifies a trial to search for",
            "example" : [ "d2593dc2", "9431a731" ],
            "items" : {
              "type" : "string"
            }
          },
          "trialNames" : {
            "type" : "array",
            "description" : "The human readable name of a trial to search for",
            "example" : [ "All Yield Trials 2016", "Disease Resistance Study Comparison Group" ],
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "TaxonID" : {
        "required" : [ "sourceName", "taxonId" ],
        "type" : "object",
        "properties" : {
          "sourceName" : {
            "type" : "string",
            "description" : "The human readable name of the taxonomy provider",
            "example" : "NCBI"
          },
          "taxonId" : {
            "type" : "string",
            "description" : "The identifier (name, ID, URI) of a particular taxonomy within the source provider",
            "example" : "2026747"
          }
        }
      },
      "Trait" : {
        "required" : [ "traitDbId", "traitName" ],
        "type" : "object",
        "properties" : {
          "additionalInfo" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.",
            "nullable" : true
          },
          "alternativeAbbreviations" : {
            "type" : "array",
            "description" : "A list of shortened, human readable, names for a Trait. These abbreviations are acceptable alternatives to the mainAbbreviation and do not need to follow any formatting convention.",
            "nullable" : true,
            "example" : [ "H", "PH", "H1" ],
            "items" : {
              "type" : "string"
            }
          },
          "attribute" : {
            "type" : "string",
            "description" : "A trait can be decomposed as \"Trait\" = \"Entity\" + \"Attribute\", the attribute is the observed feature (or characteristic) of the entity e.g., for \"grain colour\", attribute = \"colour\"",
            "nullable" : true,
            "example" : "height"
          },
          "attributePUI" : {
            "type" : "string",
            "description" : "The Permanent Unique Identifier of a Trait Attribute, usually in the form of a URI\n<br/>A trait can be decomposed as \"Trait\" = \"Entity\" + \"Attribute\", the attribute is the observed feature (or characteristic) of the entity e.g., for \"grain colour\", attribute = \"colour\"",
            "nullable" : true,
            "example" : "http://my-traits.com/trait/PO:00012345"
          },
          "entity" : {
            "type" : "string",
            "description" : "A trait can be decomposed as \"Trait\" = \"Entity\" + \"Attribute\", the entity is the part of the plant that the trait refers to e.g., for \"grain colour\", entity = \"grain\"",
            "nullable" : true,
            "example" : "Stalk"
          },
          "entityPUI" : {
            "type" : "string",
            "description" : "The Permanent Unique Identifier of a Trait Entity, usually in the form of a URI\n<br/>A Trait can be decomposed as \"Trait\" = \"Entity\" + \"Attribute\", the Entity is the part of the plant that the trait refers to e.g., for \"grain colour\", entity = \"grain\" ",
            "nullable" : true,
            "example" : "http://my-traits.com/trait/PATO:00098765"
          },
          "externalReferences" : {
            "title" : "ExternalReferences",
            "type" : "array",
            "description" : "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.",
            "nullable" : true,
            "example" : [ {
              "referenceId" : "doi:10.155454/12341234",
              "referenceSource" : "DOI"
            }, {
              "referenceId" : "75a50e76",
              "referenceSource" : "Remote Data Collection Upload Tool"
            } ],
            "items" : {
              "type" : "object",
              "properties" : {
                "referenceID" : {
                  "type" : "string",
                  "description" : "**Deprecated in v2.1** Please use `referenceId`. Github issue number #460 \n<br>The external reference ID. Could be a simple string or a URI.",
                  "nullable" : true,
                  "deprecated" : true
                },
                "referenceId" : {
                  "type" : "string",
                  "description" : "The external reference ID. Could be a simple string or a URI."
                },
                "referenceSource" : {
                  "type" : "string",
                  "description" : "An identifier for the source system or database of this reference"
                }
              }
            }
          },
          "mainAbbreviation" : {
            "type" : "string",
            "description" : "A shortened version of the human readable name for a Trait",
            "nullable" : true,
            "example" : "PH"
          },
          "ontologyReference" : {
            "required" : [ "ontologyDbId", "ontologyName" ],
            "type" : "object",
            "properties" : {
              "documentationLinks" : {
                "type" : "array",
                "description" : "links to various ontology documentation",
                "nullable" : true,
                "items" : {
                  "type" : "object",
                  "properties" : {
                    "URL" : {
                      "type" : "string",
                      "format" : "uri",
                      "example" : "http://purl.obolibrary.org/obo/ro.owl"
                    },
                    "type" : {
                      "type" : "string",
                      "example" : "OBO",
                      "enum" : [ "OBO", "RDF", "WEBPAGE" ]
                    }
                  }
                }
              },
              "ontologyDbId" : {
                "type" : "string",
                "description" : "Ontology database unique identifier",
                "example" : "6b071868"
              },
              "ontologyName" : {
                "type" : "string",
                "description" : "Ontology name",
                "example" : "The Crop Ontology"
              },
              "version" : {
                "type" : "string",
                "description" : "Ontology version (no specific format)",
                "nullable" : true,
                "example" : "7.2.3"
              }
            },
            "description" : "MIAPPE V1.1\n\n(DM-85) Variable accession number - Accession number of the variable in the Crop Ontology\n\n(DM-87) Trait accession number - Accession number of the trait in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).\n\n(DM-89) Method accession number - Accession number of the method in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).\n\n(DM-93) Scale accession number - Accession number of the scale in a suitable controlled vocabulary (Crop Ontology)."
          },
          "status" : {
            "type" : "string",
            "description" : "Trait status (examples: \"recommended\", \"obsolete\", \"legacy\", etc.)",
            "nullable" : true,
            "example" : "recommended"
          },
          "synonyms" : {
            "type" : "array",
            "description" : "Other trait names",
            "nullable" : true,
            "example" : [ "Height", "Plant Height", "Stalk Height", "Canopy Height" ],
            "items" : {
              "type" : "string"
            }
          },
          "traitClass" : {
            "type" : "string",
            "description" : "A classification to describe the type of trait and the context it should be considered in.\n<br/> examples- \"morphological\", \"phenological\", \"agronomical\", \"physiological\", \"abiotic stress\", \"biotic stress\", \"biochemical\", \"quality traits\", \"fertility\", etc.",
            "nullable" : true,
            "example" : "phenological"
          },
          "traitDbId" : {
            "type" : "string",
            "description" : "The ID which uniquely identifies a trait",
            "example" : "9b2e34f5"
          },
          "traitDescription" : {
            "type" : "string",
            "description" : "The description of a trait",
            "nullable" : true,
            "example" : "The height of the plant"
          },
          "traitName" : {
            "type" : "string",
            "description" : "The human readable name of a trait\n<br/>MIAPPE V1.1 (DM-86) Trait - Name of the (plant or environmental) trait under observation",
            "example" : "Height"
          },
          "traitPUI" : {
            "type" : "string",
            "description" : "The Permanent Unique Identifier of a Trait, usually in the form of a URI",
            "nullable" : true,
            "example" : "http://my-traits.com/trait/CO_123:0000012"
          }
        },
        "description" : "A Trait describes what property is being observed. \n<br>For example, an ObservationVariable might be defined with a Trait of \"plant height\", a Scale of \"meters\", and a Method of \"tape measure\". This variable would be distinct from a variable with the Trait \"Leaf length\" or \"Flower height\". ",
        "x-brapi-metadata" : {
          "module" : "BrAPI-Phenotyping",
          "primaryModel" : true,
          "title" : "Trait"
        }
      },
      "TraitBaseClass" : {
        "required" : [ "traitName" ],
        "type" : "object",
        "properties" : {
          "additionalInfo" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.",
            "nullable" : true
          },
          "alternativeAbbreviations" : {
            "type" : "array",
            "description" : "A list of shortened, human readable, names for a Trait. These abbreviations are acceptable alternatives to the mainAbbreviation and do not need to follow any formatting convention.",
            "nullable" : true,
            "example" : [ "H", "PH", "H1" ],
            "items" : {
              "type" : "string"
            }
          },
          "attribute" : {
            "type" : "string",
            "description" : "A trait can be decomposed as \"Trait\" = \"Entity\" + \"Attribute\", the attribute is the observed feature (or characteristic) of the entity e.g., for \"grain colour\", attribute = \"colour\"",
            "nullable" : true,
            "example" : "height"
          },
          "attributePUI" : {
            "type" : "string",
            "description" : "The Permanent Unique Identifier of a Trait Attribute, usually in the form of a URI\n<br/>A trait can be decomposed as \"Trait\" = \"Entity\" + \"Attribute\", the attribute is the observed feature (or characteristic) of the entity e.g., for \"grain colour\", attribute = \"colour\"",
            "nullable" : true,
            "example" : "http://my-traits.com/trait/PO:00012345"
          },
          "entity" : {
            "type" : "string",
            "description" : "A trait can be decomposed as \"Trait\" = \"Entity\" + \"Attribute\", the entity is the part of the plant that the trait refers to e.g., for \"grain colour\", entity = \"grain\"",
            "nullable" : true,
            "example" : "Stalk"
          },
          "entityPUI" : {
            "type" : "string",
            "description" : "The Permanent Unique Identifier of a Trait Entity, usually in the form of a URI\n<br/>A Trait can be decomposed as \"Trait\" = \"Entity\" + \"Attribute\", the Entity is the part of the plant that the trait refers to e.g., for \"grain colour\", entity = \"grain\" ",
            "nullable" : true,
            "example" : "http://my-traits.com/trait/PATO:00098765"
          },
          "externalReferences" : {
            "title" : "ExternalReferences",
            "type" : "array",
            "description" : "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.",
            "nullable" : true,
            "example" : [ {
              "referenceId" : "doi:10.155454/12341234",
              "referenceSource" : "DOI"
            }, {
              "referenceId" : "75a50e76",
              "referenceSource" : "Remote Data Collection Upload Tool"
            } ],
            "items" : {
              "type" : "object",
              "properties" : {
                "referenceID" : {
                  "type" : "string",
                  "description" : "**Deprecated in v2.1** Please use `referenceId`. Github issue number #460 \n<br>The external reference ID. Could be a simple string or a URI.",
                  "nullable" : true,
                  "deprecated" : true
                },
                "referenceId" : {
                  "type" : "string",
                  "description" : "The external reference ID. Could be a simple string or a URI."
                },
                "referenceSource" : {
                  "type" : "string",
                  "description" : "An identifier for the source system or database of this reference"
                }
              }
            }
          },
          "mainAbbreviation" : {
            "type" : "string",
            "description" : "A shortened version of the human readable name for a Trait",
            "nullable" : true,
            "example" : "PH"
          },
          "ontologyReference" : {
            "required" : [ "ontologyDbId", "ontologyName" ],
            "type" : "object",
            "properties" : {
              "documentationLinks" : {
                "type" : "array",
                "description" : "links to various ontology documentation",
                "nullable" : true,
                "items" : {
                  "type" : "object",
                  "properties" : {
                    "URL" : {
                      "type" : "string",
                      "format" : "uri",
                      "example" : "http://purl.obolibrary.org/obo/ro.owl"
                    },
                    "type" : {
                      "type" : "string",
                      "example" : "OBO",
                      "enum" : [ "OBO", "RDF", "WEBPAGE" ]
                    }
                  }
                }
              },
              "ontologyDbId" : {
                "type" : "string",
                "description" : "Ontology database unique identifier",
                "example" : "6b071868"
              },
              "ontologyName" : {
                "type" : "string",
                "description" : "Ontology name",
                "example" : "The Crop Ontology"
              },
              "version" : {
                "type" : "string",
                "description" : "Ontology version (no specific format)",
                "nullable" : true,
                "example" : "7.2.3"
              }
            },
            "description" : "MIAPPE V1.1\n\n(DM-85) Variable accession number - Accession number of the variable in the Crop Ontology\n\n(DM-87) Trait accession number - Accession number of the trait in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).\n\n(DM-89) Method accession number - Accession number of the method in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).\n\n(DM-93) Scale accession number - Accession number of the scale in a suitable controlled vocabulary (Crop Ontology)."
          },
          "status" : {
            "type" : "string",
            "description" : "Trait status (examples: \"recommended\", \"obsolete\", \"legacy\", etc.)",
            "nullable" : true,
            "example" : "recommended"
          },
          "synonyms" : {
            "type" : "array",
            "description" : "Other trait names",
            "nullable" : true,
            "example" : [ "Height", "Plant Height", "Stalk Height", "Canopy Height" ],
            "items" : {
              "type" : "string"
            }
          },
          "traitClass" : {
            "type" : "string",
            "description" : "A classification to describe the type of trait and the context it should be considered in.\n<br/> examples- \"morphological\", \"phenological\", \"agronomical\", \"physiological\", \"abiotic stress\", \"biotic stress\", \"biochemical\", \"quality traits\", \"fertility\", etc.",
            "nullable" : true,
            "example" : "phenological"
          },
          "traitDescription" : {
            "type" : "string",
            "description" : "The description of a trait",
            "nullable" : true,
            "example" : "The height of the plant"
          },
          "traitName" : {
            "type" : "string",
            "description" : "The human readable name of a trait\n<br/>MIAPPE V1.1 (DM-86) Trait - Name of the (plant or environmental) trait under observation",
            "example" : "Height"
          },
          "traitPUI" : {
            "type" : "string",
            "description" : "The Permanent Unique Identifier of a Trait, usually in the form of a URI",
            "nullable" : true,
            "example" : "http://my-traits.com/trait/CO_123:0000012"
          }
        },
        "description" : "A Trait describes what property is being observed. \n<br>For example, an ObservationVariable might be defined with a Trait of \"plant height\", a Scale of \"meters\", and a Method of \"tape measure\". This variable would be distinct from a variable with the Trait \"Leaf length\" or \"Flower height\". "
      },
      "TraitDataType" : {
        "type" : "string",
        "description" : "<p>Class of the scale, entries can be</p>\n<p>\"Code\" -  This scale class is exceptionally used to express complex traits. Code is a nominal scale that combines the expressions of the different traits composing the complex trait. For example a severity trait might be expressed by a 2 digit and 2 character code. The first 2 digits are the percentage of the plant covered by a fungus and the 2 characters refer to the delay in development, e.g. \"75VD\" means \"75 %\" of the plant is infected and the plant is very delayed.</p>\n<p>\"Date\" - The date class is for events expressed in a time format, See ISO 8601</p>\n<p>\"Duration\" - The Duration class is for time elapsed between two events expressed in a time format, e.g. days, hours, months</p>\n<p>\"Nominal\" - Categorical scale that can take one of a limited and fixed number of categories. There is no intrinsic ordering to the categories</p>\n<p>\"Numerical\" - Numerical scales express the trait with real numbers. The numerical scale defines the unit e.g. centimeter, ton per hectare, branches</p>\n<p>\"Ordinal\" - Ordinal scales are scales composed of ordered categories</p>\n<p>\"Text\" - A free text is used to express the trait.</p>",
        "example" : "Numerical",
        "enum" : [ "Code", "Date", "Duration", "Nominal", "Numerical", "Ordinal", "Text" ]
      },
      "TraitNewRequest" : {
        "$ref" : "#/components/schemas/TraitBaseClass"
      },
      "Trial" : {
        "required" : [ "trialDbId", "trialName" ],
        "type" : "object",
        "properties" : {
          "active" : {
            "type" : "boolean",
            "description" : "A flag to indicate if a Trial is currently active and ongoing",
            "nullable" : true,
            "example" : true
          },
          "additionalInfo" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.",
            "nullable" : true
          },
          "commonCropName" : {
            "type" : "string",
            "description" : "Common name for the crop associated with this trial",
            "nullable" : true,
            "example" : "Wheat"
          },
          "contacts" : {
            "type" : "array",
            "description" : "List of contact entities associated with this trial",
            "nullable" : true,
            "items" : {
              "required" : [ "contactDbId" ],
              "type" : "object",
              "properties" : {
                "contactDbId" : {
                  "type" : "string",
                  "description" : "The ID which uniquely identifies this contact\n\nMIAPPE V1.1 (DM-33) Person ID - An identifier for the data submitter. If that submitter is an individual, ORCID identifiers are recommended.",
                  "example" : "5f4e5509"
                },
                "email" : {
                  "type" : "string",
                  "description" : "The contacts email address\n\nMIAPPE V1.1 (DM-32) Person email - The electronic mail address of the person.",
                  "nullable" : true,
                  "example" : "bob@bob.com"
                },
                "instituteName" : {
                  "type" : "string",
                  "description" : "The name of the institution which this contact is part of\n\nMIAPPE V1.1 (DM-35) Person affiliation - The institution the person belongs to",
                  "nullable" : true,
                  "example" : "The BrAPI Institute"
                },
                "name" : {
                  "type" : "string",
                  "description" : "The full name of this contact person\n\nMIAPPE V1.1 (DM-31) Person name - The name of the person (either full name or as used in scientific publications)",
                  "nullable" : true,
                  "example" : "Bob Robertson"
                },
                "orcid" : {
                  "type" : "string",
                  "description" : "The Open Researcher and Contributor ID for this contact person (orcid.org)\n\nMIAPPE V1.1 (DM-33) Person ID - An identifier for the data submitter. If that submitter is an individual, ORCID identifiers are recommended.",
                  "nullable" : true,
                  "example" : "http://orcid.org/0000-0001-8640-1750"
                },
                "type" : {
                  "type" : "string",
                  "description" : "The type of person this contact represents (ex: Coordinator, Scientist, PI, etc.)\n\nMIAPPE V1.1 (DM-34) Person role - Type of contribution of the person to the investigation",
                  "nullable" : true,
                  "example" : "PI"
                }
              }
            }
          },
          "datasetAuthorships" : {
            "type" : "array",
            "description" : "License and citation information for the data in this trial",
            "nullable" : true,
            "items" : {
              "type" : "object",
              "properties" : {
                "datasetPUI" : {
                  "type" : "string",
                  "description" : "The DOI or other permanent unique identifier for this published dataset",
                  "nullable" : true,
                  "example" : "doi:10.15454/312953986E3"
                },
                "license" : {
                  "type" : "string",
                  "description" : "MIAPPE V1.1 (DM-7) License - License for the reuse of the data associated with this investigation. The Creative Commons licenses cover most use cases and are recommended.",
                  "nullable" : true,
                  "example" : "https://CreativeCommons.org/licenses/by/4.0"
                },
                "publicReleaseDate" : {
                  "type" : "string",
                  "description" : "MIAPPE V1.1 (DM-6) Public release date - Date of first public release of the dataset presently being described.",
                  "format" : "date",
                  "nullable" : true
                },
                "submissionDate" : {
                  "type" : "string",
                  "description" : "MIAPPE V1.1 (DM-5) Submission date - Date of submission of the dataset presently being described to a host repository.",
                  "format" : "date",
                  "nullable" : true
                }
              }
            }
          },
          "documentationURL" : {
            "type" : "string",
            "description" : "A URL to the human readable documentation of an object",
            "format" : "uri",
            "nullable" : true,
            "example" : "https://wiki.brapi.org"
          },
          "endDate" : {
            "type" : "string",
            "description" : "The date this trial ends",
            "format" : "date",
            "nullable" : true
          },
          "externalReferences" : {
            "title" : "ExternalReferences",
            "type" : "array",
            "description" : "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.",
            "nullable" : true,
            "example" : [ {
              "referenceId" : "doi:10.155454/12341234",
              "referenceSource" : "DOI"
            }, {
              "referenceId" : "75a50e76",
              "referenceSource" : "Remote Data Collection Upload Tool"
            } ],
            "items" : {
              "type" : "object",
              "properties" : {
                "referenceID" : {
                  "type" : "string",
                  "description" : "**Deprecated in v2.1** Please use `referenceId`. Github issue number #460 \n<br>The external reference ID. Could be a simple string or a URI.",
                  "nullable" : true,
                  "deprecated" : true
                },
                "referenceId" : {
                  "type" : "string",
                  "description" : "The external reference ID. Could be a simple string or a URI."
                },
                "referenceSource" : {
                  "type" : "string",
                  "description" : "An identifier for the source system or database of this reference"
                }
              }
            }
          },
          "programDbId" : {
            "type" : "string",
            "description" : "A program identifier to search for",
            "nullable" : true,
            "example" : "673f378a"
          },
          "programName" : {
            "type" : "string",
            "description" : "Human readable name of the program",
            "nullable" : true,
            "example" : "Tomatillo_Breeding_Program"
          },
          "publications" : {
            "type" : "array",
            "description" : "MIAPPE V1.1 (DM-9) Associated publication - An identifier for a literature publication where the investigation is described. Use of DOIs is recommended.",
            "nullable" : true,
            "items" : {
              "type" : "object",
              "properties" : {
                "publicationPUI" : {
                  "type" : "string",
                  "nullable" : true,
                  "example" : "doi:10.15454/312953986E3"
                },
                "publicationReference" : {
                  "type" : "string",
                  "nullable" : true,
                  "example" : "Selby, BrAPI - An application programming interface for plant breeding applications, Bioinformatics, https://doi.org/10.1093/bioinformatics/190"
                }
              }
            }
          },
          "startDate" : {
            "type" : "string",
            "description" : "The date this trial started",
            "format" : "date",
            "nullable" : true
          },
          "trialDbId" : {
            "type" : "string",
            "description" : "The ID which uniquely identifies a trial\n\nMIAPPE V1.1 (DM-2) Investigation unique ID - Identifier comprising the unique name of the institution/database hosting the submission of the investigation data, and the accession number of the investigation in that institution.",
            "example" : "1883b402"
          },
          "trialDescription" : {
            "type" : "string",
            "description" : "The human readable description of a trial\n\nMIAPPE V1.1 (DM-4) Investigation description - Human-readable text describing the investigation in more detail.",
            "nullable" : true,
            "example" : "General drought resistance trial initiated in Peru before duplication in Africa"
          },
          "trialName" : {
            "type" : "string",
            "description" : "The human readable name of a trial\n\nMIAPPE V1.1 (DM-3) Investigation title - Human-readable string summarising the investigation.",
            "example" : "Peru Yield Trial 1"
          },
          "trialPUI" : {
            "type" : "string",
            "description" : "A permanent identifier for a trial. Could be DOI or other URI formatted identifier.",
            "nullable" : true,
            "example" : "https://doi.org/101093190"
          }
        },
        "x-brapi-metadata" : {
          "description" : "A Trial represents a collection of Study objects, and the metadata associated with that collection. A Trial could represent a multi-location experiment, and could contain information related to publications and data licensing.",
          "module" : "BrAPI-Core",
          "primaryModel" : true,
          "title" : "Trial"
        }
      },
      "TrialNewRequest" : {
        "required" : [ "trialName" ],
        "type" : "object",
        "properties" : {
          "active" : {
            "type" : "boolean",
            "description" : "A flag to indicate if a Trial is currently active and ongoing",
            "nullable" : true,
            "example" : true
          },
          "additionalInfo" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.",
            "nullable" : true
          },
          "commonCropName" : {
            "type" : "string",
            "description" : "Common name for the crop associated with this trial",
            "nullable" : true,
            "example" : "Wheat"
          },
          "contacts" : {
            "type" : "array",
            "description" : "List of contact entities associated with this trial",
            "nullable" : true,
            "items" : {
              "required" : [ "contactDbId" ],
              "type" : "object",
              "properties" : {
                "contactDbId" : {
                  "type" : "string",
                  "description" : "The ID which uniquely identifies this contact\n\nMIAPPE V1.1 (DM-33) Person ID - An identifier for the data submitter. If that submitter is an individual, ORCID identifiers are recommended.",
                  "example" : "5f4e5509"
                },
                "email" : {
                  "type" : "string",
                  "description" : "The contacts email address\n\nMIAPPE V1.1 (DM-32) Person email - The electronic mail address of the person.",
                  "nullable" : true,
                  "example" : "bob@bob.com"
                },
                "instituteName" : {
                  "type" : "string",
                  "description" : "The name of the institution which this contact is part of\n\nMIAPPE V1.1 (DM-35) Person affiliation - The institution the person belongs to",
                  "nullable" : true,
                  "example" : "The BrAPI Institute"
                },
                "name" : {
                  "type" : "string",
                  "description" : "The full name of this contact person\n\nMIAPPE V1.1 (DM-31) Person name - The name of the person (either full name or as used in scientific publications)",
                  "nullable" : true,
                  "example" : "Bob Robertson"
                },
                "orcid" : {
                  "type" : "string",
                  "description" : "The Open Researcher and Contributor ID for this contact person (orcid.org)\n\nMIAPPE V1.1 (DM-33) Person ID - An identifier for the data submitter. If that submitter is an individual, ORCID identifiers are recommended.",
                  "nullable" : true,
                  "example" : "http://orcid.org/0000-0001-8640-1750"
                },
                "type" : {
                  "type" : "string",
                  "description" : "The type of person this contact represents (ex: Coordinator, Scientist, PI, etc.)\n\nMIAPPE V1.1 (DM-34) Person role - Type of contribution of the person to the investigation",
                  "nullable" : true,
                  "example" : "PI"
                }
              }
            }
          },
          "datasetAuthorships" : {
            "type" : "array",
            "description" : "License and citation information for the data in this trial",
            "nullable" : true,
            "items" : {
              "type" : "object",
              "properties" : {
                "datasetPUI" : {
                  "type" : "string",
                  "description" : "The DOI or other permanent unique identifier for this published dataset",
                  "nullable" : true,
                  "example" : "doi:10.15454/312953986E3"
                },
                "license" : {
                  "type" : "string",
                  "description" : "MIAPPE V1.1 (DM-7) License - License for the reuse of the data associated with this investigation. The Creative Commons licenses cover most use cases and are recommended.",
                  "nullable" : true,
                  "example" : "https://CreativeCommons.org/licenses/by/4.0"
                },
                "publicReleaseDate" : {
                  "type" : "string",
                  "description" : "MIAPPE V1.1 (DM-6) Public release date - Date of first public release of the dataset presently being described.",
                  "format" : "date",
                  "nullable" : true
                },
                "submissionDate" : {
                  "type" : "string",
                  "description" : "MIAPPE V1.1 (DM-5) Submission date - Date of submission of the dataset presently being described to a host repository.",
                  "format" : "date",
                  "nullable" : true
                }
              }
            }
          },
          "documentationURL" : {
            "type" : "string",
            "description" : "A URL to the human readable documentation of an object",
            "format" : "uri",
            "nullable" : true,
            "example" : "https://wiki.brapi.org"
          },
          "endDate" : {
            "type" : "string",
            "description" : "The date this trial ends",
            "format" : "date",
            "nullable" : true
          },
          "externalReferences" : {
            "title" : "ExternalReferences",
            "type" : "array",
            "description" : "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.",
            "nullable" : true,
            "example" : [ {
              "referenceId" : "doi:10.155454/12341234",
              "referenceSource" : "DOI"
            }, {
              "referenceId" : "75a50e76",
              "referenceSource" : "Remote Data Collection Upload Tool"
            } ],
            "items" : {
              "type" : "object",
              "properties" : {
                "referenceID" : {
                  "type" : "string",
                  "description" : "**Deprecated in v2.1** Please use `referenceId`. Github issue number #460 \n<br>The external reference ID. Could be a simple string or a URI.",
                  "nullable" : true,
                  "deprecated" : true
                },
                "referenceId" : {
                  "type" : "string",
                  "description" : "The external reference ID. Could be a simple string or a URI."
                },
                "referenceSource" : {
                  "type" : "string",
                  "description" : "An identifier for the source system or database of this reference"
                }
              }
            }
          },
          "programDbId" : {
            "type" : "string",
            "description" : "A program identifier to search for",
            "nullable" : true,
            "example" : "673f378a"
          },
          "programName" : {
            "type" : "string",
            "description" : "Human readable name of the program",
            "nullable" : true,
            "example" : "Tomatillo_Breeding_Program"
          },
          "publications" : {
            "type" : "array",
            "description" : "MIAPPE V1.1 (DM-9) Associated publication - An identifier for a literature publication where the investigation is described. Use of DOIs is recommended.",
            "nullable" : true,
            "items" : {
              "type" : "object",
              "properties" : {
                "publicationPUI" : {
                  "type" : "string",
                  "nullable" : true,
                  "example" : "doi:10.15454/312953986E3"
                },
                "publicationReference" : {
                  "type" : "string",
                  "nullable" : true,
                  "example" : "Selby, BrAPI - An application programming interface for plant breeding applications, Bioinformatics, https://doi.org/10.1093/bioinformatics/190"
                }
              }
            }
          },
          "startDate" : {
            "type" : "string",
            "description" : "The date this trial started",
            "format" : "date",
            "nullable" : true
          },
          "trialDescription" : {
            "type" : "string",
            "description" : "The human readable description of a trial\n\nMIAPPE V1.1 (DM-4) Investigation description - Human-readable text describing the investigation in more detail.",
            "nullable" : true,
            "example" : "General drought resistance trial initiated in Peru before duplication in Africa"
          },
          "trialName" : {
            "type" : "string",
            "description" : "The human readable name of a trial\n\nMIAPPE V1.1 (DM-3) Investigation title - Human-readable string summarising the investigation.",
            "example" : "Peru Yield Trial 1"
          },
          "trialPUI" : {
            "type" : "string",
            "description" : "A permanent identifier for a trial. Could be DOI or other URI formatted identifier.",
            "nullable" : true,
            "example" : "https://doi.org/101093190"
          }
        }
      },
      "TrialSearchRequest" : {
        "type" : "object",
        "properties" : {
          "active" : {
            "type" : "boolean",
            "description" : "A flag to indicate if a Trial is currently active and ongoing",
            "example" : true
          },
          "commonCropNames" : {
            "type" : "array",
            "description" : "The BrAPI Common Crop Name is the simple, generalized, widely accepted name of the organism being researched. It is most often used in multi-crop systems where digital resources need to be divided at a high level. Things like 'Maize', 'Wheat', and 'Rice' are examples of common crop names.\n\nUse this parameter to only return results associated with the given crops. \n\nUse `GET /commoncropnames` to find the list of available crops on a server.",
            "example" : [ "Tomatillo", "Paw Paw" ],
            "items" : {
              "type" : "string"
            }
          },
          "contactDbIds" : {
            "type" : "array",
            "description" : "List of contact entities associated with this trial",
            "example" : [ "e0f70c2a", "b82f0967" ],
            "items" : {
              "type" : "string"
            }
          },
          "externalReferenceIDs" : {
            "type" : "array",
            "description" : "**Deprecated in v2.1** Please use `externalReferenceIds`. Github issue number #460 \n<br>List of external reference IDs. Could be a simple strings or a URIs. (use with `externalReferenceSources` parameter)",
            "example" : [ "doi:10.155454/12341234", "14a19841" ],
            "deprecated" : true,
            "items" : {
              "type" : "string"
            }
          },
          "externalReferenceIds" : {
            "type" : "array",
            "description" : "List of external reference IDs. Could be a simple strings or a URIs. (use with `externalReferenceSources` parameter)",
            "example" : [ "doi:10.155454/12341234", "14a19841" ],
            "items" : {
              "type" : "string"
            }
          },
          "externalReferenceSources" : {
            "type" : "array",
            "description" : "List of identifiers for the source system or database of an external reference (use with `externalReferenceIDs` parameter)",
            "example" : [ "DOI", "Field App Name" ],
            "items" : {
              "type" : "string"
            }
          },
          "locationDbIds" : {
            "type" : "array",
            "description" : "The location ids to search for",
            "example" : [ "b28911cf", "5071d1e4" ],
            "items" : {
              "type" : "string"
            }
          },
          "locationNames" : {
            "type" : "array",
            "description" : "A human readable names to search for",
            "example" : [ "Location Alpha", "The Large Hadron Collider" ],
            "items" : {
              "type" : "string"
            }
          },
          "page" : {
            "type" : "integer",
            "description" : "Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.",
            "example" : 0
          },
          "pageSize" : {
            "type" : "integer",
            "description" : "The size of the pages to be returned. Default is `1000`.",
            "example" : 1000
          },
          "programDbIds" : {
            "type" : "array",
            "description" : "A BrAPI Program represents the high level organization or group who is responsible for conducting trials and studies. Things like Breeding Programs and Funded Projects are considered BrAPI Programs. \n\nUse this parameter to only return results associated with the given programs. \n\nUse `GET /programs` to find the list of available programs on a server.",
            "example" : [ "8f5de35b", "0e2d4a13" ],
            "items" : {
              "type" : "string"
            }
          },
          "programNames" : {
            "type" : "array",
            "description" : "Use this parameter to only return results associated with the given program names. Program names are not required to be unique.\n\nUse `GET /programs` to find the list of available programs on a server.",
            "example" : [ "Better Breeding Program", "Best Breeding Program" ],
            "items" : {
              "type" : "string"
            }
          },
          "searchDateRangeEnd" : {
            "type" : "string",
            "description" : "The end of the overlapping search date range. `searchDateRangeStart` must be before `searchDateRangeEnd`.\n\nReturn a Trial entity if any of the following cases are true\n\n- `searchDateRangeStart` is before `trial.endDate` AND `searchDateRangeEnd` is null \n\n- `searchDateRangeStart` is before `trial.endDate` AND `searchDateRangeEnd` is after `trial.startDate`\n\n- `searchDateRangeEnd` is after `trial.startDate` AND `searchDateRangeStart` is null\n\n- `searchDateRangeEnd` is after `trial.startDate` AND `searchDateRangeStart` is before `trial.endDate`",
            "format" : "date"
          },
          "searchDateRangeStart" : {
            "type" : "string",
            "description" : "The start of the overlapping search date range. `searchDateRangeStart` must be before `searchDateRangeEnd`.\n\nReturn a Trial entity if any of the following cases are true\n\n- `searchDateRangeStart` is before `trial.endDate` AND `searchDateRangeEnd` is null \n\n- `searchDateRangeStart` is before `trial.endDate` AND `searchDateRangeEnd` is after `trial.startDate`\n\n- `searchDateRangeEnd` is after `trial.startDate` AND `searchDateRangeStart` is null\n\n- `searchDateRangeEnd` is after `trial.startDate` AND `searchDateRangeStart` is before `trial.endDate`",
            "format" : "date"
          },
          "studyDbIds" : {
            "type" : "array",
            "description" : "List of study identifiers to search for",
            "example" : [ "cf6c4bd4", "691e69d6" ],
            "items" : {
              "type" : "string"
            }
          },
          "studyNames" : {
            "type" : "array",
            "description" : "List of study names to filter search results",
            "example" : [ "The First Bob Study 2017", "Wheat Yield Trial 246" ],
            "items" : {
              "type" : "string"
            }
          },
          "trialDbIds" : {
            "type" : "array",
            "description" : "The ID which uniquely identifies a trial to search for",
            "example" : [ "d2593dc2", "9431a731" ],
            "items" : {
              "type" : "string"
            }
          },
          "trialNames" : {
            "type" : "array",
            "description" : "The human readable name of a trial to search for",
            "example" : [ "All Yield Trials 2016", "Disease Resistance Study Comparison Group" ],
            "items" : {
              "type" : "string"
            }
          },
          "trialPUIs" : {
            "type" : "array",
            "description" : "A permanent identifier for a trial. Could be DOI or other URI formatted identifier.",
            "example" : [ "https://doi.org/01093190", "https://doi.org/11192409" ],
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "VariableBaseClass" : {
        "required" : [ "method", "scale", "trait" ],
        "type" : "object",
        "properties" : {
          "additionalInfo" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.",
            "nullable" : true
          },
          "commonCropName" : {
            "type" : "string",
            "description" : "Crop name (examples: \"Maize\", \"Wheat\")",
            "nullable" : true,
            "example" : "Maize"
          },
          "contextOfUse" : {
            "type" : "array",
            "description" : "Indication of how trait is routinely used. (examples: [\"Trial evaluation\", \"Nursery evaluation\"])",
            "nullable" : true,
            "example" : [ "Trial evaluation", "Nursery evaluation" ],
            "items" : {
              "type" : "string"
            }
          },
          "defaultValue" : {
            "type" : "string",
            "description" : "Variable default value. (examples: \"red\", \"2.3\", etc.)",
            "nullable" : true,
            "example" : "2.0"
          },
          "documentationURL" : {
            "type" : "string",
            "description" : "A URL to the human readable documentation of an object",
            "format" : "uri",
            "nullable" : true,
            "example" : "https://wiki.brapi.org/documentation.html"
          },
          "externalReferences" : {
            "title" : "ExternalReferences",
            "type" : "array",
            "description" : "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.",
            "nullable" : true,
            "example" : [ {
              "referenceId" : "doi:10.155454/12341234",
              "referenceSource" : "DOI"
            }, {
              "referenceId" : "75a50e76",
              "referenceSource" : "Remote Data Collection Upload Tool"
            } ],
            "items" : {
              "type" : "object",
              "properties" : {
                "referenceID" : {
                  "type" : "string",
                  "description" : "**Deprecated in v2.1** Please use `referenceId`. Github issue number #460 \n<br>The external reference ID. Could be a simple string or a URI.",
                  "nullable" : true,
                  "deprecated" : true
                },
                "referenceId" : {
                  "type" : "string",
                  "description" : "The external reference ID. Could be a simple string or a URI."
                },
                "referenceSource" : {
                  "type" : "string",
                  "description" : "An identifier for the source system or database of this reference"
                }
              }
            }
          },
          "growthStage" : {
            "type" : "string",
            "description" : "Growth stage at which measurement is made (examples: \"flowering\")",
            "nullable" : true,
            "example" : "flowering"
          },
          "institution" : {
            "type" : "string",
            "description" : "Name of institution submitting the variable",
            "nullable" : true,
            "example" : "The BrAPI Institute"
          },
          "language" : {
            "type" : "string",
            "description" : "2 letter ISO 639-1 code for the language of submission of the variable.",
            "nullable" : true,
            "example" : "en"
          },
          "method" : {
            "required" : [ "methodName" ],
            "type" : "object",
            "properties" : {
              "additionalInfo" : {
                "type" : "object",
                "additionalProperties" : {
                  "type" : "string"
                },
                "description" : "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.",
                "nullable" : true
              },
              "bibliographicalReference" : {
                "type" : "string",
                "description" : "Bibliographical reference describing the method.\n<br/>MIAPPE V1.1 (DM-91) Reference associated to the method - URI/DOI of reference describing the method.",
                "nullable" : true,
                "example" : "Smith, 1893, Really Cool Paper, Popular Journal"
              },
              "description" : {
                "type" : "string",
                "description" : "Method description\n<br/>MIAPPE V1.1 (DM-90) Method description - Textual description of the method, which may extend a method defined in an external reference with specific parameters, e.g. growth stage, inoculation precise organ (leaf number)",
                "nullable" : true,
                "example" : "A measuring tape was used"
              },
              "externalReferences" : {
                "title" : "ExternalReferences",
                "type" : "array",
                "description" : "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.",
                "nullable" : true,
                "example" : [ {
                  "referenceId" : "doi:10.155454/12341234",
                  "referenceSource" : "DOI"
                }, {
                  "referenceId" : "75a50e76",
                  "referenceSource" : "Remote Data Collection Upload Tool"
                } ],
                "items" : {
                  "type" : "object",
                  "properties" : {
                    "referenceID" : {
                      "type" : "string",
                      "description" : "**Deprecated in v2.1** Please use `referenceId`. Github issue number #460 \n<br>The external reference ID. Could be a simple string or a URI.",
                      "nullable" : true,
                      "deprecated" : true
                    },
                    "referenceId" : {
                      "type" : "string",
                      "description" : "The external reference ID. Could be a simple string or a URI."
                    },
                    "referenceSource" : {
                      "type" : "string",
                      "description" : "An identifier for the source system or database of this reference"
                    }
                  }
                }
              },
              "formula" : {
                "type" : "string",
                "description" : "For computational methods i.e., when the method consists in assessing the trait by computing measurements, write the generic formula used for the calculation",
                "nullable" : true,
                "example" : "a^2 + b^2 = c^2"
              },
              "methodClass" : {
                "type" : "string",
                "description" : "Method class (examples: \"Measurement\", \"Counting\", \"Estimation\", \"Computation\", etc.)",
                "nullable" : true,
                "example" : "Measurement"
              },
              "methodDbId" : {
                "type" : "string",
                "description" : "Method unique identifier",
                "example" : "0adb2764"
              },
              "methodName" : {
                "type" : "string",
                "description" : "Human readable name for the method\n<br/>MIAPPE V1.1 (DM-88) Method  Name of the method of observation",
                "example" : "Measuring Tape"
              },
              "methodPUI" : {
                "type" : "string",
                "description" : "The Permanent Unique Identifier of a Method, usually in the form of a URI",
                "nullable" : true,
                "example" : "http://my-traits.com/trait/CO_123:0000212"
              },
              "ontologyReference" : {
                "required" : [ "ontologyDbId", "ontologyName" ],
                "type" : "object",
                "properties" : {
                  "documentationLinks" : {
                    "type" : "array",
                    "description" : "links to various ontology documentation",
                    "nullable" : true,
                    "items" : {
                      "type" : "object",
                      "properties" : {
                        "URL" : {
                          "type" : "string",
                          "format" : "uri",
                          "example" : "http://purl.obolibrary.org/obo/ro.owl"
                        },
                        "type" : {
                          "type" : "string",
                          "example" : "OBO",
                          "enum" : [ "OBO", "RDF", "WEBPAGE" ]
                        }
                      }
                    }
                  },
                  "ontologyDbId" : {
                    "type" : "string",
                    "description" : "Ontology database unique identifier",
                    "example" : "6b071868"
                  },
                  "ontologyName" : {
                    "type" : "string",
                    "description" : "Ontology name",
                    "example" : "The Crop Ontology"
                  },
                  "version" : {
                    "type" : "string",
                    "description" : "Ontology version (no specific format)",
                    "nullable" : true,
                    "example" : "7.2.3"
                  }
                },
                "description" : "MIAPPE V1.1\n\n(DM-85) Variable accession number - Accession number of the variable in the Crop Ontology\n\n(DM-87) Trait accession number - Accession number of the trait in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).\n\n(DM-89) Method accession number - Accession number of the method in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).\n\n(DM-93) Scale accession number - Accession number of the scale in a suitable controlled vocabulary (Crop Ontology)."
              }
            },
            "description" : "A description of the way an Observation should be collected. \n<br>For example, an ObservationVariable might be defined with a Trait of \"plant height\", a Scale of \"meters\", and a Method of \"tape measure\". This variable would be distinct from a variable with the Method \"estimation\" or \"drone image processing\". "
          },
          "ontologyReference" : {
            "required" : [ "ontologyDbId", "ontologyName" ],
            "type" : "object",
            "properties" : {
              "documentationLinks" : {
                "type" : "array",
                "description" : "links to various ontology documentation",
                "nullable" : true,
                "items" : {
                  "type" : "object",
                  "properties" : {
                    "URL" : {
                      "type" : "string",
                      "format" : "uri",
                      "example" : "http://purl.obolibrary.org/obo/ro.owl"
                    },
                    "type" : {
                      "type" : "string",
                      "example" : "OBO",
                      "enum" : [ "OBO", "RDF", "WEBPAGE" ]
                    }
                  }
                }
              },
              "ontologyDbId" : {
                "type" : "string",
                "description" : "Ontology database unique identifier",
                "example" : "6b071868"
              },
              "ontologyName" : {
                "type" : "string",
                "description" : "Ontology name",
                "example" : "The Crop Ontology"
              },
              "version" : {
                "type" : "string",
                "description" : "Ontology version (no specific format)",
                "nullable" : true,
                "example" : "7.2.3"
              }
            },
            "description" : "MIAPPE V1.1\n\n(DM-85) Variable accession number - Accession number of the variable in the Crop Ontology\n\n(DM-87) Trait accession number - Accession number of the trait in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).\n\n(DM-89) Method accession number - Accession number of the method in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).\n\n(DM-93) Scale accession number - Accession number of the scale in a suitable controlled vocabulary (Crop Ontology).",
            "nullable" : true
          },
          "scale" : {
            "required" : [ "scaleDbId", "scaleName" ],
            "type" : "object",
            "properties" : {
              "additionalInfo" : {
                "type" : "object",
                "additionalProperties" : {
                  "type" : "string"
                },
                "description" : "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.",
                "nullable" : true
              },
              "dataType" : {
                "type" : "string",
                "description" : "<p>Class of the scale, entries can be</p>\n<p>\"Code\" -  This scale class is exceptionally used to express complex traits. Code is a nominal scale that combines the expressions of the different traits composing the complex trait. For example a severity trait might be expressed by a 2 digit and 2 character code. The first 2 digits are the percentage of the plant covered by a fungus and the 2 characters refer to the delay in development, e.g. \"75VD\" means \"75 %\" of the plant is infected and the plant is very delayed.</p>\n<p>\"Date\" - The date class is for events expressed in a time format, See ISO 8601</p>\n<p>\"Duration\" - The Duration class is for time elapsed between two events expressed in a time format, e.g. days, hours, months</p>\n<p>\"Nominal\" - Categorical scale that can take one of a limited and fixed number of categories. There is no intrinsic ordering to the categories</p>\n<p>\"Numerical\" - Numerical scales express the trait with real numbers. The numerical scale defines the unit e.g. centimeter, ton per hectare, branches</p>\n<p>\"Ordinal\" - Ordinal scales are scales composed of ordered categories</p>\n<p>\"Text\" - A free text is used to express the trait.</p>",
                "nullable" : true,
                "example" : "Numerical",
                "enum" : [ "Code", "Date", "Duration", "Nominal", "Numerical", "Ordinal", "Text" ]
              },
              "decimalPlaces" : {
                "type" : "integer",
                "description" : "For numerical, number of decimal places to be reported",
                "nullable" : true,
                "example" : 2
              },
              "externalReferences" : {
                "title" : "ExternalReferences",
                "type" : "array",
                "description" : "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.",
                "nullable" : true,
                "example" : [ {
                  "referenceId" : "doi:10.155454/12341234",
                  "referenceSource" : "DOI"
                }, {
                  "referenceId" : "75a50e76",
                  "referenceSource" : "Remote Data Collection Upload Tool"
                } ],
                "items" : {
                  "type" : "object",
                  "properties" : {
                    "referenceID" : {
                      "type" : "string",
                      "description" : "**Deprecated in v2.1** Please use `referenceId`. Github issue number #460 \n<br>The external reference ID. Could be a simple string or a URI.",
                      "nullable" : true,
                      "deprecated" : true
                    },
                    "referenceId" : {
                      "type" : "string",
                      "description" : "The external reference ID. Could be a simple string or a URI."
                    },
                    "referenceSource" : {
                      "type" : "string",
                      "description" : "An identifier for the source system or database of this reference"
                    }
                  }
                }
              },
              "ontologyReference" : {
                "required" : [ "ontologyDbId", "ontologyName" ],
                "type" : "object",
                "properties" : {
                  "documentationLinks" : {
                    "type" : "array",
                    "description" : "links to various ontology documentation",
                    "nullable" : true,
                    "items" : {
                      "type" : "object",
                      "properties" : {
                        "URL" : {
                          "type" : "string",
                          "format" : "uri",
                          "example" : "http://purl.obolibrary.org/obo/ro.owl"
                        },
                        "type" : {
                          "type" : "string",
                          "example" : "OBO",
                          "enum" : [ "OBO", "RDF", "WEBPAGE" ]
                        }
                      }
                    }
                  },
                  "ontologyDbId" : {
                    "type" : "string",
                    "description" : "Ontology database unique identifier",
                    "example" : "6b071868"
                  },
                  "ontologyName" : {
                    "type" : "string",
                    "description" : "Ontology name",
                    "example" : "The Crop Ontology"
                  },
                  "version" : {
                    "type" : "string",
                    "description" : "Ontology version (no specific format)",
                    "nullable" : true,
                    "example" : "7.2.3"
                  }
                },
                "description" : "MIAPPE V1.1\n\n(DM-85) Variable accession number - Accession number of the variable in the Crop Ontology\n\n(DM-87) Trait accession number - Accession number of the trait in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).\n\n(DM-89) Method accession number - Accession number of the method in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).\n\n(DM-93) Scale accession number - Accession number of the scale in a suitable controlled vocabulary (Crop Ontology)."
              },
              "scaleDbId" : {
                "type" : "string",
                "description" : "Unique identifier of the scale. If left blank, the upload system will automatically generate a scale ID.",
                "example" : "af730171"
              },
              "scaleName" : {
                "type" : "string",
                "description" : "Name of the scale\n<br/>MIAPPE V1.1 (DM-92) Scale Name of the scale associated with the variable",
                "nullable" : true,
                "example" : "Meters"
              },
              "scalePUI" : {
                "type" : "string",
                "description" : "The Permanent Unique Identifier of a Scale, usually in the form of a URI",
                "nullable" : true,
                "example" : "http://my-traits.com/trait/CO_123:0000112"
              },
              "units" : {
                "type" : "string",
                "description" : "This field can be used to describe the units used for this scale. This should be the abbreviated \nform of the units, intended to be displayed with every value using this scale. Usually this only \napplies when `dataType` is Numeric, but could also be included for other dataTypes when applicable.",
                "nullable" : true,
                "example" : "m"
              },
              "validValues" : {
                "type" : "object",
                "properties" : {
                  "categories" : {
                    "type" : "array",
                    "description" : "List of possible values with optional labels",
                    "example" : [ {
                      "label" : "low",
                      "value" : "0"
                    }, {
                      "label" : "medium",
                      "value" : "5"
                    }, {
                      "label" : "high",
                      "value" : "10"
                    } ],
                    "items" : {
                      "type" : "object",
                      "properties" : {
                        "label" : {
                          "type" : "string",
                          "description" : "A text label for a category"
                        },
                        "value" : {
                          "type" : "string",
                          "description" : "The actual value for a category"
                        }
                      }
                    }
                  },
                  "max" : {
                    "type" : "integer",
                    "description" : "**Deprecated in v2.1** Please use `maximumValue`. Github issue number #450 \n<br>Maximum value for numerical scales. Typically used for data capture control and QC.",
                    "nullable" : true,
                    "example" : 9999,
                    "deprecated" : true
                  },
                  "maximumValue" : {
                    "type" : "string",
                    "description" : "Maximum value for numerical, date, and time scales. Typically used for data capture control and QC.",
                    "nullable" : true,
                    "example" : "9999"
                  },
                  "min" : {
                    "type" : "integer",
                    "description" : "**Deprecated in v2.1** Please use `minimumValue`. Github issue number #450 \n<br>Minimum value for numerical scales. Typically used for data capture control and QC.",
                    "nullable" : true,
                    "example" : 2,
                    "deprecated" : true
                  },
                  "minimumValue" : {
                    "type" : "string",
                    "description" : "Minimum value for numerical, date, and time scales. Typically used for data capture control and QC.",
                    "nullable" : true,
                    "example" : "2"
                  }
                },
                "nullable" : true
              }
            },
            "description" : "A Scale describes the units and acceptable values for an ObservationVariable. \n<br>For example, an ObservationVariable might be defined with a Trait of \"plant height\", a Scale of \"meters\", and a Method of \"tape measure\". This variable would be distinct from a variable with the Scale \"inches\" or \"pixels\"."
          },
          "scientist" : {
            "type" : "string",
            "description" : "Name of scientist submitting the variable.",
            "nullable" : true,
            "example" : "Dr. Bob Robertson"
          },
          "status" : {
            "type" : "string",
            "description" : "Variable status. (examples: \"recommended\", \"obsolete\", \"legacy\", etc.)",
            "nullable" : true,
            "example" : "recommended"
          },
          "submissionTimestamp" : {
            "type" : "string",
            "description" : "Timestamp when the Variable was added (ISO 8601)",
            "format" : "date-time",
            "nullable" : true
          },
          "synonyms" : {
            "type" : "array",
            "description" : "Other variable names",
            "nullable" : true,
            "example" : [ "Maize Height", "Stalk Height", "Corn Height" ],
            "items" : {
              "type" : "string"
            }
          },
          "trait" : {
            "required" : [ "traitName" ],
            "type" : "object",
            "properties" : {
              "additionalInfo" : {
                "type" : "object",
                "additionalProperties" : {
                  "type" : "string"
                },
                "description" : "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.",
                "nullable" : true
              },
              "alternativeAbbreviations" : {
                "type" : "array",
                "description" : "A list of shortened, human readable, names for a Trait. These abbreviations are acceptable alternatives to the mainAbbreviation and do not need to follow any formatting convention.",
                "nullable" : true,
                "example" : [ "H", "PH", "H1" ],
                "items" : {
                  "type" : "string"
                }
              },
              "attribute" : {
                "type" : "string",
                "description" : "A trait can be decomposed as \"Trait\" = \"Entity\" + \"Attribute\", the attribute is the observed feature (or characteristic) of the entity e.g., for \"grain colour\", attribute = \"colour\"",
                "nullable" : true,
                "example" : "height"
              },
              "attributePUI" : {
                "type" : "string",
                "description" : "The Permanent Unique Identifier of a Trait Attribute, usually in the form of a URI\n<br/>A trait can be decomposed as \"Trait\" = \"Entity\" + \"Attribute\", the attribute is the observed feature (or characteristic) of the entity e.g., for \"grain colour\", attribute = \"colour\"",
                "nullable" : true,
                "example" : "http://my-traits.com/trait/PO:00012345"
              },
              "entity" : {
                "type" : "string",
                "description" : "A trait can be decomposed as \"Trait\" = \"Entity\" + \"Attribute\", the entity is the part of the plant that the trait refers to e.g., for \"grain colour\", entity = \"grain\"",
                "nullable" : true,
                "example" : "Stalk"
              },
              "entityPUI" : {
                "type" : "string",
                "description" : "The Permanent Unique Identifier of a Trait Entity, usually in the form of a URI\n<br/>A Trait can be decomposed as \"Trait\" = \"Entity\" + \"Attribute\", the Entity is the part of the plant that the trait refers to e.g., for \"grain colour\", entity = \"grain\" ",
                "nullable" : true,
                "example" : "http://my-traits.com/trait/PATO:00098765"
              },
              "externalReferences" : {
                "title" : "ExternalReferences",
                "type" : "array",
                "description" : "An array of external reference ids. These are references to this piece of data in an external system. Could be a simple string or a URI.",
                "nullable" : true,
                "example" : [ {
                  "referenceId" : "doi:10.155454/12341234",
                  "referenceSource" : "DOI"
                }, {
                  "referenceId" : "75a50e76",
                  "referenceSource" : "Remote Data Collection Upload Tool"
                } ],
                "items" : {
                  "type" : "object",
                  "properties" : {
                    "referenceID" : {
                      "type" : "string",
                      "description" : "**Deprecated in v2.1** Please use `referenceId`. Github issue number #460 \n<br>The external reference ID. Could be a simple string or a URI.",
                      "nullable" : true,
                      "deprecated" : true
                    },
                    "referenceId" : {
                      "type" : "string",
                      "description" : "The external reference ID. Could be a simple string or a URI."
                    },
                    "referenceSource" : {
                      "type" : "string",
                      "description" : "An identifier for the source system or database of this reference"
                    }
                  }
                }
              },
              "mainAbbreviation" : {
                "type" : "string",
                "description" : "A shortened version of the human readable name for a Trait",
                "nullable" : true,
                "example" : "PH"
              },
              "ontologyReference" : {
                "required" : [ "ontologyDbId", "ontologyName" ],
                "type" : "object",
                "properties" : {
                  "documentationLinks" : {
                    "type" : "array",
                    "description" : "links to various ontology documentation",
                    "nullable" : true,
                    "items" : {
                      "type" : "object",
                      "properties" : {
                        "URL" : {
                          "type" : "string",
                          "format" : "uri",
                          "example" : "http://purl.obolibrary.org/obo/ro.owl"
                        },
                        "type" : {
                          "type" : "string",
                          "example" : "OBO",
                          "enum" : [ "OBO", "RDF", "WEBPAGE" ]
                        }
                      }
                    }
                  },
                  "ontologyDbId" : {
                    "type" : "string",
                    "description" : "Ontology database unique identifier",
                    "example" : "6b071868"
                  },
                  "ontologyName" : {
                    "type" : "string",
                    "description" : "Ontology name",
                    "example" : "The Crop Ontology"
                  },
                  "version" : {
                    "type" : "string",
                    "description" : "Ontology version (no specific format)",
                    "nullable" : true,
                    "example" : "7.2.3"
                  }
                },
                "description" : "MIAPPE V1.1\n\n(DM-85) Variable accession number - Accession number of the variable in the Crop Ontology\n\n(DM-87) Trait accession number - Accession number of the trait in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).\n\n(DM-89) Method accession number - Accession number of the method in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).\n\n(DM-93) Scale accession number - Accession number of the scale in a suitable controlled vocabulary (Crop Ontology)."
              },
              "status" : {
                "type" : "string",
                "description" : "Trait status (examples: \"recommended\", \"obsolete\", \"legacy\", etc.)",
                "nullable" : true,
                "example" : "recommended"
              },
              "synonyms" : {
                "type" : "array",
                "description" : "Other trait names",
                "nullable" : true,
                "example" : [ "Height", "Plant Height", "Stalk Height", "Canopy Height" ],
                "items" : {
                  "type" : "string"
                }
              },
              "traitClass" : {
                "type" : "string",
                "description" : "A classification to describe the type of trait and the context it should be considered in.\n<br/> examples- \"morphological\", \"phenological\", \"agronomical\", \"physiological\", \"abiotic stress\", \"biotic stress\", \"biochemical\", \"quality traits\", \"fertility\", etc.",
                "nullable" : true,
                "example" : "phenological"
              },
              "traitDbId" : {
                "type" : "string",
                "description" : "The ID which uniquely identifies a trait",
                "example" : "9b2e34f5"
              },
              "traitDescription" : {
                "type" : "string",
                "description" : "The description of a trait",
                "nullable" : true,
                "example" : "The height of the plant"
              },
              "traitName" : {
                "type" : "string",
                "description" : "The human readable name of a trait\n<br/>MIAPPE V1.1 (DM-86) Trait - Name of the (plant or environmental) trait under observation",
                "example" : "Height"
              },
              "traitPUI" : {
                "type" : "string",
                "description" : "The Permanent Unique Identifier of a Trait, usually in the form of a URI",
                "nullable" : true,
                "example" : "http://my-traits.com/trait/CO_123:0000012"
              }
            },
            "description" : "A Trait describes what property is being observed. \n<br>For example, an ObservationVariable might be defined with a Trait of \"plant height\", a Scale of \"meters\", and a Method of \"tape measure\". This variable would be distinct from a variable with the Trait \"Leaf length\" or \"Flower height\". "
          }
        }
      },
      "Variant" : {
        "required" : [ "variantDbId" ],
        "type" : "object",
        "properties" : {
          "additionalInfo" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.",
            "nullable" : true
          },
          "alternateBases" : {
            "type" : "array",
            "description" : "The bases that appear instead of the reference bases. Multiple alternate alleles are possible.",
            "nullable" : true,
            "example" : [ "T", "TAC" ],
            "items" : {
              "type" : "string"
            }
          },
          "alternate_bases" : {
            "type" : "array",
            "description" : "**Deprecated in v2.1** Please use `alternateBases`. Github issue number #549\n<br>The bases that appear instead of the reference bases. Multiple alternate alleles are possible.",
            "nullable" : true,
            "example" : [ "T", "TAC" ],
            "deprecated" : true,
            "items" : {
              "type" : "string"
            }
          },
          "ciend" : {
            "type" : "array",
            "description" : "Similar to \"cipos\", but for the variant's end position (which is derived from start + svlen).",
            "nullable" : true,
            "example" : [ -1000, 0 ],
            "items" : {
              "type" : "integer"
            }
          },
          "cipos" : {
            "type" : "array",
            "description" : "In the case of structural variants, start and end of the variant may not\nbe known with an exact base position. \"cipos\" provides an interval with\nhigh confidence for the start position. The interval is provided by 0 or\n2 signed integers which are added to the start position.\nBased on the use in VCF v4.2",
            "nullable" : true,
            "example" : [ -12000, 1000 ],
            "items" : {
              "type" : "integer"
            }
          },
          "created" : {
            "type" : "string",
            "description" : "The timestamp when this variant was created.",
            "format" : "date-time",
            "nullable" : true
          },
          "end" : {
            "type" : "integer",
            "description" : "This field is optional and may be ignored if there is no relevant map or reference to be associated with.\n<br>The end position (exclusive), resulting in [start, end) closed-open interval. This is typically calculated \nby `start + referenceBases.length`.",
            "nullable" : true,
            "example" : 518
          },
          "externalReferences" : {
            "$ref" : "#/components/schemas/ExternalReferences"
          },
          "filtersApplied" : {
            "type" : "boolean",
            "description" : "True if filters were applied for this variant. VCF column 7 \"FILTER\" any value other than the missing value.",
            "format" : "boolean",
            "nullable" : true,
            "example" : true
          },
          "filtersFailed" : {
            "type" : "array",
            "description" : "Zero or more filters that failed for this variant. VCF column 7 \"FILTER\" shared across all alleles in the same VCF record.",
            "nullable" : true,
            "example" : [ "d629a669", "3f14f578" ],
            "items" : {
              "type" : "string"
            }
          },
          "filtersPassed" : {
            "type" : "boolean",
            "description" : "True if all filters for this variant passed. VCF column 7 \"FILTER\" value PASS.",
            "format" : "boolean",
            "nullable" : true,
            "example" : true
          },
          "referenceBases" : {
            "type" : "string",
            "description" : "The reference bases for this variant. They start at the given start position.",
            "nullable" : true,
            "example" : "A"
          },
          "referenceDbId" : {
            "type" : "string",
            "description" : "The unique identifier for a Reference",
            "nullable" : true,
            "example" : "fc0a81d0"
          },
          "referenceName" : {
            "type" : "string",
            "description" : "The reference on which this variant occurs. (e.g. `chr_20` or `X`)",
            "nullable" : true,
            "example" : "chr_20"
          },
          "referenceSetDbId" : {
            "type" : "string",
            "description" : "The unique identifier for a ReferenceSet",
            "nullable" : true,
            "example" : "c1ecfef1"
          },
          "referenceSetName" : {
            "type" : "string",
            "description" : "The human readable name of the ReferenceSet",
            "nullable" : true,
            "example" : "The Best Assembly Ever"
          },
          "start" : {
            "type" : "integer",
            "description" : "This field is optional and may be ignored if there is no relevant map or reference to be associated with.\n<br> The start position at which this variant occurs (0-based). This corresponds to the first base of the string \nof reference bases. Genomic positions are non-negative integers less than reference length. Variants spanning \nthe join of circular genomes are represented as two variants one on each side of the join (position 0).",
            "nullable" : true,
            "example" : 500
          },
          "svlen" : {
            "type" : "integer",
            "description" : "Length of the - if labeled as such in variant_type - structural variation. Based on the use in VCF v4.2",
            "nullable" : true,
            "example" : 1500
          },
          "updated" : {
            "type" : "string",
            "description" : "The time at which this variant was last updated.",
            "format" : "date-time",
            "nullable" : true
          },
          "variantDbId" : {
            "type" : "string",
            "description" : "The ID which uniquely identifies a `Variant`",
            "nullable" : true,
            "example" : "628e89c5"
          },
          "variantNames" : {
            "type" : "array",
            "description" : "A human readable name associated with a `Variant`",
            "nullable" : true,
            "example" : [ "RefSNP_ID_1", "06ea312e" ],
            "items" : {
              "type" : "string"
            }
          },
          "variantSetDbId" : {
            "type" : "array",
            "description" : "An array of `VariantSet` IDs this variant belongs to. This also defines the `ReferenceSet` against which the `Variant` is to be interpreted.",
            "nullable" : true,
            "example" : [ "c8ae400b", "ef2c204b" ],
            "items" : {
              "type" : "string"
            }
          },
          "variantType" : {
            "type" : "string",
            "description" : "The \"variant_type\" is used to denote e.g. structural variants.\nExamples:\n  DUP  : duplication of sequence following \"start\"\n  DEL  : deletion of sequence following \"start\"",
            "nullable" : true,
            "example" : "DUP"
          }
        },
        "description" : "A `Variant` represents a change in DNA sequence relative to some reference. For example, a variant could represent a classic marker, a SNP, or an insertion. This is equivalent to a row in VCF.",
        "x-brapi-metadata" : {
          "description" : "A `Variant` represents a change in DNA sequence relative to some reference. For example, a variant could represent a classic marker, a SNP, or an insertion. This is equivalent to a row in VCF.",
          "module" : "BrAPI-Genotyping",
          "primaryModel" : true,
          "title" : "Variant"
        }
      },
      "VariantSet" : {
        "required" : [ "variantSetDbId" ],
        "type" : "object",
        "properties" : {
          "additionalInfo" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.",
            "nullable" : true
          },
          "analysis" : {
            "type" : "array",
            "description" : "Set of Analysis descriptors for this VariantSet",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/Analysis"
            }
          },
          "availableFormats" : {
            "type" : "array",
            "description" : "When the data for a VariantSet is retrieved, it can be retrieved in a variety of data formats and file formats. \n<br/>'dataFormat' defines the structure of the data within a file (ie DartSeq, VCF, Hapmap, tabular, etc)\n<br/>'fileFormat' defines the MIME type of the file (ie text/csv, application/excel, application/zip). This should also be reflected in the Accept and ContentType HTTP headers for every relevant request and response.",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/AvailableFormat"
            }
          },
          "callSetCount" : {
            "type" : "integer",
            "description" : "The number of CallSets included in this VariantSet",
            "nullable" : true,
            "example" : 341
          },
          "externalReferences" : {
            "$ref" : "#/components/schemas/ExternalReferences"
          },
          "metadataFields" : {
            "type" : "array",
            "description" : "The 'metadataFields' array indicates which types of genotyping data and metadata are available in the VariantSet. \n<br> When possible, these field names and abbreviations should follow the VCF standard ",
            "nullable" : true,
            "items" : {
              "type" : "object",
              "properties" : {
                "dataType" : {
                  "type" : "string",
                  "description" : "The type of field represented in this Genotype Field. This is intended to help parse the data out of JSON.",
                  "example" : "integer",
                  "enum" : [ "string", "integer", "float", "boolean" ]
                },
                "fieldAbbreviation" : {
                  "type" : "string",
                  "description" : "The abbreviated code of the field represented in this Genotype Field. These codes should match the VCF standard when possible. Examples include: \"GQ\", \"RD\", and \"HQ\"",
                  "example" : "GQ"
                },
                "fieldName" : {
                  "type" : "string",
                  "description" : "The name of the field represented in this Genotype Field. Examples include: \"Genotype Quality\", \"Read Depth\", and \"Haplotype Quality\"",
                  "example" : "Genotype Quality"
                }
              },
              "description" : "This represents a type of genotyping data or metadata available in this VariantSet",
              "nullable" : true
            }
          },
          "referenceSetDbId" : {
            "type" : "string",
            "description" : "The ID of the reference set that describes the sequences used by the variants in this set.",
            "nullable" : false,
            "example" : "57eae639"
          },
          "studyDbId" : {
            "type" : "string",
            "description" : "The ID of the dataset this variant set belongs to.",
            "nullable" : true,
            "example" : "2fc3b034"
          },
          "variantCount" : {
            "type" : "integer",
            "description" : "The number of Variants included in this VariantSet",
            "nullable" : true,
            "example" : 250
          },
          "variantSetDbId" : {
            "type" : "string",
            "description" : "The unique identifier for a VariantSet",
            "example" : "87a6ac1e"
          },
          "variantSetName" : {
            "type" : "string",
            "description" : "The human readable name for a VariantSet",
            "nullable" : true,
            "example" : "Maize QC DataSet 002334"
          }
        },
        "description" : "A VariantSet is a collection of variants and variant calls intended to be analyzed together.",
        "x-brapi-metadata" : {
          "description" : "A VariantSet is a collection of variants and variant calls intended to be analyzed together.",
          "module" : "BrAPI-Genotyping",
          "primaryModel" : true,
          "title" : "Variant"
        }
      },
      "VariantSetsExtractRequest" : {
        "type" : "object",
        "properties" : {
          "callSetDbIds" : {
            "type" : "array",
            "description" : "The CallSet to search.",
            "example" : [ "9569cfc4", "da1e888c" ],
            "items" : {
              "type" : "string"
            }
          },
          "expandHomozygotes" : {
            "type" : "boolean",
            "description" : "Should homozygotes be expanded (true) or collapsed into a single occurrence (false)",
            "example" : true
          },
          "sepPhased" : {
            "type" : "string",
            "description" : "The string used as a separator for phased allele calls.",
            "example" : "~"
          },
          "sepUnphased" : {
            "type" : "string",
            "description" : "The string used as a separator for unphased allele calls.",
            "example" : "|"
          },
          "studyDbIds" : {
            "type" : "array",
            "description" : "List of study identifiers to search for",
            "example" : [ "cf6c4bd4", "691e69d6" ],
            "items" : {
              "type" : "string"
            }
          },
          "studyNames" : {
            "type" : "array",
            "description" : "List of study names to filter search results",
            "example" : [ "The First Bob Study 2017", "Wheat Yield Trial 246" ],
            "items" : {
              "type" : "string"
            }
          },
          "unknownString" : {
            "type" : "string",
            "description" : "The string used as a representation for missing data.",
            "example" : "-"
          },
          "variantDbIds" : {
            "type" : "array",
            "description" : "The Variant to search.",
            "example" : [ "c80f068b", "eb7c5f50" ],
            "items" : {
              "type" : "string"
            }
          },
          "variantSetDbIds" : {
            "type" : "array",
            "description" : "The VariantSet to search.",
            "example" : [ "b2903842", "dcbb8558" ],
            "items" : {
              "type" : "string"
            }
          }
        },
        "description" : "Request object for extracting data subsets as new Variant Sets"
      },
      "VariantSetsSearchRequest" : {
        "type" : "object",
        "properties" : {
          "callSetDbIds" : {
            "type" : "array",
            "description" : "The unique identifier representing a CallSet",
            "example" : [ "9569cfc4", "da1e888c" ],
            "items" : {
              "type" : "string"
            }
          },
          "commonCropNames" : {
            "type" : "array",
            "description" : "The BrAPI Common Crop Name is the simple, generalized, widely accepted name of the organism being researched. It is most often used in multi-crop systems where digital resources need to be divided at a high level. Things like 'Maize', 'Wheat', and 'Rice' are examples of common crop names.\n\nUse this parameter to only return results associated with the given crops. \n\nUse `GET /commoncropnames` to find the list of available crops on a server.",
            "example" : [ "Tomatillo", "Paw Paw" ],
            "items" : {
              "type" : "string"
            }
          },
          "externalReferenceIDs" : {
            "type" : "array",
            "description" : "**Deprecated in v2.1** Please use `externalReferenceIds`. Github issue number #460 \n<br>List of external reference IDs. Could be a simple strings or a URIs. (use with `externalReferenceSources` parameter)",
            "example" : [ "doi:10.155454/12341234", "14a19841" ],
            "deprecated" : true,
            "items" : {
              "type" : "string"
            }
          },
          "externalReferenceIds" : {
            "type" : "array",
            "description" : "List of external reference IDs. Could be a simple strings or a URIs. (use with `externalReferenceSources` parameter)",
            "example" : [ "doi:10.155454/12341234", "14a19841" ],
            "items" : {
              "type" : "string"
            }
          },
          "externalReferenceSources" : {
            "type" : "array",
            "description" : "List of identifiers for the source system or database of an external reference (use with `externalReferenceIDs` parameter)",
            "example" : [ "DOI", "Field App Name" ],
            "items" : {
              "type" : "string"
            }
          },
          "page" : {
            "type" : "integer",
            "description" : "Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.",
            "example" : 0
          },
          "pageSize" : {
            "type" : "integer",
            "description" : "The size of the pages to be returned. Default is `1000`.",
            "example" : 1000
          },
          "programDbIds" : {
            "type" : "array",
            "description" : "A BrAPI Program represents the high level organization or group who is responsible for conducting trials and studies. Things like Breeding Programs and Funded Projects are considered BrAPI Programs. \n\nUse this parameter to only return results associated with the given programs. \n\nUse `GET /programs` to find the list of available programs on a server.",
            "example" : [ "8f5de35b", "0e2d4a13" ],
            "items" : {
              "type" : "string"
            }
          },
          "programNames" : {
            "type" : "array",
            "description" : "Use this parameter to only return results associated with the given program names. Program names are not required to be unique.\n\nUse `GET /programs` to find the list of available programs on a server.",
            "example" : [ "Better Breeding Program", "Best Breeding Program" ],
            "items" : {
              "type" : "string"
            }
          },
          "referenceDbIds" : {
            "type" : "array",
            "description" : "The unique identifier representing a genotype Reference",
            "example" : [ "89ab4d17", "74d3b63d" ],
            "items" : {
              "type" : "string"
            }
          },
          "referenceSetDbIds" : {
            "type" : "array",
            "description" : "The unique identifier representing a genotype ReferenceSet",
            "example" : [ "d3b63d4d", "3b63d74b" ],
            "items" : {
              "type" : "string"
            }
          },
          "studyDbIds" : {
            "type" : "array",
            "description" : "List of study identifiers to search for",
            "example" : [ "cf6c4bd4", "691e69d6" ],
            "items" : {
              "type" : "string"
            }
          },
          "studyNames" : {
            "type" : "array",
            "description" : "List of study names to filter search results",
            "example" : [ "The First Bob Study 2017", "Wheat Yield Trial 246" ],
            "items" : {
              "type" : "string"
            }
          },
          "trialDbIds" : {
            "type" : "array",
            "description" : "The ID which uniquely identifies a trial to search for",
            "example" : [ "d2593dc2", "9431a731" ],
            "items" : {
              "type" : "string"
            }
          },
          "trialNames" : {
            "type" : "array",
            "description" : "The human readable name of a trial to search for",
            "example" : [ "All Yield Trials 2016", "Disease Resistance Study Comparison Group" ],
            "items" : {
              "type" : "string"
            }
          },
          "variantDbIds" : {
            "type" : "array",
            "description" : "The unique identifier representing a Variant",
            "example" : [ "c80f068b", "eb7c5f50" ],
            "items" : {
              "type" : "string"
            }
          },
          "variantSetDbIds" : {
            "type" : "array",
            "description" : "The unique identifier representing a VariantSet",
            "example" : [ "b2903842", "dcbb8558" ],
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "VendorContact" : {
        "required" : [ "vendorName" ],
        "type" : "object",
        "properties" : {
          "vendorAddress" : {
            "type" : "string",
            "description" : "The street address of the vendor",
            "nullable" : true,
            "example" : "123 Main Street"
          },
          "vendorCity" : {
            "type" : "string",
            "description" : "The name of the city where the vendor is located",
            "nullable" : true,
            "example" : "Townsville"
          },
          "vendorContactName" : {
            "type" : "string",
            "description" : "The name or identifier of the primary vendor contact",
            "nullable" : true,
            "example" : "Bob Robertson"
          },
          "vendorCountry" : {
            "type" : "string",
            "description" : "The name of the country where the vendor is located",
            "nullable" : true,
            "example" : "USA"
          },
          "vendorDescription" : {
            "type" : "string",
            "description" : "A description of the vendor",
            "nullable" : true,
            "example" : "This is a sequencing vendor. Sequencing happens here."
          },
          "vendorEmail" : {
            "type" : "string",
            "description" : "The primary email address used to contact the vendor",
            "nullable" : true,
            "example" : "bob@bob.org"
          },
          "vendorName" : {
            "type" : "string",
            "description" : "The human readable name of the vendor",
            "example" : "The Example Vendor Lab"
          },
          "vendorPhone" : {
            "type" : "string",
            "description" : "The primary phone number used to contact the vendor",
            "nullable" : true,
            "example" : "+1-800-555-5555"
          },
          "vendorURL" : {
            "type" : "string",
            "description" : "The primary URL for the vendor",
            "nullable" : true,
            "example" : "https://sequencing.org/vendor"
          }
        }
      },
      "VendorOrder" : {
        "required" : [ "clientId", "numberOfSamples", "orderId", "serviceIds" ],
        "type" : "object",
        "properties" : {
          "clientId" : {
            "type" : "string",
            "description" : "A unique, alpha-numeric ID which identifies the client to the vendor. Used to connect the order to the correct billing and contact info.",
            "example" : "7b51ad15"
          },
          "numberOfSamples" : {
            "type" : "integer",
            "description" : "The total number of samples contained in this request. Used for billing and basic validation of the request.",
            "example" : 180
          },
          "orderId" : {
            "type" : "string",
            "description" : "The order id returned by the vendor when the order was successfully submitted.",
            "example" : "96ba0ca3"
          },
          "requiredServiceInfo" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "A map of additional data required by the requested service. This includes things like Volume and Concentration.",
            "nullable" : true,
            "example" : {
              "extractDNA" : "true",
              "genus" : "Zea",
              "species" : "mays",
              "volumePerWell" : "2.3 ml"
            }
          },
          "serviceIds" : {
            "type" : "array",
            "description" : "A list of unique, alpha-numeric ID which identify the requested services to be applied to this order. \nA Vendor Service defines what platform, technology, and markers will be used. \nA list of available service IDs can be retrieved from the Vendor Specs.",
            "example" : [ "e8f60f64", "05bd925a", "b698fb5e" ],
            "items" : {
              "type" : "string"
            }
          }
        },
        "description" : "The details of a vendor order"
      },
      "VendorOrderSubmission" : {
        "required" : [ "orderId" ],
        "type" : "object",
        "properties" : {
          "orderId" : {
            "type" : "string",
            "description" : "A unique, alpha-numeric ID which identifies the order",
            "example" : "b5144468"
          },
          "shipmentForms" : {
            "type" : "array",
            "description" : "Array of paper forms which need to be printed and included with the physical shipment",
            "nullable" : true,
            "items" : {
              "title" : "ShipmentForm",
              "required" : [ "fileURL" ],
              "type" : "object",
              "properties" : {
                "fileDescription" : {
                  "type" : "string",
                  "description" : "The human readable long description for this form",
                  "nullable" : true,
                  "example" : "This is a shipment manifest form"
                },
                "fileName" : {
                  "type" : "string",
                  "description" : "The human readable name for this form",
                  "nullable" : true,
                  "example" : "Shipment Manifest"
                },
                "fileURL" : {
                  "type" : "string",
                  "description" : "The URL to download this form",
                  "format" : "uri",
                  "nullable" : true,
                  "example" : "https://vendor.org/forms/manifest.pdf"
                }
              }
            }
          }
        },
        "description" : "Response to an order request"
      },
      "VendorOrderSubmissionRequest" : {
        "required" : [ "clientId", "numberOfSamples", "plates", "sampleType", "serviceIds" ],
        "type" : "object",
        "properties" : {
          "clientId" : {
            "type" : "string",
            "description" : "A unique, alpha-numeric ID which identifies the client to the vendor. Used to connect the order to the contract, billing, and contact info.",
            "example" : "b8aac350"
          },
          "numberOfSamples" : {
            "type" : "integer",
            "description" : "The total number of samples contained in this request. Used for billing and basic validation of the request.",
            "example" : 180
          },
          "plates" : {
            "type" : "array",
            "description" : "Array of new plates to be submitted to a vendor",
            "items" : {
              "type" : "object",
              "properties" : {
                "clientPlateBarcode" : {
                  "type" : "string",
                  "description" : "(Optional) The value of the bar code attached to this plate",
                  "nullable" : true,
                  "example" : "6ebf3f25"
                },
                "clientPlateId" : {
                  "type" : "string",
                  "description" : "The ID which uniquely identifies this plate to the client making the request",
                  "example" : "02a8d6f0"
                },
                "sampleSubmissionFormat" : {
                  "type" : "string",
                  "description" : "Enum for plate formats, usually \"PLATE_96\" for a 96 well plate or \"TUBES\" for plateless format",
                  "nullable" : true,
                  "example" : "PLATE_96",
                  "enum" : [ "PLATE_96", "TUBES" ]
                },
                "samples" : {
                  "type" : "array",
                  "nullable" : true,
                  "items" : {
                    "required" : [ "clientSampleId" ],
                    "type" : "object",
                    "properties" : {
                      "clientSampleBarCode" : {
                        "type" : "string",
                        "description" : "(Optional) The value of the bar code attached to this sample",
                        "nullable" : true,
                        "example" : "7c07e527"
                      },
                      "clientSampleId" : {
                        "type" : "string",
                        "description" : "The ID which uniquely identifies this sample to the client making the request",
                        "example" : "bd96bd69"
                      },
                      "column" : {
                        "maximum" : 12,
                        "minimum" : 1,
                        "type" : "integer",
                        "description" : "The Column identifier for this samples location in the plate",
                        "nullable" : true,
                        "example" : 6
                      },
                      "comments" : {
                        "type" : "string",
                        "description" : "Generic comments about this sample for the vendor",
                        "nullable" : true,
                        "example" : "This is my favorite sample, please be extra careful with it."
                      },
                      "concentration" : {
                        "type" : "object",
                        "properties" : {
                          "units" : {
                            "type" : "string",
                            "description" : "Units (example: \"ng/ul\")",
                            "example" : "ng/ul"
                          },
                          "value" : {
                            "type" : "number",
                            "description" : "Value (example: \"2.3\")",
                            "example" : 2.3
                          }
                        },
                        "description" : "A value with units"
                      },
                      "organismName" : {
                        "type" : "string",
                        "description" : "Scientific organism name",
                        "nullable" : true,
                        "example" : "Aspergillus fructus"
                      },
                      "row" : {
                        "type" : "string",
                        "description" : "The Row identifier for this samples location in the plate",
                        "nullable" : true,
                        "example" : "B"
                      },
                      "speciesName" : {
                        "type" : "string",
                        "description" : "Scientific species name",
                        "nullable" : true,
                        "example" : "Aspergillus fructus"
                      },
                      "taxonomyOntologyReference" : {
                        "required" : [ "ontologyDbId", "ontologyName" ],
                        "type" : "object",
                        "properties" : {
                          "documentationLinks" : {
                            "type" : "array",
                            "description" : "links to various ontology documentation",
                            "nullable" : true,
                            "items" : {
                              "type" : "object",
                              "properties" : {
                                "URL" : {
                                  "type" : "string",
                                  "format" : "uri",
                                  "example" : "http://purl.obolibrary.org/obo/ro.owl"
                                },
                                "type" : {
                                  "type" : "string",
                                  "example" : "OBO",
                                  "enum" : [ "OBO", "RDF", "WEBPAGE" ]
                                }
                              }
                            }
                          },
                          "ontologyDbId" : {
                            "type" : "string",
                            "description" : "Ontology database unique identifier",
                            "example" : "6b071868"
                          },
                          "ontologyName" : {
                            "type" : "string",
                            "description" : "Ontology name",
                            "example" : "The Crop Ontology"
                          },
                          "version" : {
                            "type" : "string",
                            "description" : "Ontology version (no specific format)",
                            "nullable" : true,
                            "example" : "7.2.3"
                          }
                        },
                        "description" : "MIAPPE V1.1\n\n(DM-85) Variable accession number - Accession number of the variable in the Crop Ontology\n\n(DM-87) Trait accession number - Accession number of the trait in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).\n\n(DM-89) Method accession number - Accession number of the method in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).\n\n(DM-93) Scale accession number - Accession number of the scale in a suitable controlled vocabulary (Crop Ontology).",
                        "nullable" : true
                      },
                      "tissueType" : {
                        "type" : "string",
                        "description" : "The type of tissue in this sample. List of accepted tissue types can be found in the Vendor Specs.",
                        "nullable" : true,
                        "example" : "Root"
                      },
                      "tissueTypeOntologyReference" : {
                        "required" : [ "ontologyDbId", "ontologyName" ],
                        "type" : "object",
                        "properties" : {
                          "documentationLinks" : {
                            "type" : "array",
                            "description" : "links to various ontology documentation",
                            "nullable" : true,
                            "items" : {
                              "type" : "object",
                              "properties" : {
                                "URL" : {
                                  "type" : "string",
                                  "format" : "uri",
                                  "example" : "http://purl.obolibrary.org/obo/ro.owl"
                                },
                                "type" : {
                                  "type" : "string",
                                  "example" : "OBO",
                                  "enum" : [ "OBO", "RDF", "WEBPAGE" ]
                                }
                              }
                            }
                          },
                          "ontologyDbId" : {
                            "type" : "string",
                            "description" : "Ontology database unique identifier",
                            "example" : "6b071868"
                          },
                          "ontologyName" : {
                            "type" : "string",
                            "description" : "Ontology name",
                            "example" : "The Crop Ontology"
                          },
                          "version" : {
                            "type" : "string",
                            "description" : "Ontology version (no specific format)",
                            "nullable" : true,
                            "example" : "7.2.3"
                          }
                        },
                        "description" : "MIAPPE V1.1\n\n(DM-85) Variable accession number - Accession number of the variable in the Crop Ontology\n\n(DM-87) Trait accession number - Accession number of the trait in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).\n\n(DM-89) Method accession number - Accession number of the method in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).\n\n(DM-93) Scale accession number - Accession number of the scale in a suitable controlled vocabulary (Crop Ontology).",
                        "nullable" : true
                      },
                      "volume" : {
                        "type" : "object",
                        "properties" : {
                          "units" : {
                            "type" : "string",
                            "description" : "Units (example: \"ng/ul\")",
                            "example" : "ng/ul"
                          },
                          "value" : {
                            "type" : "number",
                            "description" : "Value (example: \"2.3\")",
                            "example" : 2.3
                          }
                        },
                        "description" : "A value with units",
                        "nullable" : true
                      },
                      "well" : {
                        "type" : "string",
                        "description" : "The Well identifier for this samples location in the plate. Usually a concatenation of Row and Column, or just a number if the samples are not part of an ordered plate.",
                        "nullable" : true,
                        "example" : "B6"
                      }
                    }
                  }
                }
              }
            }
          },
          "requiredServiceInfo" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "A map of additional data required by the requested service. This includes things like Volume and Concentration.",
            "nullable" : true,
            "example" : {
              "extractDNA" : true,
              "genus" : "Zea",
              "species" : "mays",
              "volumePerWell" : "2.3 ml"
            }
          },
          "sampleType" : {
            "type" : "string",
            "description" : "The type of Samples being submitted",
            "example" : "Tissue",
            "enum" : [ "DNA", "RNA", "Tissue" ]
          },
          "serviceIds" : {
            "type" : "array",
            "description" : "A list of unique, alpha-numeric ID which identify the requested services to be applied to this order. \nA Vendor Service defines what platform, technology, and markers will be used. \nA list of available service IDs can be retrieved from the Vendor Specs.",
            "example" : [ "e8f60f64", "05bd925a", "b698fb5e" ],
            "items" : {
              "type" : "string"
            }
          }
        },
        "description" : "Request object structure to submit plate data to a vendor"
      },
      "VendorPlate" : {
        "type" : "object",
        "properties" : {
          "clientPlateBarcode" : {
            "type" : "string",
            "description" : "(Optional) The value of the bar code attached to this plate",
            "nullable" : true,
            "example" : "31dd5787"
          },
          "clientPlateId" : {
            "type" : "string",
            "description" : "The ID which uniquely identifies this plate to the client making the request",
            "nullable" : true,
            "example" : "0ad6c0ef"
          },
          "sampleSubmissionFormat" : {
            "$ref" : "#/components/schemas/PlateFormat"
          },
          "samples" : {
            "type" : "array",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/VendorSample"
            }
          }
        }
      },
      "VendorPlateSubmission" : {
        "required" : [ "clientId", "numberOfSamples", "plates" ],
        "type" : "object",
        "properties" : {
          "clientId" : {
            "type" : "string",
            "description" : "A unique, alpha-numeric ID which identifies the client to the vendor. Used to connect the order to the contract, billing, and contact info.",
            "example" : "e470ae0d"
          },
          "numberOfSamples" : {
            "type" : "integer",
            "description" : "The total number of samples contained in this request. Used for billing and basic validation of the request.",
            "example" : 180
          },
          "plates" : {
            "type" : "array",
            "description" : "Array of new plates to be submitted to a vendor",
            "items" : {
              "type" : "object",
              "properties" : {
                "clientPlateBarcode" : {
                  "type" : "string",
                  "description" : "(Optional) The value of the bar code attached to this plate",
                  "nullable" : true,
                  "example" : "bfb33593"
                },
                "clientPlateId" : {
                  "type" : "string",
                  "description" : "The ID which uniquely identifies this plate to the client making the request",
                  "example" : "dae8f49d"
                },
                "sampleSubmissionFormat" : {
                  "$ref" : "#/components/schemas/PlateFormat"
                },
                "samples" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/VendorSample"
                  }
                }
              }
            }
          }
        },
        "description" : "Response of a plate submission"
      },
      "VendorPlateSubmissionId" : {
        "required" : [ "submissionId" ],
        "type" : "object",
        "properties" : {
          "submissionId" : {
            "type" : "string",
            "description" : "A unique, alpha-numeric ID which identifies a set of plates which have been successfully submitted.",
            "example" : "f8f409e0"
          }
        },
        "description" : "Response to an order request"
      },
      "VendorPlateSubmissionRequest" : {
        "required" : [ "clientId", "numberOfSamples", "plates", "sampleType" ],
        "type" : "object",
        "properties" : {
          "clientId" : {
            "type" : "string",
            "description" : "A unique, alpha-numeric ID which identifies the client to the vendor. Used to connect the order to the contract, billing, and contact info.",
            "example" : "b8aac350"
          },
          "numberOfSamples" : {
            "type" : "integer",
            "description" : "The total number of samples contained in this request. Used for billing and basic validation of the request.",
            "example" : 180
          },
          "plates" : {
            "type" : "array",
            "description" : "Array of new plates to be submitted to a vendor",
            "items" : {
              "type" : "object",
              "properties" : {
                "clientPlateBarcode" : {
                  "type" : "string",
                  "description" : "(Optional) The value of the bar code attached to this plate",
                  "nullable" : true,
                  "example" : "6ebf3f25"
                },
                "clientPlateId" : {
                  "type" : "string",
                  "description" : "The ID which uniquely identifies this plate to the client making the request",
                  "example" : "02a8d6f0"
                },
                "sampleSubmissionFormat" : {
                  "type" : "string",
                  "description" : "Enum for plate formats, usually \"PLATE_96\" for a 96 well plate or \"TUBES\" for plateless format",
                  "nullable" : true,
                  "example" : "PLATE_96",
                  "enum" : [ "PLATE_96", "TUBES" ]
                },
                "samples" : {
                  "type" : "array",
                  "nullable" : true,
                  "items" : {
                    "required" : [ "clientSampleId" ],
                    "type" : "object",
                    "properties" : {
                      "clientSampleBarCode" : {
                        "type" : "string",
                        "description" : "(Optional) The value of the bar code attached to this sample",
                        "nullable" : true,
                        "example" : "7c07e527"
                      },
                      "clientSampleId" : {
                        "type" : "string",
                        "description" : "The ID which uniquely identifies this sample to the client making the request",
                        "example" : "bd96bd69"
                      },
                      "column" : {
                        "maximum" : 12,
                        "minimum" : 1,
                        "type" : "integer",
                        "description" : "The Column identifier for this samples location in the plate",
                        "nullable" : true,
                        "example" : 6
                      },
                      "comments" : {
                        "type" : "string",
                        "description" : "Generic comments about this sample for the vendor",
                        "nullable" : true,
                        "example" : "This is my favorite sample, please be extra careful with it."
                      },
                      "concentration" : {
                        "type" : "object",
                        "properties" : {
                          "units" : {
                            "type" : "string",
                            "description" : "Units (example: \"ng/ul\")",
                            "example" : "ng/ul"
                          },
                          "value" : {
                            "type" : "number",
                            "description" : "Value (example: \"2.3\")",
                            "example" : 2.3
                          }
                        },
                        "description" : "A value with units"
                      },
                      "organismName" : {
                        "type" : "string",
                        "description" : "Scientific organism name",
                        "nullable" : true,
                        "example" : "Aspergillus fructus"
                      },
                      "row" : {
                        "type" : "string",
                        "description" : "The Row identifier for this samples location in the plate",
                        "nullable" : true,
                        "example" : "B"
                      },
                      "speciesName" : {
                        "type" : "string",
                        "description" : "Scientific species name",
                        "nullable" : true,
                        "example" : "Aspergillus fructus"
                      },
                      "taxonomyOntologyReference" : {
                        "required" : [ "ontologyDbId", "ontologyName" ],
                        "type" : "object",
                        "properties" : {
                          "documentationLinks" : {
                            "type" : "array",
                            "description" : "links to various ontology documentation",
                            "nullable" : true,
                            "items" : {
                              "type" : "object",
                              "properties" : {
                                "URL" : {
                                  "type" : "string",
                                  "format" : "uri",
                                  "example" : "http://purl.obolibrary.org/obo/ro.owl"
                                },
                                "type" : {
                                  "type" : "string",
                                  "example" : "OBO",
                                  "enum" : [ "OBO", "RDF", "WEBPAGE" ]
                                }
                              }
                            }
                          },
                          "ontologyDbId" : {
                            "type" : "string",
                            "description" : "Ontology database unique identifier",
                            "example" : "6b071868"
                          },
                          "ontologyName" : {
                            "type" : "string",
                            "description" : "Ontology name",
                            "example" : "The Crop Ontology"
                          },
                          "version" : {
                            "type" : "string",
                            "description" : "Ontology version (no specific format)",
                            "nullable" : true,
                            "example" : "7.2.3"
                          }
                        },
                        "description" : "MIAPPE V1.1\n\n(DM-85) Variable accession number - Accession number of the variable in the Crop Ontology\n\n(DM-87) Trait accession number - Accession number of the trait in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).\n\n(DM-89) Method accession number - Accession number of the method in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).\n\n(DM-93) Scale accession number - Accession number of the scale in a suitable controlled vocabulary (Crop Ontology).",
                        "nullable" : true
                      },
                      "tissueType" : {
                        "type" : "string",
                        "description" : "The type of tissue in this sample. List of accepted tissue types can be found in the Vendor Specs.",
                        "nullable" : true,
                        "example" : "Root"
                      },
                      "tissueTypeOntologyReference" : {
                        "required" : [ "ontologyDbId", "ontologyName" ],
                        "type" : "object",
                        "properties" : {
                          "documentationLinks" : {
                            "type" : "array",
                            "description" : "links to various ontology documentation",
                            "nullable" : true,
                            "items" : {
                              "type" : "object",
                              "properties" : {
                                "URL" : {
                                  "type" : "string",
                                  "format" : "uri",
                                  "example" : "http://purl.obolibrary.org/obo/ro.owl"
                                },
                                "type" : {
                                  "type" : "string",
                                  "example" : "OBO",
                                  "enum" : [ "OBO", "RDF", "WEBPAGE" ]
                                }
                              }
                            }
                          },
                          "ontologyDbId" : {
                            "type" : "string",
                            "description" : "Ontology database unique identifier",
                            "example" : "6b071868"
                          },
                          "ontologyName" : {
                            "type" : "string",
                            "description" : "Ontology name",
                            "example" : "The Crop Ontology"
                          },
                          "version" : {
                            "type" : "string",
                            "description" : "Ontology version (no specific format)",
                            "nullable" : true,
                            "example" : "7.2.3"
                          }
                        },
                        "description" : "MIAPPE V1.1\n\n(DM-85) Variable accession number - Accession number of the variable in the Crop Ontology\n\n(DM-87) Trait accession number - Accession number of the trait in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).\n\n(DM-89) Method accession number - Accession number of the method in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).\n\n(DM-93) Scale accession number - Accession number of the scale in a suitable controlled vocabulary (Crop Ontology).",
                        "nullable" : true
                      },
                      "volume" : {
                        "type" : "object",
                        "properties" : {
                          "units" : {
                            "type" : "string",
                            "description" : "Units (example: \"ng/ul\")",
                            "example" : "ng/ul"
                          },
                          "value" : {
                            "type" : "number",
                            "description" : "Value (example: \"2.3\")",
                            "example" : 2.3
                          }
                        },
                        "description" : "A value with units",
                        "nullable" : true
                      },
                      "well" : {
                        "type" : "string",
                        "description" : "The Well identifier for this samples location in the plate. Usually a concatenation of Row and Column, or just a number if the samples are not part of an ordered plate.",
                        "nullable" : true,
                        "example" : "B6"
                      }
                    }
                  }
                }
              }
            }
          },
          "sampleType" : {
            "type" : "string",
            "description" : "The type of Samples being submitted",
            "example" : "Tissue",
            "enum" : [ "DNA", "RNA", "Tissue" ]
          }
        },
        "description" : "Request object structure to submit plate data to a vendor"
      },
      "VendorResultFile" : {
        "required" : [ "clientSampleIds", "fileName", "fileType", "fileURL" ],
        "type" : "object",
        "properties" : {
          "additionalInfo" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.",
            "nullable" : true
          },
          "clientSampleIds" : {
            "type" : "array",
            "description" : "The list of sampleDbIds included in the file",
            "example" : [ "3968733e", "e0de6391", "66854172" ],
            "items" : {
              "type" : "string"
            }
          },
          "fileName" : {
            "type" : "string",
            "description" : "Name of the file",
            "example" : "sequence_data_ce640bd3.csv"
          },
          "fileType" : {
            "type" : "string",
            "description" : "Format of the file",
            "example" : "text/csv"
          },
          "fileURL" : {
            "type" : "string",
            "description" : "The URL to a file with the results of a vendor analysis",
            "format" : "uri",
            "example" : "https://vendor.org/data/sequence_data_ce640bd3.csv"
          },
          "md5sum" : {
            "type" : "string",
            "description" : "MD5 Hash Check Sum for the file to confirm download without error",
            "nullable" : true,
            "example" : "c2365e900c81a89cf74d83dab60df146"
          }
        }
      },
      "VendorSample" : {
        "required" : [ "clientSampleId" ],
        "type" : "object",
        "properties" : {
          "clientSampleBarCode" : {
            "type" : "string",
            "description" : "(Optional) The value of the bar code attached to this sample",
            "nullable" : true,
            "example" : "7c07e527"
          },
          "clientSampleId" : {
            "type" : "string",
            "description" : "The ID which uniquely identifies this sample to the client making the request",
            "example" : "bd96bd69"
          },
          "column" : {
            "maximum" : 12,
            "minimum" : 1,
            "type" : "integer",
            "description" : "The Column identifier for this samples location in the plate",
            "nullable" : true,
            "example" : 6
          },
          "comments" : {
            "type" : "string",
            "description" : "Generic comments about this sample for the vendor",
            "nullable" : true,
            "example" : "This is my favorite sample, please be extra careful with it."
          },
          "concentration" : {
            "type" : "object",
            "properties" : {
              "units" : {
                "type" : "string",
                "description" : "Units (example: \"ng/ul\")",
                "example" : "ng/ul"
              },
              "value" : {
                "type" : "number",
                "description" : "Value (example: \"2.3\")",
                "example" : 2.3
              }
            },
            "description" : "A value with units"
          },
          "organismName" : {
            "type" : "string",
            "description" : "Scientific organism name",
            "nullable" : true,
            "example" : "Aspergillus fructus"
          },
          "row" : {
            "type" : "string",
            "description" : "The Row identifier for this samples location in the plate",
            "nullable" : true,
            "example" : "B"
          },
          "speciesName" : {
            "type" : "string",
            "description" : "Scientific species name",
            "nullable" : true,
            "example" : "Aspergillus fructus"
          },
          "taxonomyOntologyReference" : {
            "required" : [ "ontologyDbId", "ontologyName" ],
            "type" : "object",
            "properties" : {
              "documentationLinks" : {
                "type" : "array",
                "description" : "links to various ontology documentation",
                "nullable" : true,
                "items" : {
                  "type" : "object",
                  "properties" : {
                    "URL" : {
                      "type" : "string",
                      "format" : "uri",
                      "example" : "http://purl.obolibrary.org/obo/ro.owl"
                    },
                    "type" : {
                      "type" : "string",
                      "example" : "OBO",
                      "enum" : [ "OBO", "RDF", "WEBPAGE" ]
                    }
                  }
                }
              },
              "ontologyDbId" : {
                "type" : "string",
                "description" : "Ontology database unique identifier",
                "example" : "6b071868"
              },
              "ontologyName" : {
                "type" : "string",
                "description" : "Ontology name",
                "example" : "The Crop Ontology"
              },
              "version" : {
                "type" : "string",
                "description" : "Ontology version (no specific format)",
                "nullable" : true,
                "example" : "7.2.3"
              }
            },
            "description" : "MIAPPE V1.1\n\n(DM-85) Variable accession number - Accession number of the variable in the Crop Ontology\n\n(DM-87) Trait accession number - Accession number of the trait in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).\n\n(DM-89) Method accession number - Accession number of the method in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).\n\n(DM-93) Scale accession number - Accession number of the scale in a suitable controlled vocabulary (Crop Ontology).",
            "nullable" : true
          },
          "tissueType" : {
            "type" : "string",
            "description" : "The type of tissue in this sample. List of accepted tissue types can be found in the Vendor Specs.",
            "nullable" : true,
            "example" : "Root"
          },
          "tissueTypeOntologyReference" : {
            "required" : [ "ontologyDbId", "ontologyName" ],
            "type" : "object",
            "properties" : {
              "documentationLinks" : {
                "type" : "array",
                "description" : "links to various ontology documentation",
                "nullable" : true,
                "items" : {
                  "type" : "object",
                  "properties" : {
                    "URL" : {
                      "type" : "string",
                      "format" : "uri",
                      "example" : "http://purl.obolibrary.org/obo/ro.owl"
                    },
                    "type" : {
                      "type" : "string",
                      "example" : "OBO",
                      "enum" : [ "OBO", "RDF", "WEBPAGE" ]
                    }
                  }
                }
              },
              "ontologyDbId" : {
                "type" : "string",
                "description" : "Ontology database unique identifier",
                "example" : "6b071868"
              },
              "ontologyName" : {
                "type" : "string",
                "description" : "Ontology name",
                "example" : "The Crop Ontology"
              },
              "version" : {
                "type" : "string",
                "description" : "Ontology version (no specific format)",
                "nullable" : true,
                "example" : "7.2.3"
              }
            },
            "description" : "MIAPPE V1.1\n\n(DM-85) Variable accession number - Accession number of the variable in the Crop Ontology\n\n(DM-87) Trait accession number - Accession number of the trait in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).\n\n(DM-89) Method accession number - Accession number of the method in a suitable controlled vocabulary (Crop Ontology, Trait Ontology).\n\n(DM-93) Scale accession number - Accession number of the scale in a suitable controlled vocabulary (Crop Ontology).",
            "nullable" : true
          },
          "volume" : {
            "type" : "object",
            "properties" : {
              "units" : {
                "type" : "string",
                "description" : "Units (example: \"ng/ul\")",
                "example" : "ng/ul"
              },
              "value" : {
                "type" : "number",
                "description" : "Value (example: \"2.3\")",
                "example" : 2.3
              }
            },
            "description" : "A value with units",
            "nullable" : true
          },
          "well" : {
            "type" : "string",
            "description" : "The Well identifier for this samples location in the plate. Usually a concatenation of Row and Column, or just a number if the samples are not part of an ordered plate.",
            "nullable" : true,
            "example" : "B6"
          }
        }
      },
      "VendorSpecification" : {
        "type" : "object",
        "properties" : {
          "additionalInfo" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            },
            "description" : "A free space containing any additional information related to a particular object. A data source may provide any JSON object, unrestricted by the BrAPI specification.",
            "nullable" : true
          },
          "services" : {
            "type" : "array",
            "description" : "List of platform specifications available at the vendor",
            "nullable" : true,
            "items" : {
              "$ref" : "#/components/schemas/VendorSpecificationService"
            }
          },
          "vendorContact" : {
            "$ref" : "#/components/schemas/VendorContact"
          }
        }
      },
      "VendorSpecificationService" : {
        "required" : [ "serviceId", "serviceName" ],
        "type" : "object",
        "properties" : {
          "serviceDescription" : {
            "type" : "string",
            "description" : "Description of the vendor platform",
            "nullable" : true,
            "example" : "A combined DNA extract and Sequencing process using technology and science. Lots of automated pipet machines."
          },
          "serviceId" : {
            "type" : "string",
            "description" : "Unique identifier for this service",
            "example" : "085d298f"
          },
          "serviceName" : {
            "type" : "string",
            "description" : "The human readable name of a platform",
            "example" : "The Deluxe Service"
          },
          "servicePlatformMarkerType" : {
            "type" : "string",
            "description" : "The type of markers used in this services platform",
            "nullable" : true,
            "example" : "FIXED",
            "enum" : [ "FIXED", "DISCOVERABLE" ]
          },
          "servicePlatformName" : {
            "type" : "string",
            "description" : "The technology platform used by this service",
            "nullable" : true,
            "example" : "RNA-seq"
          },
          "specificRequirements" : {
            "type" : "array",
            "description" : "Additional arbitrary requirements for a particular platform",
            "nullable" : true,
            "example" : [ {
              "description" : "The genus of the samples",
              "key" : "genus"
            }, {
              "description" : "The species of the samples",
              "key" : "species"
            }, {
              "description" : "Approximate volume of each sample (ex 2.3 ml)",
              "key" : "volumePerWell"
            }, {
              "description" : "Does DNA extraction need to happen before sequencing (ex true)",
              "key" : "extractDNA"
            } ],
            "items" : {
              "type" : "object",
              "properties" : {
                "description" : {
                  "type" : "string",
                  "description" : "The value of a key-value entry in a map of Vendor specific requirements"
                },
                "key" : {
                  "type" : "string",
                  "description" : "The key of a key-value entry in a map of Vendor specific requirements"
                }
              }
            }
          }
        }
      },
      "basePagination" : {
        "required" : [ "currentPage", "pageSize" ],
        "type" : "object",
        "properties" : {
          "currentPage" : {
            "type" : "integer",
            "description" : "The index number for the returned page of data. This should always match the requested page number or the default page (0).",
            "example" : 0,
            "default" : 0
          },
          "pageSize" : {
            "type" : "integer",
            "description" : "The number of data elements returned, aka the size of the current page. If the requested page does not have enough elements to fill a page at the requested page size, this field should indicate the actual number of elements returned.",
            "example" : 1000,
            "default" : 1000
          },
          "totalCount" : {
            "type" : "integer",
            "description" : "The total number of elements that are available on the server and match the requested query parameters.",
            "example" : 10
          },
          "totalPages" : {
            "type" : "integer",
            "description" : "The total number of pages of elements available on the server. This should be calculated with the following formula. \n<br> totalPages = CEILING( totalCount / requested_page_size)",
            "example" : 1
          }
        },
        "description" : "The pagination object is applicable only when the payload contains a \"data\" key. It describes the pagination of the data contained in the \"data\" array, as a way to identify which subset of data is being returned. \n<br> Pages are zero indexed, so the first page will be page 0 (zero)."
      },
      "callSetsSearchRequest" : {
        "type" : "object",
        "properties" : {
          "callSetDbIds" : {
            "type" : "array",
            "description" : "A list of IDs which uniquely identify `CallSets` within the given database server",
            "nullable" : true,
            "example" : [ "6c7486b2", "49c36a73" ],
            "items" : {
              "type" : "string"
            }
          },
          "callSetNames" : {
            "type" : "array",
            "description" : "A list of human readable names associated with `CallSets`",
            "nullable" : true,
            "example" : [ "Sample_123_DNA_Run_456", "Sample_789_DNA_Run_101" ],
            "items" : {
              "type" : "string"
            }
          },
          "commonCropNames" : {
            "type" : "array",
            "description" : "The BrAPI Common Crop Name is the simple, generalized, widely accepted name of the organism being researched. It is most often used in multi-crop systems where digital resources need to be divided at a high level. Things like 'Maize', 'Wheat', and 'Rice' are examples of common crop names.\n\nUse this parameter to only return results associated with the given crops. \n\nUse `GET /commoncropnames` to find the list of available crops on a server.",
            "example" : [ "Tomatillo", "Paw Paw" ],
            "items" : {
              "type" : "string"
            }
          },
          "externalReferenceIDs" : {
            "type" : "array",
            "description" : "**Deprecated in v2.1** Please use `externalReferenceIds`. Github issue number #460 \n<br>List of external reference IDs. Could be a simple strings or a URIs. (use with `externalReferenceSources` parameter)",
            "example" : [ "doi:10.155454/12341234", "14a19841" ],
            "deprecated" : true,
            "items" : {
              "type" : "string"
            }
          },
          "externalReferenceIds" : {
            "type" : "array",
            "description" : "List of external reference IDs. Could be a simple strings or a URIs. (use with `externalReferenceSources` parameter)",
            "example" : [ "doi:10.155454/12341234", "14a19841" ],
            "items" : {
              "type" : "string"
            }
          },
          "externalReferenceSources" : {
            "type" : "array",
            "description" : "List of identifiers for the source system or database of an external reference (use with `externalReferenceIDs` parameter)",
            "example" : [ "DOI", "Field App Name" ],
            "items" : {
              "type" : "string"
            }
          },
          "germplasmDbIds" : {
            "type" : "array",
            "description" : "List of IDs which uniquely identify germplasm to search for",
            "example" : [ "e9c6edd7", "1b1df4a6" ],
            "items" : {
              "type" : "string"
            }
          },
          "germplasmNames" : {
            "type" : "array",
            "description" : "List of human readable names to identify germplasm to search for",
            "example" : [ "A0000003", "A0000477" ],
            "items" : {
              "type" : "string"
            }
          },
          "page" : {
            "type" : "integer",
            "description" : "Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.",
            "example" : 0
          },
          "pageSize" : {
            "type" : "integer",
            "description" : "The size of the pages to be returned. Default is `1000`.",
            "example" : 1000
          },
          "programDbIds" : {
            "type" : "array",
            "description" : "A BrAPI Program represents the high level organization or group who is responsible for conducting trials and studies. Things like Breeding Programs and Funded Projects are considered BrAPI Programs. \n\nUse this parameter to only return results associated with the given programs. \n\nUse `GET /programs` to find the list of available programs on a server.",
            "example" : [ "8f5de35b", "0e2d4a13" ],
            "items" : {
              "type" : "string"
            }
          },
          "programNames" : {
            "type" : "array",
            "description" : "Use this parameter to only return results associated with the given program names. Program names are not required to be unique.\n\nUse `GET /programs` to find the list of available programs on a server.",
            "example" : [ "Better Breeding Program", "Best Breeding Program" ],
            "items" : {
              "type" : "string"
            }
          },
          "sampleDbIds" : {
            "type" : "array",
            "description" : "A list of IDs which uniquely identify `Samples` within the given database server",
            "nullable" : true,
            "example" : [ "758d3f6d", "39c0a3f7" ],
            "items" : {
              "type" : "string"
            }
          },
          "sampleNames" : {
            "type" : "array",
            "description" : "A list of human readable names associated with `Samples`",
            "nullable" : true,
            "example" : [ "Sample_123", "Sample_789" ],
            "items" : {
              "type" : "string"
            }
          },
          "studyDbIds" : {
            "type" : "array",
            "description" : "List of study identifiers to search for",
            "example" : [ "cf6c4bd4", "691e69d6" ],
            "items" : {
              "type" : "string"
            }
          },
          "studyNames" : {
            "type" : "array",
            "description" : "List of study names to filter search results",
            "example" : [ "The First Bob Study 2017", "Wheat Yield Trial 246" ],
            "items" : {
              "type" : "string"
            }
          },
          "trialDbIds" : {
            "type" : "array",
            "description" : "The ID which uniquely identifies a trial to search for",
            "example" : [ "d2593dc2", "9431a731" ],
            "items" : {
              "type" : "string"
            }
          },
          "trialNames" : {
            "type" : "array",
            "description" : "The human readable name of a trial to search for",
            "example" : [ "All Yield Trials 2016", "Disease Resistance Study Comparison Group" ],
            "items" : {
              "type" : "string"
            }
          },
          "variantSetDbIds" : {
            "type" : "array",
            "description" : "A list of IDs which uniquely identify `VariantSets` within the given database server",
            "nullable" : true,
            "example" : [ "8a9a8972", "32a2649a" ],
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "dataFile" : {
        "required" : [ "fileURL" ],
        "type" : "object",
        "properties" : {
          "fileDescription" : {
            "type" : "string",
            "description" : "A human readable description of the file contents",
            "example" : "This is an Excel data file"
          },
          "fileMD5Hash" : {
            "type" : "string",
            "description" : "The MD5 Hash of the file contents to be used as a check sum",
            "example" : "c2365e900c81a89cf74d83dab60df146"
          },
          "fileName" : {
            "type" : "string",
            "description" : "The name of the file",
            "example" : "datafile.xlsx"
          },
          "fileSize" : {
            "type" : "integer",
            "description" : "The size of the file in bytes",
            "example" : 4398
          },
          "fileType" : {
            "type" : "string",
            "description" : "The type or format of the file. Preferably MIME Type.",
            "example" : "application/vnd.ms-excel"
          },
          "fileURL" : {
            "type" : "string",
            "description" : "The absolute URL where the file is located",
            "format" : "uri",
            "example" : "https://wiki.brapi.org/examples/datafile.xlsx"
          }
        },
        "description" : "A dataFile contains a URL and the relevant file metadata to represent a file"
      },
      "geoJSON" : {
        "title" : "GeoJSON",
        "type" : "object",
        "properties" : {
          "geometry" : {
            "title" : "GeoJSON Geometry",
            "type" : "object",
            "description" : "A geometry as defined by GeoJSON (RFC 7946). In this context, only Point or Polygon geometry are allowed.",
            "example" : {
              "coordinates" : [ -76.506042, 42.417373, 123 ],
              "type" : "Point"
            },
            "discriminator" : {
              "propertyName" : "type",
              "mapping" : {
                "Point" : "#/components/schemas/pointGeometry",
                "Polygon" : "#/components/schemas/polygonGeometry"
              }
            },
            "oneOf" : [ {
              "required" : [ "coordinates", "type" ],
              "type" : "object",
              "properties" : {
                "coordinates" : {
                  "minItems" : 2,
                  "type" : "array",
                  "description" : "A single position",
                  "example" : [ -76.506042, 42.417373, 123 ],
                  "items" : {
                    "type" : "number"
                  }
                },
                "type" : {
                  "type" : "string",
                  "description" : "The literal string \"Point\"",
                  "example" : "Point",
                  "default" : "Point"
                }
              },
              "description" : "Copied from RFC 7946 Section 3.1.1\n\nA position is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or\neasting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element."
            }, {
              "required" : [ "coordinates", "type" ],
              "type" : "object",
              "properties" : {
                "coordinates" : {
                  "type" : "array",
                  "description" : "An array of linear rings",
                  "example" : [ [ [ -77.456654, 42.241133, 494 ], [ -75.414133, 41.508282, 571 ], [ -76.506042, 42.417373, 123 ], [ -77.456654, 42.241133, 346 ] ] ],
                  "items" : {
                    "minItems" : 4,
                    "type" : "array",
                    "description" : "An array of at least four positions where the first equals the last",
                    "example" : [ [ -77.456654, 42.241133, 494 ], [ -75.414133, 41.508282, 571 ], [ -76.506042, 42.417373, 123 ], [ -77.456654, 42.241133, 346 ] ],
                    "items" : {
                      "minItems" : 2,
                      "type" : "array",
                      "description" : "A single position",
                      "example" : [ -76.506042, 42.417373, 123 ],
                      "items" : {
                        "type" : "number"
                      }
                    }
                  }
                },
                "type" : {
                  "type" : "string",
                  "description" : "The literal string \"Polygon\"",
                  "example" : "Polygon",
                  "default" : "Polygon"
                }
              },
              "description" : "An array of Linear Rings. Each Linear Ring is an array of Points. \n\nA Point is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or\neasting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element."
            } ]
          },
          "type" : {
            "type" : "string",
            "description" : "The literal string \"Feature\"",
            "example" : "Feature",
            "default" : "Feature"
          }
        },
        "description" : "One geometry as defined by GeoJSON (RFC 7946). All coordinates are decimal values on the WGS84 geographic coordinate reference system.\n\nCopied from RFC 7946 Section 3.1.1\n\nA position is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or\neasting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element."
      },
      "geoJSONSearchArea" : {
        "title" : "GeoJSONSearchArea",
        "type" : "object",
        "properties" : {
          "geometry" : {
            "title" : "GeoJSON Geometry",
            "type" : "object",
            "description" : "A geometry as defined by GeoJSON (RFC 7946). In this context, only Point or Polygon geometry are allowed.",
            "example" : {
              "coordinates" : [ -76.506042, 42.417373, 123 ],
              "type" : "Point"
            },
            "discriminator" : {
              "propertyName" : "type",
              "mapping" : {
                "Point" : "#/components/schemas/pointGeometry",
                "Polygon" : "#/components/schemas/polygonGeometry"
              }
            },
            "oneOf" : [ {
              "required" : [ "coordinates", "type" ],
              "type" : "object",
              "properties" : {
                "coordinates" : {
                  "minItems" : 2,
                  "type" : "array",
                  "description" : "A single position",
                  "example" : [ -76.506042, 42.417373, 123 ],
                  "items" : {
                    "type" : "number"
                  }
                },
                "type" : {
                  "type" : "string",
                  "description" : "The literal string \"Point\"",
                  "example" : "Point",
                  "default" : "Point"
                }
              },
              "description" : "Copied from RFC 7946 Section 3.1.1\n\nA position is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or\neasting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element."
            }, {
              "required" : [ "coordinates", "type" ],
              "type" : "object",
              "properties" : {
                "coordinates" : {
                  "type" : "array",
                  "description" : "An array of linear rings",
                  "example" : [ [ [ -77.456654, 42.241133, 494 ], [ -75.414133, 41.508282, 571 ], [ -76.506042, 42.417373, 123 ], [ -77.456654, 42.241133, 346 ] ] ],
                  "items" : {
                    "minItems" : 4,
                    "type" : "array",
                    "description" : "An array of at least four positions where the first equals the last",
                    "example" : [ [ -77.456654, 42.241133, 494 ], [ -75.414133, 41.508282, 571 ], [ -76.506042, 42.417373, 123 ], [ -77.456654, 42.241133, 346 ] ],
                    "items" : {
                      "minItems" : 2,
                      "type" : "array",
                      "description" : "A single position",
                      "example" : [ -76.506042, 42.417373, 123 ],
                      "items" : {
                        "type" : "number"
                      }
                    }
                  }
                },
                "type" : {
                  "type" : "string",
                  "description" : "The literal string \"Polygon\"",
                  "example" : "Polygon",
                  "default" : "Polygon"
                }
              },
              "description" : "An array of Linear Rings. Each Linear Ring is an array of Points. \n\nA Point is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or\neasting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element."
            } ]
          },
          "type" : {
            "type" : "string",
            "description" : "The literal string \"Feature\"",
            "example" : "Feature",
            "default" : "Feature"
          }
        },
        "description" : "A GeoJSON Polygon which describes an area to search for other GeoJSON objects. All contained Points and intersecting Polygons should be returned as search results. \n\nAll coordinates are decimal values on the WGS84 geographic coordinate reference system.",
        "example" : {
          "geometry" : {
            "coordinates" : [ [ [ -77.456654, 42.241133 ], [ -75.414133, 41.508282 ], [ -76.506042, 42.417373 ], [ -77.456654, 42.241133 ] ] ],
            "type" : "Polygon"
          },
          "type" : "Feature"
        }
      },
      "linearRing" : {
        "minItems" : 4,
        "type" : "array",
        "description" : "An array of at least four positions where the first equals the last",
        "example" : [ [ -77.456654, 42.241133, 494 ], [ -75.414133, 41.508282, 571 ], [ -76.506042, 42.417373, 123 ], [ -77.456654, 42.241133, 346 ] ],
        "items" : {
          "minItems" : 2,
          "type" : "array",
          "description" : "A single position",
          "example" : [ -76.506042, 42.417373, 123 ],
          "items" : {
            "type" : "number"
          }
        }
      },
      "metadata" : {
        "type" : "object",
        "properties" : {
          "datafiles" : {
            "type" : "array",
            "description" : "The datafiles contains a list of file URLs and metadata. \nThese files contain additional information related to the returned object and can be retrieved by a subsequent call. \nThis could be a supplementary data file, an informational file, the uploaded file where the data originated from, a generated file representing the whole dataset in a particular format, or any other related file. ",
            "example" : [ ],
            "items" : {
              "required" : [ "fileURL" ],
              "type" : "object",
              "properties" : {
                "fileDescription" : {
                  "type" : "string",
                  "description" : "A human readable description of the file contents",
                  "example" : "This is an Excel data file"
                },
                "fileMD5Hash" : {
                  "type" : "string",
                  "description" : "The MD5 Hash of the file contents to be used as a check sum",
                  "example" : "c2365e900c81a89cf74d83dab60df146"
                },
                "fileName" : {
                  "type" : "string",
                  "description" : "The name of the file",
                  "example" : "datafile.xlsx"
                },
                "fileSize" : {
                  "type" : "integer",
                  "description" : "The size of the file in bytes",
                  "example" : 4398
                },
                "fileType" : {
                  "type" : "string",
                  "description" : "The type or format of the file. Preferably MIME Type.",
                  "example" : "application/vnd.ms-excel"
                },
                "fileURL" : {
                  "type" : "string",
                  "description" : "The absolute URL where the file is located",
                  "format" : "uri",
                  "example" : "https://wiki.brapi.org/examples/datafile.xlsx"
                }
              },
              "description" : "A dataFile contains a URL and the relevant file metadata to represent a file"
            }
          },
          "pagination" : {
            "required" : [ "currentPage", "pageSize" ],
            "type" : "object",
            "properties" : {
              "currentPage" : {
                "type" : "integer",
                "description" : "The index number for the returned page of data. This should always match the requested page number or the default page (0).",
                "example" : 0,
                "default" : 0
              },
              "pageSize" : {
                "type" : "integer",
                "description" : "The number of data elements returned, aka the size of the current page. If the requested page does not have enough elements to fill a page at the requested page size, this field should indicate the actual number of elements returned.",
                "example" : 1000,
                "default" : 1000
              },
              "totalCount" : {
                "type" : "integer",
                "description" : "The total number of elements that are available on the server and match the requested query parameters.",
                "example" : 10
              },
              "totalPages" : {
                "type" : "integer",
                "description" : "The total number of pages of elements available on the server. This should be calculated with the following formula. \n<br> totalPages = CEILING( totalCount / requested_page_size)",
                "example" : 1
              }
            },
            "description" : "The pagination object is applicable only when the payload contains a \"data\" key. It describes the pagination of the data contained in the \"data\" array, as a way to identify which subset of data is being returned. \n<br> Pages are zero indexed, so the first page will be page 0 (zero)."
          },
          "status" : {
            "type" : "array",
            "description" : "The status field contains a list of informational status messages from the server. \nIf no status is reported, an empty list should be returned. See Error Reporting for more information.",
            "items" : {
              "required" : [ "message", "messageType" ],
              "type" : "object",
              "properties" : {
                "message" : {
                  "type" : "string",
                  "description" : "A short message concerning the status of this request/response",
                  "example" : "Request accepted, response successful"
                },
                "messageType" : {
                  "type" : "string",
                  "description" : "The logging level for the attached message",
                  "example" : "INFO",
                  "enum" : [ "DEBUG", "ERROR", "WARNING", "INFO" ]
                }
              },
              "description" : "An array of status messages to convey technical logging information from the server to the client."
            }
          }
        },
        "description" : "An object in the BrAPI standard response model that describes some information about the service call being performed. This includes supplementary data, status log messages, and pagination information."
      },
      "metadataBase" : {
        "type" : "object",
        "properties" : {
          "datafiles" : {
            "type" : "array",
            "description" : "The datafiles contains a list of file URLs and metadata. \nThese files contain additional information related to the returned object and can be retrieved by a subsequent call. \nThis could be a supplementary data file, an informational file, the uploaded file where the data originated from, a generated file representing the whole dataset in a particular format, or any other related file. ",
            "example" : [ ],
            "items" : {
              "required" : [ "fileURL" ],
              "type" : "object",
              "properties" : {
                "fileDescription" : {
                  "type" : "string",
                  "description" : "A human readable description of the file contents",
                  "example" : "This is an Excel data file"
                },
                "fileMD5Hash" : {
                  "type" : "string",
                  "description" : "The MD5 Hash of the file contents to be used as a check sum",
                  "example" : "c2365e900c81a89cf74d83dab60df146"
                },
                "fileName" : {
                  "type" : "string",
                  "description" : "The name of the file",
                  "example" : "datafile.xlsx"
                },
                "fileSize" : {
                  "type" : "integer",
                  "description" : "The size of the file in bytes",
                  "example" : 4398
                },
                "fileType" : {
                  "type" : "string",
                  "description" : "The type or format of the file. Preferably MIME Type.",
                  "example" : "application/vnd.ms-excel"
                },
                "fileURL" : {
                  "type" : "string",
                  "description" : "The absolute URL where the file is located",
                  "format" : "uri",
                  "example" : "https://wiki.brapi.org/examples/datafile.xlsx"
                }
              },
              "description" : "A dataFile contains a URL and the relevant file metadata to represent a file"
            }
          },
          "status" : {
            "type" : "array",
            "description" : "The status field contains a list of informational status messages from the server. \nIf no status is reported, an empty list should be returned. See Error Reporting for more information.",
            "items" : {
              "required" : [ "message", "messageType" ],
              "type" : "object",
              "properties" : {
                "message" : {
                  "type" : "string",
                  "description" : "A short message concerning the status of this request/response",
                  "example" : "Request accepted, response successful"
                },
                "messageType" : {
                  "type" : "string",
                  "description" : "The logging level for the attached message",
                  "example" : "INFO",
                  "enum" : [ "DEBUG", "ERROR", "WARNING", "INFO" ]
                }
              },
              "description" : "An array of status messages to convey technical logging information from the server to the client."
            }
          }
        },
        "description" : "An object in the BrAPI standard response model that describes some information about the service call being performed. This includes supplementary data, status log messages, and pagination information."
      },
      "metadataTokenPagination" : {
        "type" : "object",
        "properties" : {
          "datafiles" : {
            "type" : "array",
            "description" : "The datafiles contains a list of file URLs and metadata. \nThese files contain additional information related to the returned object and can be retrieved by a subsequent call. \nThis could be a supplementary data file, an informational file, the uploaded file where the data originated from, a generated file representing the whole dataset in a particular format, or any other related file. ",
            "example" : [ ],
            "items" : {
              "required" : [ "fileURL" ],
              "type" : "object",
              "properties" : {
                "fileDescription" : {
                  "type" : "string",
                  "description" : "A human readable description of the file contents",
                  "example" : "This is an Excel data file"
                },
                "fileMD5Hash" : {
                  "type" : "string",
                  "description" : "The MD5 Hash of the file contents to be used as a check sum",
                  "example" : "c2365e900c81a89cf74d83dab60df146"
                },
                "fileName" : {
                  "type" : "string",
                  "description" : "The name of the file",
                  "example" : "datafile.xlsx"
                },
                "fileSize" : {
                  "type" : "integer",
                  "description" : "The size of the file in bytes",
                  "example" : 4398
                },
                "fileType" : {
                  "type" : "string",
                  "description" : "The type or format of the file. Preferably MIME Type.",
                  "example" : "application/vnd.ms-excel"
                },
                "fileURL" : {
                  "type" : "string",
                  "description" : "The absolute URL where the file is located",
                  "format" : "uri",
                  "example" : "https://wiki.brapi.org/examples/datafile.xlsx"
                }
              },
              "description" : "A dataFile contains a URL and the relevant file metadata to represent a file"
            }
          },
          "pagination" : {
            "required" : [ "currentPage", "nextPageToken", "pageSize" ],
            "type" : "object",
            "properties" : {
              "currentPage" : {
                "type" : "integer",
                "description" : "The index number for the returned page of data. This should always match the requested page number or the default page (0).",
                "example" : 0,
                "default" : 0
              },
              "currentPageToken" : {
                "type" : "string",
                "description" : "**Deprecated in v2.1** Please use `page`. Github issue number #451 \n<br>The string token used to query the current page of data.",
                "example" : "48bc6ac1",
                "deprecated" : true
              },
              "nextPageToken" : {
                "type" : "string",
                "description" : "**Deprecated in v2.1** Please use `page`. Github issue number #451 \n<br>The string token used to query the next page of data.",
                "example" : "cb668f63",
                "deprecated" : true
              },
              "pageSize" : {
                "type" : "integer",
                "description" : "The number of data elements returned, aka the size of the current page. If the requested page does not have enough elements to fill a page at the requested page size, this field should indicate the actual number of elements returned.",
                "example" : 1000,
                "default" : 1000
              },
              "prevPageToken" : {
                "type" : "string",
                "description" : "**Deprecated in v2.1** Please use `page`. Github issue number #451 \n<br>The string token used to query the previous page of data.",
                "example" : "9659857e",
                "deprecated" : true
              },
              "totalCount" : {
                "type" : "integer",
                "description" : "The total number of elements that are available on the server and match the requested query parameters.",
                "example" : 10
              },
              "totalPages" : {
                "type" : "integer",
                "description" : "The total number of pages of elements available on the server. This should be calculated with the following formula. \n<br> totalPages = CEILING( totalCount / requested_page_size)",
                "example" : 1
              }
            },
            "description" : "**Deprecated in v2.1** Please use `page`. Github issue number #451 \n<br>The pagination object is applicable only when the payload contains a \"data\" key. It describes the pagination of the data contained in the \"data\" array, as a way to identify which subset of data is being returned. \n<br>Tokenized pages are for large data sets which can not be efficiently broken into indexed pages. Use the nextPageToken and prevPageToken to construct an additional query and move to the next or previous page respectively.  ",
            "example" : {
              "currentPage" : 0,
              "pageSize" : 1000,
              "totalCount" : 10,
              "totalPages" : 1
            }
          },
          "status" : {
            "type" : "array",
            "description" : "The status field contains a list of informational status messages from the server. \nIf no status is reported, an empty list should be returned. See Error Reporting for more information.",
            "items" : {
              "required" : [ "message", "messageType" ],
              "type" : "object",
              "properties" : {
                "message" : {
                  "type" : "string",
                  "description" : "A short message concerning the status of this request/response",
                  "example" : "Request accepted, response successful"
                },
                "messageType" : {
                  "type" : "string",
                  "description" : "The logging level for the attached message",
                  "example" : "INFO",
                  "enum" : [ "DEBUG", "ERROR", "WARNING", "INFO" ]
                }
              },
              "description" : "An array of status messages to convey technical logging information from the server to the client."
            }
          }
        },
        "description" : "An object in the BrAPI standard response model that describes some information about the service call being performed. This includes supplementary data, status log messages, and pagination information."
      },
      "pointGeometry" : {
        "required" : [ "coordinates", "type" ],
        "type" : "object",
        "properties" : {
          "coordinates" : {
            "minItems" : 2,
            "type" : "array",
            "description" : "A single position",
            "example" : [ -76.506042, 42.417373, 123 ],
            "items" : {
              "type" : "number"
            }
          },
          "type" : {
            "type" : "string",
            "description" : "The literal string \"Point\"",
            "example" : "Point",
            "default" : "Point"
          }
        },
        "description" : "Copied from RFC 7946 Section 3.1.1\n\nA position is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or\neasting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element."
      },
      "polygon" : {
        "type" : "array",
        "description" : "An array of linear rings",
        "example" : [ [ [ -77.456654, 42.241133, 494 ], [ -75.414133, 41.508282, 571 ], [ -76.506042, 42.417373, 123 ], [ -77.456654, 42.241133, 346 ] ] ],
        "items" : {
          "minItems" : 4,
          "type" : "array",
          "description" : "An array of at least four positions where the first equals the last",
          "example" : [ [ -77.456654, 42.241133, 494 ], [ -75.414133, 41.508282, 571 ], [ -76.506042, 42.417373, 123 ], [ -77.456654, 42.241133, 346 ] ],
          "items" : {
            "minItems" : 2,
            "type" : "array",
            "description" : "A single position",
            "example" : [ -76.506042, 42.417373, 123 ],
            "items" : {
              "type" : "number"
            }
          }
        }
      },
      "polygonGeometry" : {
        "required" : [ "coordinates", "type" ],
        "type" : "object",
        "properties" : {
          "coordinates" : {
            "type" : "array",
            "description" : "An array of linear rings",
            "example" : [ [ [ -77.456654, 42.241133, 494 ], [ -75.414133, 41.508282, 571 ], [ -76.506042, 42.417373, 123 ], [ -77.456654, 42.241133, 346 ] ] ],
            "items" : {
              "minItems" : 4,
              "type" : "array",
              "description" : "An array of at least four positions where the first equals the last",
              "example" : [ [ -77.456654, 42.241133, 494 ], [ -75.414133, 41.508282, 571 ], [ -76.506042, 42.417373, 123 ], [ -77.456654, 42.241133, 346 ] ],
              "items" : {
                "minItems" : 2,
                "type" : "array",
                "description" : "A single position",
                "example" : [ -76.506042, 42.417373, 123 ],
                "items" : {
                  "type" : "number"
                }
              }
            }
          },
          "type" : {
            "type" : "string",
            "description" : "The literal string \"Polygon\"",
            "example" : "Polygon",
            "default" : "Polygon"
          }
        },
        "description" : "An array of Linear Rings. Each Linear Ring is an array of Points. \n\nA Point is an array of numbers. There MUST be two or more elements. The first two elements are longitude and latitude, or\neasting and northing, precisely in that order and using decimal numbers. Altitude or elevation MAY be included as an optional third element."
      },
      "position" : {
        "minItems" : 2,
        "type" : "array",
        "description" : "A single position",
        "example" : [ -76.506042, 42.417373, 123 ],
        "items" : {
          "type" : "number"
        }
      },
      "status" : {
        "required" : [ "message", "messageType" ],
        "type" : "object",
        "properties" : {
          "message" : {
            "type" : "string",
            "description" : "A short message concerning the status of this request/response",
            "example" : "Request accepted, response successful"
          },
          "messageType" : {
            "type" : "string",
            "description" : "The logging level for the attached message",
            "example" : "INFO",
            "enum" : [ "DEBUG", "ERROR", "WARNING", "INFO" ]
          }
        },
        "description" : "An array of status messages to convey technical logging information from the server to the client."
      },
      "tokenPagination" : {
        "required" : [ "currentPage", "nextPageToken", "pageSize" ],
        "type" : "object",
        "properties" : {
          "currentPage" : {
            "type" : "integer",
            "description" : "The index number for the returned page of data. This should always match the requested page number or the default page (0).",
            "example" : 0,
            "default" : 0
          },
          "currentPageToken" : {
            "type" : "string",
            "description" : "**Deprecated in v2.1** Please use `page`. Github issue number #451 \n<br>The string token used to query the current page of data.",
            "example" : "48bc6ac1",
            "deprecated" : true
          },
          "nextPageToken" : {
            "type" : "string",
            "description" : "**Deprecated in v2.1** Please use `page`. Github issue number #451 \n<br>The string token used to query the next page of data.",
            "example" : "cb668f63",
            "deprecated" : true
          },
          "pageSize" : {
            "type" : "integer",
            "description" : "The number of data elements returned, aka the size of the current page. If the requested page does not have enough elements to fill a page at the requested page size, this field should indicate the actual number of elements returned.",
            "example" : 1000,
            "default" : 1000
          },
          "prevPageToken" : {
            "type" : "string",
            "description" : "**Deprecated in v2.1** Please use `page`. Github issue number #451 \n<br>The string token used to query the previous page of data.",
            "example" : "9659857e",
            "deprecated" : true
          },
          "totalCount" : {
            "type" : "integer",
            "description" : "The total number of elements that are available on the server and match the requested query parameters.",
            "example" : 10
          },
          "totalPages" : {
            "type" : "integer",
            "description" : "The total number of pages of elements available on the server. This should be calculated with the following formula. \n<br> totalPages = CEILING( totalCount / requested_page_size)",
            "example" : 1
          }
        },
        "description" : "**Deprecated in v2.1** Please use `page`. Github issue number #451 \n<br>The pagination object is applicable only when the payload contains a \"data\" key. It describes the pagination of the data contained in the \"data\" array, as a way to identify which subset of data is being returned. \n<br>Tokenized pages are for large data sets which can not be efficiently broken into indexed pages. Use the nextPageToken and prevPageToken to construct an additional query and move to the next or previous page respectively.  ",
        "example" : {
          "currentPage" : 0,
          "pageSize" : 1000,
          "totalCount" : 10,
          "totalPages" : 1
        }
      },
      "variantsSearchRequest" : {
        "type" : "object",
        "properties" : {
          "callSetDbIds" : {
            "type" : "array",
            "description" : "**Deprecated in v2.1** Parameter unnecessary. Github issue number #474 \n<br/>Only return variant calls which belong to call sets with these IDs. If unspecified, return all variants and no variant call objects.",
            "nullable" : true,
            "example" : [ "4639fe3e", "b60d900b" ],
            "deprecated" : true,
            "items" : {
              "type" : "string"
            }
          },
          "commonCropNames" : {
            "type" : "array",
            "description" : "The BrAPI Common Crop Name is the simple, generalized, widely accepted name of the organism being researched. It is most often used in multi-crop systems where digital resources need to be divided at a high level. Things like 'Maize', 'Wheat', and 'Rice' are examples of common crop names.\n\nUse this parameter to only return results associated with the given crops. \n\nUse `GET /commoncropnames` to find the list of available crops on a server.",
            "example" : [ "Tomatillo", "Paw Paw" ],
            "items" : {
              "type" : "string"
            }
          },
          "end" : {
            "type" : "integer",
            "description" : "The end of the window (0-based, exclusive) for which overlapping variants should be returned.",
            "nullable" : true,
            "example" : 1500
          },
          "externalReferenceIDs" : {
            "type" : "array",
            "description" : "**Deprecated in v2.1** Please use `externalReferenceIds`. Github issue number #460 \n<br>List of external reference IDs. Could be a simple strings or a URIs. (use with `externalReferenceSources` parameter)",
            "example" : [ "doi:10.155454/12341234", "14a19841" ],
            "deprecated" : true,
            "items" : {
              "type" : "string"
            }
          },
          "externalReferenceIds" : {
            "type" : "array",
            "description" : "List of external reference IDs. Could be a simple strings or a URIs. (use with `externalReferenceSources` parameter)",
            "example" : [ "doi:10.155454/12341234", "14a19841" ],
            "items" : {
              "type" : "string"
            }
          },
          "externalReferenceSources" : {
            "type" : "array",
            "description" : "List of identifiers for the source system or database of an external reference (use with `externalReferenceIDs` parameter)",
            "example" : [ "DOI", "Field App Name" ],
            "items" : {
              "type" : "string"
            }
          },
          "page" : {
            "type" : "integer",
            "description" : "Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.",
            "example" : 0
          },
          "pageSize" : {
            "type" : "integer",
            "description" : "The size of the pages to be returned. Default is `1000`.",
            "example" : 1000
          },
          "pageToken" : {
            "type" : "string",
            "description" : "**Deprecated in v2.1** Please use `page`. Github issue number #451 \n<br>Used to request a specific page of data to be returned.\n<br>Tokenized pages are for large data sets which can not be efficiently broken into indexed pages. Use the nextPageToken and prevPageToken from a prior response to construct a query and move to the next or previous page respectively. ",
            "example" : "33c27874",
            "deprecated" : true
          },
          "programDbIds" : {
            "type" : "array",
            "description" : "A BrAPI Program represents the high level organization or group who is responsible for conducting trials and studies. Things like Breeding Programs and Funded Projects are considered BrAPI Programs. \n\nUse this parameter to only return results associated with the given programs. \n\nUse `GET /programs` to find the list of available programs on a server.",
            "example" : [ "8f5de35b", "0e2d4a13" ],
            "items" : {
              "type" : "string"
            }
          },
          "programNames" : {
            "type" : "array",
            "description" : "Use this parameter to only return results associated with the given program names. Program names are not required to be unique.\n\nUse `GET /programs` to find the list of available programs on a server.",
            "example" : [ "Better Breeding Program", "Best Breeding Program" ],
            "items" : {
              "type" : "string"
            }
          },
          "referenceDbId" : {
            "type" : "string",
            "description" : "**Deprecated in v2.1** Please use `referenceDbIds`. Github issue number #472\n<br/>Only return variants on this reference.",
            "nullable" : true,
            "example" : "120a2d5c",
            "deprecated" : true
          },
          "referenceDbIds" : {
            "type" : "array",
            "description" : "The unique identifier representing a genotype `Reference`",
            "nullable" : true,
            "example" : [ "89ab4d17", "74d3b63d" ],
            "items" : {
              "type" : "string"
            }
          },
          "referenceSetDbIds" : {
            "type" : "array",
            "description" : "The unique identifier representing a genotype `ReferenceSet`",
            "nullable" : true,
            "example" : [ "d3b63d4d", "3b63d74b" ],
            "items" : {
              "type" : "string"
            }
          },
          "start" : {
            "type" : "integer",
            "description" : "The beginning of the window (0-based, inclusive) for which overlapping variants should be returned. Genomic positions are non-negative integers less than reference length. Requests spanning the join of circular genomes are represented as two requests one on each side of the join (position 0).",
            "nullable" : true,
            "example" : 100
          },
          "studyDbIds" : {
            "type" : "array",
            "description" : "List of study identifiers to search for",
            "example" : [ "cf6c4bd4", "691e69d6" ],
            "items" : {
              "type" : "string"
            }
          },
          "studyNames" : {
            "type" : "array",
            "description" : "List of study names to filter search results",
            "example" : [ "The First Bob Study 2017", "Wheat Yield Trial 246" ],
            "items" : {
              "type" : "string"
            }
          },
          "trialDbIds" : {
            "type" : "array",
            "description" : "The ID which uniquely identifies a trial to search for",
            "example" : [ "d2593dc2", "9431a731" ],
            "items" : {
              "type" : "string"
            }
          },
          "trialNames" : {
            "type" : "array",
            "description" : "The human readable name of a trial to search for",
            "example" : [ "All Yield Trials 2016", "Disease Resistance Study Comparison Group" ],
            "items" : {
              "type" : "string"
            }
          },
          "variantDbIds" : {
            "type" : "array",
            "description" : "A list of IDs which uniquely identify `Variants`",
            "nullable" : true,
            "example" : [ "3b63d889", "ab4d174d" ],
            "items" : {
              "type" : "string"
            }
          },
          "variantSetDbIds" : {
            "type" : "array",
            "description" : "A list of IDs which uniquely identify `VariantSets`",
            "nullable" : true,
            "example" : [ "ba63d810", "434d1760" ],
            "items" : {
              "type" : "string"
            }
          }
        }
      }
    },
    "responses" : {
      "202AcceptedSearchResponse" : {
        "description" : "Accepted",
        "content" : {
          "application/json" : {
            "schema" : {
              "title" : "202AcceptedSearchResponse",
              "type" : "object",
              "properties" : {
                "@context" : {
                  "$ref" : "#/components/schemas/Context"
                },
                "metadata" : {
                  "$ref" : "#/components/schemas/metadata"
                },
                "result" : {
                  "type" : "object",
                  "properties" : {
                    "searchResultsDbId" : {
                      "type" : "string",
                      "example" : "551ae08c"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "400BadRequest" : {
        "description" : "Bad Request",
        "content" : {
          "application/json" : {
            "schema" : {
              "type" : "string"
            },
            "example" : "ERROR - 2018-10-08T18:15:11Z - Malformed JSON Request Object\n\nERROR - 2018-10-08T18:15:11Z - Invalid query parameter\n\nERROR - 2018-10-08T18:15:11Z - Required parameter is missing"
          }
        }
      },
      "401Unauthorized" : {
        "description" : "Unauthorized",
        "content" : {
          "application/json" : {
            "schema" : {
              "type" : "string"
            },
            "example" : "ERROR - 2018-10-08T18:15:11Z - Missing or expired authorization token"
          }
        }
      },
      "403Forbidden" : {
        "description" : "Forbidden",
        "content" : {
          "application/json" : {
            "schema" : {
              "type" : "string"
            },
            "example" : "ERROR - 2018-10-08T18:15:11Z - User does not have permission to perform this action"
          }
        }
      },
      "404NotFound" : {
        "description" : "Not Found",
        "content" : {
          "application/json" : {
            "schema" : {
              "type" : "string"
            },
            "example" : "ERROR - 2018-10-08T18:15:11Z - The requested object DbId is not found"
          }
        }
      },
      "AlleleMatrixResponse" : {
        "description" : "OK",
        "content" : {
          "application/json" : {
            "schema" : {
              "title" : "AlleleMatrixResponse",
              "required" : [ "metadata", "result" ],
              "type" : "object",
              "properties" : {
                "@context" : {
                  "$ref" : "#/components/schemas/Context"
                },
                "metadata" : {
                  "$ref" : "#/components/schemas/metadata"
                },
                "result" : {
                  "$ref" : "#/components/schemas/AlleleMatrix"
                }
              }
            }
          }
        }
      },
      "CallSetsListResponse" : {
        "description" : "OK",
        "content" : {
          "application/json" : {
            "schema" : {
              "title" : "CallSetsListResponse",
              "required" : [ "metadata", "result" ],
              "type" : "object",
              "properties" : {
                "@context" : {
                  "$ref" : "#/components/schemas/Context"
                },
                "metadata" : {
                  "$ref" : "#/components/schemas/metadata"
                },
                "result" : {
                  "title" : "CallSetsListResponseResult",
                  "required" : [ "data" ],
                  "type" : "object",
                  "properties" : {
                    "data" : {
                      "type" : "array",
                      "description" : "The `data` array is part of the BrAPI standard List Response JSON container. `data` will always contain the primary list of objects being returned by a BrAPI endpoint. `data` is also the only array impacted by the `metadata.pagination` details. When the pagination parameters change, the `data` array will reflect those changes in the JSON response.",
                      "items" : {
                        "$ref" : "#/components/schemas/CallSet"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "CallsListResponse" : {
        "description" : "OK",
        "content" : {
          "application/json" : {
            "schema" : {
              "title" : "CallsListResponse",
              "required" : [ "metadata", "result" ],
              "type" : "object",
              "properties" : {
                "@context" : {
                  "$ref" : "#/components/schemas/Context"
                },
                "metadata" : {
                  "$ref" : "#/components/schemas/metadataTokenPagination"
                },
                "result" : {
                  "required" : [ "data" ],
                  "type" : "object",
                  "properties" : {
                    "data" : {
                      "type" : "array",
                      "description" : "The `data` array is part of the BrAPI standard List Response JSON container. `data` will always contain the primary list of objects being returned by a BrAPI endpoint. `data` is also the only array impacted by the `metadata.pagination` details. When the pagination parameters change, the `data` array will reflect those changes in the JSON response.",
                      "items" : {
                        "$ref" : "#/components/schemas/Call"
                      }
                    },
                    "expandHomozygotes" : {
                      "type" : "boolean",
                      "description" : "Should homozygotes be expanded (true) or collapsed into a single occurrence (false)",
                      "nullable" : true,
                      "example" : true
                    },
                    "sepPhased" : {
                      "type" : "string",
                      "description" : "The string used as a separator for phased allele calls.",
                      "nullable" : true,
                      "example" : "|"
                    },
                    "sepUnphased" : {
                      "type" : "string",
                      "description" : "The string used as a separator for unphased allele calls.",
                      "nullable" : true,
                      "example" : "/"
                    },
                    "unknownString" : {
                      "type" : "string",
                      "description" : "The string used as a representation for missing data.",
                      "nullable" : true,
                      "example" : "."
                    }
                  }
                }
              }
            }
          }
        }
      },
      "CrossesListResponse" : {
        "description" : "OK",
        "content" : {
          "application/json" : {
            "schema" : {
              "title" : "CrossesListResponse",
              "required" : [ "metadata", "result" ],
              "type" : "object",
              "properties" : {
                "@context" : {
                  "$ref" : "#/components/schemas/Context"
                },
                "metadata" : {
                  "$ref" : "#/components/schemas/metadata"
                },
                "result" : {
                  "required" : [ "data" ],
                  "type" : "object",
                  "properties" : {
                    "data" : {
                      "type" : "array",
                      "description" : "The `data` array is part of the BrAPI standard List Response JSON container. `data` will always contain the primary list of objects being returned by a BrAPI endpoint. `data` is also the only array impacted by the `metadata.pagination` details. When the pagination parameters change, the `data` array will reflect those changes in the JSON response.",
                      "items" : {
                        "$ref" : "#/components/schemas/Cross"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "CrossingProjectsListResponse" : {
        "description" : "OK",
        "content" : {
          "application/json" : {
            "schema" : {
              "title" : "CrossingProjectsListResponse",
              "required" : [ "metadata", "result" ],
              "type" : "object",
              "properties" : {
                "@context" : {
                  "$ref" : "#/components/schemas/Context"
                },
                "metadata" : {
                  "$ref" : "#/components/schemas/metadata"
                },
                "result" : {
                  "required" : [ "data" ],
                  "type" : "object",
                  "properties" : {
                    "data" : {
                      "type" : "array",
                      "description" : "The `data` array is part of the BrAPI standard List Response JSON container. `data` will always contain the primary list of objects being returned by a BrAPI endpoint. `data` is also the only array impacted by the `metadata.pagination` details. When the pagination parameters change, the `data` array will reflect those changes in the JSON response.",
                      "items" : {
                        "$ref" : "#/components/schemas/CrossingProject"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "CrossingProjectsSingleResponse" : {
        "description" : "OK",
        "content" : {
          "application/json" : {
            "schema" : {
              "title" : "CrossingProjectsSingleResponse",
              "required" : [ "metadata", "result" ],
              "type" : "object",
              "properties" : {
                "@context" : {
                  "$ref" : "#/components/schemas/Context"
                },
                "metadata" : {
                  "$ref" : "#/components/schemas/metadata"
                },
                "result" : {
                  "$ref" : "#/components/schemas/CrossingProject"
                }
              }
            }
          }
        }
      },
      "GermplasmAttributeListResponse" : {
        "description" : "OK",
        "content" : {
          "application/json" : {
            "schema" : {
              "title" : "GermplasmAttributeListResponse",
              "required" : [ "metadata", "result" ],
              "type" : "object",
              "properties" : {
                "@context" : {
                  "$ref" : "#/components/schemas/Context"
                },
                "metadata" : {
                  "$ref" : "#/components/schemas/metadata"
                },
                "result" : {
                  "required" : [ "data" ],
                  "type" : "object",
                  "properties" : {
                    "data" : {
                      "type" : "array",
                      "description" : "The `data` array is part of the BrAPI standard List Response JSON container. `data` will always contain the primary list of objects being returned by a BrAPI endpoint. `data` is also the only array impacted by the `metadata.pagination` details. When the pagination parameters change, the `data` array will reflect those changes in the JSON response.",
                      "items" : {
                        "$ref" : "#/components/schemas/GermplasmAttribute"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "GermplasmAttributeSingleResponse" : {
        "description" : "OK",
        "content" : {
          "application/json" : {
            "schema" : {
              "title" : "GermplasmAttributeSingleResponse",
              "required" : [ "metadata", "result" ],
              "type" : "object",
              "properties" : {
                "@context" : {
                  "$ref" : "#/components/schemas/Context"
                },
                "metadata" : {
                  "$ref" : "#/components/schemas/metadata"
                },
                "result" : {
                  "$ref" : "#/components/schemas/GermplasmAttribute"
                }
              }
            }
          }
        }
      },
      "GermplasmAttributeValueListResponse" : {
        "description" : "OK",
        "content" : {
          "application/json" : {
            "schema" : {
              "title" : "GermplasmAttributeValueListResponse",
              "required" : [ "metadata", "result" ],
              "type" : "object",
              "properties" : {
                "@context" : {
                  "$ref" : "#/components/schemas/Context"
                },
                "metadata" : {
                  "$ref" : "#/components/schemas/metadata"
                },
                "result" : {
                  "required" : [ "data" ],
                  "type" : "object",
                  "properties" : {
                    "data" : {
                      "type" : "array",
                      "description" : "The `data` array is part of the BrAPI standard List Response JSON container. `data` will always contain the primary list of objects being returned by a BrAPI endpoint. `data` is also the only array impacted by the `metadata.pagination` details. When the pagination parameters change, the `data` array will reflect those changes in the JSON response.",
                      "items" : {
                        "$ref" : "#/components/schemas/GermplasmAttributeValue"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "GermplasmAttributeValueSingleResponse" : {
        "description" : "OK",
        "content" : {
          "application/json" : {
            "schema" : {
              "title" : "GermplasmAttributeValueSingleResponse",
              "required" : [ "metadata", "result" ],
              "type" : "object",
              "properties" : {
                "@context" : {
                  "$ref" : "#/components/schemas/Context"
                },
                "metadata" : {
                  "$ref" : "#/components/schemas/metadata"
                },
                "result" : {
                  "$ref" : "#/components/schemas/GermplasmAttributeValue"
                }
              }
            }
          }
        }
      },
      "GermplasmListResponse" : {
        "description" : "OK",
        "content" : {
          "application/json" : {
            "schema" : {
              "title" : "GermplasmListResponse",
              "required" : [ "metadata", "result" ],
              "type" : "object",
              "properties" : {
                "@context" : {
                  "$ref" : "#/components/schemas/Context"
                },
                "metadata" : {
                  "$ref" : "#/components/schemas/metadata"
                },
                "result" : {
                  "required" : [ "data" ],
                  "type" : "object",
                  "properties" : {
                    "data" : {
                      "type" : "array",
                      "description" : "The `data` array is part of the BrAPI standard List Response JSON container. `data` will always contain the primary list of objects being returned by a BrAPI endpoint. `data` is also the only array impacted by the `metadata.pagination` details. When the pagination parameters change, the `data` array will reflect those changes in the JSON response.",
                      "items" : {
                        "$ref" : "#/components/schemas/Germplasm"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "GermplasmSingleResponse" : {
        "description" : "OK",
        "content" : {
          "application/json" : {
            "schema" : {
              "title" : "GermplasmSingleResponse",
              "required" : [ "metadata", "result" ],
              "type" : "object",
              "properties" : {
                "@context" : {
                  "$ref" : "#/components/schemas/Context"
                },
                "metadata" : {
                  "$ref" : "#/components/schemas/metadata"
                },
                "result" : {
                  "$ref" : "#/components/schemas/Germplasm"
                }
              }
            }
          }
        }
      },
      "ImageDeleteResponse" : {
        "description" : "OK",
        "content" : {
          "application/json" : {
            "schema" : {
              "title" : "ImageDeleteResponse",
              "required" : [ "metadata", "result" ],
              "type" : "object",
              "properties" : {
                "@context" : {
                  "$ref" : "#/components/schemas/Context"
                },
                "metadata" : {
                  "$ref" : "#/components/schemas/metadata"
                },
                "result" : {
                  "required" : [ "imageDbIds" ],
                  "type" : "object",
                  "properties" : {
                    "imageDbIds" : {
                      "type" : "array",
                      "description" : "The unique ids of the Image records which have been successfully deleted",
                      "example" : [ "6a4a59d8", "3ff067e0" ],
                      "items" : {
                        "type" : "string"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "ImageListResponse" : {
        "description" : "OK",
        "content" : {
          "application/json" : {
            "schema" : {
              "title" : "ImageListResponse",
              "required" : [ "metadata", "result" ],
              "type" : "object",
              "properties" : {
                "@context" : {
                  "$ref" : "#/components/schemas/Context"
                },
                "metadata" : {
                  "$ref" : "#/components/schemas/metadata"
                },
                "result" : {
                  "required" : [ "data" ],
                  "type" : "object",
                  "properties" : {
                    "data" : {
                      "type" : "array",
                      "description" : "The `data` array is part of the BrAPI standard List Response JSON container. `data` will always contain the primary list of objects being returned by a BrAPI endpoint. `data` is also the only array impacted by the `metadata.pagination` details. When the pagination parameters change, the `data` array will reflect those changes in the JSON response.",
                      "items" : {
                        "$ref" : "#/components/schemas/Image"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "ImageSingleResponse" : {
        "description" : "OK",
        "content" : {
          "application/json" : {
            "schema" : {
              "title" : "ImageSingleResponse",
              "required" : [ "metadata", "result" ],
              "type" : "object",
              "properties" : {
                "@context" : {
                  "$ref" : "#/components/schemas/Context"
                },
                "metadata" : {
                  "$ref" : "#/components/schemas/metadata"
                },
                "result" : {
                  "$ref" : "#/components/schemas/Image"
                }
              }
            }
          }
        }
      },
      "ListsListResponse" : {
        "description" : "OK",
        "content" : {
          "application/json" : {
            "schema" : {
              "title" : "ListsListResponse",
              "required" : [ "metadata", "result" ],
              "type" : "object",
              "properties" : {
                "@context" : {
                  "$ref" : "#/components/schemas/Context"
                },
                "metadata" : {
                  "$ref" : "#/components/schemas/metadata"
                },
                "result" : {
                  "required" : [ "data" ],
                  "type" : "object",
                  "properties" : {
                    "data" : {
                      "type" : "array",
                      "description" : "The `data` array is part of the BrAPI standard List Response JSON container. `data` will always contain the primary list of objects being returned by a BrAPI endpoint. `data` is also the only array impacted by the `metadata.pagination` details. When the pagination parameters change, the `data` array will reflect those changes in the JSON response.",
                      "items" : {
                        "$ref" : "#/components/schemas/ListSummary"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "ListsSingleResponse" : {
        "description" : "OK",
        "content" : {
          "application/json" : {
            "schema" : {
              "title" : "ListsSingleResponse",
              "required" : [ "metadata", "result" ],
              "type" : "object",
              "properties" : {
                "@context" : {
                  "$ref" : "#/components/schemas/Context"
                },
                "metadata" : {
                  "$ref" : "#/components/schemas/metadata"
                },
                "result" : {
                  "$ref" : "#/components/schemas/ListDetails"
                }
              }
            }
          }
        }
      },
      "LocationListResponse" : {
        "description" : "OK",
        "content" : {
          "application/json" : {
            "schema" : {
              "title" : "LocationListResponse",
              "required" : [ "metadata", "result" ],
              "type" : "object",
              "properties" : {
                "@context" : {
                  "$ref" : "#/components/schemas/Context"
                },
                "metadata" : {
                  "$ref" : "#/components/schemas/metadata"
                },
                "result" : {
                  "required" : [ "data" ],
                  "type" : "object",
                  "properties" : {
                    "data" : {
                      "type" : "array",
                      "description" : "The `data` array is part of the BrAPI standard List Response JSON container. `data` will always contain the primary list of objects being returned by a BrAPI endpoint. `data` is also the only array impacted by the `metadata.pagination` details. When the pagination parameters change, the `data` array will reflect those changes in the JSON response.",
                      "items" : {
                        "$ref" : "#/components/schemas/Location"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "LocationSingleResponse" : {
        "description" : "OK",
        "content" : {
          "application/json" : {
            "schema" : {
              "title" : "LocationSingleResponse",
              "required" : [ "metadata", "result" ],
              "type" : "object",
              "properties" : {
                "@context" : {
                  "$ref" : "#/components/schemas/Context"
                },
                "metadata" : {
                  "$ref" : "#/components/schemas/metadata"
                },
                "result" : {
                  "$ref" : "#/components/schemas/Location"
                }
              }
            }
          }
        }
      },
      "MarkerPositionListResponse" : {
        "description" : "OK",
        "content" : {
          "application/json" : {
            "schema" : {
              "title" : "MarkerPositionListResponse",
              "required" : [ "metadata", "result" ],
              "type" : "object",
              "properties" : {
                "@context" : {
                  "$ref" : "#/components/schemas/Context"
                },
                "metadata" : {
                  "$ref" : "#/components/schemas/metadata"
                },
                "result" : {
                  "required" : [ "data" ],
                  "type" : "object",
                  "properties" : {
                    "data" : {
                      "type" : "array",
                      "description" : "The `data` array is part of the BrAPI standard List Response JSON container. `data` will always contain the primary list of objects being returned by a BrAPI endpoint. `data` is also the only array impacted by the `metadata.pagination` details. When the pagination parameters change, the `data` array will reflect those changes in the JSON response.",
                      "items" : {
                        "$ref" : "#/components/schemas/MarkerPosition"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "MethodListResponse" : {
        "description" : "OK",
        "content" : {
          "application/json" : {
            "schema" : {
              "title" : "MethodListResponse",
              "required" : [ "metadata", "result" ],
              "type" : "object",
              "properties" : {
                "@context" : {
                  "$ref" : "#/components/schemas/Context"
                },
                "metadata" : {
                  "$ref" : "#/components/schemas/metadata"
                },
                "result" : {
                  "required" : [ "data" ],
                  "type" : "object",
                  "properties" : {
                    "data" : {
                      "type" : "array",
                      "description" : "The `data` array is part of the BrAPI standard List Response JSON container. `data` will always contain the primary list of objects being returned by a BrAPI endpoint. `data` is also the only array impacted by the `metadata.pagination` details. When the pagination parameters change, the `data` array will reflect those changes in the JSON response.",
                      "items" : {
                        "$ref" : "#/components/schemas/Method"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "MethodSingleResponse" : {
        "description" : "OK",
        "content" : {
          "application/json" : {
            "schema" : {
              "title" : "MethodSingleResponse",
              "required" : [ "metadata", "result" ],
              "type" : "object",
              "properties" : {
                "@context" : {
                  "$ref" : "#/components/schemas/Context"
                },
                "metadata" : {
                  "$ref" : "#/components/schemas/metadata"
                },
                "result" : {
                  "$ref" : "#/components/schemas/Method"
                }
              }
            }
          }
        }
      },
      "ObservationDeleteResponse" : {
        "description" : "OK",
        "content" : {
          "application/json" : {
            "schema" : {
              "title" : "ObservationDeleteResponse",
              "required" : [ "metadata", "result" ],
              "type" : "object",
              "properties" : {
                "@context" : {
                  "$ref" : "#/components/schemas/Context"
                },
                "metadata" : {
                  "$ref" : "#/components/schemas/metadata"
                },
                "result" : {
                  "required" : [ "observationDbIds" ],
                  "type" : "object",
                  "properties" : {
                    "observationDbIds" : {
                      "type" : "array",
                      "description" : "The unique ids of the Observation records which have been successfully deleted",
                      "example" : [ "6a4a59d8", "3ff067e0" ],
                      "items" : {
                        "type" : "string"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "ObservationListResponse" : {
        "description" : "OK",
        "content" : {
          "application/json" : {
            "schema" : {
              "title" : "ObservationListResponse",
              "required" : [ "metadata", "result" ],
              "type" : "object",
              "properties" : {
                "@context" : {
                  "$ref" : "#/components/schemas/Context"
                },
                "metadata" : {
                  "$ref" : "#/components/schemas/metadata"
                },
                "result" : {
                  "required" : [ "data" ],
                  "type" : "object",
                  "properties" : {
                    "data" : {
                      "type" : "array",
                      "description" : "The `data` array is part of the BrAPI standard List Response JSON container. `data` will always contain the primary list of objects being returned by a BrAPI endpoint. `data` is also the only array impacted by the `metadata.pagination` details. When the pagination parameters change, the `data` array will reflect those changes in the JSON response.",
                      "items" : {
                        "$ref" : "#/components/schemas/Observation"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "ObservationSingleResponse" : {
        "description" : "OK",
        "content" : {
          "application/json" : {
            "schema" : {
              "title" : "ObservationSingleResponse",
              "required" : [ "metadata", "result" ],
              "type" : "object",
              "properties" : {
                "@context" : {
                  "$ref" : "#/components/schemas/Context"
                },
                "metadata" : {
                  "$ref" : "#/components/schemas/metadata"
                },
                "result" : {
                  "$ref" : "#/components/schemas/Observation"
                }
              }
            }
          }
        }
      },
      "ObservationTableResponse" : {
        "description" : "OK",
        "content" : {
          "application/json" : {
            "schema" : {
              "title" : "ObservationTableResponse",
              "required" : [ "metadata", "result" ],
              "type" : "object",
              "properties" : {
                "@context" : {
                  "$ref" : "#/components/schemas/Context"
                },
                "metadata" : {
                  "$ref" : "#/components/schemas/metadata"
                },
                "result" : {
                  "$ref" : "#/components/schemas/ObservationTable"
                }
              }
            }
          },
          "text/csv" : {
            "schema" : {
              "type" : "string"
            },
            "example" : "\"observationUnitDbId\",\"observationUnitName\",\"studyDbId\",\"studyName\",\"germplasmDbId\",\"germplasmName\",\"positionCoordinateX\",\"positionCoordinateY\",\"year\",\"field\",\"plot\",\"sub-plot\",\"plant\",\"pot\",\"block\",\"entry\",\"rep\",\"f959a77d\",\"8341dee0\",\"84c9fd86\",\"93d80c95\"\n\n\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"Plant height\",\"Carotenoid\",\"Root color\",\"Virus severity\"\n      \n\"2019-09-10T18:13:27.223Z\",\"f3a8a3db\",\"Plant Alpha\",  \"0fe3e48b\",\"2017 Plant Study\",\"06307ec0\",\"A0043001\",\"76.50106681\",\"42.44409301\",\"2017\",\"Field_1\",\"Plot_11\",\"SubPlot_111\",\"Plant_1111\",\"Pot_1111\",\"Block_11\",\"Entry_11\",\"Rep_11\",\"25.3\",\"\", \"\",\"\"\n\n\"2019-09-10T18:14:27.223Z\",\"f3a8a3db\",\"Plant Alpha\",  \"0fe3e48b\",\"2017 Plant Study\",\"06307ec0\",\"A0043001\",\"76.50106681\",\"42.44409301\",\"2017\",\"Field_1\",\"Plot_11\",\"SubPlot_111\",\"Plant_1111\",\"Pot_1111\",\"Block_11\",\"Entry_11\",\"Rep_11\",\"\",    \"3\",\"\",\"\"\n\n\"2019-09-10T18:15:54.868Z\",\"05d1b011\",\"Plant Beta\",   \"0fe3e48b\",\"2017 Plant Study\",\"59d435cd\",\"A0043002\",\"76.50106683\",\"42.44409301\",\"2017\",\"Field_1\",\"Plot_11\",\"SubPlot_112\",\"Plant_1122\",\"Pot_1122\",\"Block_11\",\"Entry_11\",\"Rep_12\",\"27.9\",\"\", \"\",\"\"\n\n\"2019-09-10T18:16:54.868Z\",\"05d1b011\",\"Plant Beta\",   \"0fe3e48b\",\"2017 Plant Study\",\"59d435cd\",\"A0043002\",\"76.50106683\",\"42.44409301\",\"2017\",\"Field_1\",\"Plot_11\",\"SubPlot_112\",\"Plant_1122\",\"Pot_1122\",\"Block_11\",\"Entry_11\",\"Rep_12\",\"\",    \"1\",\"\",\"\"\n\n\"2019-09-10T18:17:34.433Z\",\"67e2d87c\",\"Plant Gamma\",  \"0fe3e48b\",\"2017 Plant Study\",\"06307ec0\",\"A0043001\",\"76.50106681\",\"42.44409356\",\"2017\",\"Field_1\",\"Plot_12\",\"SubPlot_123\",\"Plant_1233\",\"Pot_1233\",\"Block_12\",\"Entry_12\",\"Rep_11\",\"\",    \"3\",\"\",\"\"\n\n\"2019-09-10T18:18:34.433Z\",\"67e2d87c\",\"Plant Gamma\",  \"0fe3e48b\",\"2017 Plant Study\",\"06307ec0\",\"A0043001\",\"76.50106681\",\"42.44409356\",\"2017\",\"Field_1\",\"Plot_12\",\"SubPlot_123\",\"Plant_1233\",\"Pot_1233\",\"Block_12\",\"Entry_12\",\"Rep_11\",\"25.5\",\"\", \"\",\"\"\n\n\"2019-09-10T18:19:15.629Z\",\"d98d0d4c\",\"Plant Epsilon\",\"0fe3e48b\",\"2017 Plant Study\",\"59d435cd\",\"A0043002\",\"76.50106683\",\"42.44409356\",\"2017\",\"Field_1\",\"Plot_12\",\"SubPlot_124\",\"Plant_1244\",\"Pot_1244\",\"Block_12\",\"Entry_12\",\"Rep_12\",\"28.9\",\"\", \"\",\"\"\n\n\"2019-09-10T18:20:15.629Z\",\"d98d0d4c\",\"Plant Epsilon\",\"0fe3e48b\",\"2017 Plant Study\",\"59d435cd\",\"A0043002\",\"76.50106683\",\"42.44409356\",\"2017\",\"Field_1\",\"Plot_12\",\"SubPlot_124\",\"Plant_1244\",\"Pot_1244\",\"Block_12\",\"Entry_12\",\"Rep_12\",\"\",    \"0\",\"\",\"\""
          },
          "text/tsv" : {
            "schema" : {
              "type" : "string"
            },
            "example" : "\"observationUnitDbId\"\\t\"observationUnitName\"\\t\"studyDbId\"\\t\"studyName\"\\t\"germplasmDbId\"\\t\"germplasmName\"\\t\"positionCoordinateX\"\\t\"positionCoordinateY\"\\t\"year\"\\t\"field\"\\t\"plot\"\\t\"sub-plot\"\\t\"plant\"\\t\"pot\"\\t\"block\"\\t\"entry\"\\t\"rep\"\\t\"f959a77d\"\\t\"8341dee0\"\\t\"84c9fd86\"\\t\"93d80c95\"\n\n\"\"\\t\"\"\\t\"\"\\t\"\"\\t\"\"\\t\"\"\\t\"\"\\t\"\"\\t\"\"\\t\"\"\\t\"\"\\t\"\"\\t\"\"\\t\"\"\\t\"\"\\t\"\"\\t\"\"\\t\"Plant height\"\\t\"Carotenoid\"\\t\"Root color\"\\t\"Virus severity\"\n      \n\"2019-09-10T18:13:27.223Z\"\\t\"f3a8a3db\"\\t\"Plant Alpha\"\\t  \"0fe3e48b\"\\t\"2017 Plant Study\"\\t\"06307ec0\"\\t\"A0043001\"\\t\"76.50106681\"\\t\"42.44409301\"\\t\"2017\"\\t\"Field_1\"\\t\"Plot_11\"\\t\"SubPlot_111\"\\t\"Plant_1111\"\\t\"Pot_1111\"\\t\"Block_11\"\\t\"Entry_11\"\\t\"Rep_11\"\\t\"25.3\"\\t\"\"\\t \"\"\\t\"\"\n\n\"2019-09-10T18:14:27.223Z\"\\t\"f3a8a3db\"\\t\"Plant Alpha\"\\t  \"0fe3e48b\"\\t\"2017 Plant Study\"\\t\"06307ec0\"\\t\"A0043001\"\\t\"76.50106681\"\\t\"42.44409301\"\\t\"2017\"\\t\"Field_1\"\\t\"Plot_11\"\\t\"SubPlot_111\"\\t\"Plant_1111\"\\t\"Pot_1111\"\\t\"Block_11\"\\t\"Entry_11\"\\t\"Rep_11\"\\t\"\"\\t    \"3\"\\t\"\"\\t\"\"\n\n\"2019-09-10T18:15:54.868Z\"\\t\"05d1b011\"\\t\"Plant Beta\"\\t   \"0fe3e48b\"\\t\"2017 Plant Study\"\\t\"59d435cd\"\\t\"A0043002\"\\t\"76.50106683\"\\t\"42.44409301\"\\t\"2017\"\\t\"Field_1\"\\t\"Plot_11\"\\t\"SubPlot_112\"\\t\"Plant_1122\"\\t\"Pot_1122\"\\t\"Block_11\"\\t\"Entry_11\"\\t\"Rep_12\"\\t\"27.9\"\\t\"\"\\t \"\"\\t\"\"\n\n\"2019-09-10T18:16:54.868Z\"\\t\"05d1b011\"\\t\"Plant Beta\"\\t   \"0fe3e48b\"\\t\"2017 Plant Study\"\\t\"59d435cd\"\\t\"A0043002\"\\t\"76.50106683\"\\t\"42.44409301\"\\t\"2017\"\\t\"Field_1\"\\t\"Plot_11\"\\t\"SubPlot_112\"\\t\"Plant_1122\"\\t\"Pot_1122\"\\t\"Block_11\"\\t\"Entry_11\"\\t\"Rep_12\"\\t\"\"\\t    \"1\"\\t\"\"\\t\"\"\n\n\"2019-09-10T18:17:34.433Z\"\\t\"67e2d87c\"\\t\"Plant Gamma\"\\t  \"0fe3e48b\"\\t\"2017 Plant Study\"\\t\"06307ec0\"\\t\"A0043001\"\\t\"76.50106681\"\\t\"42.44409356\"\\t\"2017\"\\t\"Field_1\"\\t\"Plot_12\"\\t\"SubPlot_123\"\\t\"Plant_1233\"\\t\"Pot_1233\"\\t\"Block_12\"\\t\"Entry_12\"\\t\"Rep_11\"\\t\"\"\\t    \"3\"\\t\"\"\\t\"\"\n\n\"2019-09-10T18:18:34.433Z\"\\t\"67e2d87c\"\\t\"Plant Gamma\"\\t  \"0fe3e48b\"\\t\"2017 Plant Study\"\\t\"06307ec0\"\\t\"A0043001\"\\t\"76.50106681\"\\t\"42.44409356\"\\t\"2017\"\\t\"Field_1\"\\t\"Plot_12\"\\t\"SubPlot_123\"\\t\"Plant_1233\"\\t\"Pot_1233\"\\t\"Block_12\"\\t\"Entry_12\"\\t\"Rep_11\"\\t\"25.5\"\\t\"\"\\t \"\"\\t\"\"\n\n\"2019-09-10T18:19:15.629Z\"\\t\"d98d0d4c\"\\t\"Plant Epsilon\"\\t\"0fe3e48b\"\\t\"2017 Plant Study\"\\t\"59d435cd\"\\t\"A0043002\"\\t\"76.50106683\"\\t\"42.44409356\"\\t\"2017\"\\t\"Field_1\"\\t\"Plot_12\"\\t\"SubPlot_124\"\\t\"Plant_1244\"\\t\"Pot_1244\"\\t\"Block_12\"\\t\"Entry_12\"\\t\"Rep_12\"\\t\"28.9\"\\t\"\"\\t \"\"\\t\"\"\n\n\"2019-09-10T18:20:15.629Z\"\\t\"d98d0d4c\"\\t\"Plant Epsilon\"\\t\"0fe3e48b\"\\t\"2017 Plant Study\"\\t\"59d435cd\"\\t\"A0043002\"\\t\"76.50106683\"\\t\"42.44409356\"\\t\"2017\"\\t\"Field_1\"\\t\"Plot_12\"\\t\"SubPlot_124\"\\t\"Plant_1244\"\\t\"Pot_1244\"\\t\"Block_12\"\\t\"Entry_12\"\\t\"Rep_12\"\\t\"\"\\t    \"0\"\\t\"\"\\t\"\""
          }
        }
      },
      "ObservationUnitListResponse" : {
        "description" : "OK",
        "content" : {
          "application/json" : {
            "schema" : {
              "title" : "ObservationUnitListResponse",
              "required" : [ "metadata", "result" ],
              "type" : "object",
              "properties" : {
                "@context" : {
                  "$ref" : "#/components/schemas/Context"
                },
                "metadata" : {
                  "$ref" : "#/components/schemas/metadata"
                },
                "result" : {
                  "required" : [ "data" ],
                  "type" : "object",
                  "properties" : {
                    "data" : {
                      "type" : "array",
                      "description" : "The `data` array is part of the BrAPI standard List Response JSON container. `data` will always contain the primary list of objects being returned by a BrAPI endpoint. `data` is also the only array impacted by the `metadata.pagination` details. When the pagination parameters change, the `data` array will reflect those changes in the JSON response.",
                      "items" : {
                        "$ref" : "#/components/schemas/ObservationUnit"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "ObservationUnitSingleResponse" : {
        "description" : "OK",
        "content" : {
          "application/json" : {
            "schema" : {
              "title" : "ObservationUnitSingleResponse",
              "required" : [ "metadata", "result" ],
              "type" : "object",
              "properties" : {
                "@context" : {
                  "$ref" : "#/components/schemas/Context"
                },
                "metadata" : {
                  "$ref" : "#/components/schemas/metadata"
                },
                "result" : {
                  "$ref" : "#/components/schemas/ObservationUnit"
                }
              }
            }
          }
        }
      },
      "ObservationUnitTableResponse" : {
        "description" : "OK",
        "content" : {
          "application/json" : {
            "schema" : {
              "title" : "ObservationUnitTableResponse",
              "required" : [ "metadata", "result" ],
              "type" : "object",
              "properties" : {
                "@context" : {
                  "$ref" : "#/components/schemas/Context"
                },
                "metadata" : {
                  "$ref" : "#/components/schemas/metadata"
                },
                "result" : {
                  "$ref" : "#/components/schemas/ObservationUnitTable"
                }
              }
            }
          },
          "text/csv" : {
            "schema" : {
              "type" : "string"
            },
            "example" : "\"observationUnitDbId\",\"observationUnitName\",\"studyDbId\",\"studyName\",\"germplasmDbId\",\"germplasmName\",\"positionCoordinateX\",\"positionCoordinateY\",\"year\",\"field\",\"plot\",\"sub-plot\",\"plant\",\"pot\",\"block\",\"entry\",\"rep\",\"f959a77d\",\"8341dee0\",\"84c9fd86\"\n\n\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"Plant Height\",\"Virus severity\",\"Carotenoid\"\n\n\"f3a8a3db\",\"Plant Alpha\",  \"0fe3e48b\",\"2017 Plant Study\",\"06307ec0\",\"A0043001\",\"76.50106681\",\"42.44409301\",\"2017\",\"Field_1\",\"Plot_11\",\"SubPlot_111\",\"Plant_1111\",\"Pot_1111\",\"Block_11\",\"Entry_11\",\"Rep_11\",\"25.3\",\"3\",\"50.75\"\n\n\"05d1b011\",\"Plant Beta\",   \"0fe3e48b\",\"2017 Plant Study\",\"59d435cd\",\"A0043002\",\"76.50106683\",\"42.44409301\",\"2017\",\"Field_1\",\"Plot_11\",\"SubPlot_112\",\"Plant_1122\",\"Pot_1122\",\"Block_11\",\"Entry_11\",\"Rep_12\",\"27.9\",\"1\",\"45.345\"\n\n\"67e2d87c\",\"Plant Gamma\",  \"0fe3e48b\",\"2017 Plant Study\",\"06307ec0\",\"A0043001\",\"76.50106681\",\"42.44409356\",\"2017\",\"Field_1\",\"Plot_12\",\"SubPlot_123\",\"Plant_1233\",\"Pot_1233\",\"Block_12\",\"Entry_12\",\"Rep_11\",\"25.5\",\"3\",\"50.76\"\n\n\"d98d0d4c\",\"Plant Epsilon\",\"0fe3e48b\",\"2017 Plant Study\",\"59d435cd\",\"A0043002\",\"76.50106683\",\"42.44409356\",\"2017\",\"Field_1\",\"Plot_12\",\"SubPlot_124\",\"Plant_1244\",\"Pot_1244\",\"Block_12\",\"Entry_12\",\"Rep_12\",\"28.9\",\"0\",\"46.5\""
          },
          "text/tsv" : {
            "schema" : {
              "type" : "string"
            },
            "example" : "\"observationUnitDbId\"\\t\"observationUnitName\"\\t\"studyDbId\"\\t\"studyName\"\\t\"germplasmDbId\"\\t\"germplasmName\"\\t\"positionCoordinateX\"\\t\"positionCoordinateY\"\\t\"year\"\\t\"field\"\\t\"plot\"\\t\"sub-plot\"\\t\"plant\"\\t\"pot\"\\t\"block\"\\t\"entry\"\\t\"rep\"\\t\"f959a77d\"\\t\"8341dee0\"\\t\"84c9fd86\"\n\n\"\"\\t\"\"\\t\"\"\\t\"\"\\t\"\"\\t\"\"\\t\"\"\\t\"\"\\t\"\"\\t\"\"\\t\"\"\\t\"\"\\t\"\"\\t\"\"\\t\"\"\\t\"\"\\t\"\"\\t\"Plant Height\"\\t\"Virus severity\"\\t\"Carotenoid\"\n\n\"f3a8a3db\"\\t\"Plant Alpha\"\\t  \"0fe3e48b\"\\t\"2017 Plant Study\"\\t\"06307ec0\"\\t\"A0043001\"\\t\"76.50106681\"\\t\"42.44409301\"\\t\"2017\"\\t\"Field_1\"\\t\"Plot_11\"\\t\"SubPlot_111\"\\t\"Plant_1111\"\\t\"Pot_1111\"\\t\"Block_11\"\\t\"Entry_11\"\\t\"Rep_11\"\\t\"25.3\"\\t\"3\"\\t\"50.75\"\n\n\"05d1b011\"\\t\"Plant Beta\"\\t   \"0fe3e48b\"\\t\"2017 Plant Study\"\\t\"59d435cd\"\\t\"A0043002\"\\t\"76.50106683\"\\t\"42.44409301\"\\t\"2017\"\\t\"Field_1\"\\t\"Plot_11\"\\t\"SubPlot_112\"\\t\"Plant_1122\"\\t\"Pot_1122\"\\t\"Block_11\"\\t\"Entry_11\"\\t\"Rep_12\"\\t\"27.9\"\\t\"1\"\\t\"45.345\"\n\n\"67e2d87c\"\\t\"Plant Gamma\"\\t  \"0fe3e48b\"\\t\"2017 Plant Study\"\\t\"06307ec0\"\\t\"A0043001\"\\t\"76.50106681\"\\t\"42.44409356\"\\t\"2017\"\\t\"Field_1\"\\t\"Plot_12\"\\t\"SubPlot_123\"\\t\"Plant_1233\"\\t\"Pot_1233\"\\t\"Block_12\"\\t\"Entry_12\"\\t\"Rep_11\"\\t\"25.5\"\\t\"3\"\\t\"50.76\"\n\n\"d98d0d4c\"\\t\"Plant Epsilon\"\\t\"0fe3e48b\"\\t\"2017 Plant Study\"\\t\"59d435cd\"\\t\"A0043002\"\\t\"76.50106683\"\\t\"42.44409356\"\\t\"2017\"\\t\"Field_1\"\\t\"Plot_12\"\\t\"SubPlot_124\"\\t\"Plant_1244\"\\t\"Pot_1244\"\\t\"Block_12\"\\t\"Entry_12\"\\t\"Rep_12\"\\t\"28.9\"\\t\"0\"\\t\"46.5\""
          }
        }
      },
      "ObservationVariableListResponse" : {
        "description" : "OK",
        "content" : {
          "application/json" : {
            "schema" : {
              "title" : "ObservationVariableListResponse",
              "required" : [ "metadata", "result" ],
              "type" : "object",
              "properties" : {
                "@context" : {
                  "$ref" : "#/components/schemas/Context"
                },
                "metadata" : {
                  "$ref" : "#/components/schemas/metadata"
                },
                "result" : {
                  "required" : [ "data" ],
                  "type" : "object",
                  "properties" : {
                    "data" : {
                      "type" : "array",
                      "description" : "The `data` array is part of the BrAPI standard List Response JSON container. `data` will always contain the primary list of objects being returned by a BrAPI endpoint. `data` is also the only array impacted by the `metadata.pagination` details. When the pagination parameters change, the `data` array will reflect those changes in the JSON response.",
                      "items" : {
                        "$ref" : "#/components/schemas/ObservationVariable"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "ObservationVariableSingleResponse" : {
        "description" : "OK",
        "content" : {
          "application/json" : {
            "schema" : {
              "title" : "ObservationVariableSingleResponse",
              "required" : [ "metadata", "result" ],
              "type" : "object",
              "properties" : {
                "@context" : {
                  "$ref" : "#/components/schemas/Context"
                },
                "metadata" : {
                  "$ref" : "#/components/schemas/metadata"
                },
                "result" : {
                  "$ref" : "#/components/schemas/ObservationVariable"
                }
              }
            }
          }
        }
      },
      "OntologyListResponse" : {
        "description" : "OK",
        "content" : {
          "application/json" : {
            "schema" : {
              "title" : "OntologyListResponse",
              "required" : [ "metadata", "result" ],
              "type" : "object",
              "properties" : {
                "@context" : {
                  "$ref" : "#/components/schemas/Context"
                },
                "metadata" : {
                  "$ref" : "#/components/schemas/metadata"
                },
                "result" : {
                  "required" : [ "data" ],
                  "type" : "object",
                  "properties" : {
                    "data" : {
                      "type" : "array",
                      "description" : "The `data` array is part of the BrAPI standard List Response JSON container. `data` will always contain the primary list of objects being returned by a BrAPI endpoint. `data` is also the only array impacted by the `metadata.pagination` details. When the pagination parameters change, the `data` array will reflect those changes in the JSON response.",
                      "items" : {
                        "$ref" : "#/components/schemas/Ontology"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "OntologySingleResponse" : {
        "description" : "OK",
        "content" : {
          "application/json" : {
            "schema" : {
              "title" : "OntologySingleResponse",
              "required" : [ "metadata", "result" ],
              "type" : "object",
              "properties" : {
                "@context" : {
                  "$ref" : "#/components/schemas/Context"
                },
                "metadata" : {
                  "$ref" : "#/components/schemas/metadata"
                },
                "result" : {
                  "$ref" : "#/components/schemas/Ontology"
                }
              }
            }
          }
        }
      },
      "PedigreeListResponse" : {
        "description" : "OK",
        "content" : {
          "application/json" : {
            "schema" : {
              "title" : "PedigreeListResponse",
              "required" : [ "metadata", "result" ],
              "type" : "object",
              "properties" : {
                "@context" : {
                  "$ref" : "#/components/schemas/Context"
                },
                "metadata" : {
                  "$ref" : "#/components/schemas/metadata"
                },
                "result" : {
                  "required" : [ "data" ],
                  "type" : "object",
                  "properties" : {
                    "data" : {
                      "type" : "array",
                      "description" : "The `data` array is part of the BrAPI standard List Response JSON container. `data` will always contain the primary list of objects being returned by a BrAPI endpoint. `data` is also the only array impacted by the `metadata.pagination` details. When the pagination parameters change, the `data` array will reflect those changes in the JSON response.",
                      "items" : {
                        "$ref" : "#/components/schemas/PedigreeNode"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "PersonListResponse" : {
        "description" : "OK",
        "content" : {
          "application/json" : {
            "schema" : {
              "title" : "PersonListResponse",
              "required" : [ "metadata", "result" ],
              "type" : "object",
              "properties" : {
                "@context" : {
                  "$ref" : "#/components/schemas/Context"
                },
                "metadata" : {
                  "$ref" : "#/components/schemas/metadata"
                },
                "result" : {
                  "required" : [ "data" ],
                  "type" : "object",
                  "properties" : {
                    "data" : {
                      "type" : "array",
                      "description" : "The `data` array is part of the BrAPI standard List Response JSON container. `data` will always contain the primary list of objects being returned by a BrAPI endpoint. `data` is also the only array impacted by the `metadata.pagination` details. When the pagination parameters change, the `data` array will reflect those changes in the JSON response.",
                      "items" : {
                        "$ref" : "#/components/schemas/Person"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "PersonSingleResponse" : {
        "description" : "OK",
        "content" : {
          "application/json" : {
            "schema" : {
              "title" : "PersonSingleResponse",
              "required" : [ "metadata", "result" ],
              "type" : "object",
              "properties" : {
                "@context" : {
                  "$ref" : "#/components/schemas/Context"
                },
                "metadata" : {
                  "$ref" : "#/components/schemas/metadata"
                },
                "result" : {
                  "$ref" : "#/components/schemas/Person"
                }
              }
            }
          }
        }
      },
      "PlannedCrossesListResponse" : {
        "description" : "OK",
        "content" : {
          "application/json" : {
            "schema" : {
              "title" : "PlannedCrossesListResponse",
              "required" : [ "metadata", "result" ],
              "type" : "object",
              "properties" : {
                "@context" : {
                  "$ref" : "#/components/schemas/Context"
                },
                "metadata" : {
                  "$ref" : "#/components/schemas/metadata"
                },
                "result" : {
                  "required" : [ "data" ],
                  "type" : "object",
                  "properties" : {
                    "data" : {
                      "type" : "array",
                      "description" : "The `data` array is part of the BrAPI standard List Response JSON container. `data` will always contain the primary list of objects being returned by a BrAPI endpoint. `data` is also the only array impacted by the `metadata.pagination` details. When the pagination parameters change, the `data` array will reflect those changes in the JSON response.",
                      "items" : {
                        "$ref" : "#/components/schemas/PlannedCross"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "PlateListResponse" : {
        "description" : "OK",
        "content" : {
          "application/json" : {
            "schema" : {
              "title" : "PlateListResponse",
              "required" : [ "metadata", "result" ],
              "type" : "object",
              "properties" : {
                "@context" : {
                  "$ref" : "#/components/schemas/Context"
                },
                "metadata" : {
                  "$ref" : "#/components/schemas/metadata"
                },
                "result" : {
                  "required" : [ "data" ],
                  "type" : "object",
                  "properties" : {
                    "data" : {
                      "type" : "array",
                      "description" : "The `data` array is part of the BrAPI standard List Response JSON container. `data` will always contain the primary list of objects being returned by a BrAPI endpoint. `data` is also the only array impacted by the `metadata.pagination` details. When the pagination parameters change, the `data` array will reflect those changes in the JSON response.",
                      "items" : {
                        "$ref" : "#/components/schemas/Plate"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "PlateSingleResponse" : {
        "description" : "OK",
        "content" : {
          "application/json" : {
            "schema" : {
              "title" : "PlateSingleResponse",
              "required" : [ "metadata", "result" ],
              "type" : "object",
              "properties" : {
                "@context" : {
                  "$ref" : "#/components/schemas/Context"
                },
                "metadata" : {
                  "$ref" : "#/components/schemas/metadata"
                },
                "result" : {
                  "$ref" : "#/components/schemas/Plate"
                }
              }
            }
          }
        }
      },
      "ProgramListResponse" : {
        "description" : "OK",
        "content" : {
          "application/json" : {
            "schema" : {
              "title" : "ProgramListResponse",
              "required" : [ "metadata", "result" ],
              "type" : "object",
              "properties" : {
                "@context" : {
                  "$ref" : "#/components/schemas/Context"
                },
                "metadata" : {
                  "$ref" : "#/components/schemas/metadata"
                },
                "result" : {
                  "required" : [ "data" ],
                  "type" : "object",
                  "properties" : {
                    "data" : {
                      "type" : "array",
                      "description" : "The `data` array is part of the BrAPI standard List Response JSON container. `data` will always contain the primary list of objects being returned by a BrAPI endpoint. `data` is also the only array impacted by the `metadata.pagination` details. When the pagination parameters change, the `data` array will reflect those changes in the JSON response.",
                      "items" : {
                        "$ref" : "#/components/schemas/Program"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "ProgramSingleResponse" : {
        "description" : "OK",
        "content" : {
          "application/json" : {
            "schema" : {
              "title" : "ProgramSingleResponse",
              "required" : [ "metadata", "result" ],
              "type" : "object",
              "properties" : {
                "@context" : {
                  "$ref" : "#/components/schemas/Context"
                },
                "metadata" : {
                  "$ref" : "#/components/schemas/metadata"
                },
                "result" : {
                  "$ref" : "#/components/schemas/Program"
                }
              }
            }
          }
        }
      },
      "ReferenceSetsListResponse" : {
        "description" : "OK",
        "content" : {
          "application/json" : {
            "schema" : {
              "title" : "ReferenceSetsListResponse",
              "required" : [ "metadata", "result" ],
              "type" : "object",
              "properties" : {
                "@context" : {
                  "$ref" : "#/components/schemas/Context"
                },
                "metadata" : {
                  "$ref" : "#/components/schemas/metadata"
                },
                "result" : {
                  "title" : "ReferenceSetsListResponseResult",
                  "required" : [ "data" ],
                  "type" : "object",
                  "properties" : {
                    "data" : {
                      "type" : "array",
                      "description" : "The `data` array is part of the BrAPI standard List Response JSON container. `data` will always contain the primary list of objects being returned by a BrAPI endpoint. `data` is also the only array impacted by the `metadata.pagination` details. When the pagination parameters change, the `data` array will reflect those changes in the JSON response.",
                      "items" : {
                        "$ref" : "#/components/schemas/ReferenceSet"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "ReferencesListResponse" : {
        "description" : "OK",
        "content" : {
          "application/json" : {
            "schema" : {
              "title" : "ReferencesListResponse",
              "required" : [ "metadata", "result" ],
              "type" : "object",
              "properties" : {
                "@context" : {
                  "$ref" : "#/components/schemas/Context"
                },
                "metadata" : {
                  "$ref" : "#/components/schemas/metadata"
                },
                "result" : {
                  "title" : "ReferencesListResponseResult",
                  "required" : [ "data" ],
                  "type" : "object",
                  "properties" : {
                    "data" : {
                      "type" : "array",
                      "description" : "The `data` array is part of the BrAPI standard List Response JSON container. `data` will always contain the primary list of objects being returned by a BrAPI endpoint. `data` is also the only array impacted by the `metadata.pagination` details. When the pagination parameters change, the `data` array will reflect those changes in the JSON response.",
                      "items" : {
                        "$ref" : "#/components/schemas/Reference"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "SampleListResponse" : {
        "description" : "OK",
        "content" : {
          "application/json" : {
            "schema" : {
              "title" : "SampleListResponse",
              "required" : [ "metadata", "result" ],
              "type" : "object",
              "properties" : {
                "@context" : {
                  "$ref" : "#/components/schemas/Context"
                },
                "metadata" : {
                  "$ref" : "#/components/schemas/metadata"
                },
                "result" : {
                  "required" : [ "data" ],
                  "type" : "object",
                  "properties" : {
                    "data" : {
                      "type" : "array",
                      "description" : "The `data` array is part of the BrAPI standard List Response JSON container. `data` will always contain the primary list of objects being returned by a BrAPI endpoint. `data` is also the only array impacted by the `metadata.pagination` details. When the pagination parameters change, the `data` array will reflect those changes in the JSON response.",
                      "items" : {
                        "$ref" : "#/components/schemas/Sample"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "SampleSingleResponse" : {
        "description" : "OK",
        "content" : {
          "application/json" : {
            "schema" : {
              "title" : "SampleSingleResponse",
              "required" : [ "metadata", "result" ],
              "type" : "object",
              "properties" : {
                "@context" : {
                  "$ref" : "#/components/schemas/Context"
                },
                "metadata" : {
                  "$ref" : "#/components/schemas/metadata"
                },
                "result" : {
                  "$ref" : "#/components/schemas/Sample"
                }
              }
            }
          }
        }
      },
      "ScaleListResponse" : {
        "description" : "OK",
        "content" : {
          "application/json" : {
            "schema" : {
              "title" : "ScaleListResponse",
              "required" : [ "metadata", "result" ],
              "type" : "object",
              "properties" : {
                "@context" : {
                  "$ref" : "#/components/schemas/Context"
                },
                "metadata" : {
                  "$ref" : "#/components/schemas/metadata"
                },
                "result" : {
                  "required" : [ "data" ],
                  "type" : "object",
                  "properties" : {
                    "data" : {
                      "type" : "array",
                      "description" : "The `data` array is part of the BrAPI standard List Response JSON container. `data` will always contain the primary list of objects being returned by a BrAPI endpoint. `data` is also the only array impacted by the `metadata.pagination` details. When the pagination parameters change, the `data` array will reflect those changes in the JSON response.",
                      "items" : {
                        "$ref" : "#/components/schemas/Scale"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "ScaleSingleResponse" : {
        "description" : "OK",
        "content" : {
          "application/json" : {
            "schema" : {
              "title" : "ScaleSingleResponse",
              "required" : [ "metadata", "result" ],
              "type" : "object",
              "properties" : {
                "@context" : {
                  "$ref" : "#/components/schemas/Context"
                },
                "metadata" : {
                  "$ref" : "#/components/schemas/metadata"
                },
                "result" : {
                  "$ref" : "#/components/schemas/Scale"
                }
              }
            }
          }
        }
      },
      "SeasonListResponse" : {
        "description" : "OK",
        "content" : {
          "application/json" : {
            "schema" : {
              "title" : "SeasonListResponse",
              "required" : [ "metadata", "result" ],
              "type" : "object",
              "properties" : {
                "@context" : {
                  "$ref" : "#/components/schemas/Context"
                },
                "metadata" : {
                  "$ref" : "#/components/schemas/metadata"
                },
                "result" : {
                  "required" : [ "data" ],
                  "type" : "object",
                  "properties" : {
                    "data" : {
                      "type" : "array",
                      "description" : "The `data` array is part of the BrAPI standard List Response JSON container. `data` will always contain the primary list of objects being returned by a BrAPI endpoint. `data` is also the only array impacted by the `metadata.pagination` details. When the pagination parameters change, the `data` array will reflect those changes in the JSON response.",
                      "items" : {
                        "$ref" : "#/components/schemas/Season"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "SeasonSingleResponse" : {
        "description" : "OK",
        "content" : {
          "application/json" : {
            "schema" : {
              "title" : "SeasonSingleResponse",
              "required" : [ "metadata", "result" ],
              "type" : "object",
              "properties" : {
                "@context" : {
                  "$ref" : "#/components/schemas/Context"
                },
                "metadata" : {
                  "$ref" : "#/components/schemas/metadata"
                },
                "result" : {
                  "$ref" : "#/components/schemas/Season"
                }
              }
            }
          }
        }
      },
      "SeedLotListResponse" : {
        "description" : "OK",
        "content" : {
          "application/json" : {
            "schema" : {
              "title" : "SeedLotListResponse",
              "required" : [ "metadata", "result" ],
              "type" : "object",
              "properties" : {
                "@context" : {
                  "$ref" : "#/components/schemas/Context"
                },
                "metadata" : {
                  "$ref" : "#/components/schemas/metadata"
                },
                "result" : {
                  "required" : [ "data" ],
                  "type" : "object",
                  "properties" : {
                    "data" : {
                      "type" : "array",
                      "description" : "The `data` array is part of the BrAPI standard List Response JSON container. `data` will always contain the primary list of objects being returned by a BrAPI endpoint. `data` is also the only array impacted by the `metadata.pagination` details. When the pagination parameters change, the `data` array will reflect those changes in the JSON response.",
                      "items" : {
                        "$ref" : "#/components/schemas/SeedLot"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "SeedLotSingleResponse" : {
        "description" : "OK",
        "content" : {
          "application/json" : {
            "schema" : {
              "title" : "SeedLotSingleResponse",
              "required" : [ "metadata", "result" ],
              "type" : "object",
              "properties" : {
                "@context" : {
                  "$ref" : "#/components/schemas/Context"
                },
                "metadata" : {
                  "$ref" : "#/components/schemas/metadata"
                },
                "result" : {
                  "$ref" : "#/components/schemas/SeedLot"
                }
              }
            }
          }
        }
      },
      "SeedLotTransactionListResponse" : {
        "description" : "OK",
        "content" : {
          "application/json" : {
            "schema" : {
              "title" : "SeedLotTransactionListResponse",
              "required" : [ "metadata", "result" ],
              "type" : "object",
              "properties" : {
                "@context" : {
                  "$ref" : "#/components/schemas/Context"
                },
                "metadata" : {
                  "$ref" : "#/components/schemas/metadata"
                },
                "result" : {
                  "required" : [ "data" ],
                  "type" : "object",
                  "properties" : {
                    "data" : {
                      "type" : "array",
                      "description" : "The `data` array is part of the BrAPI standard List Response JSON container. `data` will always contain the primary list of objects being returned by a BrAPI endpoint. `data` is also the only array impacted by the `metadata.pagination` details. When the pagination parameters change, the `data` array will reflect those changes in the JSON response.",
                      "items" : {
                        "$ref" : "#/components/schemas/SeedLotTransaction"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "StudyListResponse" : {
        "description" : "OK",
        "content" : {
          "application/json" : {
            "schema" : {
              "title" : "StudyListResponse",
              "required" : [ "metadata", "result" ],
              "type" : "object",
              "properties" : {
                "@context" : {
                  "$ref" : "#/components/schemas/Context"
                },
                "metadata" : {
                  "$ref" : "#/components/schemas/metadata"
                },
                "result" : {
                  "required" : [ "data" ],
                  "type" : "object",
                  "properties" : {
                    "data" : {
                      "type" : "array",
                      "description" : "The `data` array is part of the BrAPI standard List Response JSON container. `data` will always contain the primary list of objects being returned by a BrAPI endpoint. `data` is also the only array impacted by the `metadata.pagination` details. When the pagination parameters change, the `data` array will reflect those changes in the JSON response.",
                      "items" : {
                        "$ref" : "#/components/schemas/Study"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "StudySingleResponse" : {
        "description" : "OK",
        "content" : {
          "application/json" : {
            "schema" : {
              "title" : "StudySingleResponse",
              "required" : [ "metadata", "result" ],
              "type" : "object",
              "properties" : {
                "@context" : {
                  "$ref" : "#/components/schemas/Context"
                },
                "metadata" : {
                  "$ref" : "#/components/schemas/metadata"
                },
                "result" : {
                  "$ref" : "#/components/schemas/Study"
                }
              }
            }
          }
        }
      },
      "TraitListResponse" : {
        "description" : "OK",
        "content" : {
          "application/json" : {
            "schema" : {
              "title" : "TraitListResponse",
              "required" : [ "metadata", "result" ],
              "type" : "object",
              "properties" : {
                "@context" : {
                  "$ref" : "#/components/schemas/Context"
                },
                "metadata" : {
                  "$ref" : "#/components/schemas/metadata"
                },
                "result" : {
                  "required" : [ "data" ],
                  "type" : "object",
                  "properties" : {
                    "data" : {
                      "type" : "array",
                      "description" : "The `data` array is part of the BrAPI standard List Response JSON container. `data` will always contain the primary list of objects being returned by a BrAPI endpoint. `data` is also the only array impacted by the `metadata.pagination` details. When the pagination parameters change, the `data` array will reflect those changes in the JSON response.",
                      "items" : {
                        "$ref" : "#/components/schemas/Trait"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "TraitSingleResponse" : {
        "description" : "OK",
        "content" : {
          "application/json" : {
            "schema" : {
              "title" : "TraitSingleResponse",
              "required" : [ "metadata", "result" ],
              "type" : "object",
              "properties" : {
                "@context" : {
                  "$ref" : "#/components/schemas/Context"
                },
                "metadata" : {
                  "$ref" : "#/components/schemas/metadata"
                },
                "result" : {
                  "$ref" : "#/components/schemas/Trait"
                }
              }
            }
          }
        }
      },
      "TrialListResponse" : {
        "description" : "OK",
        "content" : {
          "application/json" : {
            "schema" : {
              "title" : "TrialListResponse",
              "required" : [ "metadata", "result" ],
              "type" : "object",
              "properties" : {
                "@context" : {
                  "$ref" : "#/components/schemas/Context"
                },
                "metadata" : {
                  "$ref" : "#/components/schemas/metadata"
                },
                "result" : {
                  "required" : [ "data" ],
                  "type" : "object",
                  "properties" : {
                    "data" : {
                      "type" : "array",
                      "description" : "The `data` array is part of the BrAPI standard List Response JSON container. `data` will always contain the primary list of objects being returned by a BrAPI endpoint. `data` is also the only array impacted by the `metadata.pagination` details. When the pagination parameters change, the `data` array will reflect those changes in the JSON response.",
                      "items" : {
                        "$ref" : "#/components/schemas/Trial"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "TrialSingleResponse" : {
        "description" : "OK",
        "content" : {
          "application/json" : {
            "schema" : {
              "title" : "TrialSingleResponse",
              "required" : [ "metadata", "result" ],
              "type" : "object",
              "properties" : {
                "@context" : {
                  "$ref" : "#/components/schemas/Context"
                },
                "metadata" : {
                  "$ref" : "#/components/schemas/metadata"
                },
                "result" : {
                  "$ref" : "#/components/schemas/Trial"
                }
              }
            }
          }
        }
      },
      "VariantSetsListResponse" : {
        "description" : "OK",
        "content" : {
          "application/json" : {
            "schema" : {
              "title" : "VariantSetsListResponse",
              "required" : [ "metadata", "result" ],
              "type" : "object",
              "properties" : {
                "@context" : {
                  "$ref" : "#/components/schemas/Context"
                },
                "metadata" : {
                  "$ref" : "#/components/schemas/metadata"
                },
                "result" : {
                  "title" : "VariantSetsListResponseResult",
                  "required" : [ "data" ],
                  "type" : "object",
                  "properties" : {
                    "data" : {
                      "type" : "array",
                      "description" : "The `data` array is part of the BrAPI standard List Response JSON container. `data` will always contain the primary list of objects being returned by a BrAPI endpoint. `data` is also the only array impacted by the `metadata.pagination` details. When the pagination parameters change, the `data` array will reflect those changes in the JSON response.",
                      "items" : {
                        "$ref" : "#/components/schemas/VariantSet"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "VariantsListResponse" : {
        "description" : "OK",
        "content" : {
          "application/json" : {
            "schema" : {
              "title" : "VariantsListResponse",
              "required" : [ "metadata", "result" ],
              "type" : "object",
              "properties" : {
                "@context" : {
                  "$ref" : "#/components/schemas/Context"
                },
                "metadata" : {
                  "$ref" : "#/components/schemas/metadataTokenPagination"
                },
                "result" : {
                  "title" : "VariantsListResponseResult",
                  "required" : [ "data" ],
                  "type" : "object",
                  "properties" : {
                    "data" : {
                      "type" : "array",
                      "description" : "The `data` array is part of the BrAPI standard List Response JSON container. `data` will always contain the primary list of objects being returned by a BrAPI endpoint. `data` is also the only array impacted by the `metadata.pagination` details. When the pagination parameters change, the `data` array will reflect those changes in the JSON response.",
                      "items" : {
                        "$ref" : "#/components/schemas/Variant"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "parameters" : {
      "acceptHeader" : {
        "name" : "Accept",
        "in" : "header",
        "description" : "A standard HTTP request header that is used to request a specific content type (JSON, CSV, etc) which is \"acceptable\" to the client and should be returned by the server",
        "required" : true,
        "style" : "simple",
        "explode" : false,
        "schema" : {
          "$ref" : "#/components/schemas/ContentTypes"
        },
        "example" : "application/json"
      },
      "authorizationHeader" : {
        "name" : "Authorization",
        "in" : "header",
        "description" : "HTTP HEADER - Token used for Authorization \n\n<strong> Bearer {token_string} </strong>",
        "required" : false,
        "style" : "simple",
        "explode" : false,
        "schema" : {
          "pattern" : "^Bearer .*$",
          "type" : "string"
        },
        "example" : "Bearer XXXX"
      },
      "callSetDbId" : {
        "name" : "callSetDbId",
        "in" : "query",
        "description" : "The ID which uniquely identifies a `CallSet` within the given database server",
        "required" : false,
        "style" : "form",
        "explode" : true,
        "schema" : {
          "type" : "string"
        }
      },
      "commonCropName" : {
        "name" : "commonCropName",
        "in" : "query",
        "description" : "The BrAPI Common Crop Name is the simple, generalized, widely accepted name of the organism being researched. It is most often used in multi-crop systems where digital resources need to be divided at a high level. Things like 'Maize', 'Wheat', and 'Rice' are examples of common crop names.\n\nUse this parameter to only return results associated with the given crop. \n\nUse `GET /commoncropnames` to find the list of available crops on a server.",
        "required" : false,
        "style" : "form",
        "explode" : true,
        "schema" : {
          "type" : "string"
        }
      },
      "dataMatrixAbbreviations" : {
        "name" : "dataMatrixAbbreviations",
        "in" : "query",
        "description" : "\"dataMatrixAbbreviations\" is a comma seperated list of abbreviations (ie 'GT, RD' etc). This list controls which data matrices are returned in the response.\n<br> This maps to a FORMAT field in the VCF file standard.",
        "required" : false,
        "style" : "form",
        "explode" : true,
        "schema" : {
          "type" : "string"
        }
      },
      "dataMatrixNames" : {
        "name" : "dataMatrixNames",
        "in" : "query",
        "description" : "\"dataMatrixNames\" is a comma seperated list of names (ie 'Genotype, Read Depth' etc). This list controls which data matrices are returned in the response.\n<br> This maps to a FORMAT field in the VCF file standard.",
        "required" : false,
        "style" : "form",
        "explode" : true,
        "schema" : {
          "type" : "string"
        }
      },
      "expandHomozygotes" : {
        "name" : "expandHomozygotes",
        "in" : "query",
        "description" : "Should homozygotes be expanded (true) or collapsed into a single occurrence (false)",
        "required" : false,
        "style" : "form",
        "explode" : true,
        "schema" : {
          "type" : "boolean"
        }
      },
      "externalReferenceID" : {
        "name" : "externalReferenceID",
        "in" : "query",
        "description" : "**Deprecated in v2.1** Please use `externalReferenceId`. Github issue number #460 \n<br>An external reference ID. Could be a simple string or a URI. (use with `externalReferenceSource` parameter)",
        "required" : false,
        "deprecated" : true,
        "style" : "form",
        "explode" : true,
        "schema" : {
          "type" : "string"
        }
      },
      "externalReferenceId" : {
        "name" : "externalReferenceId",
        "in" : "query",
        "description" : "An external reference ID. Could be a simple string or a URI. (use with `externalReferenceSource` parameter)",
        "required" : false,
        "style" : "form",
        "explode" : true,
        "schema" : {
          "type" : "string"
        }
      },
      "externalReferenceSource" : {
        "name" : "externalReferenceSource",
        "in" : "query",
        "description" : "An identifier for the source system or database of an external reference (use with `externalReferenceId` parameter)",
        "required" : false,
        "style" : "form",
        "explode" : true,
        "schema" : {
          "type" : "string"
        }
      },
      "germplasmDbId" : {
        "name" : "germplasmDbId",
        "in" : "query",
        "description" : "Use this parameter to only return results associated with the given `Germplasm` unique identifier. \n<br/>Use `GET /germplasm` to find the list of available `Germplasm` on a server.",
        "required" : false,
        "style" : "form",
        "explode" : true,
        "schema" : {
          "type" : "string"
        }
      },
      "germplasmName" : {
        "name" : "germplasmName",
        "in" : "query",
        "description" : "Use this parameter to only return results associated with the given `Germplasm` by its human readable name. \n<br/>Use `GET /germplasm` to find the list of available `Germplasm` on a server.",
        "required" : false,
        "style" : "form",
        "explode" : true,
        "schema" : {
          "type" : "string"
        }
      },
      "germplasmPUI" : {
        "name" : "germplasmPUI",
        "in" : "query",
        "description" : "Use this parameter to only return results associated with the given `Germplasm` by its global permanent unique identifier. \n<br/>Use `GET /germplasm` to find the list of available `Germplasm` on a server.",
        "required" : false,
        "style" : "form",
        "explode" : true,
        "schema" : {
          "type" : "string"
        }
      },
      "methodDbId" : {
        "name" : "methodDbId",
        "in" : "query",
        "description" : "Method unique identifier",
        "required" : false,
        "style" : "form",
        "explode" : true,
        "schema" : {
          "type" : "string"
        }
      },
      "methodName" : {
        "name" : "methodName",
        "in" : "query",
        "description" : "Human readable name for the method\n<br/>MIAPPE V1.1 (DM-88) Method  Name of the method of observation",
        "required" : false,
        "style" : "form",
        "explode" : true,
        "schema" : {
          "type" : "string"
        }
      },
      "methodPUI" : {
        "name" : "methodPUI",
        "in" : "query",
        "description" : "The Permanent Unique Identifier of a Method, usually in the form of a URI",
        "required" : false,
        "style" : "form",
        "explode" : true,
        "schema" : {
          "type" : "string"
        }
      },
      "observationUnitLevelCode" : {
        "name" : "observationUnitLevelCode",
        "in" : "query",
        "description" : "The Observation Unit Level Code. This parameter should be used together with `observationUnitLevelName` \nor `observationUnitLevelOrder`. References ObservationUnit->observationUnitPosition->observationLevel->levelCode \n<br/>For more information on Observation Levels, please review the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Observation_Levels\">Observation Levels documentation</a>. ",
        "required" : false,
        "style" : "form",
        "explode" : true,
        "schema" : {
          "type" : "string"
        }
      },
      "observationUnitLevelName" : {
        "name" : "observationUnitLevelName",
        "in" : "query",
        "description" : "The Observation Unit Level. Returns only the observation unit of the specified Level. \n<br/>References ObservationUnit->observationUnitPosition->observationLevel->levelName \n<br/>**Standard Level Names: study, field, entry, rep, block, sub-block, plot, sub-plot, plant, pot, sample** \n<br/>For more information on Observation Levels, please review the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Observation_Levels\">Observation Levels documentation</a>. ",
        "required" : false,
        "style" : "form",
        "explode" : true,
        "schema" : {
          "type" : "string"
        }
      },
      "observationUnitLevelOrder" : {
        "name" : "observationUnitLevelOrder",
        "in" : "query",
        "description" : "The Observation Unit Level Order Number. Returns only the observation unit of the specified Level. \nReferences ObservationUnit->observationUnitPosition->observationLevel->levelOrder \n<br/>For more information on Observation Levels, please review the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Observation_Levels\">Observation Levels documentation</a>. ",
        "required" : false,
        "style" : "form",
        "explode" : true,
        "schema" : {
          "type" : "string"
        }
      },
      "observationUnitLevelRelationshipCode" : {
        "name" : "observationUnitLevelRelationshipCode",
        "in" : "query",
        "description" : "The Observation Unit Level Code. \n<br/>This parameter should be used together with `observationUnitLevelName` or `observationUnitLevelOrder`. References ObservationUnit->observationUnitPosition->observationLevel->levelCode \n<br/>For more information on Observation Levels, please review the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Observation_Levels\">Observation Levels documentation</a>. ",
        "required" : false,
        "style" : "form",
        "explode" : true,
        "schema" : {
          "type" : "string"
        }
      },
      "observationUnitLevelRelationshipDbId" : {
        "name" : "observationUnitLevelRelationshipDbId",
        "in" : "query",
        "description" : "The observationUnitDbId associated with a particular level and code.\n<br/>This parameter should be used together with `observationUnitLevelName` or `observationUnitLevelOrder`. References ObservationUnit->observationUnitPosition->observationLevel->observationUnitDbId \n<br/>For more information on Observation Levels, please review the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Observation_Levels\">Observation Levels documentation</a>. ",
        "required" : false,
        "style" : "form",
        "explode" : true,
        "schema" : {
          "type" : "string"
        }
      },
      "observationUnitLevelRelationshipName" : {
        "name" : "observationUnitLevelRelationshipName",
        "in" : "query",
        "description" : "The Observation Unit Level Relationship is a connection that this observation unit has to another level of the hierarchy. \n<br/>For example, if you have several observation units at a 'plot' level, they might all share a relationship to the same 'field' level.  \n<br/>Use this parameter to identify groups of observation units that share a relationship level. \n<br/>**Standard Level Names: study, field, entry, rep, block, sub-block, plot, sub-plot, plant, pot, sample** \n<br/>For more information on Observation Levels, please review the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Observation_Levels\">Observation Levels documentation</a>. ",
        "required" : false,
        "style" : "form",
        "explode" : true,
        "schema" : {
          "type" : "string"
        }
      },
      "observationUnitLevelRelationshipOrder" : {
        "name" : "observationUnitLevelRelationshipOrder",
        "in" : "query",
        "description" : "The Observation Unit Level Order Number. \n<br/>Returns only the observation unit of the specified Level. References ObservationUnit->observationUnitPosition->observationLevel->levelOrder \n<br/>For more information on Observation Levels, please review the <a target=\"_blank\" href=\"https://wiki.brapi.org/index.php/Observation_Levels\">Observation Levels documentation</a>. ",
        "required" : false,
        "style" : "form",
        "explode" : true,
        "schema" : {
          "type" : "string"
        }
      },
      "ontologyDbId" : {
        "name" : "ontologyDbId",
        "in" : "query",
        "description" : "The unique identifier for an ontology definition. Use this parameter to filter results based on a specific ontology \n\nUse `GET /ontologies` to find the list of available ontologies on a server.",
        "required" : false,
        "style" : "form",
        "explode" : true,
        "schema" : {
          "type" : "string"
        }
      },
      "page" : {
        "name" : "page",
        "in" : "query",
        "description" : "Used to request a specific page of data to be returned.\n\nThe page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.",
        "required" : false,
        "style" : "form",
        "explode" : true,
        "schema" : {
          "type" : "integer"
        },
        "example" : "0"
      },
      "pageSize" : {
        "name" : "pageSize",
        "in" : "query",
        "description" : "The size of the pages to be returned. Default is `1000`.",
        "required" : false,
        "style" : "form",
        "explode" : true,
        "schema" : {
          "type" : "integer"
        },
        "example" : 1000
      },
      "pageToken" : {
        "name" : "pageToken",
        "in" : "query",
        "description" : "**Deprecated in v2.1** Please use `page`. Github issue number #451 \n<br> Used to request a specific page of data to be returned.\n<br> Tokenized pages are for large data sets which can not be efficiently broken into indexed pages. Use the nextPageToken and prevPageToken from a prior response to construct a query and move to the next or previous page respectively. ",
        "required" : false,
        "deprecated" : true,
        "style" : "form",
        "explode" : true,
        "schema" : {
          "type" : "string"
        },
        "example" : "33c27874"
      },
      "positionRange" : {
        "name" : "positionRange",
        "in" : "query",
        "description" : "The position range to search\n<br/> Uses the format \"contig:start-end\" where \"contig\" is the chromosome or contig name, \"start\" is  \nthe starting position of the range, and \"end\" is the ending position of the range\n<br> Example: CRHOM_1:12000-14000",
        "required" : false,
        "style" : "form",
        "explode" : true,
        "schema" : {
          "type" : "string"
        }
      },
      "preview" : {
        "name" : "preview",
        "in" : "query",
        "description" : "Default Value = false\n<br/>If 'preview' is set to true, then the server should return with the \"dataMatrices\" field as null or empty. All other data fields should be returned normally. \nThis is intended to be a preview and give the client a sense of how large the matrix returned will be\n<br/>If 'preview' is set to false or not set (default), then the server should return all the matrix data as requested.",
        "required" : false,
        "style" : "form",
        "explode" : true,
        "schema" : {
          "type" : "boolean"
        }
      },
      "programDbId" : {
        "name" : "programDbId",
        "in" : "query",
        "description" : "Use this parameter to only return results associated with the given `Program` unique identifier. \n<br/>Use `GET /programs` to find the list of available `Programs` on a server.",
        "required" : false,
        "style" : "form",
        "explode" : true,
        "schema" : {
          "type" : "string"
        }
      },
      "programName" : {
        "name" : "programName",
        "in" : "query",
        "description" : "Use this parameter to only return results associated with the given `Program` by its human readable name. \n<br/>Use `GET /programs` to find the list of available `Programs` on a server.",
        "required" : false,
        "style" : "form",
        "explode" : true,
        "schema" : {
          "type" : "string"
        }
      },
      "scaleDbId" : {
        "name" : "scaleDbId",
        "in" : "query",
        "description" : "Scale unique identifier",
        "required" : false,
        "style" : "form",
        "explode" : true,
        "schema" : {
          "type" : "string"
        }
      },
      "scaleName" : {
        "name" : "scaleName",
        "in" : "query",
        "description" : "Human readable name for the scale\n<br/>MIAPPE V1.1 (DM-88) Scale  Name of the scale of observation",
        "required" : false,
        "style" : "form",
        "explode" : true,
        "schema" : {
          "type" : "string"
        }
      },
      "scalePUI" : {
        "name" : "scalePUI",
        "in" : "query",
        "description" : "The Permanent Unique Identifier of a Scale, usually in the form of a URI",
        "required" : false,
        "style" : "form",
        "explode" : true,
        "schema" : {
          "type" : "string"
        }
      },
      "searchResultsDbId" : {
        "name" : "searchResultsDbId",
        "in" : "path",
        "description" : "Unique identifier which references the search results",
        "required" : true,
        "style" : "simple",
        "explode" : false,
        "schema" : {
          "type" : "string"
        }
      },
      "sepPhased" : {
        "name" : "sepPhased",
        "in" : "query",
        "description" : "The string to use as a separator for phased allele calls",
        "required" : false,
        "style" : "form",
        "explode" : true,
        "schema" : {
          "type" : "string"
        }
      },
      "sepUnphased" : {
        "name" : "sepUnphased",
        "in" : "query",
        "description" : "The string to use as a separator for unphased allele calls",
        "required" : false,
        "style" : "form",
        "explode" : true,
        "schema" : {
          "type" : "string"
        }
      },
      "studyDbId" : {
        "name" : "studyDbId",
        "in" : "query",
        "description" : "Use this parameter to only return results associated with the given `Study` unique identifier. \n<br/>Use `GET /studies` to find the list of available `Studies` on a server.",
        "required" : false,
        "style" : "form",
        "explode" : true,
        "schema" : {
          "type" : "string"
        }
      },
      "studyName" : {
        "name" : "studyName",
        "in" : "query",
        "description" : "Use this parameter to only return results associated with the given `Study` by its human readable name. \n<br/>Use `GET /studies` to find the list of available `Studies` on a server.",
        "required" : false,
        "style" : "form",
        "explode" : true,
        "schema" : {
          "type" : "string"
        }
      },
      "traitDbId" : {
        "name" : "traitDbId",
        "in" : "query",
        "description" : "Trait unique identifier",
        "required" : false,
        "style" : "form",
        "explode" : true,
        "schema" : {
          "type" : "string"
        }
      },
      "traitName" : {
        "name" : "traitName",
        "in" : "query",
        "description" : "Human readable name for the trait\n<br/>MIAPPE V1.1 (DM-88) Trait  Name of the trait of observation",
        "required" : false,
        "style" : "form",
        "explode" : true,
        "schema" : {
          "type" : "string"
        }
      },
      "traitPUI" : {
        "name" : "traitPUI",
        "in" : "query",
        "description" : "The Permanent Unique Identifier of a Trait, usually in the form of a URI",
        "required" : false,
        "style" : "form",
        "explode" : true,
        "schema" : {
          "type" : "string"
        }
      },
      "trialDbId" : {
        "name" : "trialDbId",
        "in" : "query",
        "description" : "Use this parameter to only return results associated with the given `Trial` unique identifier. \n<br/>Use `GET /trials` to find the list of available `Trials` on a server.",
        "required" : false,
        "style" : "form",
        "explode" : true,
        "schema" : {
          "type" : "string"
        }
      },
      "trialName" : {
        "name" : "trialName",
        "in" : "query",
        "description" : "Use this parameter to only return results associated with the given `Trial` by its human readable name. \n<br/>Use `GET /trials` to find the list of available `Trials` on a server.",
        "required" : false,
        "style" : "form",
        "explode" : true,
        "schema" : {
          "type" : "string"
        }
      },
      "unknownString" : {
        "name" : "unknownString",
        "in" : "query",
        "description" : "The string to use as a representation for missing data",
        "required" : false,
        "style" : "form",
        "explode" : true,
        "schema" : {
          "type" : "string"
        }
      },
      "variantDbId" : {
        "name" : "variantDbId",
        "in" : "query",
        "description" : "The ID which uniquely identifies a `Variant` within the given database server",
        "required" : false,
        "style" : "form",
        "explode" : true,
        "schema" : {
          "type" : "string"
        }
      },
      "variantSetDbId" : {
        "name" : "variantSetDbId",
        "in" : "query",
        "description" : "The ID which uniquely identifies a `VariantSet` within the given database server",
        "required" : false,
        "style" : "form",
        "explode" : true,
        "schema" : {
          "type" : "string"
        }
      }
    },
    "securitySchemes" : {
      "AuthorizationToken" : {
        "type" : "http",
        "description" : "OAuth Bearer Token - A valid Bearer token to prove authorization",
        "scheme" : "bearer",
        "bearerFormat" : "nonce token or JWT"
      }
    }
  }
}
