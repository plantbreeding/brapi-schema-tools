{
    "$defs": {
        "AlleleMatrixRequest": {
            "type": "object",
            "properties": {
                "pagination": {
                    "title": "AlleleMatrixPagination",
                    "description": "Pagination for the matrix",
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "dimension": {
                                "description": "the dimension of the matrix being paginated",
                                "type": "string",
                                "enum": [
                                    "CALLSETS",
                                    "VARIANTS"
                                ],
                                "example": "VARIANTS"
                            },
                            "pageSize": {
                                "description": "the maximum number of elements per page in this dimension of the matrix",
                                "type": "integer",
                                "example": 500
                            },
                            "page": {
                                "description": "the requested page number (zero indexed)",
                                "type": "integer",
                                "example": 0
                            }
                        }
                    },
                    "example": [
                        {
                            "dimension": "variants",
                            "pageSize": 500,
                            "page": 0
                        },
                        {
                            "dimension": "callsets",
                            "pageSize": 1000,
                            "page": 4
                        }
                    ]
                },
                "preview": {
                    "description": "Default Value = false\n<br/>\nIf 'preview' is set to true, then the server should only return the lists of 'callSetDbIds', \n'variantDbIds', and 'variantSetDbIds'. The server should not return any matrix data. This\nis intended to be a preview and give the client a sense of how large the matrix returned will be\n<br/>\nIf 'preview' is set to false or not set (default), then the server should return all the matrix\ndata as requested.",
                    "type": "boolean",
                    "default": false,
                    "example": true
                },
                "dataMatrixNames": {
                    "description": "`dataMatrixNames` is a list of names (ie 'Genotype', 'Read Depth' etc). This list controls which data matrices are returned in the response.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "Genotype",
                        "Read Depth"
                    ]
                },
                "dataMatrixAbbreviations": {
                    "description": "`dataMatrixAbbreviations` is a comma seperated list of abbreviations (ie 'GT', 'RD' etc). This list controls which data matrices are returned in the response.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "GT",
                        "RD"
                    ]
                },
                "positionRanges": {
                    "description": "The postion range to search\n<br/>\nUses the format \"<chrom>:<start>-<end>\" where <chrom> is the chromosome name, <start> is \nthe starting position of the range, and <end> is the ending position of the range",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "20:1000-35000",
                        "20:87000-125000"
                    ]
                },
                "germplasmNames": {
                    "description": "A list of human readable `Germplasm` names",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "a03202ec",
                        "274e4f63"
                    ]
                },
                "germplasmPUIs": {
                    "description": "A list of permanent unique identifiers associated with `Germplasm`",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "a03202ec",
                        "274e4f63"
                    ]
                },
                "germplasmDbIds": {
                    "description": "A list of IDs which uniquely identify `Germplasm` within the given database server",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "a03202ec",
                        "274e4f63"
                    ]
                },
                "sampleDbIds": {
                    "description": "A list of IDs which uniquely identify `Samples` within the given database server",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "a03202ec",
                        "274e4f63"
                    ]
                },
                "callSetDbIds": {
                    "description": "A list of IDs which uniquely identify `CallSets` within the given database server",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "a03202ec",
                        "274e4f63"
                    ]
                },
                "variantDbIds": {
                    "description": "A list of IDs which uniquely identify `Variants` within the given database server",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "bba0b258",
                        "ff97d4f0"
                    ]
                },
                "variantSetDbIds": {
                    "description": "A list of IDs which uniquely identify `VariantSets` within the given database server",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "407c0508",
                        "49e24dfc"
                    ]
                },
                "expandHomozygotes": {
                    "description": "Should homozygotes be expanded (true) or collapsed into a single occurrence (false)",
                    "type": "boolean",
                    "example": true
                },
                "sepPhased": {
                    "description": "The string used as a separator for phased allele calls.",
                    "type": "string",
                    "example": "|"
                },
                "sepUnphased": {
                    "description": "The string used as a separator for unphased allele calls.",
                    "type": "string",
                    "example": "/"
                },
                "unknownString": {
                    "description": "The string used as a representation for missing data.",
                    "type": "string",
                    "example": "."
                }
            },
            "brapi-metadata": {
                "request": true
            }
        }
    },
    "$id": "https://brapi.org/Specification/BrAPI-Schema/Requests/Parameters/AlleleMatrixRequest.json",
    "$schema": "http://json-schema.org/draft/2020-12/schema"
}